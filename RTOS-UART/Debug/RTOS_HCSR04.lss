
RTOS_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a3a4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a3a4  0040a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040a3ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000354  204009c0  0040ad6c  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400d14  0040b0c0  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402d18  0040d0c4  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002441d  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a7a  00000000  00000000  00044e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a5f4  00000000  00000000  000498de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010d8  00000000  00000000  00053ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001268  00000000  00000000  00054faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b437  00000000  00000000  00056212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001335c  00000000  00000000  00061649  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094faf  00000000  00000000  000749a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003bc8  00000000  00000000  00109954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 2d 40 20 6d 0f 40 00 6b 0f 40 00 6b 0f 40 00     .-@ m.@.k.@.k.@.
  400010:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 00 00 00 00     k.@.k.@.k.@.....
	...
  40002c:	45 13 40 00 6b 0f 40 00 00 00 00 00 e5 13 40 00     E.@.k.@.......@.
  40003c:	4d 14 40 00 6b 0f 40 00 6b 0f 40 00 f9 32 40 00     M.@.k.@.k.@..2@.
  40004c:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     k.@.k.@.k.@.k.@.
  40005c:	6b 0f 40 00 6b 0f 40 00 00 00 00 00 e5 09 40 00     k.@.k.@.......@.
  40006c:	f9 09 40 00 0d 0a 40 00 6b 0f 40 00 6b 0f 40 00     ..@...@.k.@.k.@.
  40007c:	6b 0f 40 00 21 0a 40 00 35 0a 40 00 6b 0f 40 00     k.@.!.@.5.@.k.@.
  40008c:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     k.@.k.@.k.@.k.@.
  40009c:	d1 32 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     .2@.k.@.k.@.k.@.
  4000ac:	6b 0f 40 00 6b 0f 40 00 b5 06 40 00 6b 0f 40 00     k.@.k.@...@.k.@.
  4000bc:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     k.@.k.@.k.@.k.@.
  4000cc:	6b 0f 40 00 00 00 00 00 6b 0f 40 00 00 00 00 00     k.@.....k.@.....
  4000dc:	6b 0f 40 00 c9 06 40 00 6b 0f 40 00 6b 0f 40 00     k.@...@.k.@.k.@.
  4000ec:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     k.@.k.@.k.@.k.@.
  4000fc:	6b 0f 40 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     k.@.k.@.k.@.k.@.
  40010c:	6b 0f 40 00 6b 0f 40 00 00 00 00 00 00 00 00 00     k.@.k.@.........
  40011c:	00 00 00 00 6b 0f 40 00 6b 0f 40 00 6b 0f 40 00     ....k.@.k.@.k.@.
  40012c:	6b 0f 40 00 6b 0f 40 00 00 00 00 00 6b 0f 40 00     k.@.k.@.....k.@.
  40013c:	6b 0f 40 00                                         k.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040a3ac 	.word	0x0040a3ac

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a3ac 	.word	0x0040a3ac
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040a3ac 	.word	0x0040a3ac
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00401141 	.word	0x00401141
  4001f8:	00400ae5 	.word	0x00400ae5
  4001fc:	00400b39 	.word	0x00400b39
  400200:	00400b49 	.word	0x00400b49
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400b59 	.word	0x00400b59
  400210:	00400a49 	.word	0x00400a49
  400214:	00400a81 	.word	0x00400a81
  400218:	00401035 	.word	0x00401035

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b980      	cbnz	r0, 400244 <_read+0x28>
  400222:	460c      	mov	r4, r1
  400224:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400226:	2a00      	cmp	r2, #0
  400228:	dd0f      	ble.n	40024a <_read+0x2e>
  40022a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	4621      	mov	r1, r4
  400234:	682b      	ldr	r3, [r5, #0]
  400236:	4798      	blx	r3
		ptr++;
  400238:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400244:	f04f 38ff 	mov.w	r8, #4294967295
  400248:	e7f9      	b.n	40023e <_read+0x22>
	for (; len > 0; --len) {
  40024a:	4680      	mov	r8, r0
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400be4 	.word	0x20400be4
  400254:	20400bdc 	.word	0x20400bdc

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d815      	bhi.n	40028a <_write+0x32>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	460e      	mov	r6, r1
  400264:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400266:	b19a      	cbz	r2, 400290 <_write+0x38>
  400268:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40026a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002a4 <_write+0x4c>
  40026e:	4f0c      	ldr	r7, [pc, #48]	; (4002a0 <_write+0x48>)
  400270:	f8d8 0000 	ldr.w	r0, [r8]
  400274:	f815 1b01 	ldrb.w	r1, [r5], #1
  400278:	683b      	ldr	r3, [r7, #0]
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	db0a      	blt.n	400296 <_write+0x3e>
  400280:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400282:	3c01      	subs	r4, #1
  400284:	d1f4      	bne.n	400270 <_write+0x18>
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	4770      	bx	lr
	for (; len != 0; --len) {
  400290:	4610      	mov	r0, r2
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400296:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop
  4002a0:	20400be0 	.word	0x20400be0
  4002a4:	20400be4 	.word	0x20400be4

004002a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ae:	4b5c      	ldr	r3, [pc, #368]	; (400420 <board_init+0x178>)
  4002b0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002ba:	4b5a      	ldr	r3, [pc, #360]	; (400424 <board_init+0x17c>)
  4002bc:	2200      	movs	r2, #0
  4002be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c2:	695a      	ldr	r2, [r3, #20]
  4002c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002c8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ce:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002d6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f007 0007 	and.w	r0, r7, #7
  4002de:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002e0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4002e8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  4002f0:	f04f 34ff 	mov.w	r4, #4294967295
  4002f4:	fa04 fc00 	lsl.w	ip, r4, r0
  4002f8:	fa06 f000 	lsl.w	r0, r6, r0
  4002fc:	fa04 f40e 	lsl.w	r4, r4, lr
  400300:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400304:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400306:	463a      	mov	r2, r7
  400308:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40030e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400312:	3a01      	subs	r2, #1
  400314:	4423      	add	r3, r4
  400316:	f1b2 3fff 	cmp.w	r2, #4294967295
  40031a:	d1f6      	bne.n	40030a <board_init+0x62>
        } while(sets--);
  40031c:	3e01      	subs	r6, #1
  40031e:	4460      	add	r0, ip
  400320:	f1b6 3fff 	cmp.w	r6, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5e>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	4b3e      	ldr	r3, [pc, #248]	; (400424 <board_init+0x17c>)
  40032c:	695a      	ldr	r2, [r3, #20]
  40032e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400332:	615a      	str	r2, [r3, #20]
  400334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400338:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033c:	4a3a      	ldr	r2, [pc, #232]	; (400428 <board_init+0x180>)
  40033e:	493b      	ldr	r1, [pc, #236]	; (40042c <board_init+0x184>)
  400340:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400346:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40034c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400350:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400354:	f022 0201 	bic.w	r2, r2, #1
  400358:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40035c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400360:	f022 0201 	bic.w	r2, r2, #1
  400364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40036c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400370:	200a      	movs	r0, #10
  400372:	4c2f      	ldr	r4, [pc, #188]	; (400430 <board_init+0x188>)
  400374:	47a0      	blx	r4
  400376:	200b      	movs	r0, #11
  400378:	47a0      	blx	r4
  40037a:	200c      	movs	r0, #12
  40037c:	47a0      	blx	r4
  40037e:	2010      	movs	r0, #16
  400380:	47a0      	blx	r4
  400382:	2011      	movs	r0, #17
  400384:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400386:	4b2b      	ldr	r3, [pc, #172]	; (400434 <board_init+0x18c>)
  400388:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40038e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400392:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40039c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003a2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003aa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003be:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ee:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003f0:	4a11      	ldr	r2, [pc, #68]	; (400438 <board_init+0x190>)
  4003f2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003f6:	f043 0310 	orr.w	r3, r3, #16
  4003fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	4b0f      	ldr	r3, [pc, #60]	; (40043c <board_init+0x194>)
  400400:	2210      	movs	r2, #16
  400402:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400408:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40040a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40040c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400410:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400412:	4311      	orrs	r1, r2
  400414:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400416:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400418:	4311      	orrs	r1, r2
  40041a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041c:	605a      	str	r2, [r3, #4]
  40041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400420:	400e1850 	.word	0x400e1850
  400424:	e000ed00 	.word	0xe000ed00
  400428:	400e0c00 	.word	0x400e0c00
  40042c:	5a00080c 	.word	0x5a00080c
  400430:	00400b69 	.word	0x00400b69
  400434:	400e1200 	.word	0x400e1200
  400438:	40088000 	.word	0x40088000
  40043c:	400e1000 	.word	0x400e1000

00400440 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400440:	b570      	push	{r4, r5, r6, lr}
  400442:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400444:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400446:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400448:	4013      	ands	r3, r2
  40044a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40044c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40044e:	4e1c      	ldr	r6, [pc, #112]	; (4004c0 <afec_process_callback+0x80>)
  400450:	4d1c      	ldr	r5, [pc, #112]	; (4004c4 <afec_process_callback+0x84>)
  400452:	42a8      	cmp	r0, r5
  400454:	bf14      	ite	ne
  400456:	2000      	movne	r0, #0
  400458:	2001      	moveq	r0, #1
  40045a:	0105      	lsls	r5, r0, #4
  40045c:	e00b      	b.n	400476 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40045e:	2c0e      	cmp	r4, #14
  400460:	d81e      	bhi.n	4004a0 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400462:	9a01      	ldr	r2, [sp, #4]
  400464:	f104 010c 	add.w	r1, r4, #12
  400468:	2301      	movs	r3, #1
  40046a:	408b      	lsls	r3, r1
  40046c:	4213      	tst	r3, r2
  40046e:	d110      	bne.n	400492 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400470:	3401      	adds	r4, #1
  400472:	2c10      	cmp	r4, #16
  400474:	d022      	beq.n	4004bc <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400476:	2c0b      	cmp	r4, #11
  400478:	d8f1      	bhi.n	40045e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40047a:	9a01      	ldr	r2, [sp, #4]
  40047c:	2301      	movs	r3, #1
  40047e:	40a3      	lsls	r3, r4
  400480:	4213      	tst	r3, r2
  400482:	d0f5      	beq.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400484:	192b      	adds	r3, r5, r4
  400486:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40048a:	2b00      	cmp	r3, #0
  40048c:	d0f0      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40048e:	4798      	blx	r3
  400490:	e7ee      	b.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400492:	192b      	adds	r3, r5, r4
  400494:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400498:	2b00      	cmp	r3, #0
  40049a:	d0e9      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40049c:	4798      	blx	r3
  40049e:	e7e7      	b.n	400470 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004a0:	9a01      	ldr	r2, [sp, #4]
  4004a2:	f104 010f 	add.w	r1, r4, #15
  4004a6:	2301      	movs	r3, #1
  4004a8:	408b      	lsls	r3, r1
  4004aa:	4213      	tst	r3, r2
  4004ac:	d0e0      	beq.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004ae:	192b      	adds	r3, r5, r4
  4004b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d0db      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004b8:	4798      	blx	r3
  4004ba:	e7d9      	b.n	400470 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4004bc:	b002      	add	sp, #8
  4004be:	bd70      	pop	{r4, r5, r6, pc}
  4004c0:	20400be8 	.word	0x20400be8
  4004c4:	40064000 	.word	0x40064000

004004c8 <afec_ch_set_config>:
{
  4004c8:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4004ca:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4004cc:	2301      	movs	r3, #1
  4004ce:	408b      	lsls	r3, r1
  4004d0:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004d4:	7815      	ldrb	r5, [r2, #0]
  4004d6:	2d00      	cmp	r5, #0
  4004d8:	bf08      	it	eq
  4004da:	2300      	moveq	r3, #0
  4004dc:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4004de:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4004e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4004e2:	004b      	lsls	r3, r1, #1
  4004e4:	2103      	movs	r1, #3
  4004e6:	4099      	lsls	r1, r3
  4004e8:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4004ec:	7851      	ldrb	r1, [r2, #1]
  4004ee:	4099      	lsls	r1, r3
  4004f0:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4004f2:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004f4:	bc30      	pop	{r4, r5}
  4004f6:	4770      	bx	lr

004004f8 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4004f8:	784b      	ldrb	r3, [r1, #1]
  4004fa:	780a      	ldrb	r2, [r1, #0]
  4004fc:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4004fe:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400500:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400502:	884b      	ldrh	r3, [r1, #2]
  400504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400508:	6743      	str	r3, [r0, #116]	; 0x74
  40050a:	4770      	bx	lr

0040050c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40050c:	2200      	movs	r2, #0
  40050e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400510:	4b08      	ldr	r3, [pc, #32]	; (400534 <afec_get_config_defaults+0x28>)
  400512:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400514:	4b08      	ldr	r3, [pc, #32]	; (400538 <afec_get_config_defaults+0x2c>)
  400516:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40051c:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40051e:	2302      	movs	r3, #2
  400520:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400522:	2301      	movs	r3, #1
  400524:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400526:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400528:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  40052a:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  40052c:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40052e:	7583      	strb	r3, [r0, #22]
  400530:	4770      	bx	lr
  400532:	bf00      	nop
  400534:	11e1a300 	.word	0x11e1a300
  400538:	005b8d80 	.word	0x005b8d80

0040053c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  40053c:	2300      	movs	r3, #0
  40053e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400540:	2301      	movs	r3, #1
  400542:	7043      	strb	r3, [r0, #1]
  400544:	4770      	bx	lr

00400546 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  400546:	2300      	movs	r3, #0
  400548:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40054a:	2320      	movs	r3, #32
  40054c:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  40054e:	23ff      	movs	r3, #255	; 0xff
  400550:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400552:	f640 73ff 	movw	r3, #4095	; 0xfff
  400556:	8083      	strh	r3, [r0, #4]
  400558:	4770      	bx	lr
	...

0040055c <afec_init>:
	return afec->AFEC_ISR;
  40055c:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40055e:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400562:	d001      	beq.n	400568 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400564:	2019      	movs	r0, #25
  400566:	4770      	bx	lr
{
  400568:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40056a:	2301      	movs	r3, #1
  40056c:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056e:	7ccb      	ldrb	r3, [r1, #19]
  400570:	2b00      	cmp	r3, #0
  400572:	bf18      	it	ne
  400574:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400578:	684b      	ldr	r3, [r1, #4]
  40057a:	688c      	ldr	r4, [r1, #8]
  40057c:	fbb3 f3f4 	udiv	r3, r3, r4
  400580:	3b01      	subs	r3, #1
  400582:	021b      	lsls	r3, r3, #8
  400584:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400586:	68cc      	ldr	r4, [r1, #12]
  400588:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  40058c:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  40058e:	7c0c      	ldrb	r4, [r1, #16]
  400590:	0624      	lsls	r4, r4, #24
  400592:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400596:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400598:	7c4c      	ldrb	r4, [r1, #17]
  40059a:	0724      	lsls	r4, r4, #28
  40059c:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005a0:	4323      	orrs	r3, r4
  4005a2:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  4005a4:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005a6:	7d0b      	ldrb	r3, [r1, #20]
  4005a8:	2b00      	cmp	r3, #0
  4005aa:	bf14      	ite	ne
  4005ac:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005b0:	2300      	moveq	r3, #0
  4005b2:	680a      	ldr	r2, [r1, #0]
  4005b4:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005b6:	7d4a      	ldrb	r2, [r1, #21]
  4005b8:	2a00      	cmp	r2, #0
  4005ba:	bf14      	ite	ne
  4005bc:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005c0:	2200      	moveq	r2, #0
			(config->resolution) |
  4005c2:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005c4:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005c6:	7d8b      	ldrb	r3, [r1, #22]
  4005c8:	021b      	lsls	r3, r3, #8
  4005ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ce:	f043 030c 	orr.w	r3, r3, #12
  4005d2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005d6:	4b0f      	ldr	r3, [pc, #60]	; (400614 <afec_init+0xb8>)
  4005d8:	4298      	cmp	r0, r3
  4005da:	d006      	beq.n	4005ea <afec_init+0x8e>
	if(afec == AFEC1) {
  4005dc:	4b0e      	ldr	r3, [pc, #56]	; (400618 <afec_init+0xbc>)
  4005de:	4298      	cmp	r0, r3
  4005e0:	d00d      	beq.n	4005fe <afec_init+0xa2>
	return STATUS_OK;
  4005e2:	2000      	movs	r0, #0
}
  4005e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005e8:	4770      	bx	lr
  4005ea:	4b0c      	ldr	r3, [pc, #48]	; (40061c <afec_init+0xc0>)
  4005ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4005f0:	2200      	movs	r2, #0
  4005f2:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005f6:	428b      	cmp	r3, r1
  4005f8:	d1fb      	bne.n	4005f2 <afec_init+0x96>
	return STATUS_OK;
  4005fa:	2000      	movs	r0, #0
  4005fc:	e7f2      	b.n	4005e4 <afec_init+0x88>
  4005fe:	4b08      	ldr	r3, [pc, #32]	; (400620 <afec_init+0xc4>)
  400600:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400604:	2200      	movs	r2, #0
  400606:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40060a:	428b      	cmp	r3, r1
  40060c:	d1fb      	bne.n	400606 <afec_init+0xaa>
	return STATUS_OK;
  40060e:	2000      	movs	r0, #0
  400610:	e7e8      	b.n	4005e4 <afec_init+0x88>
  400612:	bf00      	nop
  400614:	4003c000 	.word	0x4003c000
  400618:	40064000 	.word	0x40064000
  40061c:	20400be4 	.word	0x20400be4
  400620:	20400c28 	.word	0x20400c28

00400624 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400624:	4b0c      	ldr	r3, [pc, #48]	; (400658 <afec_enable_interrupt+0x34>)
  400626:	4299      	cmp	r1, r3
  400628:	d007      	beq.n	40063a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40062a:	290b      	cmp	r1, #11
  40062c:	d80b      	bhi.n	400646 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40062e:	d006      	beq.n	40063e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400630:	2301      	movs	r3, #1
  400632:	fa03 f101 	lsl.w	r1, r3, r1
  400636:	6241      	str	r1, [r0, #36]	; 0x24
  400638:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40063a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40063c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40063e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400642:	6243      	str	r3, [r0, #36]	; 0x24
  400644:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400646:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400648:	bf94      	ite	ls
  40064a:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  40064c:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40064e:	2301      	movs	r3, #1
  400650:	fa03 f101 	lsl.w	r1, r3, r1
  400654:	6241      	str	r1, [r0, #36]	; 0x24
  400656:	4770      	bx	lr
  400658:	47000fff 	.word	0x47000fff

0040065c <afec_set_callback>:
{
  40065c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40065e:	4c11      	ldr	r4, [pc, #68]	; (4006a4 <afec_set_callback+0x48>)
  400660:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400662:	bf0c      	ite	eq
  400664:	2410      	moveq	r4, #16
  400666:	2400      	movne	r4, #0
  400668:	440c      	add	r4, r1
  40066a:	4d0f      	ldr	r5, [pc, #60]	; (4006a8 <afec_set_callback+0x4c>)
  40066c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400670:	d10a      	bne.n	400688 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400672:	4a0e      	ldr	r2, [pc, #56]	; (4006ac <afec_set_callback+0x50>)
  400674:	f44f 7480 	mov.w	r4, #256	; 0x100
  400678:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40067c:	015b      	lsls	r3, r3, #5
  40067e:	b2db      	uxtb	r3, r3
  400680:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400684:	6054      	str	r4, [r2, #4]
  400686:	e009      	b.n	40069c <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400688:	4a08      	ldr	r2, [pc, #32]	; (4006ac <afec_set_callback+0x50>)
  40068a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  40068e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400692:	015b      	lsls	r3, r3, #5
  400694:	b2db      	uxtb	r3, r3
  400696:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40069a:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  40069c:	4b04      	ldr	r3, [pc, #16]	; (4006b0 <afec_set_callback+0x54>)
  40069e:	4798      	blx	r3
  4006a0:	bd38      	pop	{r3, r4, r5, pc}
  4006a2:	bf00      	nop
  4006a4:	40064000 	.word	0x40064000
  4006a8:	20400be8 	.word	0x20400be8
  4006ac:	e000e100 	.word	0xe000e100
  4006b0:	00400625 	.word	0x00400625

004006b4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006b4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006b6:	4802      	ldr	r0, [pc, #8]	; (4006c0 <AFEC0_Handler+0xc>)
  4006b8:	4b02      	ldr	r3, [pc, #8]	; (4006c4 <AFEC0_Handler+0x10>)
  4006ba:	4798      	blx	r3
  4006bc:	bd08      	pop	{r3, pc}
  4006be:	bf00      	nop
  4006c0:	4003c000 	.word	0x4003c000
  4006c4:	00400441 	.word	0x00400441

004006c8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006c8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006ca:	4802      	ldr	r0, [pc, #8]	; (4006d4 <AFEC1_Handler+0xc>)
  4006cc:	4b02      	ldr	r3, [pc, #8]	; (4006d8 <AFEC1_Handler+0x10>)
  4006ce:	4798      	blx	r3
  4006d0:	bd08      	pop	{r3, pc}
  4006d2:	bf00      	nop
  4006d4:	40064000 	.word	0x40064000
  4006d8:	00400441 	.word	0x00400441

004006dc <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4006dc:	b500      	push	{lr}
  4006de:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006e0:	4b13      	ldr	r3, [pc, #76]	; (400730 <afec_enable+0x54>)
  4006e2:	4298      	cmp	r0, r3
  4006e4:	bf0c      	ite	eq
  4006e6:	2028      	moveq	r0, #40	; 0x28
  4006e8:	201d      	movne	r0, #29
  4006ea:	4b12      	ldr	r3, [pc, #72]	; (400734 <afec_enable+0x58>)
  4006ec:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006ee:	4b12      	ldr	r3, [pc, #72]	; (400738 <afec_enable+0x5c>)
  4006f0:	789b      	ldrb	r3, [r3, #2]
  4006f2:	2bff      	cmp	r3, #255	; 0xff
  4006f4:	d01a      	beq.n	40072c <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006fa:	fab3 f383 	clz	r3, r3
  4006fe:	095b      	lsrs	r3, r3, #5
  400700:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400702:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400704:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400708:	2200      	movs	r2, #0
  40070a:	4b0c      	ldr	r3, [pc, #48]	; (40073c <afec_enable+0x60>)
  40070c:	701a      	strb	r2, [r3, #0]
	return flags;
  40070e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400710:	4a09      	ldr	r2, [pc, #36]	; (400738 <afec_enable+0x5c>)
  400712:	7893      	ldrb	r3, [r2, #2]
  400714:	3301      	adds	r3, #1
  400716:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400718:	b129      	cbz	r1, 400726 <afec_enable+0x4a>
		cpu_irq_enable();
  40071a:	2201      	movs	r2, #1
  40071c:	4b07      	ldr	r3, [pc, #28]	; (40073c <afec_enable+0x60>)
  40071e:	701a      	strb	r2, [r3, #0]
  400720:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400724:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400726:	b003      	add	sp, #12
  400728:	f85d fb04 	ldr.w	pc, [sp], #4
  40072c:	e7fe      	b.n	40072c <afec_enable+0x50>
  40072e:	bf00      	nop
  400730:	40064000 	.word	0x40064000
  400734:	00400b69 	.word	0x00400b69
  400738:	20400bd4 	.word	0x20400bd4
  40073c:	2040000a 	.word	0x2040000a

00400740 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400740:	6301      	str	r1, [r0, #48]	; 0x30
  400742:	4770      	bx	lr

00400744 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400744:	6341      	str	r1, [r0, #52]	; 0x34
  400746:	4770      	bx	lr

00400748 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400748:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40074c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400750:	d105      	bne.n	40075e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400752:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400754:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400756:	bf14      	ite	ne
  400758:	2001      	movne	r0, #1
  40075a:	2000      	moveq	r0, #0
  40075c:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40075e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400760:	e7f8      	b.n	400754 <pio_get+0xc>

00400762 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400762:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400764:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400768:	d03a      	beq.n	4007e0 <pio_set_peripheral+0x7e>
  40076a:	d813      	bhi.n	400794 <pio_set_peripheral+0x32>
  40076c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400770:	d025      	beq.n	4007be <pio_set_peripheral+0x5c>
  400772:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400776:	d10a      	bne.n	40078e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400778:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40077a:	4313      	orrs	r3, r2
  40077c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40077e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400780:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400782:	400b      	ands	r3, r1
  400784:	ea23 0302 	bic.w	r3, r3, r2
  400788:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40078a:	6042      	str	r2, [r0, #4]
  40078c:	4770      	bx	lr
	switch (ul_type) {
  40078e:	2900      	cmp	r1, #0
  400790:	d1fb      	bne.n	40078a <pio_set_peripheral+0x28>
  400792:	4770      	bx	lr
  400794:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400798:	d021      	beq.n	4007de <pio_set_peripheral+0x7c>
  40079a:	d809      	bhi.n	4007b0 <pio_set_peripheral+0x4e>
  40079c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4007a0:	d1f3      	bne.n	40078a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4007a4:	4313      	orrs	r3, r2
  4007a6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007aa:	4313      	orrs	r3, r2
  4007ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007ae:	e7ec      	b.n	40078a <pio_set_peripheral+0x28>
	switch (ul_type) {
  4007b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4007b4:	d013      	beq.n	4007de <pio_set_peripheral+0x7c>
  4007b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4007ba:	d010      	beq.n	4007de <pio_set_peripheral+0x7c>
  4007bc:	e7e5      	b.n	40078a <pio_set_peripheral+0x28>
{
  4007be:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007c2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4007c4:	43d3      	mvns	r3, r2
  4007c6:	4021      	ands	r1, r4
  4007c8:	461c      	mov	r4, r3
  4007ca:	4019      	ands	r1, r3
  4007cc:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4007d0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4007d2:	400b      	ands	r3, r1
  4007d4:	4023      	ands	r3, r4
  4007d6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4007d8:	6042      	str	r2, [r0, #4]
}
  4007da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007de:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007e2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4007e4:	400b      	ands	r3, r1
  4007e6:	ea23 0302 	bic.w	r3, r3, r2
  4007ea:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007ee:	4313      	orrs	r3, r2
  4007f0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007f2:	e7ca      	b.n	40078a <pio_set_peripheral+0x28>

004007f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007f4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007f6:	f012 0f01 	tst.w	r2, #1
  4007fa:	d10d      	bne.n	400818 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4007fc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4007fe:	f012 0f0a 	tst.w	r2, #10
  400802:	d00b      	beq.n	40081c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400804:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400806:	f012 0f02 	tst.w	r2, #2
  40080a:	d109      	bne.n	400820 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40080c:	f012 0f08 	tst.w	r2, #8
  400810:	d008      	beq.n	400824 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400812:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400816:	e005      	b.n	400824 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400818:	6641      	str	r1, [r0, #100]	; 0x64
  40081a:	e7f0      	b.n	4007fe <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40081c:	6241      	str	r1, [r0, #36]	; 0x24
  40081e:	e7f2      	b.n	400806 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400820:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400824:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400826:	6001      	str	r1, [r0, #0]
  400828:	4770      	bx	lr

0040082a <pio_set_output>:
{
  40082a:	b410      	push	{r4}
  40082c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40082e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400830:	b94c      	cbnz	r4, 400846 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400832:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400834:	b14b      	cbz	r3, 40084a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400836:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400838:	b94a      	cbnz	r2, 40084e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40083a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40083c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40083e:	6001      	str	r1, [r0, #0]
}
  400840:	f85d 4b04 	ldr.w	r4, [sp], #4
  400844:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400846:	6641      	str	r1, [r0, #100]	; 0x64
  400848:	e7f4      	b.n	400834 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40084a:	6541      	str	r1, [r0, #84]	; 0x54
  40084c:	e7f4      	b.n	400838 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40084e:	6301      	str	r1, [r0, #48]	; 0x30
  400850:	e7f4      	b.n	40083c <pio_set_output+0x12>
	...

00400854 <pio_configure>:
{
  400854:	b570      	push	{r4, r5, r6, lr}
  400856:	b082      	sub	sp, #8
  400858:	4605      	mov	r5, r0
  40085a:	4616      	mov	r6, r2
  40085c:	461c      	mov	r4, r3
	switch (ul_type) {
  40085e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400862:	d014      	beq.n	40088e <pio_configure+0x3a>
  400864:	d90a      	bls.n	40087c <pio_configure+0x28>
  400866:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40086a:	d024      	beq.n	4008b6 <pio_configure+0x62>
  40086c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400870:	d021      	beq.n	4008b6 <pio_configure+0x62>
  400872:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400876:	d017      	beq.n	4008a8 <pio_configure+0x54>
		return 0;
  400878:	2000      	movs	r0, #0
  40087a:	e01a      	b.n	4008b2 <pio_configure+0x5e>
	switch (ul_type) {
  40087c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400880:	d005      	beq.n	40088e <pio_configure+0x3a>
  400882:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400886:	d002      	beq.n	40088e <pio_configure+0x3a>
  400888:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40088c:	d1f4      	bne.n	400878 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40088e:	4632      	mov	r2, r6
  400890:	4628      	mov	r0, r5
  400892:	4b11      	ldr	r3, [pc, #68]	; (4008d8 <pio_configure+0x84>)
  400894:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400896:	f014 0f01 	tst.w	r4, #1
  40089a:	d102      	bne.n	4008a2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40089c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40089e:	2001      	movs	r0, #1
  4008a0:	e007      	b.n	4008b2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4008a2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4008a4:	2001      	movs	r0, #1
  4008a6:	e004      	b.n	4008b2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4008a8:	461a      	mov	r2, r3
  4008aa:	4631      	mov	r1, r6
  4008ac:	4b0b      	ldr	r3, [pc, #44]	; (4008dc <pio_configure+0x88>)
  4008ae:	4798      	blx	r3
	return 1;
  4008b0:	2001      	movs	r0, #1
}
  4008b2:	b002      	add	sp, #8
  4008b4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4008b6:	f004 0301 	and.w	r3, r4, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4008c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008c4:	bf14      	ite	ne
  4008c6:	2200      	movne	r2, #0
  4008c8:	2201      	moveq	r2, #1
  4008ca:	4631      	mov	r1, r6
  4008cc:	4628      	mov	r0, r5
  4008ce:	4c04      	ldr	r4, [pc, #16]	; (4008e0 <pio_configure+0x8c>)
  4008d0:	47a0      	blx	r4
	return 1;
  4008d2:	2001      	movs	r0, #1
		break;
  4008d4:	e7ed      	b.n	4008b2 <pio_configure+0x5e>
  4008d6:	bf00      	nop
  4008d8:	00400763 	.word	0x00400763
  4008dc:	004007f5 	.word	0x004007f5
  4008e0:	0040082b 	.word	0x0040082b

004008e4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4008e4:	f012 0f10 	tst.w	r2, #16
  4008e8:	d012      	beq.n	400910 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4008ea:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4008ee:	f012 0f20 	tst.w	r2, #32
  4008f2:	d007      	beq.n	400904 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4008f4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4008f8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4008fc:	d005      	beq.n	40090a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4008fe:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400902:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400904:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400908:	e7f6      	b.n	4008f8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40090a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40090e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400910:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400914:	4770      	bx	lr

00400916 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400916:	6401      	str	r1, [r0, #64]	; 0x40
  400918:	4770      	bx	lr

0040091a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40091a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40091c:	4770      	bx	lr

0040091e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40091e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400920:	4770      	bx	lr
	...

00400924 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400928:	4604      	mov	r4, r0
  40092a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40092c:	4b0e      	ldr	r3, [pc, #56]	; (400968 <pio_handler_process+0x44>)
  40092e:	4798      	blx	r3
  400930:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400932:	4620      	mov	r0, r4
  400934:	4b0d      	ldr	r3, [pc, #52]	; (40096c <pio_handler_process+0x48>)
  400936:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400938:	4005      	ands	r5, r0
  40093a:	d013      	beq.n	400964 <pio_handler_process+0x40>
  40093c:	4c0c      	ldr	r4, [pc, #48]	; (400970 <pio_handler_process+0x4c>)
  40093e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400942:	e003      	b.n	40094c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400944:	42b4      	cmp	r4, r6
  400946:	d00d      	beq.n	400964 <pio_handler_process+0x40>
  400948:	3410      	adds	r4, #16
		while (status != 0) {
  40094a:	b15d      	cbz	r5, 400964 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40094c:	6820      	ldr	r0, [r4, #0]
  40094e:	4540      	cmp	r0, r8
  400950:	d1f8      	bne.n	400944 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400952:	6861      	ldr	r1, [r4, #4]
  400954:	4229      	tst	r1, r5
  400956:	d0f5      	beq.n	400944 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400958:	68e3      	ldr	r3, [r4, #12]
  40095a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40095c:	6863      	ldr	r3, [r4, #4]
  40095e:	ea25 0503 	bic.w	r5, r5, r3
  400962:	e7ef      	b.n	400944 <pio_handler_process+0x20>
  400964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400968:	0040091b 	.word	0x0040091b
  40096c:	0040091f 	.word	0x0040091f
  400970:	204009dc 	.word	0x204009dc

00400974 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400976:	4c18      	ldr	r4, [pc, #96]	; (4009d8 <pio_handler_set+0x64>)
  400978:	6826      	ldr	r6, [r4, #0]
  40097a:	2e06      	cmp	r6, #6
  40097c:	d82a      	bhi.n	4009d4 <pio_handler_set+0x60>
  40097e:	f04f 0c00 	mov.w	ip, #0
  400982:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400984:	4f15      	ldr	r7, [pc, #84]	; (4009dc <pio_handler_set+0x68>)
  400986:	e004      	b.n	400992 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400988:	3401      	adds	r4, #1
  40098a:	b2e4      	uxtb	r4, r4
  40098c:	46a4      	mov	ip, r4
  40098e:	42a6      	cmp	r6, r4
  400990:	d309      	bcc.n	4009a6 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400992:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400994:	0125      	lsls	r5, r4, #4
  400996:	597d      	ldr	r5, [r7, r5]
  400998:	428d      	cmp	r5, r1
  40099a:	d1f5      	bne.n	400988 <pio_handler_set+0x14>
  40099c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4009a0:	686d      	ldr	r5, [r5, #4]
  4009a2:	4295      	cmp	r5, r2
  4009a4:	d1f0      	bne.n	400988 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4009a6:	4d0d      	ldr	r5, [pc, #52]	; (4009dc <pio_handler_set+0x68>)
  4009a8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4009ac:	eb05 040e 	add.w	r4, r5, lr
  4009b0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4009b4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4009b6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4009b8:	9906      	ldr	r1, [sp, #24]
  4009ba:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4009bc:	3601      	adds	r6, #1
  4009be:	4566      	cmp	r6, ip
  4009c0:	d005      	beq.n	4009ce <pio_handler_set+0x5a>
  4009c2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009c4:	461a      	mov	r2, r3
  4009c6:	4b06      	ldr	r3, [pc, #24]	; (4009e0 <pio_handler_set+0x6c>)
  4009c8:	4798      	blx	r3

	return 0;
  4009ca:	2000      	movs	r0, #0
  4009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4009ce:	4902      	ldr	r1, [pc, #8]	; (4009d8 <pio_handler_set+0x64>)
  4009d0:	600e      	str	r6, [r1, #0]
  4009d2:	e7f6      	b.n	4009c2 <pio_handler_set+0x4e>
		return 1;
  4009d4:	2001      	movs	r0, #1
}
  4009d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009d8:	20400a4c 	.word	0x20400a4c
  4009dc:	204009dc 	.word	0x204009dc
  4009e0:	004008e5 	.word	0x004008e5

004009e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4009e6:	210a      	movs	r1, #10
  4009e8:	4801      	ldr	r0, [pc, #4]	; (4009f0 <PIOA_Handler+0xc>)
  4009ea:	4b02      	ldr	r3, [pc, #8]	; (4009f4 <PIOA_Handler+0x10>)
  4009ec:	4798      	blx	r3
  4009ee:	bd08      	pop	{r3, pc}
  4009f0:	400e0e00 	.word	0x400e0e00
  4009f4:	00400925 	.word	0x00400925

004009f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4009fa:	210b      	movs	r1, #11
  4009fc:	4801      	ldr	r0, [pc, #4]	; (400a04 <PIOB_Handler+0xc>)
  4009fe:	4b02      	ldr	r3, [pc, #8]	; (400a08 <PIOB_Handler+0x10>)
  400a00:	4798      	blx	r3
  400a02:	bd08      	pop	{r3, pc}
  400a04:	400e1000 	.word	0x400e1000
  400a08:	00400925 	.word	0x00400925

00400a0c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a0e:	210c      	movs	r1, #12
  400a10:	4801      	ldr	r0, [pc, #4]	; (400a18 <PIOC_Handler+0xc>)
  400a12:	4b02      	ldr	r3, [pc, #8]	; (400a1c <PIOC_Handler+0x10>)
  400a14:	4798      	blx	r3
  400a16:	bd08      	pop	{r3, pc}
  400a18:	400e1200 	.word	0x400e1200
  400a1c:	00400925 	.word	0x00400925

00400a20 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a20:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a22:	2110      	movs	r1, #16
  400a24:	4801      	ldr	r0, [pc, #4]	; (400a2c <PIOD_Handler+0xc>)
  400a26:	4b02      	ldr	r3, [pc, #8]	; (400a30 <PIOD_Handler+0x10>)
  400a28:	4798      	blx	r3
  400a2a:	bd08      	pop	{r3, pc}
  400a2c:	400e1400 	.word	0x400e1400
  400a30:	00400925 	.word	0x00400925

00400a34 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a34:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a36:	2111      	movs	r1, #17
  400a38:	4801      	ldr	r0, [pc, #4]	; (400a40 <PIOE_Handler+0xc>)
  400a3a:	4b02      	ldr	r3, [pc, #8]	; (400a44 <PIOE_Handler+0x10>)
  400a3c:	4798      	blx	r3
  400a3e:	bd08      	pop	{r3, pc}
  400a40:	400e1600 	.word	0x400e1600
  400a44:	00400925 	.word	0x00400925

00400a48 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400a48:	2803      	cmp	r0, #3
  400a4a:	d011      	beq.n	400a70 <pmc_mck_set_division+0x28>
  400a4c:	2804      	cmp	r0, #4
  400a4e:	d012      	beq.n	400a76 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400a50:	2802      	cmp	r0, #2
  400a52:	bf0c      	ite	eq
  400a54:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400a58:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400a5a:	4a08      	ldr	r2, [pc, #32]	; (400a7c <pmc_mck_set_division+0x34>)
  400a5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400a62:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400a64:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a66:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a68:	f013 0f08 	tst.w	r3, #8
  400a6c:	d0fb      	beq.n	400a66 <pmc_mck_set_division+0x1e>
}
  400a6e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400a70:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400a74:	e7f1      	b.n	400a5a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400a76:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400a7a:	e7ee      	b.n	400a5a <pmc_mck_set_division+0x12>
  400a7c:	400e0600 	.word	0x400e0600

00400a80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a80:	4a17      	ldr	r2, [pc, #92]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400a82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400a88:	4318      	orrs	r0, r3
  400a8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a8e:	f013 0f08 	tst.w	r3, #8
  400a92:	d10a      	bne.n	400aaa <pmc_switch_mck_to_pllack+0x2a>
  400a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400a98:	4911      	ldr	r1, [pc, #68]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a9c:	f012 0f08 	tst.w	r2, #8
  400aa0:	d103      	bne.n	400aaa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400aa2:	3b01      	subs	r3, #1
  400aa4:	d1f9      	bne.n	400a9a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400aa6:	2001      	movs	r0, #1
  400aa8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400aaa:	4a0d      	ldr	r2, [pc, #52]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400aac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400aae:	f023 0303 	bic.w	r3, r3, #3
  400ab2:	f043 0302 	orr.w	r3, r3, #2
  400ab6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ab8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aba:	f013 0f08 	tst.w	r3, #8
  400abe:	d10a      	bne.n	400ad6 <pmc_switch_mck_to_pllack+0x56>
  400ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ac4:	4906      	ldr	r1, [pc, #24]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400ac6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ac8:	f012 0f08 	tst.w	r2, #8
  400acc:	d105      	bne.n	400ada <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ace:	3b01      	subs	r3, #1
  400ad0:	d1f9      	bne.n	400ac6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400ad2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400ad4:	4770      	bx	lr
	return 0;
  400ad6:	2000      	movs	r0, #0
  400ad8:	4770      	bx	lr
  400ada:	2000      	movs	r0, #0
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop
  400ae0:	400e0600 	.word	0x400e0600

00400ae4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ae4:	b9a0      	cbnz	r0, 400b10 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ae6:	480e      	ldr	r0, [pc, #56]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400ae8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400aea:	0209      	lsls	r1, r1, #8
  400aec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400aee:	4a0d      	ldr	r2, [pc, #52]	; (400b24 <pmc_switch_mainck_to_xtal+0x40>)
  400af0:	401a      	ands	r2, r3
  400af2:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <pmc_switch_mainck_to_xtal+0x44>)
  400af4:	4313      	orrs	r3, r2
  400af6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400af8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400afa:	4602      	mov	r2, r0
  400afc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400afe:	f013 0f01 	tst.w	r3, #1
  400b02:	d0fb      	beq.n	400afc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b04:	4a06      	ldr	r2, [pc, #24]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400b06:	6a11      	ldr	r1, [r2, #32]
  400b08:	4b08      	ldr	r3, [pc, #32]	; (400b2c <pmc_switch_mainck_to_xtal+0x48>)
  400b0a:	430b      	orrs	r3, r1
  400b0c:	6213      	str	r3, [r2, #32]
  400b0e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b10:	4903      	ldr	r1, [pc, #12]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400b12:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b14:	4a06      	ldr	r2, [pc, #24]	; (400b30 <pmc_switch_mainck_to_xtal+0x4c>)
  400b16:	401a      	ands	r2, r3
  400b18:	4b06      	ldr	r3, [pc, #24]	; (400b34 <pmc_switch_mainck_to_xtal+0x50>)
  400b1a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b1c:	620b      	str	r3, [r1, #32]
  400b1e:	4770      	bx	lr
  400b20:	400e0600 	.word	0x400e0600
  400b24:	ffc8fffc 	.word	0xffc8fffc
  400b28:	00370001 	.word	0x00370001
  400b2c:	01370000 	.word	0x01370000
  400b30:	fec8fffc 	.word	0xfec8fffc
  400b34:	01370002 	.word	0x01370002

00400b38 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b38:	4b02      	ldr	r3, [pc, #8]	; (400b44 <pmc_osc_is_ready_mainck+0xc>)
  400b3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b3c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	400e0600 	.word	0x400e0600

00400b48 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b4c:	4b01      	ldr	r3, [pc, #4]	; (400b54 <pmc_disable_pllack+0xc>)
  400b4e:	629a      	str	r2, [r3, #40]	; 0x28
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	400e0600 	.word	0x400e0600

00400b58 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <pmc_is_locked_pllack+0xc>)
  400b5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b5c:	f000 0002 	and.w	r0, r0, #2
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400b68:	283f      	cmp	r0, #63	; 0x3f
  400b6a:	d81e      	bhi.n	400baa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400b6c:	281f      	cmp	r0, #31
  400b6e:	d80c      	bhi.n	400b8a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b70:	4b11      	ldr	r3, [pc, #68]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b72:	699a      	ldr	r2, [r3, #24]
  400b74:	2301      	movs	r3, #1
  400b76:	4083      	lsls	r3, r0
  400b78:	4393      	bics	r3, r2
  400b7a:	d018      	beq.n	400bae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b7c:	2301      	movs	r3, #1
  400b7e:	fa03 f000 	lsl.w	r0, r3, r0
  400b82:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b84:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b86:	2000      	movs	r0, #0
  400b88:	4770      	bx	lr
		ul_id -= 32;
  400b8a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b8c:	4b0a      	ldr	r3, [pc, #40]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400b92:	2301      	movs	r3, #1
  400b94:	4083      	lsls	r3, r0
  400b96:	4393      	bics	r3, r2
  400b98:	d00b      	beq.n	400bb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b9a:	2301      	movs	r3, #1
  400b9c:	fa03 f000 	lsl.w	r0, r3, r0
  400ba0:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400ba2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ba6:	2000      	movs	r0, #0
  400ba8:	4770      	bx	lr
		return 1;
  400baa:	2001      	movs	r0, #1
  400bac:	4770      	bx	lr
	return 0;
  400bae:	2000      	movs	r0, #0
  400bb0:	4770      	bx	lr
  400bb2:	2000      	movs	r0, #0
}
  400bb4:	4770      	bx	lr
  400bb6:	bf00      	nop
  400bb8:	400e0600 	.word	0x400e0600

00400bbc <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400bbc:	b921      	cbnz	r1, 400bc8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  400bbe:	6843      	ldr	r3, [r0, #4]
  400bc0:	f023 0301 	bic.w	r3, r3, #1
  400bc4:	6043      	str	r3, [r0, #4]
  400bc6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400bc8:	6843      	ldr	r3, [r0, #4]
  400bca:	f043 0301 	orr.w	r3, r3, #1
  400bce:	6043      	str	r3, [r0, #4]
  400bd0:	4770      	bx	lr

00400bd2 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400bd2:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400bd4:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400bd6:	6884      	ldr	r4, [r0, #8]
  400bd8:	42a5      	cmp	r5, r4
  400bda:	d003      	beq.n	400be4 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  400bdc:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400bde:	6884      	ldr	r4, [r0, #8]
  400be0:	42ac      	cmp	r4, r5
  400be2:	d1fb      	bne.n	400bdc <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  400be4:	b161      	cbz	r1, 400c00 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400be6:	f3c4 5001 	ubfx	r0, r4, #20, #2
  400bea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400bee:	f3c4 4003 	ubfx	r0, r4, #16, #4
  400bf2:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400bf6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  400bfa:	bf18      	it	ne
  400bfc:	300c      	addne	r0, #12
  400bfe:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400c00:	b142      	cbz	r2, 400c14 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400c02:	f3c4 3102 	ubfx	r1, r4, #12, #3
  400c06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400c0a:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400c0e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400c12:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400c14:	b143      	cbz	r3, 400c28 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400c16:	f3c4 1202 	ubfx	r2, r4, #4, #3
  400c1a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400c1e:	f004 040f 	and.w	r4, r4, #15
  400c22:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  400c26:	601c      	str	r4, [r3, #0]
	}
}
  400c28:	bc30      	pop	{r4, r5}
  400c2a:	4770      	bx	lr

00400c2c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400c2c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400c2e:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400c30:	f014 0f01 	tst.w	r4, #1
  400c34:	d005      	beq.n	400c42 <rtc_set_time+0x16>
  400c36:	290c      	cmp	r1, #12
  400c38:	d903      	bls.n	400c42 <rtc_set_time+0x16>
			ul_hour -= 12;
  400c3a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400c3c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400c40:	e000      	b.n	400c44 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400c42:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400c44:	4c1c      	ldr	r4, [pc, #112]	; (400cb8 <rtc_set_time+0x8c>)
  400c46:	fba4 5603 	umull	r5, r6, r4, r3
  400c4a:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400c4c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400c50:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400c54:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400c58:	fba4 6502 	umull	r6, r5, r4, r2
  400c5c:	08ed      	lsrs	r5, r5, #3
  400c5e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400c62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400c66:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400c6e:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400c70:	fba4 4201 	umull	r4, r2, r4, r1
  400c74:	08d2      	lsrs	r2, r2, #3
  400c76:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400c7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400c7e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400c82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400c86:	6983      	ldr	r3, [r0, #24]
  400c88:	f013 0f04 	tst.w	r3, #4
  400c8c:	d0fb      	beq.n	400c86 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400c8e:	6803      	ldr	r3, [r0, #0]
  400c90:	f043 0301 	orr.w	r3, r3, #1
  400c94:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400c96:	6983      	ldr	r3, [r0, #24]
  400c98:	f013 0f01 	tst.w	r3, #1
  400c9c:	d0fb      	beq.n	400c96 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400c9e:	2301      	movs	r3, #1
  400ca0:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400ca2:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400ca4:	6803      	ldr	r3, [r0, #0]
  400ca6:	f023 0301 	bic.w	r3, r3, #1
  400caa:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400cac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400cae:	f000 0001 	and.w	r0, r0, #1
  400cb2:	bcf0      	pop	{r4, r5, r6, r7}
  400cb4:	4770      	bx	lr
  400cb6:	bf00      	nop
  400cb8:	cccccccd 	.word	0xcccccccd

00400cbc <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400cbc:	b4f0      	push	{r4, r5, r6, r7}
  400cbe:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400cc0:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400cc2:	68c4      	ldr	r4, [r0, #12]
  400cc4:	42a5      	cmp	r5, r4
  400cc6:	d003      	beq.n	400cd0 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400cc8:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400cca:	68c4      	ldr	r4, [r0, #12]
  400ccc:	42ac      	cmp	r4, r5
  400cce:	d1fb      	bne.n	400cc8 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400cd0:	b199      	cbz	r1, 400cfa <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400cd2:	f3c4 3003 	ubfx	r0, r4, #12, #4
  400cd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400cda:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400cde:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400ce2:	f3c4 1002 	ubfx	r0, r4, #4, #3
  400ce6:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400cea:	f004 000f 	and.w	r0, r4, #15
  400cee:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400cf2:	2564      	movs	r5, #100	; 0x64
  400cf4:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400cf8:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400cfa:	b142      	cbz	r2, 400d0e <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400cfc:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400d00:	0081      	lsls	r1, r0, #2
  400d02:	4408      	add	r0, r1
  400d04:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400d08:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400d0c:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400d0e:	b143      	cbz	r3, 400d22 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400d10:	f3c4 7201 	ubfx	r2, r4, #28, #2
  400d14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400d18:	f3c4 6103 	ubfx	r1, r4, #24, #4
  400d1c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  400d20:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  400d22:	b116      	cbz	r6, 400d2a <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  400d24:	f3c4 5442 	ubfx	r4, r4, #21, #3
  400d28:	6034      	str	r4, [r6, #0]
	}
}
  400d2a:	bcf0      	pop	{r4, r5, r6, r7}
  400d2c:	4770      	bx	lr
	...

00400d30 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400d30:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d32:	4d2a      	ldr	r5, [pc, #168]	; (400ddc <rtc_set_date+0xac>)
  400d34:	fba5 4603 	umull	r4, r6, r5, r3
  400d38:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400d3a:	9c03      	ldr	r4, [sp, #12]
  400d3c:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d3e:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400d42:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  400d46:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d4a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400d4e:	fba5 6402 	umull	r6, r4, r5, r2
  400d52:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d54:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400d58:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400d5c:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d60:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400d64:	4b1e      	ldr	r3, [pc, #120]	; (400de0 <rtc_set_date+0xb0>)
  400d66:	fba3 4301 	umull	r4, r3, r3, r1
  400d6a:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d6c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400d70:	4b1c      	ldr	r3, [pc, #112]	; (400de4 <rtc_set_date+0xb4>)
  400d72:	fba3 4301 	umull	r4, r3, r3, r1
  400d76:	095b      	lsrs	r3, r3, #5
  400d78:	fba5 6403 	umull	r6, r4, r5, r3
  400d7c:	08e4      	lsrs	r4, r4, #3
  400d7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400d82:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d86:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400d88:	fba5 4301 	umull	r4, r3, r5, r1
  400d8c:	08db      	lsrs	r3, r3, #3
  400d8e:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  400d92:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400d96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400d9a:	fba5 1503 	umull	r1, r5, r5, r3
  400d9e:	08ed      	lsrs	r5, r5, #3
  400da0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400da4:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400da8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400dac:	6983      	ldr	r3, [r0, #24]
  400dae:	f013 0f04 	tst.w	r3, #4
  400db2:	d0fb      	beq.n	400dac <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  400db4:	6803      	ldr	r3, [r0, #0]
  400db6:	f043 0302 	orr.w	r3, r3, #2
  400dba:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400dbc:	6983      	ldr	r3, [r0, #24]
  400dbe:	f013 0f01 	tst.w	r3, #1
  400dc2:	d0fb      	beq.n	400dbc <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400dc4:	2301      	movs	r3, #1
  400dc6:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400dc8:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400dca:	6803      	ldr	r3, [r0, #0]
  400dcc:	f023 0302 	bic.w	r3, r3, #2
  400dd0:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400dd2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400dd4:	f000 0002 	and.w	r0, r0, #2
  400dd8:	bc70      	pop	{r4, r5, r6}
  400dda:	4770      	bx	lr
  400ddc:	cccccccd 	.word	0xcccccccd
  400de0:	10624dd3 	.word	0x10624dd3
  400de4:	51eb851f 	.word	0x51eb851f

00400de8 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400de8:	6980      	ldr	r0, [r0, #24]
}
  400dea:	4770      	bx	lr

00400dec <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400dec:	61c1      	str	r1, [r0, #28]
  400dee:	4770      	bx	lr

00400df0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400df0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400df2:	0189      	lsls	r1, r1, #6
  400df4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400df6:	2402      	movs	r4, #2
  400df8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400dfa:	f04f 31ff 	mov.w	r1, #4294967295
  400dfe:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400e00:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400e02:	605a      	str	r2, [r3, #4]
}
  400e04:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e08:	4770      	bx	lr

00400e0a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400e0a:	0189      	lsls	r1, r1, #6
  400e0c:	2305      	movs	r3, #5
  400e0e:	5043      	str	r3, [r0, r1]
  400e10:	4770      	bx	lr

00400e12 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  400e12:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400e16:	6908      	ldr	r0, [r1, #16]
}
  400e18:	4770      	bx	lr

00400e1a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400e1a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400e1e:	61ca      	str	r2, [r1, #28]
  400e20:	4770      	bx	lr

00400e22 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400e22:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400e26:	624a      	str	r2, [r1, #36]	; 0x24
  400e28:	4770      	bx	lr

00400e2a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400e2a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400e2e:	6a08      	ldr	r0, [r1, #32]
}
  400e30:	4770      	bx	lr

00400e32 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400e32:	6943      	ldr	r3, [r0, #20]
  400e34:	f013 0f02 	tst.w	r3, #2
  400e38:	d002      	beq.n	400e40 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400e3a:	61c1      	str	r1, [r0, #28]
	return 0;
  400e3c:	2000      	movs	r0, #0
  400e3e:	4770      	bx	lr
		return 1;
  400e40:	2001      	movs	r0, #1
}
  400e42:	4770      	bx	lr

00400e44 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400e44:	6943      	ldr	r3, [r0, #20]
  400e46:	f013 0f01 	tst.w	r3, #1
  400e4a:	d003      	beq.n	400e54 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400e4c:	6983      	ldr	r3, [r0, #24]
  400e4e:	700b      	strb	r3, [r1, #0]
	return 0;
  400e50:	2000      	movs	r0, #0
  400e52:	4770      	bx	lr
		return 1;
  400e54:	2001      	movs	r0, #1
}
  400e56:	4770      	bx	lr

00400e58 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400e58:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400e5a:	010b      	lsls	r3, r1, #4
  400e5c:	4293      	cmp	r3, r2
  400e5e:	d914      	bls.n	400e8a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400e60:	00c9      	lsls	r1, r1, #3
  400e62:	084b      	lsrs	r3, r1, #1
  400e64:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400e68:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400e6c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e6e:	1e5c      	subs	r4, r3, #1
  400e70:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400e74:	428c      	cmp	r4, r1
  400e76:	d901      	bls.n	400e7c <usart_set_async_baudrate+0x24>
		return 1;
  400e78:	2001      	movs	r0, #1
  400e7a:	e017      	b.n	400eac <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400e7c:	6841      	ldr	r1, [r0, #4]
  400e7e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400e82:	6041      	str	r1, [r0, #4]
  400e84:	e00c      	b.n	400ea0 <usart_set_async_baudrate+0x48>
		return 1;
  400e86:	2001      	movs	r0, #1
  400e88:	e010      	b.n	400eac <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400e8a:	0859      	lsrs	r1, r3, #1
  400e8c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400e90:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400e94:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e96:	1e5c      	subs	r4, r3, #1
  400e98:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400e9c:	428c      	cmp	r4, r1
  400e9e:	d8f2      	bhi.n	400e86 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400ea0:	0412      	lsls	r2, r2, #16
  400ea2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400ea6:	431a      	orrs	r2, r3
  400ea8:	6202      	str	r2, [r0, #32]

	return 0;
  400eaa:	2000      	movs	r0, #0
}
  400eac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eb0:	4770      	bx	lr
	...

00400eb4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400eb4:	4b08      	ldr	r3, [pc, #32]	; (400ed8 <usart_reset+0x24>)
  400eb6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400eba:	2300      	movs	r3, #0
  400ebc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400ebe:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400ec0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ec2:	2388      	movs	r3, #136	; 0x88
  400ec4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400ec6:	2324      	movs	r3, #36	; 0x24
  400ec8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400eca:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ece:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ed4:	6003      	str	r3, [r0, #0]
  400ed6:	4770      	bx	lr
  400ed8:	55534100 	.word	0x55534100

00400edc <usart_init_rs232>:
{
  400edc:	b570      	push	{r4, r5, r6, lr}
  400ede:	4605      	mov	r5, r0
  400ee0:	460c      	mov	r4, r1
  400ee2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400ee4:	4b0f      	ldr	r3, [pc, #60]	; (400f24 <usart_init_rs232+0x48>)
  400ee6:	4798      	blx	r3
	ul_reg_val = 0;
  400ee8:	2200      	movs	r2, #0
  400eea:	4b0f      	ldr	r3, [pc, #60]	; (400f28 <usart_init_rs232+0x4c>)
  400eec:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400eee:	b1a4      	cbz	r4, 400f1a <usart_init_rs232+0x3e>
  400ef0:	4632      	mov	r2, r6
  400ef2:	6821      	ldr	r1, [r4, #0]
  400ef4:	4628      	mov	r0, r5
  400ef6:	4b0d      	ldr	r3, [pc, #52]	; (400f2c <usart_init_rs232+0x50>)
  400ef8:	4798      	blx	r3
  400efa:	4602      	mov	r2, r0
  400efc:	b978      	cbnz	r0, 400f1e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400efe:	6863      	ldr	r3, [r4, #4]
  400f00:	68a1      	ldr	r1, [r4, #8]
  400f02:	430b      	orrs	r3, r1
  400f04:	6921      	ldr	r1, [r4, #16]
  400f06:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400f08:	68e1      	ldr	r1, [r4, #12]
  400f0a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400f0c:	4906      	ldr	r1, [pc, #24]	; (400f28 <usart_init_rs232+0x4c>)
  400f0e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400f10:	6869      	ldr	r1, [r5, #4]
  400f12:	430b      	orrs	r3, r1
  400f14:	606b      	str	r3, [r5, #4]
}
  400f16:	4610      	mov	r0, r2
  400f18:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400f1a:	2201      	movs	r2, #1
  400f1c:	e7fb      	b.n	400f16 <usart_init_rs232+0x3a>
  400f1e:	2201      	movs	r2, #1
  400f20:	e7f9      	b.n	400f16 <usart_init_rs232+0x3a>
  400f22:	bf00      	nop
  400f24:	00400eb5 	.word	0x00400eb5
  400f28:	20400a50 	.word	0x20400a50
  400f2c:	00400e59 	.word	0x00400e59

00400f30 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400f30:	2340      	movs	r3, #64	; 0x40
  400f32:	6003      	str	r3, [r0, #0]
  400f34:	4770      	bx	lr

00400f36 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400f36:	2310      	movs	r3, #16
  400f38:	6003      	str	r3, [r0, #0]
  400f3a:	4770      	bx	lr

00400f3c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400f3c:	6943      	ldr	r3, [r0, #20]
  400f3e:	f013 0f02 	tst.w	r3, #2
  400f42:	d004      	beq.n	400f4e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400f44:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400f48:	61c1      	str	r1, [r0, #28]
	return 0;
  400f4a:	2000      	movs	r0, #0
  400f4c:	4770      	bx	lr
		return 1;
  400f4e:	2001      	movs	r0, #1
}
  400f50:	4770      	bx	lr

00400f52 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400f52:	6943      	ldr	r3, [r0, #20]
  400f54:	f013 0f01 	tst.w	r3, #1
  400f58:	d005      	beq.n	400f66 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400f5a:	6983      	ldr	r3, [r0, #24]
  400f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400f60:	600b      	str	r3, [r1, #0]
	return 0;
  400f62:	2000      	movs	r0, #0
  400f64:	4770      	bx	lr
		return 1;
  400f66:	2001      	movs	r0, #1
}
  400f68:	4770      	bx	lr

00400f6a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f6a:	e7fe      	b.n	400f6a <Dummy_Handler>

00400f6c <Reset_Handler>:
{
  400f6c:	b500      	push	{lr}
  400f6e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400f70:	4b25      	ldr	r3, [pc, #148]	; (401008 <Reset_Handler+0x9c>)
  400f72:	4a26      	ldr	r2, [pc, #152]	; (40100c <Reset_Handler+0xa0>)
  400f74:	429a      	cmp	r2, r3
  400f76:	d010      	beq.n	400f9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400f78:	4b25      	ldr	r3, [pc, #148]	; (401010 <Reset_Handler+0xa4>)
  400f7a:	4a23      	ldr	r2, [pc, #140]	; (401008 <Reset_Handler+0x9c>)
  400f7c:	429a      	cmp	r2, r3
  400f7e:	d20c      	bcs.n	400f9a <Reset_Handler+0x2e>
  400f80:	3b01      	subs	r3, #1
  400f82:	1a9b      	subs	r3, r3, r2
  400f84:	f023 0303 	bic.w	r3, r3, #3
  400f88:	3304      	adds	r3, #4
  400f8a:	4413      	add	r3, r2
  400f8c:	491f      	ldr	r1, [pc, #124]	; (40100c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400f8e:	f851 0b04 	ldr.w	r0, [r1], #4
  400f92:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400f96:	429a      	cmp	r2, r3
  400f98:	d1f9      	bne.n	400f8e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400f9a:	4b1e      	ldr	r3, [pc, #120]	; (401014 <Reset_Handler+0xa8>)
  400f9c:	4a1e      	ldr	r2, [pc, #120]	; (401018 <Reset_Handler+0xac>)
  400f9e:	429a      	cmp	r2, r3
  400fa0:	d20a      	bcs.n	400fb8 <Reset_Handler+0x4c>
  400fa2:	3b01      	subs	r3, #1
  400fa4:	1a9b      	subs	r3, r3, r2
  400fa6:	f023 0303 	bic.w	r3, r3, #3
  400faa:	3304      	adds	r3, #4
  400fac:	4413      	add	r3, r2
                *pDest++ = 0;
  400fae:	2100      	movs	r1, #0
  400fb0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400fb4:	4293      	cmp	r3, r2
  400fb6:	d1fb      	bne.n	400fb0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400fb8:	4a18      	ldr	r2, [pc, #96]	; (40101c <Reset_Handler+0xb0>)
  400fba:	4b19      	ldr	r3, [pc, #100]	; (401020 <Reset_Handler+0xb4>)
  400fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400fc0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400fc2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400fc6:	fab3 f383 	clz	r3, r3
  400fca:	095b      	lsrs	r3, r3, #5
  400fcc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400fce:	b672      	cpsid	i
  400fd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400fd4:	2200      	movs	r2, #0
  400fd6:	4b13      	ldr	r3, [pc, #76]	; (401024 <Reset_Handler+0xb8>)
  400fd8:	701a      	strb	r2, [r3, #0]
	return flags;
  400fda:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400fdc:	4a12      	ldr	r2, [pc, #72]	; (401028 <Reset_Handler+0xbc>)
  400fde:	6813      	ldr	r3, [r2, #0]
  400fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400fe4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400fe6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fea:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400fee:	b129      	cbz	r1, 400ffc <Reset_Handler+0x90>
		cpu_irq_enable();
  400ff0:	2201      	movs	r2, #1
  400ff2:	4b0c      	ldr	r3, [pc, #48]	; (401024 <Reset_Handler+0xb8>)
  400ff4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400ff6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ffa:	b662      	cpsie	i
        __libc_init_array();
  400ffc:	4b0b      	ldr	r3, [pc, #44]	; (40102c <Reset_Handler+0xc0>)
  400ffe:	4798      	blx	r3
        main();
  401000:	4b0b      	ldr	r3, [pc, #44]	; (401030 <Reset_Handler+0xc4>)
  401002:	4798      	blx	r3
  401004:	e7fe      	b.n	401004 <Reset_Handler+0x98>
  401006:	bf00      	nop
  401008:	20400000 	.word	0x20400000
  40100c:	0040a3ac 	.word	0x0040a3ac
  401010:	204009c0 	.word	0x204009c0
  401014:	20400d14 	.word	0x20400d14
  401018:	204009c0 	.word	0x204009c0
  40101c:	e000ed00 	.word	0xe000ed00
  401020:	00400000 	.word	0x00400000
  401024:	2040000a 	.word	0x2040000a
  401028:	e000ed88 	.word	0xe000ed88
  40102c:	004042cd 	.word	0x004042cd
  401030:	00403885 	.word	0x00403885

00401034 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401034:	4b3b      	ldr	r3, [pc, #236]	; (401124 <SystemCoreClockUpdate+0xf0>)
  401036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401038:	f003 0303 	and.w	r3, r3, #3
  40103c:	2b01      	cmp	r3, #1
  40103e:	d01d      	beq.n	40107c <SystemCoreClockUpdate+0x48>
  401040:	b183      	cbz	r3, 401064 <SystemCoreClockUpdate+0x30>
  401042:	2b02      	cmp	r3, #2
  401044:	d036      	beq.n	4010b4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401046:	4b37      	ldr	r3, [pc, #220]	; (401124 <SystemCoreClockUpdate+0xf0>)
  401048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40104a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40104e:	2b70      	cmp	r3, #112	; 0x70
  401050:	d05f      	beq.n	401112 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401052:	4b34      	ldr	r3, [pc, #208]	; (401124 <SystemCoreClockUpdate+0xf0>)
  401054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401056:	4934      	ldr	r1, [pc, #208]	; (401128 <SystemCoreClockUpdate+0xf4>)
  401058:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40105c:	680b      	ldr	r3, [r1, #0]
  40105e:	40d3      	lsrs	r3, r2
  401060:	600b      	str	r3, [r1, #0]
  401062:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401064:	4b31      	ldr	r3, [pc, #196]	; (40112c <SystemCoreClockUpdate+0xf8>)
  401066:	695b      	ldr	r3, [r3, #20]
  401068:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40106c:	bf14      	ite	ne
  40106e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401072:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401076:	4b2c      	ldr	r3, [pc, #176]	; (401128 <SystemCoreClockUpdate+0xf4>)
  401078:	601a      	str	r2, [r3, #0]
  40107a:	e7e4      	b.n	401046 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40107c:	4b29      	ldr	r3, [pc, #164]	; (401124 <SystemCoreClockUpdate+0xf0>)
  40107e:	6a1b      	ldr	r3, [r3, #32]
  401080:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401084:	d003      	beq.n	40108e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401086:	4a2a      	ldr	r2, [pc, #168]	; (401130 <SystemCoreClockUpdate+0xfc>)
  401088:	4b27      	ldr	r3, [pc, #156]	; (401128 <SystemCoreClockUpdate+0xf4>)
  40108a:	601a      	str	r2, [r3, #0]
  40108c:	e7db      	b.n	401046 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40108e:	4a29      	ldr	r2, [pc, #164]	; (401134 <SystemCoreClockUpdate+0x100>)
  401090:	4b25      	ldr	r3, [pc, #148]	; (401128 <SystemCoreClockUpdate+0xf4>)
  401092:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401094:	4b23      	ldr	r3, [pc, #140]	; (401124 <SystemCoreClockUpdate+0xf0>)
  401096:	6a1b      	ldr	r3, [r3, #32]
  401098:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40109c:	2b10      	cmp	r3, #16
  40109e:	d005      	beq.n	4010ac <SystemCoreClockUpdate+0x78>
  4010a0:	2b20      	cmp	r3, #32
  4010a2:	d1d0      	bne.n	401046 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4010a4:	4a22      	ldr	r2, [pc, #136]	; (401130 <SystemCoreClockUpdate+0xfc>)
  4010a6:	4b20      	ldr	r3, [pc, #128]	; (401128 <SystemCoreClockUpdate+0xf4>)
  4010a8:	601a      	str	r2, [r3, #0]
          break;
  4010aa:	e7cc      	b.n	401046 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4010ac:	4a22      	ldr	r2, [pc, #136]	; (401138 <SystemCoreClockUpdate+0x104>)
  4010ae:	4b1e      	ldr	r3, [pc, #120]	; (401128 <SystemCoreClockUpdate+0xf4>)
  4010b0:	601a      	str	r2, [r3, #0]
          break;
  4010b2:	e7c8      	b.n	401046 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4010b4:	4b1b      	ldr	r3, [pc, #108]	; (401124 <SystemCoreClockUpdate+0xf0>)
  4010b6:	6a1b      	ldr	r3, [r3, #32]
  4010b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010bc:	d016      	beq.n	4010ec <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4010be:	4a1c      	ldr	r2, [pc, #112]	; (401130 <SystemCoreClockUpdate+0xfc>)
  4010c0:	4b19      	ldr	r3, [pc, #100]	; (401128 <SystemCoreClockUpdate+0xf4>)
  4010c2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4010c4:	4b17      	ldr	r3, [pc, #92]	; (401124 <SystemCoreClockUpdate+0xf0>)
  4010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010c8:	f003 0303 	and.w	r3, r3, #3
  4010cc:	2b02      	cmp	r3, #2
  4010ce:	d1ba      	bne.n	401046 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010d0:	4a14      	ldr	r2, [pc, #80]	; (401124 <SystemCoreClockUpdate+0xf0>)
  4010d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4010d6:	4814      	ldr	r0, [pc, #80]	; (401128 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010d8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4010dc:	6803      	ldr	r3, [r0, #0]
  4010de:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010e2:	b2d2      	uxtb	r2, r2
  4010e4:	fbb3 f3f2 	udiv	r3, r3, r2
  4010e8:	6003      	str	r3, [r0, #0]
  4010ea:	e7ac      	b.n	401046 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010ec:	4a11      	ldr	r2, [pc, #68]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010ee:	4b0e      	ldr	r3, [pc, #56]	; (401128 <SystemCoreClockUpdate+0xf4>)
  4010f0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4010f2:	4b0c      	ldr	r3, [pc, #48]	; (401124 <SystemCoreClockUpdate+0xf0>)
  4010f4:	6a1b      	ldr	r3, [r3, #32]
  4010f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010fa:	2b10      	cmp	r3, #16
  4010fc:	d005      	beq.n	40110a <SystemCoreClockUpdate+0xd6>
  4010fe:	2b20      	cmp	r3, #32
  401100:	d1e0      	bne.n	4010c4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401102:	4a0b      	ldr	r2, [pc, #44]	; (401130 <SystemCoreClockUpdate+0xfc>)
  401104:	4b08      	ldr	r3, [pc, #32]	; (401128 <SystemCoreClockUpdate+0xf4>)
  401106:	601a      	str	r2, [r3, #0]
          break;
  401108:	e7dc      	b.n	4010c4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40110a:	4a0b      	ldr	r2, [pc, #44]	; (401138 <SystemCoreClockUpdate+0x104>)
  40110c:	4b06      	ldr	r3, [pc, #24]	; (401128 <SystemCoreClockUpdate+0xf4>)
  40110e:	601a      	str	r2, [r3, #0]
          break;
  401110:	e7d8      	b.n	4010c4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401112:	4a05      	ldr	r2, [pc, #20]	; (401128 <SystemCoreClockUpdate+0xf4>)
  401114:	6813      	ldr	r3, [r2, #0]
  401116:	4909      	ldr	r1, [pc, #36]	; (40113c <SystemCoreClockUpdate+0x108>)
  401118:	fba1 1303 	umull	r1, r3, r1, r3
  40111c:	085b      	lsrs	r3, r3, #1
  40111e:	6013      	str	r3, [r2, #0]
  401120:	4770      	bx	lr
  401122:	bf00      	nop
  401124:	400e0600 	.word	0x400e0600
  401128:	2040000c 	.word	0x2040000c
  40112c:	400e1810 	.word	0x400e1810
  401130:	00b71b00 	.word	0x00b71b00
  401134:	003d0900 	.word	0x003d0900
  401138:	007a1200 	.word	0x007a1200
  40113c:	aaaaaaab 	.word	0xaaaaaaab

00401140 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401140:	4b16      	ldr	r3, [pc, #88]	; (40119c <system_init_flash+0x5c>)
  401142:	4298      	cmp	r0, r3
  401144:	d913      	bls.n	40116e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401146:	4b16      	ldr	r3, [pc, #88]	; (4011a0 <system_init_flash+0x60>)
  401148:	4298      	cmp	r0, r3
  40114a:	d915      	bls.n	401178 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40114c:	4b15      	ldr	r3, [pc, #84]	; (4011a4 <system_init_flash+0x64>)
  40114e:	4298      	cmp	r0, r3
  401150:	d916      	bls.n	401180 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401152:	4b15      	ldr	r3, [pc, #84]	; (4011a8 <system_init_flash+0x68>)
  401154:	4298      	cmp	r0, r3
  401156:	d917      	bls.n	401188 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401158:	4b14      	ldr	r3, [pc, #80]	; (4011ac <system_init_flash+0x6c>)
  40115a:	4298      	cmp	r0, r3
  40115c:	d918      	bls.n	401190 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40115e:	4b14      	ldr	r3, [pc, #80]	; (4011b0 <system_init_flash+0x70>)
  401160:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401162:	bf94      	ite	ls
  401164:	4a13      	ldrls	r2, [pc, #76]	; (4011b4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401166:	4a14      	ldrhi	r2, [pc, #80]	; (4011b8 <system_init_flash+0x78>)
  401168:	4b14      	ldr	r3, [pc, #80]	; (4011bc <system_init_flash+0x7c>)
  40116a:	601a      	str	r2, [r3, #0]
  40116c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40116e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401172:	4b12      	ldr	r3, [pc, #72]	; (4011bc <system_init_flash+0x7c>)
  401174:	601a      	str	r2, [r3, #0]
  401176:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401178:	4a11      	ldr	r2, [pc, #68]	; (4011c0 <system_init_flash+0x80>)
  40117a:	4b10      	ldr	r3, [pc, #64]	; (4011bc <system_init_flash+0x7c>)
  40117c:	601a      	str	r2, [r3, #0]
  40117e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401180:	4a10      	ldr	r2, [pc, #64]	; (4011c4 <system_init_flash+0x84>)
  401182:	4b0e      	ldr	r3, [pc, #56]	; (4011bc <system_init_flash+0x7c>)
  401184:	601a      	str	r2, [r3, #0]
  401186:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401188:	4a0f      	ldr	r2, [pc, #60]	; (4011c8 <system_init_flash+0x88>)
  40118a:	4b0c      	ldr	r3, [pc, #48]	; (4011bc <system_init_flash+0x7c>)
  40118c:	601a      	str	r2, [r3, #0]
  40118e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401190:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401194:	4b09      	ldr	r3, [pc, #36]	; (4011bc <system_init_flash+0x7c>)
  401196:	601a      	str	r2, [r3, #0]
  401198:	4770      	bx	lr
  40119a:	bf00      	nop
  40119c:	015ef3bf 	.word	0x015ef3bf
  4011a0:	02bde77f 	.word	0x02bde77f
  4011a4:	041cdb3f 	.word	0x041cdb3f
  4011a8:	057bceff 	.word	0x057bceff
  4011ac:	06dac2bf 	.word	0x06dac2bf
  4011b0:	0839b67f 	.word	0x0839b67f
  4011b4:	04000500 	.word	0x04000500
  4011b8:	04000600 	.word	0x04000600
  4011bc:	400e0c00 	.word	0x400e0c00
  4011c0:	04000100 	.word	0x04000100
  4011c4:	04000200 	.word	0x04000200
  4011c8:	04000300 	.word	0x04000300

004011cc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4011cc:	4b0a      	ldr	r3, [pc, #40]	; (4011f8 <_sbrk+0x2c>)
  4011ce:	681b      	ldr	r3, [r3, #0]
  4011d0:	b153      	cbz	r3, 4011e8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4011d2:	4b09      	ldr	r3, [pc, #36]	; (4011f8 <_sbrk+0x2c>)
  4011d4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4011d6:	181a      	adds	r2, r3, r0
  4011d8:	4908      	ldr	r1, [pc, #32]	; (4011fc <_sbrk+0x30>)
  4011da:	4291      	cmp	r1, r2
  4011dc:	db08      	blt.n	4011f0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011de:	4610      	mov	r0, r2
  4011e0:	4a05      	ldr	r2, [pc, #20]	; (4011f8 <_sbrk+0x2c>)
  4011e2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4011e4:	4618      	mov	r0, r3
  4011e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4011e8:	4a05      	ldr	r2, [pc, #20]	; (401200 <_sbrk+0x34>)
  4011ea:	4b03      	ldr	r3, [pc, #12]	; (4011f8 <_sbrk+0x2c>)
  4011ec:	601a      	str	r2, [r3, #0]
  4011ee:	e7f0      	b.n	4011d2 <_sbrk+0x6>
		return (caddr_t) -1;	
  4011f0:	f04f 30ff 	mov.w	r0, #4294967295
}
  4011f4:	4770      	bx	lr
  4011f6:	bf00      	nop
  4011f8:	20400a54 	.word	0x20400a54
  4011fc:	2045fffc 	.word	0x2045fffc
  401200:	20402f18 	.word	0x20402f18

00401204 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401204:	f04f 30ff 	mov.w	r0, #4294967295
  401208:	4770      	bx	lr

0040120a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40120a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40120e:	604b      	str	r3, [r1, #4]

	return 0;
}
  401210:	2000      	movs	r0, #0
  401212:	4770      	bx	lr

00401214 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401214:	2001      	movs	r0, #1
  401216:	4770      	bx	lr

00401218 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401218:	2000      	movs	r0, #0
  40121a:	4770      	bx	lr

0040121c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40121c:	f100 0308 	add.w	r3, r0, #8
  401220:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401222:	f04f 32ff 	mov.w	r2, #4294967295
  401226:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401228:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40122a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40122c:	2300      	movs	r3, #0
  40122e:	6003      	str	r3, [r0, #0]
  401230:	4770      	bx	lr

00401232 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401232:	2300      	movs	r3, #0
  401234:	6103      	str	r3, [r0, #16]
  401236:	4770      	bx	lr

00401238 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401238:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40123a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  40123c:	689a      	ldr	r2, [r3, #8]
  40123e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401240:	689a      	ldr	r2, [r3, #8]
  401242:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401244:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401246:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401248:	6803      	ldr	r3, [r0, #0]
  40124a:	3301      	adds	r3, #1
  40124c:	6003      	str	r3, [r0, #0]
  40124e:	4770      	bx	lr

00401250 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401250:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401252:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401254:	f1b5 3fff 	cmp.w	r5, #4294967295
  401258:	d002      	beq.n	401260 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40125a:	f100 0208 	add.w	r2, r0, #8
  40125e:	e002      	b.n	401266 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401260:	6902      	ldr	r2, [r0, #16]
  401262:	e004      	b.n	40126e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401264:	461a      	mov	r2, r3
  401266:	6853      	ldr	r3, [r2, #4]
  401268:	681c      	ldr	r4, [r3, #0]
  40126a:	42a5      	cmp	r5, r4
  40126c:	d2fa      	bcs.n	401264 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40126e:	6853      	ldr	r3, [r2, #4]
  401270:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401272:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401274:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401276:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401278:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40127a:	6803      	ldr	r3, [r0, #0]
  40127c:	3301      	adds	r3, #1
  40127e:	6003      	str	r3, [r0, #0]
}
  401280:	bc30      	pop	{r4, r5}
  401282:	4770      	bx	lr

00401284 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401284:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401286:	6842      	ldr	r2, [r0, #4]
  401288:	6881      	ldr	r1, [r0, #8]
  40128a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40128c:	6882      	ldr	r2, [r0, #8]
  40128e:	6841      	ldr	r1, [r0, #4]
  401290:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401292:	685a      	ldr	r2, [r3, #4]
  401294:	4290      	cmp	r0, r2
  401296:	d005      	beq.n	4012a4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401298:	2200      	movs	r2, #0
  40129a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40129c:	6818      	ldr	r0, [r3, #0]
  40129e:	3801      	subs	r0, #1
  4012a0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4012a2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4012a4:	6882      	ldr	r2, [r0, #8]
  4012a6:	605a      	str	r2, [r3, #4]
  4012a8:	e7f6      	b.n	401298 <uxListRemove+0x14>
	...

004012ac <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4012ac:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <prvTaskExitError+0x38>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012b4:	d00a      	beq.n	4012cc <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4012b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ba:	b672      	cpsid	i
  4012bc:	f383 8811 	msr	BASEPRI, r3
  4012c0:	f3bf 8f6f 	isb	sy
  4012c4:	f3bf 8f4f 	dsb	sy
  4012c8:	b662      	cpsie	i
  4012ca:	e7fe      	b.n	4012ca <prvTaskExitError+0x1e>
  4012cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012d0:	b672      	cpsid	i
  4012d2:	f383 8811 	msr	BASEPRI, r3
  4012d6:	f3bf 8f6f 	isb	sy
  4012da:	f3bf 8f4f 	dsb	sy
  4012de:	b662      	cpsie	i
  4012e0:	e7fe      	b.n	4012e0 <prvTaskExitError+0x34>
  4012e2:	bf00      	nop
  4012e4:	20400010 	.word	0x20400010

004012e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4012e8:	4806      	ldr	r0, [pc, #24]	; (401304 <prvPortStartFirstTask+0x1c>)
  4012ea:	6800      	ldr	r0, [r0, #0]
  4012ec:	6800      	ldr	r0, [r0, #0]
  4012ee:	f380 8808 	msr	MSP, r0
  4012f2:	b662      	cpsie	i
  4012f4:	b661      	cpsie	f
  4012f6:	f3bf 8f4f 	dsb	sy
  4012fa:	f3bf 8f6f 	isb	sy
  4012fe:	df00      	svc	0
  401300:	bf00      	nop
  401302:	0000      	.short	0x0000
  401304:	e000ed08 	.word	0xe000ed08

00401308 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401308:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401318 <vPortEnableVFP+0x10>
  40130c:	6801      	ldr	r1, [r0, #0]
  40130e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401312:	6001      	str	r1, [r0, #0]
  401314:	4770      	bx	lr
  401316:	0000      	.short	0x0000
  401318:	e000ed88 	.word	0xe000ed88

0040131c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40131c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401320:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401324:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401328:	4b05      	ldr	r3, [pc, #20]	; (401340 <pxPortInitialiseStack+0x24>)
  40132a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40132e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401332:	f06f 0302 	mvn.w	r3, #2
  401336:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40133a:	3844      	subs	r0, #68	; 0x44
  40133c:	4770      	bx	lr
  40133e:	bf00      	nop
  401340:	004012ad 	.word	0x004012ad

00401344 <SVC_Handler>:
	__asm volatile (
  401344:	4b06      	ldr	r3, [pc, #24]	; (401360 <pxCurrentTCBConst2>)
  401346:	6819      	ldr	r1, [r3, #0]
  401348:	6808      	ldr	r0, [r1, #0]
  40134a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40134e:	f380 8809 	msr	PSP, r0
  401352:	f3bf 8f6f 	isb	sy
  401356:	f04f 0000 	mov.w	r0, #0
  40135a:	f380 8811 	msr	BASEPRI, r0
  40135e:	4770      	bx	lr

00401360 <pxCurrentTCBConst2>:
  401360:	20400a60 	.word	0x20400a60
  401364:	4770      	bx	lr
  401366:	bf00      	nop

00401368 <vPortEnterCritical>:
  401368:	f04f 0380 	mov.w	r3, #128	; 0x80
  40136c:	b672      	cpsid	i
  40136e:	f383 8811 	msr	BASEPRI, r3
  401372:	f3bf 8f6f 	isb	sy
  401376:	f3bf 8f4f 	dsb	sy
  40137a:	b662      	cpsie	i
	uxCriticalNesting++;
  40137c:	4a0b      	ldr	r2, [pc, #44]	; (4013ac <vPortEnterCritical+0x44>)
  40137e:	6813      	ldr	r3, [r2, #0]
  401380:	3301      	adds	r3, #1
  401382:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401384:	2b01      	cmp	r3, #1
  401386:	d10f      	bne.n	4013a8 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401388:	4b09      	ldr	r3, [pc, #36]	; (4013b0 <vPortEnterCritical+0x48>)
  40138a:	681b      	ldr	r3, [r3, #0]
  40138c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401390:	d00a      	beq.n	4013a8 <vPortEnterCritical+0x40>
  401392:	f04f 0380 	mov.w	r3, #128	; 0x80
  401396:	b672      	cpsid	i
  401398:	f383 8811 	msr	BASEPRI, r3
  40139c:	f3bf 8f6f 	isb	sy
  4013a0:	f3bf 8f4f 	dsb	sy
  4013a4:	b662      	cpsie	i
  4013a6:	e7fe      	b.n	4013a6 <vPortEnterCritical+0x3e>
  4013a8:	4770      	bx	lr
  4013aa:	bf00      	nop
  4013ac:	20400010 	.word	0x20400010
  4013b0:	e000ed04 	.word	0xe000ed04

004013b4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4013b4:	4b0a      	ldr	r3, [pc, #40]	; (4013e0 <vPortExitCritical+0x2c>)
  4013b6:	681b      	ldr	r3, [r3, #0]
  4013b8:	b953      	cbnz	r3, 4013d0 <vPortExitCritical+0x1c>
  4013ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013be:	b672      	cpsid	i
  4013c0:	f383 8811 	msr	BASEPRI, r3
  4013c4:	f3bf 8f6f 	isb	sy
  4013c8:	f3bf 8f4f 	dsb	sy
  4013cc:	b662      	cpsie	i
  4013ce:	e7fe      	b.n	4013ce <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4013d0:	3b01      	subs	r3, #1
  4013d2:	4a03      	ldr	r2, [pc, #12]	; (4013e0 <vPortExitCritical+0x2c>)
  4013d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4013d6:	b90b      	cbnz	r3, 4013dc <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4013d8:	f383 8811 	msr	BASEPRI, r3
  4013dc:	4770      	bx	lr
  4013de:	bf00      	nop
  4013e0:	20400010 	.word	0x20400010

004013e4 <PendSV_Handler>:
	__asm volatile
  4013e4:	f3ef 8009 	mrs	r0, PSP
  4013e8:	f3bf 8f6f 	isb	sy
  4013ec:	4b15      	ldr	r3, [pc, #84]	; (401444 <pxCurrentTCBConst>)
  4013ee:	681a      	ldr	r2, [r3, #0]
  4013f0:	f01e 0f10 	tst.w	lr, #16
  4013f4:	bf08      	it	eq
  4013f6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4013fa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013fe:	6010      	str	r0, [r2, #0]
  401400:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401404:	f04f 0080 	mov.w	r0, #128	; 0x80
  401408:	b672      	cpsid	i
  40140a:	f380 8811 	msr	BASEPRI, r0
  40140e:	f3bf 8f4f 	dsb	sy
  401412:	f3bf 8f6f 	isb	sy
  401416:	b662      	cpsie	i
  401418:	f001 f8fe 	bl	402618 <vTaskSwitchContext>
  40141c:	f04f 0000 	mov.w	r0, #0
  401420:	f380 8811 	msr	BASEPRI, r0
  401424:	bc08      	pop	{r3}
  401426:	6819      	ldr	r1, [r3, #0]
  401428:	6808      	ldr	r0, [r1, #0]
  40142a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40142e:	f01e 0f10 	tst.w	lr, #16
  401432:	bf08      	it	eq
  401434:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401438:	f380 8809 	msr	PSP, r0
  40143c:	f3bf 8f6f 	isb	sy
  401440:	4770      	bx	lr
  401442:	bf00      	nop

00401444 <pxCurrentTCBConst>:
  401444:	20400a60 	.word	0x20400a60
  401448:	4770      	bx	lr
  40144a:	bf00      	nop

0040144c <SysTick_Handler>:
{
  40144c:	b508      	push	{r3, lr}
	__asm volatile
  40144e:	f3ef 8311 	mrs	r3, BASEPRI
  401452:	f04f 0280 	mov.w	r2, #128	; 0x80
  401456:	b672      	cpsid	i
  401458:	f382 8811 	msr	BASEPRI, r2
  40145c:	f3bf 8f6f 	isb	sy
  401460:	f3bf 8f4f 	dsb	sy
  401464:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401466:	4b05      	ldr	r3, [pc, #20]	; (40147c <SysTick_Handler+0x30>)
  401468:	4798      	blx	r3
  40146a:	b118      	cbz	r0, 401474 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40146c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401470:	4b03      	ldr	r3, [pc, #12]	; (401480 <SysTick_Handler+0x34>)
  401472:	601a      	str	r2, [r3, #0]
	__asm volatile
  401474:	2300      	movs	r3, #0
  401476:	f383 8811 	msr	BASEPRI, r3
  40147a:	bd08      	pop	{r3, pc}
  40147c:	00402285 	.word	0x00402285
  401480:	e000ed04 	.word	0xe000ed04

00401484 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401484:	4a03      	ldr	r2, [pc, #12]	; (401494 <vPortSetupTimerInterrupt+0x10>)
  401486:	4b04      	ldr	r3, [pc, #16]	; (401498 <vPortSetupTimerInterrupt+0x14>)
  401488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40148a:	2207      	movs	r2, #7
  40148c:	3b04      	subs	r3, #4
  40148e:	601a      	str	r2, [r3, #0]
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	000927bf 	.word	0x000927bf
  401498:	e000e014 	.word	0xe000e014

0040149c <xPortStartScheduler>:
{
  40149c:	b500      	push	{lr}
  40149e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4014a0:	4b25      	ldr	r3, [pc, #148]	; (401538 <xPortStartScheduler+0x9c>)
  4014a2:	781a      	ldrb	r2, [r3, #0]
  4014a4:	b2d2      	uxtb	r2, r2
  4014a6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4014a8:	22ff      	movs	r2, #255	; 0xff
  4014aa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4014ac:	781b      	ldrb	r3, [r3, #0]
  4014ae:	b2db      	uxtb	r3, r3
  4014b0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4014b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014bc:	4a1f      	ldr	r2, [pc, #124]	; (40153c <xPortStartScheduler+0xa0>)
  4014be:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4014c0:	2207      	movs	r2, #7
  4014c2:	4b1f      	ldr	r3, [pc, #124]	; (401540 <xPortStartScheduler+0xa4>)
  4014c4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4014c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4014ca:	f013 0f80 	tst.w	r3, #128	; 0x80
  4014ce:	d010      	beq.n	4014f2 <xPortStartScheduler+0x56>
  4014d0:	2206      	movs	r2, #6
  4014d2:	e000      	b.n	4014d6 <xPortStartScheduler+0x3a>
  4014d4:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4014d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4014da:	005b      	lsls	r3, r3, #1
  4014dc:	b2db      	uxtb	r3, r3
  4014de:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4014e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4014e6:	1e51      	subs	r1, r2, #1
  4014e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4014ec:	d1f2      	bne.n	4014d4 <xPortStartScheduler+0x38>
  4014ee:	4b14      	ldr	r3, [pc, #80]	; (401540 <xPortStartScheduler+0xa4>)
  4014f0:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4014f2:	4a13      	ldr	r2, [pc, #76]	; (401540 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4014f4:	6813      	ldr	r3, [r2, #0]
  4014f6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4014f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4014fc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4014fe:	9b01      	ldr	r3, [sp, #4]
  401500:	b2db      	uxtb	r3, r3
  401502:	4a0d      	ldr	r2, [pc, #52]	; (401538 <xPortStartScheduler+0x9c>)
  401504:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401506:	4b0f      	ldr	r3, [pc, #60]	; (401544 <xPortStartScheduler+0xa8>)
  401508:	681a      	ldr	r2, [r3, #0]
  40150a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40150e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401510:	681a      	ldr	r2, [r3, #0]
  401512:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401516:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401518:	4b0b      	ldr	r3, [pc, #44]	; (401548 <xPortStartScheduler+0xac>)
  40151a:	4798      	blx	r3
	uxCriticalNesting = 0;
  40151c:	2200      	movs	r2, #0
  40151e:	4b0b      	ldr	r3, [pc, #44]	; (40154c <xPortStartScheduler+0xb0>)
  401520:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401522:	4b0b      	ldr	r3, [pc, #44]	; (401550 <xPortStartScheduler+0xb4>)
  401524:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401526:	4a0b      	ldr	r2, [pc, #44]	; (401554 <xPortStartScheduler+0xb8>)
  401528:	6813      	ldr	r3, [r2, #0]
  40152a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40152e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401530:	4b09      	ldr	r3, [pc, #36]	; (401558 <xPortStartScheduler+0xbc>)
  401532:	4798      	blx	r3
	prvTaskExitError();
  401534:	4b09      	ldr	r3, [pc, #36]	; (40155c <xPortStartScheduler+0xc0>)
  401536:	4798      	blx	r3
  401538:	e000e400 	.word	0xe000e400
  40153c:	20400a58 	.word	0x20400a58
  401540:	20400a5c 	.word	0x20400a5c
  401544:	e000ed20 	.word	0xe000ed20
  401548:	00401485 	.word	0x00401485
  40154c:	20400010 	.word	0x20400010
  401550:	00401309 	.word	0x00401309
  401554:	e000ef34 	.word	0xe000ef34
  401558:	004012e9 	.word	0x004012e9
  40155c:	004012ad 	.word	0x004012ad

00401560 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401560:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401564:	2b0f      	cmp	r3, #15
  401566:	d911      	bls.n	40158c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401568:	4a12      	ldr	r2, [pc, #72]	; (4015b4 <vPortValidateInterruptPriority+0x54>)
  40156a:	5c9b      	ldrb	r3, [r3, r2]
  40156c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40156e:	4a12      	ldr	r2, [pc, #72]	; (4015b8 <vPortValidateInterruptPriority+0x58>)
  401570:	7812      	ldrb	r2, [r2, #0]
  401572:	429a      	cmp	r2, r3
  401574:	d90a      	bls.n	40158c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401576:	f04f 0380 	mov.w	r3, #128	; 0x80
  40157a:	b672      	cpsid	i
  40157c:	f383 8811 	msr	BASEPRI, r3
  401580:	f3bf 8f6f 	isb	sy
  401584:	f3bf 8f4f 	dsb	sy
  401588:	b662      	cpsie	i
  40158a:	e7fe      	b.n	40158a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40158c:	4b0b      	ldr	r3, [pc, #44]	; (4015bc <vPortValidateInterruptPriority+0x5c>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401594:	4a0a      	ldr	r2, [pc, #40]	; (4015c0 <vPortValidateInterruptPriority+0x60>)
  401596:	6812      	ldr	r2, [r2, #0]
  401598:	4293      	cmp	r3, r2
  40159a:	d90a      	bls.n	4015b2 <vPortValidateInterruptPriority+0x52>
  40159c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015a0:	b672      	cpsid	i
  4015a2:	f383 8811 	msr	BASEPRI, r3
  4015a6:	f3bf 8f6f 	isb	sy
  4015aa:	f3bf 8f4f 	dsb	sy
  4015ae:	b662      	cpsie	i
  4015b0:	e7fe      	b.n	4015b0 <vPortValidateInterruptPriority+0x50>
  4015b2:	4770      	bx	lr
  4015b4:	e000e3f0 	.word	0xe000e3f0
  4015b8:	20400a58 	.word	0x20400a58
  4015bc:	e000ed0c 	.word	0xe000ed0c
  4015c0:	20400a5c 	.word	0x20400a5c

004015c4 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4015c4:	b510      	push	{r4, lr}
  4015c6:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4015c8:	4b06      	ldr	r3, [pc, #24]	; (4015e4 <pvPortMalloc+0x20>)
  4015ca:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4015cc:	4620      	mov	r0, r4
  4015ce:	4b06      	ldr	r3, [pc, #24]	; (4015e8 <pvPortMalloc+0x24>)
  4015d0:	4798      	blx	r3
  4015d2:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4015d4:	4b05      	ldr	r3, [pc, #20]	; (4015ec <pvPortMalloc+0x28>)
  4015d6:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4015d8:	b10c      	cbz	r4, 4015de <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4015da:	4620      	mov	r0, r4
  4015dc:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  4015de:	4b04      	ldr	r3, [pc, #16]	; (4015f0 <pvPortMalloc+0x2c>)
  4015e0:	4798      	blx	r3
	return pvReturn;
  4015e2:	e7fa      	b.n	4015da <pvPortMalloc+0x16>
  4015e4:	00402269 	.word	0x00402269
  4015e8:	00404345 	.word	0x00404345
  4015ec:	004023d1 	.word	0x004023d1
  4015f0:	004032bb 	.word	0x004032bb

004015f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4015f4:	b148      	cbz	r0, 40160a <vPortFree+0x16>
{
  4015f6:	b510      	push	{r4, lr}
  4015f8:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4015fa:	4b04      	ldr	r3, [pc, #16]	; (40160c <vPortFree+0x18>)
  4015fc:	4798      	blx	r3
		{
			free( pv );
  4015fe:	4620      	mov	r0, r4
  401600:	4b03      	ldr	r3, [pc, #12]	; (401610 <vPortFree+0x1c>)
  401602:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401604:	4b03      	ldr	r3, [pc, #12]	; (401614 <vPortFree+0x20>)
  401606:	4798      	blx	r3
  401608:	bd10      	pop	{r4, pc}
  40160a:	4770      	bx	lr
  40160c:	00402269 	.word	0x00402269
  401610:	00404355 	.word	0x00404355
  401614:	004023d1 	.word	0x004023d1

00401618 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401618:	b538      	push	{r3, r4, r5, lr}
  40161a:	4604      	mov	r4, r0
  40161c:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40161e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401620:	b95a      	cbnz	r2, 40163a <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401622:	6803      	ldr	r3, [r0, #0]
  401624:	2b00      	cmp	r3, #0
  401626:	d12e      	bne.n	401686 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401628:	6840      	ldr	r0, [r0, #4]
  40162a:	4b1b      	ldr	r3, [pc, #108]	; (401698 <prvCopyDataToQueue+0x80>)
  40162c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40162e:	2300      	movs	r3, #0
  401630:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401634:	3301      	adds	r3, #1
  401636:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401638:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40163a:	b96d      	cbnz	r5, 401658 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40163c:	6880      	ldr	r0, [r0, #8]
  40163e:	4b17      	ldr	r3, [pc, #92]	; (40169c <prvCopyDataToQueue+0x84>)
  401640:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401642:	68a3      	ldr	r3, [r4, #8]
  401644:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401646:	4413      	add	r3, r2
  401648:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40164a:	6862      	ldr	r2, [r4, #4]
  40164c:	4293      	cmp	r3, r2
  40164e:	d31c      	bcc.n	40168a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401650:	6823      	ldr	r3, [r4, #0]
  401652:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401654:	2000      	movs	r0, #0
  401656:	e7ec      	b.n	401632 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401658:	68c0      	ldr	r0, [r0, #12]
  40165a:	4b10      	ldr	r3, [pc, #64]	; (40169c <prvCopyDataToQueue+0x84>)
  40165c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40165e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401660:	425b      	negs	r3, r3
  401662:	68e2      	ldr	r2, [r4, #12]
  401664:	441a      	add	r2, r3
  401666:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401668:	6821      	ldr	r1, [r4, #0]
  40166a:	428a      	cmp	r2, r1
  40166c:	d202      	bcs.n	401674 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40166e:	6862      	ldr	r2, [r4, #4]
  401670:	4413      	add	r3, r2
  401672:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401674:	2d02      	cmp	r5, #2
  401676:	d10a      	bne.n	40168e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40167a:	b153      	cbz	r3, 401692 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  40167c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40167e:	3b01      	subs	r3, #1
  401680:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401682:	2000      	movs	r0, #0
  401684:	e7d5      	b.n	401632 <prvCopyDataToQueue+0x1a>
  401686:	2000      	movs	r0, #0
  401688:	e7d3      	b.n	401632 <prvCopyDataToQueue+0x1a>
  40168a:	2000      	movs	r0, #0
  40168c:	e7d1      	b.n	401632 <prvCopyDataToQueue+0x1a>
  40168e:	2000      	movs	r0, #0
  401690:	e7cf      	b.n	401632 <prvCopyDataToQueue+0x1a>
  401692:	2000      	movs	r0, #0
  401694:	e7cd      	b.n	401632 <prvCopyDataToQueue+0x1a>
  401696:	bf00      	nop
  401698:	00402a19 	.word	0x00402a19
  40169c:	004048c5 	.word	0x004048c5

004016a0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4016a0:	b530      	push	{r4, r5, lr}
  4016a2:	b083      	sub	sp, #12
  4016a4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4016a6:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4016a8:	b174      	cbz	r4, 4016c8 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4016aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4016ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4016ae:	429a      	cmp	r2, r3
  4016b0:	d315      	bcc.n	4016de <prvNotifyQueueSetContainer+0x3e>
  4016b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016b6:	b672      	cpsid	i
  4016b8:	f383 8811 	msr	BASEPRI, r3
  4016bc:	f3bf 8f6f 	isb	sy
  4016c0:	f3bf 8f4f 	dsb	sy
  4016c4:	b662      	cpsie	i
  4016c6:	e7fe      	b.n	4016c6 <prvNotifyQueueSetContainer+0x26>
  4016c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016cc:	b672      	cpsid	i
  4016ce:	f383 8811 	msr	BASEPRI, r3
  4016d2:	f3bf 8f6f 	isb	sy
  4016d6:	f3bf 8f4f 	dsb	sy
  4016da:	b662      	cpsie	i
  4016dc:	e7fe      	b.n	4016dc <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4016de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4016e0:	4293      	cmp	r3, r2
  4016e2:	d803      	bhi.n	4016ec <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4016e4:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4016e6:	4628      	mov	r0, r5
  4016e8:	b003      	add	sp, #12
  4016ea:	bd30      	pop	{r4, r5, pc}
  4016ec:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4016ee:	a901      	add	r1, sp, #4
  4016f0:	4620      	mov	r0, r4
  4016f2:	4b0b      	ldr	r3, [pc, #44]	; (401720 <prvNotifyQueueSetContainer+0x80>)
  4016f4:	4798      	blx	r3
  4016f6:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4016f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016fe:	d10a      	bne.n	401716 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401700:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401702:	2b00      	cmp	r3, #0
  401704:	d0ef      	beq.n	4016e6 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401706:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40170a:	4b06      	ldr	r3, [pc, #24]	; (401724 <prvNotifyQueueSetContainer+0x84>)
  40170c:	4798      	blx	r3
  40170e:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401710:	bf18      	it	ne
  401712:	2501      	movne	r5, #1
  401714:	e7e7      	b.n	4016e6 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401716:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401718:	3301      	adds	r3, #1
  40171a:	64a3      	str	r3, [r4, #72]	; 0x48
  40171c:	e7e3      	b.n	4016e6 <prvNotifyQueueSetContainer+0x46>
  40171e:	bf00      	nop
  401720:	00401619 	.word	0x00401619
  401724:	004027ed 	.word	0x004027ed

00401728 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401728:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40172a:	b172      	cbz	r2, 40174a <prvCopyDataFromQueue+0x22>
{
  40172c:	b510      	push	{r4, lr}
  40172e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401730:	68c4      	ldr	r4, [r0, #12]
  401732:	4414      	add	r4, r2
  401734:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401736:	6840      	ldr	r0, [r0, #4]
  401738:	4284      	cmp	r4, r0
  40173a:	d301      	bcc.n	401740 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  40173c:	6818      	ldr	r0, [r3, #0]
  40173e:	60d8      	str	r0, [r3, #12]
  401740:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401742:	68d9      	ldr	r1, [r3, #12]
  401744:	4b01      	ldr	r3, [pc, #4]	; (40174c <prvCopyDataFromQueue+0x24>)
  401746:	4798      	blx	r3
  401748:	bd10      	pop	{r4, pc}
  40174a:	4770      	bx	lr
  40174c:	004048c5 	.word	0x004048c5

00401750 <prvUnlockQueue>:
{
  401750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401752:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401754:	4b22      	ldr	r3, [pc, #136]	; (4017e0 <prvUnlockQueue+0x90>)
  401756:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401758:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40175a:	2b00      	cmp	r3, #0
  40175c:	dd1b      	ble.n	401796 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40175e:	4d21      	ldr	r5, [pc, #132]	; (4017e4 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401760:	4f21      	ldr	r7, [pc, #132]	; (4017e8 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401762:	4e22      	ldr	r6, [pc, #136]	; (4017ec <prvUnlockQueue+0x9c>)
  401764:	e00b      	b.n	40177e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401766:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401768:	b1ab      	cbz	r3, 401796 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40176a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40176e:	47b0      	blx	r6
  401770:	b978      	cbnz	r0, 401792 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401772:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401774:	3b01      	subs	r3, #1
  401776:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40177a:	2b00      	cmp	r3, #0
  40177c:	dd0b      	ble.n	401796 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40177e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401780:	2b00      	cmp	r3, #0
  401782:	d0f0      	beq.n	401766 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401784:	2100      	movs	r1, #0
  401786:	4620      	mov	r0, r4
  401788:	47a8      	blx	r5
  40178a:	2801      	cmp	r0, #1
  40178c:	d1f1      	bne.n	401772 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40178e:	47b8      	blx	r7
  401790:	e7ef      	b.n	401772 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401792:	47b8      	blx	r7
  401794:	e7ed      	b.n	401772 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401796:	f04f 33ff 	mov.w	r3, #4294967295
  40179a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  40179c:	4b14      	ldr	r3, [pc, #80]	; (4017f0 <prvUnlockQueue+0xa0>)
  40179e:	4798      	blx	r3
	taskENTER_CRITICAL();
  4017a0:	4b0f      	ldr	r3, [pc, #60]	; (4017e0 <prvUnlockQueue+0x90>)
  4017a2:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4017a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	dd14      	ble.n	4017d4 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4017aa:	6923      	ldr	r3, [r4, #16]
  4017ac:	b193      	cbz	r3, 4017d4 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4017ae:	f104 0610 	add.w	r6, r4, #16
  4017b2:	4d0e      	ldr	r5, [pc, #56]	; (4017ec <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4017b4:	4f0c      	ldr	r7, [pc, #48]	; (4017e8 <prvUnlockQueue+0x98>)
  4017b6:	e007      	b.n	4017c8 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4017b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4017ba:	3b01      	subs	r3, #1
  4017bc:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4017be:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	dd07      	ble.n	4017d4 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4017c4:	6923      	ldr	r3, [r4, #16]
  4017c6:	b12b      	cbz	r3, 4017d4 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4017c8:	4630      	mov	r0, r6
  4017ca:	47a8      	blx	r5
  4017cc:	2800      	cmp	r0, #0
  4017ce:	d0f3      	beq.n	4017b8 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4017d0:	47b8      	blx	r7
  4017d2:	e7f1      	b.n	4017b8 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4017d4:	f04f 33ff 	mov.w	r3, #4294967295
  4017d8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4017da:	4b05      	ldr	r3, [pc, #20]	; (4017f0 <prvUnlockQueue+0xa0>)
  4017dc:	4798      	blx	r3
  4017de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017e0:	00401369 	.word	0x00401369
  4017e4:	004016a1 	.word	0x004016a1
  4017e8:	00402949 	.word	0x00402949
  4017ec:	004027ed 	.word	0x004027ed
  4017f0:	004013b5 	.word	0x004013b5

004017f4 <xQueueGenericReset>:
{
  4017f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4017f6:	b308      	cbz	r0, 40183c <xQueueGenericReset+0x48>
  4017f8:	4604      	mov	r4, r0
  4017fa:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4017fc:	4b1d      	ldr	r3, [pc, #116]	; (401874 <xQueueGenericReset+0x80>)
  4017fe:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401800:	6822      	ldr	r2, [r4, #0]
  401802:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401806:	fb03 f301 	mul.w	r3, r3, r1
  40180a:	18d0      	adds	r0, r2, r3
  40180c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  40180e:	2000      	movs	r0, #0
  401810:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401812:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401814:	1a5b      	subs	r3, r3, r1
  401816:	4413      	add	r3, r2
  401818:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40181a:	f04f 33ff 	mov.w	r3, #4294967295
  40181e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401820:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401822:	b9fd      	cbnz	r5, 401864 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401824:	6923      	ldr	r3, [r4, #16]
  401826:	b12b      	cbz	r3, 401834 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401828:	f104 0010 	add.w	r0, r4, #16
  40182c:	4b12      	ldr	r3, [pc, #72]	; (401878 <xQueueGenericReset+0x84>)
  40182e:	4798      	blx	r3
  401830:	2801      	cmp	r0, #1
  401832:	d00e      	beq.n	401852 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401834:	4b11      	ldr	r3, [pc, #68]	; (40187c <xQueueGenericReset+0x88>)
  401836:	4798      	blx	r3
}
  401838:	2001      	movs	r0, #1
  40183a:	bd38      	pop	{r3, r4, r5, pc}
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401856:	4b0a      	ldr	r3, [pc, #40]	; (401880 <xQueueGenericReset+0x8c>)
  401858:	601a      	str	r2, [r3, #0]
  40185a:	f3bf 8f4f 	dsb	sy
  40185e:	f3bf 8f6f 	isb	sy
  401862:	e7e7      	b.n	401834 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401864:	f104 0010 	add.w	r0, r4, #16
  401868:	4d06      	ldr	r5, [pc, #24]	; (401884 <xQueueGenericReset+0x90>)
  40186a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40186c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401870:	47a8      	blx	r5
  401872:	e7df      	b.n	401834 <xQueueGenericReset+0x40>
  401874:	00401369 	.word	0x00401369
  401878:	004027ed 	.word	0x004027ed
  40187c:	004013b5 	.word	0x004013b5
  401880:	e000ed04 	.word	0xe000ed04
  401884:	0040121d 	.word	0x0040121d

00401888 <xQueueGenericCreate>:
{
  401888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40188a:	b950      	cbnz	r0, 4018a2 <xQueueGenericCreate+0x1a>
  40188c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401890:	b672      	cpsid	i
  401892:	f383 8811 	msr	BASEPRI, r3
  401896:	f3bf 8f6f 	isb	sy
  40189a:	f3bf 8f4f 	dsb	sy
  40189e:	b662      	cpsie	i
  4018a0:	e7fe      	b.n	4018a0 <xQueueGenericCreate+0x18>
  4018a2:	4606      	mov	r6, r0
  4018a4:	4617      	mov	r7, r2
  4018a6:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4018a8:	b189      	cbz	r1, 4018ce <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018aa:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4018ae:	3059      	adds	r0, #89	; 0x59
  4018b0:	4b12      	ldr	r3, [pc, #72]	; (4018fc <xQueueGenericCreate+0x74>)
  4018b2:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4018b4:	4604      	mov	r4, r0
  4018b6:	b9e8      	cbnz	r0, 4018f4 <xQueueGenericCreate+0x6c>
  4018b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018bc:	b672      	cpsid	i
  4018be:	f383 8811 	msr	BASEPRI, r3
  4018c2:	f3bf 8f6f 	isb	sy
  4018c6:	f3bf 8f4f 	dsb	sy
  4018ca:	b662      	cpsie	i
  4018cc:	e7fe      	b.n	4018cc <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4018ce:	2058      	movs	r0, #88	; 0x58
  4018d0:	4b0a      	ldr	r3, [pc, #40]	; (4018fc <xQueueGenericCreate+0x74>)
  4018d2:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4018d4:	4604      	mov	r4, r0
  4018d6:	2800      	cmp	r0, #0
  4018d8:	d0ee      	beq.n	4018b8 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4018da:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4018dc:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4018de:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4018e0:	2101      	movs	r1, #1
  4018e2:	4620      	mov	r0, r4
  4018e4:	4b06      	ldr	r3, [pc, #24]	; (401900 <xQueueGenericCreate+0x78>)
  4018e6:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4018e8:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4018ec:	2300      	movs	r3, #0
  4018ee:	6563      	str	r3, [r4, #84]	; 0x54
}
  4018f0:	4620      	mov	r0, r4
  4018f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4018f4:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4018f8:	6003      	str	r3, [r0, #0]
  4018fa:	e7ef      	b.n	4018dc <xQueueGenericCreate+0x54>
  4018fc:	004015c5 	.word	0x004015c5
  401900:	004017f5 	.word	0x004017f5

00401904 <xQueueGenericSend>:
{
  401904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401908:	b085      	sub	sp, #20
  40190a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40190c:	b1b8      	cbz	r0, 40193e <xQueueGenericSend+0x3a>
  40190e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401910:	b301      	cbz	r1, 401954 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401912:	2b02      	cmp	r3, #2
  401914:	d02c      	beq.n	401970 <xQueueGenericSend+0x6c>
  401916:	461d      	mov	r5, r3
  401918:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40191a:	4b66      	ldr	r3, [pc, #408]	; (401ab4 <xQueueGenericSend+0x1b0>)
  40191c:	4798      	blx	r3
  40191e:	2800      	cmp	r0, #0
  401920:	d134      	bne.n	40198c <xQueueGenericSend+0x88>
  401922:	9b01      	ldr	r3, [sp, #4]
  401924:	2b00      	cmp	r3, #0
  401926:	d038      	beq.n	40199a <xQueueGenericSend+0x96>
  401928:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192c:	b672      	cpsid	i
  40192e:	f383 8811 	msr	BASEPRI, r3
  401932:	f3bf 8f6f 	isb	sy
  401936:	f3bf 8f4f 	dsb	sy
  40193a:	b662      	cpsie	i
  40193c:	e7fe      	b.n	40193c <xQueueGenericSend+0x38>
  40193e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401942:	b672      	cpsid	i
  401944:	f383 8811 	msr	BASEPRI, r3
  401948:	f3bf 8f6f 	isb	sy
  40194c:	f3bf 8f4f 	dsb	sy
  401950:	b662      	cpsie	i
  401952:	e7fe      	b.n	401952 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401954:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401956:	2a00      	cmp	r2, #0
  401958:	d0db      	beq.n	401912 <xQueueGenericSend+0xe>
  40195a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40195e:	b672      	cpsid	i
  401960:	f383 8811 	msr	BASEPRI, r3
  401964:	f3bf 8f6f 	isb	sy
  401968:	f3bf 8f4f 	dsb	sy
  40196c:	b662      	cpsie	i
  40196e:	e7fe      	b.n	40196e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401970:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401972:	2a01      	cmp	r2, #1
  401974:	d0cf      	beq.n	401916 <xQueueGenericSend+0x12>
  401976:	f04f 0380 	mov.w	r3, #128	; 0x80
  40197a:	b672      	cpsid	i
  40197c:	f383 8811 	msr	BASEPRI, r3
  401980:	f3bf 8f6f 	isb	sy
  401984:	f3bf 8f4f 	dsb	sy
  401988:	b662      	cpsie	i
  40198a:	e7fe      	b.n	40198a <xQueueGenericSend+0x86>
  40198c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40198e:	4e4a      	ldr	r6, [pc, #296]	; (401ab8 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401990:	f8df a150 	ldr.w	sl, [pc, #336]	; 401ae4 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401994:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401ac4 <xQueueGenericSend+0x1c0>
  401998:	e042      	b.n	401a20 <xQueueGenericSend+0x11c>
  40199a:	2700      	movs	r7, #0
  40199c:	e7f7      	b.n	40198e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40199e:	462a      	mov	r2, r5
  4019a0:	4641      	mov	r1, r8
  4019a2:	4620      	mov	r0, r4
  4019a4:	4b45      	ldr	r3, [pc, #276]	; (401abc <xQueueGenericSend+0x1b8>)
  4019a6:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4019a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019aa:	b19b      	cbz	r3, 4019d4 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4019ac:	4629      	mov	r1, r5
  4019ae:	4620      	mov	r0, r4
  4019b0:	4b43      	ldr	r3, [pc, #268]	; (401ac0 <xQueueGenericSend+0x1bc>)
  4019b2:	4798      	blx	r3
  4019b4:	2801      	cmp	r0, #1
  4019b6:	d107      	bne.n	4019c8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4019b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019bc:	4b41      	ldr	r3, [pc, #260]	; (401ac4 <xQueueGenericSend+0x1c0>)
  4019be:	601a      	str	r2, [r3, #0]
  4019c0:	f3bf 8f4f 	dsb	sy
  4019c4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4019c8:	4b3f      	ldr	r3, [pc, #252]	; (401ac8 <xQueueGenericSend+0x1c4>)
  4019ca:	4798      	blx	r3
				return pdPASS;
  4019cc:	2001      	movs	r0, #1
}
  4019ce:	b005      	add	sp, #20
  4019d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019d6:	b173      	cbz	r3, 4019f6 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4019d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019dc:	4b3b      	ldr	r3, [pc, #236]	; (401acc <xQueueGenericSend+0x1c8>)
  4019de:	4798      	blx	r3
  4019e0:	2801      	cmp	r0, #1
  4019e2:	d1f1      	bne.n	4019c8 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4019e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019e8:	4b36      	ldr	r3, [pc, #216]	; (401ac4 <xQueueGenericSend+0x1c0>)
  4019ea:	601a      	str	r2, [r3, #0]
  4019ec:	f3bf 8f4f 	dsb	sy
  4019f0:	f3bf 8f6f 	isb	sy
  4019f4:	e7e8      	b.n	4019c8 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4019f6:	2800      	cmp	r0, #0
  4019f8:	d0e6      	beq.n	4019c8 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4019fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019fe:	4b31      	ldr	r3, [pc, #196]	; (401ac4 <xQueueGenericSend+0x1c0>)
  401a00:	601a      	str	r2, [r3, #0]
  401a02:	f3bf 8f4f 	dsb	sy
  401a06:	f3bf 8f6f 	isb	sy
  401a0a:	e7dd      	b.n	4019c8 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401a0c:	4b2e      	ldr	r3, [pc, #184]	; (401ac8 <xQueueGenericSend+0x1c4>)
  401a0e:	4798      	blx	r3
					return errQUEUE_FULL;
  401a10:	2000      	movs	r0, #0
  401a12:	e7dc      	b.n	4019ce <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401a14:	4620      	mov	r0, r4
  401a16:	4b2e      	ldr	r3, [pc, #184]	; (401ad0 <xQueueGenericSend+0x1cc>)
  401a18:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401a1a:	4b2e      	ldr	r3, [pc, #184]	; (401ad4 <xQueueGenericSend+0x1d0>)
  401a1c:	4798      	blx	r3
  401a1e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401a20:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a26:	429a      	cmp	r2, r3
  401a28:	d3b9      	bcc.n	40199e <xQueueGenericSend+0x9a>
  401a2a:	2d02      	cmp	r5, #2
  401a2c:	d0b7      	beq.n	40199e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401a2e:	9b01      	ldr	r3, [sp, #4]
  401a30:	2b00      	cmp	r3, #0
  401a32:	d0eb      	beq.n	401a0c <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401a34:	b90f      	cbnz	r7, 401a3a <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401a36:	a802      	add	r0, sp, #8
  401a38:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401a3a:	4b23      	ldr	r3, [pc, #140]	; (401ac8 <xQueueGenericSend+0x1c4>)
  401a3c:	4798      	blx	r3
		vTaskSuspendAll();
  401a3e:	4b26      	ldr	r3, [pc, #152]	; (401ad8 <xQueueGenericSend+0x1d4>)
  401a40:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401a42:	47b0      	blx	r6
  401a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a4a:	d101      	bne.n	401a50 <xQueueGenericSend+0x14c>
  401a4c:	2300      	movs	r3, #0
  401a4e:	6463      	str	r3, [r4, #68]	; 0x44
  401a50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a56:	d101      	bne.n	401a5c <xQueueGenericSend+0x158>
  401a58:	2300      	movs	r3, #0
  401a5a:	64a3      	str	r3, [r4, #72]	; 0x48
  401a5c:	4b1a      	ldr	r3, [pc, #104]	; (401ac8 <xQueueGenericSend+0x1c4>)
  401a5e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401a60:	a901      	add	r1, sp, #4
  401a62:	a802      	add	r0, sp, #8
  401a64:	4b1d      	ldr	r3, [pc, #116]	; (401adc <xQueueGenericSend+0x1d8>)
  401a66:	4798      	blx	r3
  401a68:	b9e0      	cbnz	r0, 401aa4 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401a6a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401a6c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401a70:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401a72:	4b15      	ldr	r3, [pc, #84]	; (401ac8 <xQueueGenericSend+0x1c4>)
  401a74:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401a76:	45bb      	cmp	fp, r7
  401a78:	d1cc      	bne.n	401a14 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401a7a:	9901      	ldr	r1, [sp, #4]
  401a7c:	f104 0010 	add.w	r0, r4, #16
  401a80:	4b17      	ldr	r3, [pc, #92]	; (401ae0 <xQueueGenericSend+0x1dc>)
  401a82:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401a84:	4620      	mov	r0, r4
  401a86:	4b12      	ldr	r3, [pc, #72]	; (401ad0 <xQueueGenericSend+0x1cc>)
  401a88:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401a8a:	4b12      	ldr	r3, [pc, #72]	; (401ad4 <xQueueGenericSend+0x1d0>)
  401a8c:	4798      	blx	r3
  401a8e:	2800      	cmp	r0, #0
  401a90:	d1c5      	bne.n	401a1e <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401a96:	f8c9 3000 	str.w	r3, [r9]
  401a9a:	f3bf 8f4f 	dsb	sy
  401a9e:	f3bf 8f6f 	isb	sy
  401aa2:	e7bc      	b.n	401a1e <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401aa4:	4620      	mov	r0, r4
  401aa6:	4b0a      	ldr	r3, [pc, #40]	; (401ad0 <xQueueGenericSend+0x1cc>)
  401aa8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401aaa:	4b0a      	ldr	r3, [pc, #40]	; (401ad4 <xQueueGenericSend+0x1d0>)
  401aac:	4798      	blx	r3
			return errQUEUE_FULL;
  401aae:	2000      	movs	r0, #0
  401ab0:	e78d      	b.n	4019ce <xQueueGenericSend+0xca>
  401ab2:	bf00      	nop
  401ab4:	00402955 	.word	0x00402955
  401ab8:	00401369 	.word	0x00401369
  401abc:	00401619 	.word	0x00401619
  401ac0:	004016a1 	.word	0x004016a1
  401ac4:	e000ed04 	.word	0xe000ed04
  401ac8:	004013b5 	.word	0x004013b5
  401acc:	004027ed 	.word	0x004027ed
  401ad0:	00401751 	.word	0x00401751
  401ad4:	004023d1 	.word	0x004023d1
  401ad8:	00402269 	.word	0x00402269
  401adc:	004028b5 	.word	0x004028b5
  401ae0:	004026e9 	.word	0x004026e9
  401ae4:	00402885 	.word	0x00402885

00401ae8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401ae8:	2800      	cmp	r0, #0
  401aea:	d036      	beq.n	401b5a <xQueueGenericSendFromISR+0x72>
{
  401aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401af0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401af2:	2900      	cmp	r1, #0
  401af4:	d03c      	beq.n	401b70 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401af6:	2b02      	cmp	r3, #2
  401af8:	d048      	beq.n	401b8c <xQueueGenericSendFromISR+0xa4>
  401afa:	461e      	mov	r6, r3
  401afc:	4615      	mov	r5, r2
  401afe:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401b00:	4b35      	ldr	r3, [pc, #212]	; (401bd8 <xQueueGenericSendFromISR+0xf0>)
  401b02:	4798      	blx	r3
	__asm volatile
  401b04:	f3ef 8711 	mrs	r7, BASEPRI
  401b08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b0c:	b672      	cpsid	i
  401b0e:	f383 8811 	msr	BASEPRI, r3
  401b12:	f3bf 8f6f 	isb	sy
  401b16:	f3bf 8f4f 	dsb	sy
  401b1a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401b1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b20:	429a      	cmp	r2, r3
  401b22:	d301      	bcc.n	401b28 <xQueueGenericSendFromISR+0x40>
  401b24:	2e02      	cmp	r6, #2
  401b26:	d14f      	bne.n	401bc8 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401b28:	4632      	mov	r2, r6
  401b2a:	4641      	mov	r1, r8
  401b2c:	4620      	mov	r0, r4
  401b2e:	4b2b      	ldr	r3, [pc, #172]	; (401bdc <xQueueGenericSendFromISR+0xf4>)
  401b30:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401b32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b34:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b38:	d141      	bne.n	401bbe <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401b3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401b3c:	2b00      	cmp	r3, #0
  401b3e:	d033      	beq.n	401ba8 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401b40:	4631      	mov	r1, r6
  401b42:	4620      	mov	r0, r4
  401b44:	4b26      	ldr	r3, [pc, #152]	; (401be0 <xQueueGenericSendFromISR+0xf8>)
  401b46:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401b48:	2d00      	cmp	r5, #0
  401b4a:	d03f      	beq.n	401bcc <xQueueGenericSendFromISR+0xe4>
  401b4c:	2801      	cmp	r0, #1
  401b4e:	d13d      	bne.n	401bcc <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401b50:	6028      	str	r0, [r5, #0]
	__asm volatile
  401b52:	f387 8811 	msr	BASEPRI, r7
}
  401b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5e:	b672      	cpsid	i
  401b60:	f383 8811 	msr	BASEPRI, r3
  401b64:	f3bf 8f6f 	isb	sy
  401b68:	f3bf 8f4f 	dsb	sy
  401b6c:	b662      	cpsie	i
  401b6e:	e7fe      	b.n	401b6e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b70:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401b72:	2800      	cmp	r0, #0
  401b74:	d0bf      	beq.n	401af6 <xQueueGenericSendFromISR+0xe>
  401b76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b7a:	b672      	cpsid	i
  401b7c:	f383 8811 	msr	BASEPRI, r3
  401b80:	f3bf 8f6f 	isb	sy
  401b84:	f3bf 8f4f 	dsb	sy
  401b88:	b662      	cpsie	i
  401b8a:	e7fe      	b.n	401b8a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401b8e:	2801      	cmp	r0, #1
  401b90:	d0b3      	beq.n	401afa <xQueueGenericSendFromISR+0x12>
  401b92:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b96:	b672      	cpsid	i
  401b98:	f383 8811 	msr	BASEPRI, r3
  401b9c:	f3bf 8f6f 	isb	sy
  401ba0:	f3bf 8f4f 	dsb	sy
  401ba4:	b662      	cpsie	i
  401ba6:	e7fe      	b.n	401ba6 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401baa:	b18b      	cbz	r3, 401bd0 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bb0:	4b0c      	ldr	r3, [pc, #48]	; (401be4 <xQueueGenericSendFromISR+0xfc>)
  401bb2:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401bb4:	b175      	cbz	r5, 401bd4 <xQueueGenericSendFromISR+0xec>
  401bb6:	b168      	cbz	r0, 401bd4 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401bb8:	2001      	movs	r0, #1
  401bba:	6028      	str	r0, [r5, #0]
  401bbc:	e7c9      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401bbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bc0:	3301      	adds	r3, #1
  401bc2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401bc4:	2001      	movs	r0, #1
  401bc6:	e7c4      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401bc8:	2000      	movs	r0, #0
  401bca:	e7c2      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401bcc:	2001      	movs	r0, #1
  401bce:	e7c0      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
  401bd0:	2001      	movs	r0, #1
  401bd2:	e7be      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
  401bd4:	2001      	movs	r0, #1
  401bd6:	e7bc      	b.n	401b52 <xQueueGenericSendFromISR+0x6a>
  401bd8:	00401561 	.word	0x00401561
  401bdc:	00401619 	.word	0x00401619
  401be0:	004016a1 	.word	0x004016a1
  401be4:	004027ed 	.word	0x004027ed

00401be8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401be8:	b170      	cbz	r0, 401c08 <xQueueGiveFromISR+0x20>
{
  401bea:	b570      	push	{r4, r5, r6, lr}
  401bec:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401bf0:	b1ab      	cbz	r3, 401c1e <xQueueGiveFromISR+0x36>
  401bf2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf6:	b672      	cpsid	i
  401bf8:	f383 8811 	msr	BASEPRI, r3
  401bfc:	f3bf 8f6f 	isb	sy
  401c00:	f3bf 8f4f 	dsb	sy
  401c04:	b662      	cpsie	i
  401c06:	e7fe      	b.n	401c06 <xQueueGiveFromISR+0x1e>
  401c08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c0c:	b672      	cpsid	i
  401c0e:	f383 8811 	msr	BASEPRI, r3
  401c12:	f3bf 8f6f 	isb	sy
  401c16:	f3bf 8f4f 	dsb	sy
  401c1a:	b662      	cpsie	i
  401c1c:	e7fe      	b.n	401c1c <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401c1e:	6803      	ldr	r3, [r0, #0]
  401c20:	b333      	cbz	r3, 401c70 <xQueueGiveFromISR+0x88>
  401c22:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401c24:	4b25      	ldr	r3, [pc, #148]	; (401cbc <xQueueGiveFromISR+0xd4>)
  401c26:	4798      	blx	r3
	__asm volatile
  401c28:	f3ef 8611 	mrs	r6, BASEPRI
  401c2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c30:	b672      	cpsid	i
  401c32:	f383 8811 	msr	BASEPRI, r3
  401c36:	f3bf 8f6f 	isb	sy
  401c3a:	f3bf 8f4f 	dsb	sy
  401c3e:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401c40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c44:	429a      	cmp	r2, r3
  401c46:	d231      	bcs.n	401cac <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c4a:	3301      	adds	r3, #1
  401c4c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401c4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c50:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c54:	d125      	bne.n	401ca2 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c58:	b1c3      	cbz	r3, 401c8c <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401c5a:	2100      	movs	r1, #0
  401c5c:	4620      	mov	r0, r4
  401c5e:	4b18      	ldr	r3, [pc, #96]	; (401cc0 <xQueueGiveFromISR+0xd8>)
  401c60:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401c62:	b32d      	cbz	r5, 401cb0 <xQueueGiveFromISR+0xc8>
  401c64:	2801      	cmp	r0, #1
  401c66:	d123      	bne.n	401cb0 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401c68:	6028      	str	r0, [r5, #0]
	__asm volatile
  401c6a:	f386 8811 	msr	BASEPRI, r6
}
  401c6e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401c70:	6843      	ldr	r3, [r0, #4]
  401c72:	2b00      	cmp	r3, #0
  401c74:	d0d5      	beq.n	401c22 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401c76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c7a:	b672      	cpsid	i
  401c7c:	f383 8811 	msr	BASEPRI, r3
  401c80:	f3bf 8f6f 	isb	sy
  401c84:	f3bf 8f4f 	dsb	sy
  401c88:	b662      	cpsie	i
  401c8a:	e7fe      	b.n	401c8a <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c8e:	b18b      	cbz	r3, 401cb4 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401c90:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c94:	4b0b      	ldr	r3, [pc, #44]	; (401cc4 <xQueueGiveFromISR+0xdc>)
  401c96:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401c98:	b175      	cbz	r5, 401cb8 <xQueueGiveFromISR+0xd0>
  401c9a:	b168      	cbz	r0, 401cb8 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401c9c:	2001      	movs	r0, #1
  401c9e:	6028      	str	r0, [r5, #0]
  401ca0:	e7e3      	b.n	401c6a <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401ca2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ca4:	3301      	adds	r3, #1
  401ca6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ca8:	2001      	movs	r0, #1
  401caa:	e7de      	b.n	401c6a <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401cac:	2000      	movs	r0, #0
  401cae:	e7dc      	b.n	401c6a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401cb0:	2001      	movs	r0, #1
  401cb2:	e7da      	b.n	401c6a <xQueueGiveFromISR+0x82>
  401cb4:	2001      	movs	r0, #1
  401cb6:	e7d8      	b.n	401c6a <xQueueGiveFromISR+0x82>
  401cb8:	2001      	movs	r0, #1
  401cba:	e7d6      	b.n	401c6a <xQueueGiveFromISR+0x82>
  401cbc:	00401561 	.word	0x00401561
  401cc0:	004016a1 	.word	0x004016a1
  401cc4:	004027ed 	.word	0x004027ed

00401cc8 <xQueueGenericReceive>:
{
  401cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ccc:	b084      	sub	sp, #16
  401cce:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401cd0:	b198      	cbz	r0, 401cfa <xQueueGenericReceive+0x32>
  401cd2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401cd4:	b1e1      	cbz	r1, 401d10 <xQueueGenericReceive+0x48>
  401cd6:	4698      	mov	r8, r3
  401cd8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401cda:	4b61      	ldr	r3, [pc, #388]	; (401e60 <xQueueGenericReceive+0x198>)
  401cdc:	4798      	blx	r3
  401cde:	bb28      	cbnz	r0, 401d2c <xQueueGenericReceive+0x64>
  401ce0:	9b01      	ldr	r3, [sp, #4]
  401ce2:	b353      	cbz	r3, 401d3a <xQueueGenericReceive+0x72>
  401ce4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ce8:	b672      	cpsid	i
  401cea:	f383 8811 	msr	BASEPRI, r3
  401cee:	f3bf 8f6f 	isb	sy
  401cf2:	f3bf 8f4f 	dsb	sy
  401cf6:	b662      	cpsie	i
  401cf8:	e7fe      	b.n	401cf8 <xQueueGenericReceive+0x30>
  401cfa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cfe:	b672      	cpsid	i
  401d00:	f383 8811 	msr	BASEPRI, r3
  401d04:	f3bf 8f6f 	isb	sy
  401d08:	f3bf 8f4f 	dsb	sy
  401d0c:	b662      	cpsie	i
  401d0e:	e7fe      	b.n	401d0e <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d10:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d12:	2a00      	cmp	r2, #0
  401d14:	d0df      	beq.n	401cd6 <xQueueGenericReceive+0xe>
  401d16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d1a:	b672      	cpsid	i
  401d1c:	f383 8811 	msr	BASEPRI, r3
  401d20:	f3bf 8f6f 	isb	sy
  401d24:	f3bf 8f4f 	dsb	sy
  401d28:	b662      	cpsie	i
  401d2a:	e7fe      	b.n	401d2a <xQueueGenericReceive+0x62>
  401d2c:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401d2e:	4d4d      	ldr	r5, [pc, #308]	; (401e64 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401d30:	f8df a160 	ldr.w	sl, [pc, #352]	; 401e94 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401d34:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401e74 <xQueueGenericReceive+0x1ac>
  401d38:	e04b      	b.n	401dd2 <xQueueGenericReceive+0x10a>
  401d3a:	2600      	movs	r6, #0
  401d3c:	e7f7      	b.n	401d2e <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401d3e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401d40:	4639      	mov	r1, r7
  401d42:	4620      	mov	r0, r4
  401d44:	4b48      	ldr	r3, [pc, #288]	; (401e68 <xQueueGenericReceive+0x1a0>)
  401d46:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401d48:	f1b8 0f00 	cmp.w	r8, #0
  401d4c:	d11d      	bne.n	401d8a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d50:	3b01      	subs	r3, #1
  401d52:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d54:	6823      	ldr	r3, [r4, #0]
  401d56:	b913      	cbnz	r3, 401d5e <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401d58:	4b44      	ldr	r3, [pc, #272]	; (401e6c <xQueueGenericReceive+0x1a4>)
  401d5a:	4798      	blx	r3
  401d5c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401d5e:	6923      	ldr	r3, [r4, #16]
  401d60:	b16b      	cbz	r3, 401d7e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401d62:	f104 0010 	add.w	r0, r4, #16
  401d66:	4b42      	ldr	r3, [pc, #264]	; (401e70 <xQueueGenericReceive+0x1a8>)
  401d68:	4798      	blx	r3
  401d6a:	2801      	cmp	r0, #1
  401d6c:	d107      	bne.n	401d7e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d72:	4b40      	ldr	r3, [pc, #256]	; (401e74 <xQueueGenericReceive+0x1ac>)
  401d74:	601a      	str	r2, [r3, #0]
  401d76:	f3bf 8f4f 	dsb	sy
  401d7a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401d7e:	4b3e      	ldr	r3, [pc, #248]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401d80:	4798      	blx	r3
				return pdPASS;
  401d82:	2001      	movs	r0, #1
}
  401d84:	b004      	add	sp, #16
  401d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401d8a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d0f5      	beq.n	401d7e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401d92:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d96:	4b36      	ldr	r3, [pc, #216]	; (401e70 <xQueueGenericReceive+0x1a8>)
  401d98:	4798      	blx	r3
  401d9a:	2800      	cmp	r0, #0
  401d9c:	d0ef      	beq.n	401d7e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401da2:	4b34      	ldr	r3, [pc, #208]	; (401e74 <xQueueGenericReceive+0x1ac>)
  401da4:	601a      	str	r2, [r3, #0]
  401da6:	f3bf 8f4f 	dsb	sy
  401daa:	f3bf 8f6f 	isb	sy
  401dae:	e7e6      	b.n	401d7e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401db0:	4b31      	ldr	r3, [pc, #196]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401db2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401db4:	2000      	movs	r0, #0
  401db6:	e7e5      	b.n	401d84 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401db8:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401dba:	6860      	ldr	r0, [r4, #4]
  401dbc:	4b2f      	ldr	r3, [pc, #188]	; (401e7c <xQueueGenericReceive+0x1b4>)
  401dbe:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401dc0:	4b2d      	ldr	r3, [pc, #180]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401dc2:	4798      	blx	r3
  401dc4:	e030      	b.n	401e28 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401dc6:	4620      	mov	r0, r4
  401dc8:	4b2d      	ldr	r3, [pc, #180]	; (401e80 <xQueueGenericReceive+0x1b8>)
  401dca:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401dcc:	4b2d      	ldr	r3, [pc, #180]	; (401e84 <xQueueGenericReceive+0x1bc>)
  401dce:	4798      	blx	r3
  401dd0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401dd2:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401dd6:	2b00      	cmp	r3, #0
  401dd8:	d1b1      	bne.n	401d3e <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401dda:	9b01      	ldr	r3, [sp, #4]
  401ddc:	2b00      	cmp	r3, #0
  401dde:	d0e7      	beq.n	401db0 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401de0:	b90e      	cbnz	r6, 401de6 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401de2:	a802      	add	r0, sp, #8
  401de4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401de6:	4b24      	ldr	r3, [pc, #144]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401de8:	4798      	blx	r3
		vTaskSuspendAll();
  401dea:	4b27      	ldr	r3, [pc, #156]	; (401e88 <xQueueGenericReceive+0x1c0>)
  401dec:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401dee:	47a8      	blx	r5
  401df0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401df2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401df6:	d101      	bne.n	401dfc <xQueueGenericReceive+0x134>
  401df8:	2300      	movs	r3, #0
  401dfa:	6463      	str	r3, [r4, #68]	; 0x44
  401dfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e02:	d101      	bne.n	401e08 <xQueueGenericReceive+0x140>
  401e04:	2300      	movs	r3, #0
  401e06:	64a3      	str	r3, [r4, #72]	; 0x48
  401e08:	4b1b      	ldr	r3, [pc, #108]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401e0a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401e0c:	a901      	add	r1, sp, #4
  401e0e:	a802      	add	r0, sp, #8
  401e10:	4b1e      	ldr	r3, [pc, #120]	; (401e8c <xQueueGenericReceive+0x1c4>)
  401e12:	4798      	blx	r3
  401e14:	b9e8      	cbnz	r0, 401e52 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401e16:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401e18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401e1a:	4b17      	ldr	r3, [pc, #92]	; (401e78 <xQueueGenericReceive+0x1b0>)
  401e1c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401e1e:	2e00      	cmp	r6, #0
  401e20:	d1d1      	bne.n	401dc6 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401e22:	6823      	ldr	r3, [r4, #0]
  401e24:	2b00      	cmp	r3, #0
  401e26:	d0c7      	beq.n	401db8 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401e28:	9901      	ldr	r1, [sp, #4]
  401e2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e2e:	4b18      	ldr	r3, [pc, #96]	; (401e90 <xQueueGenericReceive+0x1c8>)
  401e30:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401e32:	4620      	mov	r0, r4
  401e34:	4b12      	ldr	r3, [pc, #72]	; (401e80 <xQueueGenericReceive+0x1b8>)
  401e36:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401e38:	4b12      	ldr	r3, [pc, #72]	; (401e84 <xQueueGenericReceive+0x1bc>)
  401e3a:	4798      	blx	r3
  401e3c:	2800      	cmp	r0, #0
  401e3e:	d1c7      	bne.n	401dd0 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401e44:	f8c9 3000 	str.w	r3, [r9]
  401e48:	f3bf 8f4f 	dsb	sy
  401e4c:	f3bf 8f6f 	isb	sy
  401e50:	e7be      	b.n	401dd0 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401e52:	4620      	mov	r0, r4
  401e54:	4b0a      	ldr	r3, [pc, #40]	; (401e80 <xQueueGenericReceive+0x1b8>)
  401e56:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401e58:	4b0a      	ldr	r3, [pc, #40]	; (401e84 <xQueueGenericReceive+0x1bc>)
  401e5a:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401e5c:	2000      	movs	r0, #0
  401e5e:	e791      	b.n	401d84 <xQueueGenericReceive+0xbc>
  401e60:	00402955 	.word	0x00402955
  401e64:	00401369 	.word	0x00401369
  401e68:	00401729 	.word	0x00401729
  401e6c:	00402ad5 	.word	0x00402ad5
  401e70:	004027ed 	.word	0x004027ed
  401e74:	e000ed04 	.word	0xe000ed04
  401e78:	004013b5 	.word	0x004013b5
  401e7c:	00402975 	.word	0x00402975
  401e80:	00401751 	.word	0x00401751
  401e84:	004023d1 	.word	0x004023d1
  401e88:	00402269 	.word	0x00402269
  401e8c:	004028b5 	.word	0x004028b5
  401e90:	004026e9 	.word	0x004026e9
  401e94:	00402885 	.word	0x00402885

00401e98 <vQueueAddToRegistry>:
	{
  401e98:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401e9a:	4b0b      	ldr	r3, [pc, #44]	; (401ec8 <vQueueAddToRegistry+0x30>)
  401e9c:	681b      	ldr	r3, [r3, #0]
  401e9e:	b153      	cbz	r3, 401eb6 <vQueueAddToRegistry+0x1e>
  401ea0:	2301      	movs	r3, #1
  401ea2:	4c09      	ldr	r4, [pc, #36]	; (401ec8 <vQueueAddToRegistry+0x30>)
  401ea4:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401ea8:	b132      	cbz	r2, 401eb8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401eaa:	3301      	adds	r3, #1
  401eac:	2b08      	cmp	r3, #8
  401eae:	d1f9      	bne.n	401ea4 <vQueueAddToRegistry+0xc>
	}
  401eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401eb4:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401eb6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401eb8:	4a03      	ldr	r2, [pc, #12]	; (401ec8 <vQueueAddToRegistry+0x30>)
  401eba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401ebe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401ec2:	6058      	str	r0, [r3, #4]
				break;
  401ec4:	e7f4      	b.n	401eb0 <vQueueAddToRegistry+0x18>
  401ec6:	bf00      	nop
  401ec8:	20400c68 	.word	0x20400c68

00401ecc <vQueueWaitForMessageRestricted>:
	{
  401ecc:	b570      	push	{r4, r5, r6, lr}
  401ece:	4604      	mov	r4, r0
  401ed0:	460d      	mov	r5, r1
  401ed2:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401ed4:	4b0f      	ldr	r3, [pc, #60]	; (401f14 <vQueueWaitForMessageRestricted+0x48>)
  401ed6:	4798      	blx	r3
  401ed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401eda:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ede:	d00b      	beq.n	401ef8 <vQueueWaitForMessageRestricted+0x2c>
  401ee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ee6:	d00a      	beq.n	401efe <vQueueWaitForMessageRestricted+0x32>
  401ee8:	4b0b      	ldr	r3, [pc, #44]	; (401f18 <vQueueWaitForMessageRestricted+0x4c>)
  401eea:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eee:	b14b      	cbz	r3, 401f04 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401ef0:	4620      	mov	r0, r4
  401ef2:	4b0a      	ldr	r3, [pc, #40]	; (401f1c <vQueueWaitForMessageRestricted+0x50>)
  401ef4:	4798      	blx	r3
  401ef6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401ef8:	2300      	movs	r3, #0
  401efa:	6463      	str	r3, [r4, #68]	; 0x44
  401efc:	e7f0      	b.n	401ee0 <vQueueWaitForMessageRestricted+0x14>
  401efe:	2300      	movs	r3, #0
  401f00:	64a3      	str	r3, [r4, #72]	; 0x48
  401f02:	e7f1      	b.n	401ee8 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401f04:	4632      	mov	r2, r6
  401f06:	4629      	mov	r1, r5
  401f08:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f0c:	4b04      	ldr	r3, [pc, #16]	; (401f20 <vQueueWaitForMessageRestricted+0x54>)
  401f0e:	4798      	blx	r3
  401f10:	e7ee      	b.n	401ef0 <vQueueWaitForMessageRestricted+0x24>
  401f12:	bf00      	nop
  401f14:	00401369 	.word	0x00401369
  401f18:	004013b5 	.word	0x004013b5
  401f1c:	00401751 	.word	0x00401751
  401f20:	0040276d 	.word	0x0040276d

00401f24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401f24:	4b08      	ldr	r3, [pc, #32]	; (401f48 <prvResetNextTaskUnblockTime+0x24>)
  401f26:	681b      	ldr	r3, [r3, #0]
  401f28:	681b      	ldr	r3, [r3, #0]
  401f2a:	b13b      	cbz	r3, 401f3c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401f2c:	4b06      	ldr	r3, [pc, #24]	; (401f48 <prvResetNextTaskUnblockTime+0x24>)
  401f2e:	681b      	ldr	r3, [r3, #0]
  401f30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401f32:	68db      	ldr	r3, [r3, #12]
  401f34:	685a      	ldr	r2, [r3, #4]
  401f36:	4b05      	ldr	r3, [pc, #20]	; (401f4c <prvResetNextTaskUnblockTime+0x28>)
  401f38:	601a      	str	r2, [r3, #0]
  401f3a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401f3c:	f04f 32ff 	mov.w	r2, #4294967295
  401f40:	4b02      	ldr	r3, [pc, #8]	; (401f4c <prvResetNextTaskUnblockTime+0x28>)
  401f42:	601a      	str	r2, [r3, #0]
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop
  401f48:	20400a64 	.word	0x20400a64
  401f4c:	20400b10 	.word	0x20400b10

00401f50 <prvAddCurrentTaskToDelayedList>:
{
  401f50:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401f52:	4b0f      	ldr	r3, [pc, #60]	; (401f90 <prvAddCurrentTaskToDelayedList+0x40>)
  401f54:	681b      	ldr	r3, [r3, #0]
  401f56:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401f58:	4b0e      	ldr	r3, [pc, #56]	; (401f94 <prvAddCurrentTaskToDelayedList+0x44>)
  401f5a:	681b      	ldr	r3, [r3, #0]
  401f5c:	4298      	cmp	r0, r3
  401f5e:	d30e      	bcc.n	401f7e <prvAddCurrentTaskToDelayedList+0x2e>
  401f60:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f62:	4b0d      	ldr	r3, [pc, #52]	; (401f98 <prvAddCurrentTaskToDelayedList+0x48>)
  401f64:	6818      	ldr	r0, [r3, #0]
  401f66:	4b0a      	ldr	r3, [pc, #40]	; (401f90 <prvAddCurrentTaskToDelayedList+0x40>)
  401f68:	6819      	ldr	r1, [r3, #0]
  401f6a:	3104      	adds	r1, #4
  401f6c:	4b0b      	ldr	r3, [pc, #44]	; (401f9c <prvAddCurrentTaskToDelayedList+0x4c>)
  401f6e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401f70:	4b0b      	ldr	r3, [pc, #44]	; (401fa0 <prvAddCurrentTaskToDelayedList+0x50>)
  401f72:	681b      	ldr	r3, [r3, #0]
  401f74:	429c      	cmp	r4, r3
  401f76:	d201      	bcs.n	401f7c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401f78:	4b09      	ldr	r3, [pc, #36]	; (401fa0 <prvAddCurrentTaskToDelayedList+0x50>)
  401f7a:	601c      	str	r4, [r3, #0]
  401f7c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f7e:	4b09      	ldr	r3, [pc, #36]	; (401fa4 <prvAddCurrentTaskToDelayedList+0x54>)
  401f80:	6818      	ldr	r0, [r3, #0]
  401f82:	4b03      	ldr	r3, [pc, #12]	; (401f90 <prvAddCurrentTaskToDelayedList+0x40>)
  401f84:	6819      	ldr	r1, [r3, #0]
  401f86:	3104      	adds	r1, #4
  401f88:	4b04      	ldr	r3, [pc, #16]	; (401f9c <prvAddCurrentTaskToDelayedList+0x4c>)
  401f8a:	4798      	blx	r3
  401f8c:	bd10      	pop	{r4, pc}
  401f8e:	bf00      	nop
  401f90:	20400a60 	.word	0x20400a60
  401f94:	20400b58 	.word	0x20400b58
  401f98:	20400a64 	.word	0x20400a64
  401f9c:	00401251 	.word	0x00401251
  401fa0:	20400b10 	.word	0x20400b10
  401fa4:	20400a68 	.word	0x20400a68

00401fa8 <xTaskGenericCreate>:
{
  401fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fac:	b083      	sub	sp, #12
  401fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401fb0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401fb4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401fb6:	b160      	cbz	r0, 401fd2 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401fb8:	2d04      	cmp	r5, #4
  401fba:	d915      	bls.n	401fe8 <xTaskGenericCreate+0x40>
  401fbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fc0:	b672      	cpsid	i
  401fc2:	f383 8811 	msr	BASEPRI, r3
  401fc6:	f3bf 8f6f 	isb	sy
  401fca:	f3bf 8f4f 	dsb	sy
  401fce:	b662      	cpsie	i
  401fd0:	e7fe      	b.n	401fd0 <xTaskGenericCreate+0x28>
  401fd2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fd6:	b672      	cpsid	i
  401fd8:	f383 8811 	msr	BASEPRI, r3
  401fdc:	f3bf 8f6f 	isb	sy
  401fe0:	f3bf 8f4f 	dsb	sy
  401fe4:	b662      	cpsie	i
  401fe6:	e7fe      	b.n	401fe6 <xTaskGenericCreate+0x3e>
  401fe8:	9001      	str	r0, [sp, #4]
  401fea:	4698      	mov	r8, r3
  401fec:	4691      	mov	r9, r2
  401fee:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ff0:	b936      	cbnz	r6, 402000 <xTaskGenericCreate+0x58>
  401ff2:	0090      	lsls	r0, r2, #2
  401ff4:	4b62      	ldr	r3, [pc, #392]	; (402180 <xTaskGenericCreate+0x1d8>)
  401ff6:	4798      	blx	r3
		if( pxStack != NULL )
  401ff8:	4606      	mov	r6, r0
  401ffa:	2800      	cmp	r0, #0
  401ffc:	f000 809e 	beq.w	40213c <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402000:	2058      	movs	r0, #88	; 0x58
  402002:	4b5f      	ldr	r3, [pc, #380]	; (402180 <xTaskGenericCreate+0x1d8>)
  402004:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402006:	4604      	mov	r4, r0
  402008:	2800      	cmp	r0, #0
  40200a:	f000 8094 	beq.w	402136 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  40200e:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402010:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402014:	21a5      	movs	r1, #165	; 0xa5
  402016:	4630      	mov	r0, r6
  402018:	4b5a      	ldr	r3, [pc, #360]	; (402184 <xTaskGenericCreate+0x1dc>)
  40201a:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40201c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402020:	444e      	add	r6, r9
  402022:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402024:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402028:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40202c:	783b      	ldrb	r3, [r7, #0]
  40202e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402032:	783b      	ldrb	r3, [r7, #0]
  402034:	2b00      	cmp	r3, #0
  402036:	f040 8084 	bne.w	402142 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40203a:	2700      	movs	r7, #0
  40203c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402040:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402042:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402044:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402046:	f104 0904 	add.w	r9, r4, #4
  40204a:	4648      	mov	r0, r9
  40204c:	f8df b184 	ldr.w	fp, [pc, #388]	; 4021d4 <xTaskGenericCreate+0x22c>
  402050:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402052:	f104 0018 	add.w	r0, r4, #24
  402056:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402058:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40205a:	f1c5 0305 	rsb	r3, r5, #5
  40205e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402060:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402062:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402064:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402068:	4642      	mov	r2, r8
  40206a:	9901      	ldr	r1, [sp, #4]
  40206c:	4630      	mov	r0, r6
  40206e:	4b46      	ldr	r3, [pc, #280]	; (402188 <xTaskGenericCreate+0x1e0>)
  402070:	4798      	blx	r3
  402072:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402074:	f1ba 0f00 	cmp.w	sl, #0
  402078:	d001      	beq.n	40207e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40207a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40207e:	4b43      	ldr	r3, [pc, #268]	; (40218c <xTaskGenericCreate+0x1e4>)
  402080:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402082:	4a43      	ldr	r2, [pc, #268]	; (402190 <xTaskGenericCreate+0x1e8>)
  402084:	6813      	ldr	r3, [r2, #0]
  402086:	3301      	adds	r3, #1
  402088:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40208a:	4b42      	ldr	r3, [pc, #264]	; (402194 <xTaskGenericCreate+0x1ec>)
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	2b00      	cmp	r3, #0
  402090:	d166      	bne.n	402160 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402092:	4b40      	ldr	r3, [pc, #256]	; (402194 <xTaskGenericCreate+0x1ec>)
  402094:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402096:	6813      	ldr	r3, [r2, #0]
  402098:	2b01      	cmp	r3, #1
  40209a:	d121      	bne.n	4020e0 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40209c:	4f3e      	ldr	r7, [pc, #248]	; (402198 <xTaskGenericCreate+0x1f0>)
  40209e:	4638      	mov	r0, r7
  4020a0:	4e3e      	ldr	r6, [pc, #248]	; (40219c <xTaskGenericCreate+0x1f4>)
  4020a2:	47b0      	blx	r6
  4020a4:	f107 0014 	add.w	r0, r7, #20
  4020a8:	47b0      	blx	r6
  4020aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4020ae:	47b0      	blx	r6
  4020b0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4020b4:	47b0      	blx	r6
  4020b6:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4020ba:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4020bc:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4021d8 <xTaskGenericCreate+0x230>
  4020c0:	4640      	mov	r0, r8
  4020c2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4020c4:	4f36      	ldr	r7, [pc, #216]	; (4021a0 <xTaskGenericCreate+0x1f8>)
  4020c6:	4638      	mov	r0, r7
  4020c8:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4020ca:	4836      	ldr	r0, [pc, #216]	; (4021a4 <xTaskGenericCreate+0x1fc>)
  4020cc:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4020ce:	4836      	ldr	r0, [pc, #216]	; (4021a8 <xTaskGenericCreate+0x200>)
  4020d0:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4020d2:	4836      	ldr	r0, [pc, #216]	; (4021ac <xTaskGenericCreate+0x204>)
  4020d4:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4020d6:	4b36      	ldr	r3, [pc, #216]	; (4021b0 <xTaskGenericCreate+0x208>)
  4020d8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4020dc:	4b35      	ldr	r3, [pc, #212]	; (4021b4 <xTaskGenericCreate+0x20c>)
  4020de:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4020e0:	4a35      	ldr	r2, [pc, #212]	; (4021b8 <xTaskGenericCreate+0x210>)
  4020e2:	6813      	ldr	r3, [r2, #0]
  4020e4:	3301      	adds	r3, #1
  4020e6:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4020e8:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4020ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020ec:	4a33      	ldr	r2, [pc, #204]	; (4021bc <xTaskGenericCreate+0x214>)
  4020ee:	6811      	ldr	r1, [r2, #0]
  4020f0:	2301      	movs	r3, #1
  4020f2:	4083      	lsls	r3, r0
  4020f4:	430b      	orrs	r3, r1
  4020f6:	6013      	str	r3, [r2, #0]
  4020f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020fc:	4649      	mov	r1, r9
  4020fe:	4b26      	ldr	r3, [pc, #152]	; (402198 <xTaskGenericCreate+0x1f0>)
  402100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402104:	4b2e      	ldr	r3, [pc, #184]	; (4021c0 <xTaskGenericCreate+0x218>)
  402106:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402108:	4b2e      	ldr	r3, [pc, #184]	; (4021c4 <xTaskGenericCreate+0x21c>)
  40210a:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  40210c:	4b2e      	ldr	r3, [pc, #184]	; (4021c8 <xTaskGenericCreate+0x220>)
  40210e:	681b      	ldr	r3, [r3, #0]
  402110:	2b00      	cmp	r3, #0
  402112:	d031      	beq.n	402178 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402114:	4b1f      	ldr	r3, [pc, #124]	; (402194 <xTaskGenericCreate+0x1ec>)
  402116:	681b      	ldr	r3, [r3, #0]
  402118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40211a:	429d      	cmp	r5, r3
  40211c:	d92e      	bls.n	40217c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402122:	4b2a      	ldr	r3, [pc, #168]	; (4021cc <xTaskGenericCreate+0x224>)
  402124:	601a      	str	r2, [r3, #0]
  402126:	f3bf 8f4f 	dsb	sy
  40212a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40212e:	2001      	movs	r0, #1
}
  402130:	b003      	add	sp, #12
  402132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402136:	4630      	mov	r0, r6
  402138:	4b25      	ldr	r3, [pc, #148]	; (4021d0 <xTaskGenericCreate+0x228>)
  40213a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40213c:	f04f 30ff 	mov.w	r0, #4294967295
  402140:	e7f6      	b.n	402130 <xTaskGenericCreate+0x188>
  402142:	463b      	mov	r3, r7
  402144:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402148:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40214a:	7859      	ldrb	r1, [r3, #1]
  40214c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402150:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402154:	2900      	cmp	r1, #0
  402156:	f43f af70 	beq.w	40203a <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40215a:	42bb      	cmp	r3, r7
  40215c:	d1f5      	bne.n	40214a <xTaskGenericCreate+0x1a2>
  40215e:	e76c      	b.n	40203a <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402160:	4b19      	ldr	r3, [pc, #100]	; (4021c8 <xTaskGenericCreate+0x220>)
  402162:	681b      	ldr	r3, [r3, #0]
  402164:	2b00      	cmp	r3, #0
  402166:	d1bb      	bne.n	4020e0 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402168:	4b0a      	ldr	r3, [pc, #40]	; (402194 <xTaskGenericCreate+0x1ec>)
  40216a:	681b      	ldr	r3, [r3, #0]
  40216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40216e:	429d      	cmp	r5, r3
  402170:	d3b6      	bcc.n	4020e0 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402172:	4b08      	ldr	r3, [pc, #32]	; (402194 <xTaskGenericCreate+0x1ec>)
  402174:	601c      	str	r4, [r3, #0]
  402176:	e7b3      	b.n	4020e0 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402178:	2001      	movs	r0, #1
  40217a:	e7d9      	b.n	402130 <xTaskGenericCreate+0x188>
  40217c:	2001      	movs	r0, #1
	return xReturn;
  40217e:	e7d7      	b.n	402130 <xTaskGenericCreate+0x188>
  402180:	004015c5 	.word	0x004015c5
  402184:	004049f9 	.word	0x004049f9
  402188:	0040131d 	.word	0x0040131d
  40218c:	00401369 	.word	0x00401369
  402190:	20400ad0 	.word	0x20400ad0
  402194:	20400a60 	.word	0x20400a60
  402198:	20400a6c 	.word	0x20400a6c
  40219c:	0040121d 	.word	0x0040121d
  4021a0:	20400afc 	.word	0x20400afc
  4021a4:	20400b18 	.word	0x20400b18
  4021a8:	20400b44 	.word	0x20400b44
  4021ac:	20400b30 	.word	0x20400b30
  4021b0:	20400a64 	.word	0x20400a64
  4021b4:	20400a68 	.word	0x20400a68
  4021b8:	20400adc 	.word	0x20400adc
  4021bc:	20400ae4 	.word	0x20400ae4
  4021c0:	00401239 	.word	0x00401239
  4021c4:	004013b5 	.word	0x004013b5
  4021c8:	20400b2c 	.word	0x20400b2c
  4021cc:	e000ed04 	.word	0xe000ed04
  4021d0:	004015f5 	.word	0x004015f5
  4021d4:	00401233 	.word	0x00401233
  4021d8:	20400ae8 	.word	0x20400ae8

004021dc <vTaskStartScheduler>:
{
  4021dc:	b510      	push	{r4, lr}
  4021de:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4021e0:	2300      	movs	r3, #0
  4021e2:	9303      	str	r3, [sp, #12]
  4021e4:	9302      	str	r3, [sp, #8]
  4021e6:	9301      	str	r3, [sp, #4]
  4021e8:	9300      	str	r3, [sp, #0]
  4021ea:	2282      	movs	r2, #130	; 0x82
  4021ec:	4916      	ldr	r1, [pc, #88]	; (402248 <vTaskStartScheduler+0x6c>)
  4021ee:	4817      	ldr	r0, [pc, #92]	; (40224c <vTaskStartScheduler+0x70>)
  4021f0:	4c17      	ldr	r4, [pc, #92]	; (402250 <vTaskStartScheduler+0x74>)
  4021f2:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4021f4:	2801      	cmp	r0, #1
  4021f6:	d00b      	beq.n	402210 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4021f8:	bb20      	cbnz	r0, 402244 <vTaskStartScheduler+0x68>
  4021fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fe:	b672      	cpsid	i
  402200:	f383 8811 	msr	BASEPRI, r3
  402204:	f3bf 8f6f 	isb	sy
  402208:	f3bf 8f4f 	dsb	sy
  40220c:	b662      	cpsie	i
  40220e:	e7fe      	b.n	40220e <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402210:	4b10      	ldr	r3, [pc, #64]	; (402254 <vTaskStartScheduler+0x78>)
  402212:	4798      	blx	r3
	if( xReturn == pdPASS )
  402214:	2801      	cmp	r0, #1
  402216:	d1ef      	bne.n	4021f8 <vTaskStartScheduler+0x1c>
  402218:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221c:	b672      	cpsid	i
  40221e:	f383 8811 	msr	BASEPRI, r3
  402222:	f3bf 8f6f 	isb	sy
  402226:	f3bf 8f4f 	dsb	sy
  40222a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40222c:	f04f 32ff 	mov.w	r2, #4294967295
  402230:	4b09      	ldr	r3, [pc, #36]	; (402258 <vTaskStartScheduler+0x7c>)
  402232:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402234:	2201      	movs	r2, #1
  402236:	4b09      	ldr	r3, [pc, #36]	; (40225c <vTaskStartScheduler+0x80>)
  402238:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40223a:	2200      	movs	r2, #0
  40223c:	4b08      	ldr	r3, [pc, #32]	; (402260 <vTaskStartScheduler+0x84>)
  40223e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402240:	4b08      	ldr	r3, [pc, #32]	; (402264 <vTaskStartScheduler+0x88>)
  402242:	4798      	blx	r3
}
  402244:	b004      	add	sp, #16
  402246:	bd10      	pop	{r4, pc}
  402248:	00409fe4 	.word	0x00409fe4
  40224c:	00402581 	.word	0x00402581
  402250:	00401fa9 	.word	0x00401fa9
  402254:	00402bc1 	.word	0x00402bc1
  402258:	20400b10 	.word	0x20400b10
  40225c:	20400b2c 	.word	0x20400b2c
  402260:	20400b58 	.word	0x20400b58
  402264:	0040149d 	.word	0x0040149d

00402268 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402268:	4a02      	ldr	r2, [pc, #8]	; (402274 <vTaskSuspendAll+0xc>)
  40226a:	6813      	ldr	r3, [r2, #0]
  40226c:	3301      	adds	r3, #1
  40226e:	6013      	str	r3, [r2, #0]
  402270:	4770      	bx	lr
  402272:	bf00      	nop
  402274:	20400ad8 	.word	0x20400ad8

00402278 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402278:	4b01      	ldr	r3, [pc, #4]	; (402280 <xTaskGetTickCount+0x8>)
  40227a:	6818      	ldr	r0, [r3, #0]
}
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop
  402280:	20400b58 	.word	0x20400b58

00402284 <xTaskIncrementTick>:
{
  402284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402288:	4b42      	ldr	r3, [pc, #264]	; (402394 <xTaskIncrementTick+0x110>)
  40228a:	681b      	ldr	r3, [r3, #0]
  40228c:	2b00      	cmp	r3, #0
  40228e:	d178      	bne.n	402382 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402290:	4b41      	ldr	r3, [pc, #260]	; (402398 <xTaskIncrementTick+0x114>)
  402292:	681a      	ldr	r2, [r3, #0]
  402294:	3201      	adds	r2, #1
  402296:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402298:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40229a:	b9d6      	cbnz	r6, 4022d2 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40229c:	4b3f      	ldr	r3, [pc, #252]	; (40239c <xTaskIncrementTick+0x118>)
  40229e:	681b      	ldr	r3, [r3, #0]
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	b153      	cbz	r3, 4022ba <xTaskIncrementTick+0x36>
  4022a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a8:	b672      	cpsid	i
  4022aa:	f383 8811 	msr	BASEPRI, r3
  4022ae:	f3bf 8f6f 	isb	sy
  4022b2:	f3bf 8f4f 	dsb	sy
  4022b6:	b662      	cpsie	i
  4022b8:	e7fe      	b.n	4022b8 <xTaskIncrementTick+0x34>
  4022ba:	4a38      	ldr	r2, [pc, #224]	; (40239c <xTaskIncrementTick+0x118>)
  4022bc:	6811      	ldr	r1, [r2, #0]
  4022be:	4b38      	ldr	r3, [pc, #224]	; (4023a0 <xTaskIncrementTick+0x11c>)
  4022c0:	6818      	ldr	r0, [r3, #0]
  4022c2:	6010      	str	r0, [r2, #0]
  4022c4:	6019      	str	r1, [r3, #0]
  4022c6:	4a37      	ldr	r2, [pc, #220]	; (4023a4 <xTaskIncrementTick+0x120>)
  4022c8:	6813      	ldr	r3, [r2, #0]
  4022ca:	3301      	adds	r3, #1
  4022cc:	6013      	str	r3, [r2, #0]
  4022ce:	4b36      	ldr	r3, [pc, #216]	; (4023a8 <xTaskIncrementTick+0x124>)
  4022d0:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4022d2:	4b36      	ldr	r3, [pc, #216]	; (4023ac <xTaskIncrementTick+0x128>)
  4022d4:	681b      	ldr	r3, [r3, #0]
  4022d6:	429e      	cmp	r6, r3
  4022d8:	d218      	bcs.n	40230c <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4022da:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4022dc:	4b34      	ldr	r3, [pc, #208]	; (4023b0 <xTaskIncrementTick+0x12c>)
  4022de:	681b      	ldr	r3, [r3, #0]
  4022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4022e6:	4a33      	ldr	r2, [pc, #204]	; (4023b4 <xTaskIncrementTick+0x130>)
  4022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4022ec:	2b02      	cmp	r3, #2
  4022ee:	bf28      	it	cs
  4022f0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4022f2:	4b31      	ldr	r3, [pc, #196]	; (4023b8 <xTaskIncrementTick+0x134>)
  4022f4:	681b      	ldr	r3, [r3, #0]
  4022f6:	b90b      	cbnz	r3, 4022fc <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4022f8:	4b30      	ldr	r3, [pc, #192]	; (4023bc <xTaskIncrementTick+0x138>)
  4022fa:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4022fc:	4b30      	ldr	r3, [pc, #192]	; (4023c0 <xTaskIncrementTick+0x13c>)
  4022fe:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402300:	2b00      	cmp	r3, #0
}
  402302:	bf0c      	ite	eq
  402304:	4620      	moveq	r0, r4
  402306:	2001      	movne	r0, #1
  402308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40230c:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40230e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40239c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402312:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4023cc <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402316:	4f2b      	ldr	r7, [pc, #172]	; (4023c4 <xTaskIncrementTick+0x140>)
  402318:	e01f      	b.n	40235a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40231a:	f04f 32ff 	mov.w	r2, #4294967295
  40231e:	4b23      	ldr	r3, [pc, #140]	; (4023ac <xTaskIncrementTick+0x128>)
  402320:	601a      	str	r2, [r3, #0]
						break;
  402322:	e7db      	b.n	4022dc <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402324:	4a21      	ldr	r2, [pc, #132]	; (4023ac <xTaskIncrementTick+0x128>)
  402326:	6013      	str	r3, [r2, #0]
							break;
  402328:	e7d8      	b.n	4022dc <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40232a:	f105 0018 	add.w	r0, r5, #24
  40232e:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402330:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402332:	683a      	ldr	r2, [r7, #0]
  402334:	2301      	movs	r3, #1
  402336:	4083      	lsls	r3, r0
  402338:	4313      	orrs	r3, r2
  40233a:	603b      	str	r3, [r7, #0]
  40233c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402340:	4651      	mov	r1, sl
  402342:	4b1c      	ldr	r3, [pc, #112]	; (4023b4 <xTaskIncrementTick+0x130>)
  402344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402348:	4b1f      	ldr	r3, [pc, #124]	; (4023c8 <xTaskIncrementTick+0x144>)
  40234a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40234c:	4b18      	ldr	r3, [pc, #96]	; (4023b0 <xTaskIncrementTick+0x12c>)
  40234e:	681b      	ldr	r3, [r3, #0]
  402350:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402354:	429a      	cmp	r2, r3
  402356:	bf28      	it	cs
  402358:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40235a:	f8d9 3000 	ldr.w	r3, [r9]
  40235e:	681b      	ldr	r3, [r3, #0]
  402360:	2b00      	cmp	r3, #0
  402362:	d0da      	beq.n	40231a <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402364:	f8d9 3000 	ldr.w	r3, [r9]
  402368:	68db      	ldr	r3, [r3, #12]
  40236a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40236c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40236e:	429e      	cmp	r6, r3
  402370:	d3d8      	bcc.n	402324 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402372:	f105 0a04 	add.w	sl, r5, #4
  402376:	4650      	mov	r0, sl
  402378:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40237a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40237c:	2b00      	cmp	r3, #0
  40237e:	d1d4      	bne.n	40232a <xTaskIncrementTick+0xa6>
  402380:	e7d6      	b.n	402330 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402382:	4a0d      	ldr	r2, [pc, #52]	; (4023b8 <xTaskIncrementTick+0x134>)
  402384:	6813      	ldr	r3, [r2, #0]
  402386:	3301      	adds	r3, #1
  402388:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40238a:	4b0c      	ldr	r3, [pc, #48]	; (4023bc <xTaskIncrementTick+0x138>)
  40238c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40238e:	2400      	movs	r4, #0
  402390:	e7b4      	b.n	4022fc <xTaskIncrementTick+0x78>
  402392:	bf00      	nop
  402394:	20400ad8 	.word	0x20400ad8
  402398:	20400b58 	.word	0x20400b58
  40239c:	20400a64 	.word	0x20400a64
  4023a0:	20400a68 	.word	0x20400a68
  4023a4:	20400b14 	.word	0x20400b14
  4023a8:	00401f25 	.word	0x00401f25
  4023ac:	20400b10 	.word	0x20400b10
  4023b0:	20400a60 	.word	0x20400a60
  4023b4:	20400a6c 	.word	0x20400a6c
  4023b8:	20400ad4 	.word	0x20400ad4
  4023bc:	004032b9 	.word	0x004032b9
  4023c0:	20400b5c 	.word	0x20400b5c
  4023c4:	20400ae4 	.word	0x20400ae4
  4023c8:	00401239 	.word	0x00401239
  4023cc:	00401285 	.word	0x00401285

004023d0 <xTaskResumeAll>:
{
  4023d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4023d4:	4b38      	ldr	r3, [pc, #224]	; (4024b8 <xTaskResumeAll+0xe8>)
  4023d6:	681b      	ldr	r3, [r3, #0]
  4023d8:	b953      	cbnz	r3, 4023f0 <xTaskResumeAll+0x20>
  4023da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023de:	b672      	cpsid	i
  4023e0:	f383 8811 	msr	BASEPRI, r3
  4023e4:	f3bf 8f6f 	isb	sy
  4023e8:	f3bf 8f4f 	dsb	sy
  4023ec:	b662      	cpsie	i
  4023ee:	e7fe      	b.n	4023ee <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4023f0:	4b32      	ldr	r3, [pc, #200]	; (4024bc <xTaskResumeAll+0xec>)
  4023f2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4023f4:	4b30      	ldr	r3, [pc, #192]	; (4024b8 <xTaskResumeAll+0xe8>)
  4023f6:	681a      	ldr	r2, [r3, #0]
  4023f8:	3a01      	subs	r2, #1
  4023fa:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4023fc:	681b      	ldr	r3, [r3, #0]
  4023fe:	2b00      	cmp	r3, #0
  402400:	d155      	bne.n	4024ae <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402402:	4b2f      	ldr	r3, [pc, #188]	; (4024c0 <xTaskResumeAll+0xf0>)
  402404:	681b      	ldr	r3, [r3, #0]
  402406:	2b00      	cmp	r3, #0
  402408:	d132      	bne.n	402470 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40240a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40240c:	4b2d      	ldr	r3, [pc, #180]	; (4024c4 <xTaskResumeAll+0xf4>)
  40240e:	4798      	blx	r3
}
  402410:	4620      	mov	r0, r4
  402412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402416:	68fb      	ldr	r3, [r7, #12]
  402418:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40241a:	f104 0018 	add.w	r0, r4, #24
  40241e:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402420:	f104 0804 	add.w	r8, r4, #4
  402424:	4640      	mov	r0, r8
  402426:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402428:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40242a:	682a      	ldr	r2, [r5, #0]
  40242c:	2301      	movs	r3, #1
  40242e:	4083      	lsls	r3, r0
  402430:	4313      	orrs	r3, r2
  402432:	602b      	str	r3, [r5, #0]
  402434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402438:	4641      	mov	r1, r8
  40243a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40243e:	4b22      	ldr	r3, [pc, #136]	; (4024c8 <xTaskResumeAll+0xf8>)
  402440:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402442:	4b22      	ldr	r3, [pc, #136]	; (4024cc <xTaskResumeAll+0xfc>)
  402444:	681b      	ldr	r3, [r3, #0]
  402446:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40244a:	429a      	cmp	r2, r3
  40244c:	d20c      	bcs.n	402468 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40244e:	683b      	ldr	r3, [r7, #0]
  402450:	2b00      	cmp	r3, #0
  402452:	d1e0      	bne.n	402416 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402454:	4b1e      	ldr	r3, [pc, #120]	; (4024d0 <xTaskResumeAll+0x100>)
  402456:	681b      	ldr	r3, [r3, #0]
  402458:	b1db      	cbz	r3, 402492 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40245a:	4b1d      	ldr	r3, [pc, #116]	; (4024d0 <xTaskResumeAll+0x100>)
  40245c:	681b      	ldr	r3, [r3, #0]
  40245e:	b1c3      	cbz	r3, 402492 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402460:	4e1c      	ldr	r6, [pc, #112]	; (4024d4 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402462:	4d1d      	ldr	r5, [pc, #116]	; (4024d8 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402464:	4c1a      	ldr	r4, [pc, #104]	; (4024d0 <xTaskResumeAll+0x100>)
  402466:	e00e      	b.n	402486 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402468:	2201      	movs	r2, #1
  40246a:	4b1b      	ldr	r3, [pc, #108]	; (4024d8 <xTaskResumeAll+0x108>)
  40246c:	601a      	str	r2, [r3, #0]
  40246e:	e7ee      	b.n	40244e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402470:	4f1a      	ldr	r7, [pc, #104]	; (4024dc <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402472:	4e1b      	ldr	r6, [pc, #108]	; (4024e0 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402474:	4d1b      	ldr	r5, [pc, #108]	; (4024e4 <xTaskResumeAll+0x114>)
  402476:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4024ec <xTaskResumeAll+0x11c>
  40247a:	e7e8      	b.n	40244e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40247c:	6823      	ldr	r3, [r4, #0]
  40247e:	3b01      	subs	r3, #1
  402480:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402482:	6823      	ldr	r3, [r4, #0]
  402484:	b12b      	cbz	r3, 402492 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402486:	47b0      	blx	r6
  402488:	2800      	cmp	r0, #0
  40248a:	d0f7      	beq.n	40247c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40248c:	2301      	movs	r3, #1
  40248e:	602b      	str	r3, [r5, #0]
  402490:	e7f4      	b.n	40247c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402492:	4b11      	ldr	r3, [pc, #68]	; (4024d8 <xTaskResumeAll+0x108>)
  402494:	681b      	ldr	r3, [r3, #0]
  402496:	2b01      	cmp	r3, #1
  402498:	d10b      	bne.n	4024b2 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40249a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40249e:	4b12      	ldr	r3, [pc, #72]	; (4024e8 <xTaskResumeAll+0x118>)
  4024a0:	601a      	str	r2, [r3, #0]
  4024a2:	f3bf 8f4f 	dsb	sy
  4024a6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4024aa:	2401      	movs	r4, #1
  4024ac:	e7ae      	b.n	40240c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4024ae:	2400      	movs	r4, #0
  4024b0:	e7ac      	b.n	40240c <xTaskResumeAll+0x3c>
  4024b2:	2400      	movs	r4, #0
  4024b4:	e7aa      	b.n	40240c <xTaskResumeAll+0x3c>
  4024b6:	bf00      	nop
  4024b8:	20400ad8 	.word	0x20400ad8
  4024bc:	00401369 	.word	0x00401369
  4024c0:	20400ad0 	.word	0x20400ad0
  4024c4:	004013b5 	.word	0x004013b5
  4024c8:	00401239 	.word	0x00401239
  4024cc:	20400a60 	.word	0x20400a60
  4024d0:	20400ad4 	.word	0x20400ad4
  4024d4:	00402285 	.word	0x00402285
  4024d8:	20400b5c 	.word	0x20400b5c
  4024dc:	20400b18 	.word	0x20400b18
  4024e0:	00401285 	.word	0x00401285
  4024e4:	20400ae4 	.word	0x20400ae4
  4024e8:	e000ed04 	.word	0xe000ed04
  4024ec:	20400a6c 	.word	0x20400a6c

004024f0 <vTaskDelay>:
	{
  4024f0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4024f2:	2800      	cmp	r0, #0
  4024f4:	d029      	beq.n	40254a <vTaskDelay+0x5a>
  4024f6:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4024f8:	4b18      	ldr	r3, [pc, #96]	; (40255c <vTaskDelay+0x6c>)
  4024fa:	681b      	ldr	r3, [r3, #0]
  4024fc:	b153      	cbz	r3, 402514 <vTaskDelay+0x24>
  4024fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402502:	b672      	cpsid	i
  402504:	f383 8811 	msr	BASEPRI, r3
  402508:	f3bf 8f6f 	isb	sy
  40250c:	f3bf 8f4f 	dsb	sy
  402510:	b662      	cpsie	i
  402512:	e7fe      	b.n	402512 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402514:	4b12      	ldr	r3, [pc, #72]	; (402560 <vTaskDelay+0x70>)
  402516:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402518:	4b12      	ldr	r3, [pc, #72]	; (402564 <vTaskDelay+0x74>)
  40251a:	681b      	ldr	r3, [r3, #0]
  40251c:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40251e:	4b12      	ldr	r3, [pc, #72]	; (402568 <vTaskDelay+0x78>)
  402520:	6818      	ldr	r0, [r3, #0]
  402522:	3004      	adds	r0, #4
  402524:	4b11      	ldr	r3, [pc, #68]	; (40256c <vTaskDelay+0x7c>)
  402526:	4798      	blx	r3
  402528:	b948      	cbnz	r0, 40253e <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40252a:	4b0f      	ldr	r3, [pc, #60]	; (402568 <vTaskDelay+0x78>)
  40252c:	681a      	ldr	r2, [r3, #0]
  40252e:	4910      	ldr	r1, [pc, #64]	; (402570 <vTaskDelay+0x80>)
  402530:	680b      	ldr	r3, [r1, #0]
  402532:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402534:	2201      	movs	r2, #1
  402536:	4082      	lsls	r2, r0
  402538:	ea23 0302 	bic.w	r3, r3, r2
  40253c:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40253e:	4620      	mov	r0, r4
  402540:	4b0c      	ldr	r3, [pc, #48]	; (402574 <vTaskDelay+0x84>)
  402542:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402544:	4b0c      	ldr	r3, [pc, #48]	; (402578 <vTaskDelay+0x88>)
  402546:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402548:	b938      	cbnz	r0, 40255a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40254e:	4b0b      	ldr	r3, [pc, #44]	; (40257c <vTaskDelay+0x8c>)
  402550:	601a      	str	r2, [r3, #0]
  402552:	f3bf 8f4f 	dsb	sy
  402556:	f3bf 8f6f 	isb	sy
  40255a:	bd10      	pop	{r4, pc}
  40255c:	20400ad8 	.word	0x20400ad8
  402560:	00402269 	.word	0x00402269
  402564:	20400b58 	.word	0x20400b58
  402568:	20400a60 	.word	0x20400a60
  40256c:	00401285 	.word	0x00401285
  402570:	20400ae4 	.word	0x20400ae4
  402574:	00401f51 	.word	0x00401f51
  402578:	004023d1 	.word	0x004023d1
  40257c:	e000ed04 	.word	0xe000ed04

00402580 <prvIdleTask>:
{
  402580:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402582:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40260c <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402586:	4e19      	ldr	r6, [pc, #100]	; (4025ec <prvIdleTask+0x6c>)
				taskYIELD();
  402588:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402610 <prvIdleTask+0x90>
  40258c:	e02a      	b.n	4025e4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40258e:	4b18      	ldr	r3, [pc, #96]	; (4025f0 <prvIdleTask+0x70>)
  402590:	681b      	ldr	r3, [r3, #0]
  402592:	2b01      	cmp	r3, #1
  402594:	d81e      	bhi.n	4025d4 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402596:	682b      	ldr	r3, [r5, #0]
  402598:	2b00      	cmp	r3, #0
  40259a:	d0f8      	beq.n	40258e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40259c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40259e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4025a0:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4025a2:	2c00      	cmp	r4, #0
  4025a4:	d0f7      	beq.n	402596 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4025a6:	4b13      	ldr	r3, [pc, #76]	; (4025f4 <prvIdleTask+0x74>)
  4025a8:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4025aa:	68f3      	ldr	r3, [r6, #12]
  4025ac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4025ae:	1d20      	adds	r0, r4, #4
  4025b0:	4b11      	ldr	r3, [pc, #68]	; (4025f8 <prvIdleTask+0x78>)
  4025b2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4025b4:	4a11      	ldr	r2, [pc, #68]	; (4025fc <prvIdleTask+0x7c>)
  4025b6:	6813      	ldr	r3, [r2, #0]
  4025b8:	3b01      	subs	r3, #1
  4025ba:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4025bc:	682b      	ldr	r3, [r5, #0]
  4025be:	3b01      	subs	r3, #1
  4025c0:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4025c2:	4b0f      	ldr	r3, [pc, #60]	; (402600 <prvIdleTask+0x80>)
  4025c4:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4025c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4025c8:	f8df a048 	ldr.w	sl, [pc, #72]	; 402614 <prvIdleTask+0x94>
  4025cc:	47d0      	blx	sl
		vPortFree( pxTCB );
  4025ce:	4620      	mov	r0, r4
  4025d0:	47d0      	blx	sl
  4025d2:	e7e0      	b.n	402596 <prvIdleTask+0x16>
				taskYIELD();
  4025d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4025d8:	f8c9 3000 	str.w	r3, [r9]
  4025dc:	f3bf 8f4f 	dsb	sy
  4025e0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4025e4:	4d07      	ldr	r5, [pc, #28]	; (402604 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4025e6:	4f08      	ldr	r7, [pc, #32]	; (402608 <prvIdleTask+0x88>)
  4025e8:	e7d5      	b.n	402596 <prvIdleTask+0x16>
  4025ea:	bf00      	nop
  4025ec:	20400b44 	.word	0x20400b44
  4025f0:	20400a6c 	.word	0x20400a6c
  4025f4:	00401369 	.word	0x00401369
  4025f8:	00401285 	.word	0x00401285
  4025fc:	20400ad0 	.word	0x20400ad0
  402600:	004013b5 	.word	0x004013b5
  402604:	20400ae0 	.word	0x20400ae0
  402608:	004023d1 	.word	0x004023d1
  40260c:	00402269 	.word	0x00402269
  402610:	e000ed04 	.word	0xe000ed04
  402614:	004015f5 	.word	0x004015f5

00402618 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402618:	4b2d      	ldr	r3, [pc, #180]	; (4026d0 <vTaskSwitchContext+0xb8>)
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	2b00      	cmp	r3, #0
  40261e:	d12c      	bne.n	40267a <vTaskSwitchContext+0x62>
{
  402620:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402622:	2200      	movs	r2, #0
  402624:	4b2b      	ldr	r3, [pc, #172]	; (4026d4 <vTaskSwitchContext+0xbc>)
  402626:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402628:	4b2b      	ldr	r3, [pc, #172]	; (4026d8 <vTaskSwitchContext+0xc0>)
  40262a:	681b      	ldr	r3, [r3, #0]
  40262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40262e:	681a      	ldr	r2, [r3, #0]
  402630:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402634:	d103      	bne.n	40263e <vTaskSwitchContext+0x26>
  402636:	685a      	ldr	r2, [r3, #4]
  402638:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40263c:	d021      	beq.n	402682 <vTaskSwitchContext+0x6a>
  40263e:	4b26      	ldr	r3, [pc, #152]	; (4026d8 <vTaskSwitchContext+0xc0>)
  402640:	6818      	ldr	r0, [r3, #0]
  402642:	6819      	ldr	r1, [r3, #0]
  402644:	3134      	adds	r1, #52	; 0x34
  402646:	4b25      	ldr	r3, [pc, #148]	; (4026dc <vTaskSwitchContext+0xc4>)
  402648:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40264a:	4b25      	ldr	r3, [pc, #148]	; (4026e0 <vTaskSwitchContext+0xc8>)
  40264c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40264e:	fab3 f383 	clz	r3, r3
  402652:	b2db      	uxtb	r3, r3
  402654:	f1c3 031f 	rsb	r3, r3, #31
  402658:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40265c:	4a21      	ldr	r2, [pc, #132]	; (4026e4 <vTaskSwitchContext+0xcc>)
  40265e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402662:	b9ba      	cbnz	r2, 402694 <vTaskSwitchContext+0x7c>
	__asm volatile
  402664:	f04f 0380 	mov.w	r3, #128	; 0x80
  402668:	b672      	cpsid	i
  40266a:	f383 8811 	msr	BASEPRI, r3
  40266e:	f3bf 8f6f 	isb	sy
  402672:	f3bf 8f4f 	dsb	sy
  402676:	b662      	cpsie	i
  402678:	e7fe      	b.n	402678 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40267a:	2201      	movs	r2, #1
  40267c:	4b15      	ldr	r3, [pc, #84]	; (4026d4 <vTaskSwitchContext+0xbc>)
  40267e:	601a      	str	r2, [r3, #0]
  402680:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402682:	689a      	ldr	r2, [r3, #8]
  402684:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402688:	d1d9      	bne.n	40263e <vTaskSwitchContext+0x26>
  40268a:	68db      	ldr	r3, [r3, #12]
  40268c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402690:	d1d5      	bne.n	40263e <vTaskSwitchContext+0x26>
  402692:	e7da      	b.n	40264a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402694:	4a13      	ldr	r2, [pc, #76]	; (4026e4 <vTaskSwitchContext+0xcc>)
  402696:	0099      	lsls	r1, r3, #2
  402698:	18c8      	adds	r0, r1, r3
  40269a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40269e:	6844      	ldr	r4, [r0, #4]
  4026a0:	6864      	ldr	r4, [r4, #4]
  4026a2:	6044      	str	r4, [r0, #4]
  4026a4:	4419      	add	r1, r3
  4026a6:	4602      	mov	r2, r0
  4026a8:	3208      	adds	r2, #8
  4026aa:	4294      	cmp	r4, r2
  4026ac:	d009      	beq.n	4026c2 <vTaskSwitchContext+0xaa>
  4026ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4026b2:	4a0c      	ldr	r2, [pc, #48]	; (4026e4 <vTaskSwitchContext+0xcc>)
  4026b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4026b8:	685b      	ldr	r3, [r3, #4]
  4026ba:	68da      	ldr	r2, [r3, #12]
  4026bc:	4b06      	ldr	r3, [pc, #24]	; (4026d8 <vTaskSwitchContext+0xc0>)
  4026be:	601a      	str	r2, [r3, #0]
  4026c0:	bd10      	pop	{r4, pc}
  4026c2:	6860      	ldr	r0, [r4, #4]
  4026c4:	4a07      	ldr	r2, [pc, #28]	; (4026e4 <vTaskSwitchContext+0xcc>)
  4026c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4026ca:	6050      	str	r0, [r2, #4]
  4026cc:	e7ef      	b.n	4026ae <vTaskSwitchContext+0x96>
  4026ce:	bf00      	nop
  4026d0:	20400ad8 	.word	0x20400ad8
  4026d4:	20400b5c 	.word	0x20400b5c
  4026d8:	20400a60 	.word	0x20400a60
  4026dc:	004032a1 	.word	0x004032a1
  4026e0:	20400ae4 	.word	0x20400ae4
  4026e4:	20400a6c 	.word	0x20400a6c

004026e8 <vTaskPlaceOnEventList>:
{
  4026e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4026ea:	b1e0      	cbz	r0, 402726 <vTaskPlaceOnEventList+0x3e>
  4026ec:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4026ee:	4d17      	ldr	r5, [pc, #92]	; (40274c <vTaskPlaceOnEventList+0x64>)
  4026f0:	6829      	ldr	r1, [r5, #0]
  4026f2:	3118      	adds	r1, #24
  4026f4:	4b16      	ldr	r3, [pc, #88]	; (402750 <vTaskPlaceOnEventList+0x68>)
  4026f6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4026f8:	6828      	ldr	r0, [r5, #0]
  4026fa:	3004      	adds	r0, #4
  4026fc:	4b15      	ldr	r3, [pc, #84]	; (402754 <vTaskPlaceOnEventList+0x6c>)
  4026fe:	4798      	blx	r3
  402700:	b940      	cbnz	r0, 402714 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402702:	682a      	ldr	r2, [r5, #0]
  402704:	4914      	ldr	r1, [pc, #80]	; (402758 <vTaskPlaceOnEventList+0x70>)
  402706:	680b      	ldr	r3, [r1, #0]
  402708:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40270a:	2201      	movs	r2, #1
  40270c:	4082      	lsls	r2, r0
  40270e:	ea23 0302 	bic.w	r3, r3, r2
  402712:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402714:	f1b4 3fff 	cmp.w	r4, #4294967295
  402718:	d010      	beq.n	40273c <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40271a:	4b10      	ldr	r3, [pc, #64]	; (40275c <vTaskPlaceOnEventList+0x74>)
  40271c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40271e:	4420      	add	r0, r4
  402720:	4b0f      	ldr	r3, [pc, #60]	; (402760 <vTaskPlaceOnEventList+0x78>)
  402722:	4798      	blx	r3
  402724:	bd38      	pop	{r3, r4, r5, pc}
  402726:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272a:	b672      	cpsid	i
  40272c:	f383 8811 	msr	BASEPRI, r3
  402730:	f3bf 8f6f 	isb	sy
  402734:	f3bf 8f4f 	dsb	sy
  402738:	b662      	cpsie	i
  40273a:	e7fe      	b.n	40273a <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40273c:	4b03      	ldr	r3, [pc, #12]	; (40274c <vTaskPlaceOnEventList+0x64>)
  40273e:	6819      	ldr	r1, [r3, #0]
  402740:	3104      	adds	r1, #4
  402742:	4808      	ldr	r0, [pc, #32]	; (402764 <vTaskPlaceOnEventList+0x7c>)
  402744:	4b08      	ldr	r3, [pc, #32]	; (402768 <vTaskPlaceOnEventList+0x80>)
  402746:	4798      	blx	r3
  402748:	bd38      	pop	{r3, r4, r5, pc}
  40274a:	bf00      	nop
  40274c:	20400a60 	.word	0x20400a60
  402750:	00401251 	.word	0x00401251
  402754:	00401285 	.word	0x00401285
  402758:	20400ae4 	.word	0x20400ae4
  40275c:	20400b58 	.word	0x20400b58
  402760:	00401f51 	.word	0x00401f51
  402764:	20400b30 	.word	0x20400b30
  402768:	00401239 	.word	0x00401239

0040276c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40276c:	b1e8      	cbz	r0, 4027aa <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40276e:	b570      	push	{r4, r5, r6, lr}
  402770:	4615      	mov	r5, r2
  402772:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402774:	4e16      	ldr	r6, [pc, #88]	; (4027d0 <vTaskPlaceOnEventListRestricted+0x64>)
  402776:	6831      	ldr	r1, [r6, #0]
  402778:	3118      	adds	r1, #24
  40277a:	4b16      	ldr	r3, [pc, #88]	; (4027d4 <vTaskPlaceOnEventListRestricted+0x68>)
  40277c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40277e:	6830      	ldr	r0, [r6, #0]
  402780:	3004      	adds	r0, #4
  402782:	4b15      	ldr	r3, [pc, #84]	; (4027d8 <vTaskPlaceOnEventListRestricted+0x6c>)
  402784:	4798      	blx	r3
  402786:	b940      	cbnz	r0, 40279a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402788:	6832      	ldr	r2, [r6, #0]
  40278a:	4914      	ldr	r1, [pc, #80]	; (4027dc <vTaskPlaceOnEventListRestricted+0x70>)
  40278c:	680b      	ldr	r3, [r1, #0]
  40278e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402790:	2201      	movs	r2, #1
  402792:	4082      	lsls	r2, r0
  402794:	ea23 0302 	bic.w	r3, r3, r2
  402798:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40279a:	2d01      	cmp	r5, #1
  40279c:	d010      	beq.n	4027c0 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40279e:	4b10      	ldr	r3, [pc, #64]	; (4027e0 <vTaskPlaceOnEventListRestricted+0x74>)
  4027a0:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4027a2:	4420      	add	r0, r4
  4027a4:	4b0f      	ldr	r3, [pc, #60]	; (4027e4 <vTaskPlaceOnEventListRestricted+0x78>)
  4027a6:	4798      	blx	r3
  4027a8:	bd70      	pop	{r4, r5, r6, pc}
  4027aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027ae:	b672      	cpsid	i
  4027b0:	f383 8811 	msr	BASEPRI, r3
  4027b4:	f3bf 8f6f 	isb	sy
  4027b8:	f3bf 8f4f 	dsb	sy
  4027bc:	b662      	cpsie	i
  4027be:	e7fe      	b.n	4027be <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4027c0:	4b03      	ldr	r3, [pc, #12]	; (4027d0 <vTaskPlaceOnEventListRestricted+0x64>)
  4027c2:	6819      	ldr	r1, [r3, #0]
  4027c4:	3104      	adds	r1, #4
  4027c6:	4808      	ldr	r0, [pc, #32]	; (4027e8 <vTaskPlaceOnEventListRestricted+0x7c>)
  4027c8:	4b02      	ldr	r3, [pc, #8]	; (4027d4 <vTaskPlaceOnEventListRestricted+0x68>)
  4027ca:	4798      	blx	r3
  4027cc:	bd70      	pop	{r4, r5, r6, pc}
  4027ce:	bf00      	nop
  4027d0:	20400a60 	.word	0x20400a60
  4027d4:	00401239 	.word	0x00401239
  4027d8:	00401285 	.word	0x00401285
  4027dc:	20400ae4 	.word	0x20400ae4
  4027e0:	20400b58 	.word	0x20400b58
  4027e4:	00401f51 	.word	0x00401f51
  4027e8:	20400b30 	.word	0x20400b30

004027ec <xTaskRemoveFromEventList>:
{
  4027ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4027ee:	68c3      	ldr	r3, [r0, #12]
  4027f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4027f2:	b324      	cbz	r4, 40283e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4027f4:	f104 0518 	add.w	r5, r4, #24
  4027f8:	4628      	mov	r0, r5
  4027fa:	4b1a      	ldr	r3, [pc, #104]	; (402864 <xTaskRemoveFromEventList+0x78>)
  4027fc:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4027fe:	4b1a      	ldr	r3, [pc, #104]	; (402868 <xTaskRemoveFromEventList+0x7c>)
  402800:	681b      	ldr	r3, [r3, #0]
  402802:	bb3b      	cbnz	r3, 402854 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402804:	1d25      	adds	r5, r4, #4
  402806:	4628      	mov	r0, r5
  402808:	4b16      	ldr	r3, [pc, #88]	; (402864 <xTaskRemoveFromEventList+0x78>)
  40280a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40280c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40280e:	4a17      	ldr	r2, [pc, #92]	; (40286c <xTaskRemoveFromEventList+0x80>)
  402810:	6811      	ldr	r1, [r2, #0]
  402812:	2301      	movs	r3, #1
  402814:	4083      	lsls	r3, r0
  402816:	430b      	orrs	r3, r1
  402818:	6013      	str	r3, [r2, #0]
  40281a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40281e:	4629      	mov	r1, r5
  402820:	4b13      	ldr	r3, [pc, #76]	; (402870 <xTaskRemoveFromEventList+0x84>)
  402822:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402826:	4b13      	ldr	r3, [pc, #76]	; (402874 <xTaskRemoveFromEventList+0x88>)
  402828:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40282a:	4b13      	ldr	r3, [pc, #76]	; (402878 <xTaskRemoveFromEventList+0x8c>)
  40282c:	681b      	ldr	r3, [r3, #0]
  40282e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402832:	429a      	cmp	r2, r3
  402834:	d913      	bls.n	40285e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402836:	2001      	movs	r0, #1
  402838:	4b10      	ldr	r3, [pc, #64]	; (40287c <xTaskRemoveFromEventList+0x90>)
  40283a:	6018      	str	r0, [r3, #0]
  40283c:	bd38      	pop	{r3, r4, r5, pc}
  40283e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402842:	b672      	cpsid	i
  402844:	f383 8811 	msr	BASEPRI, r3
  402848:	f3bf 8f6f 	isb	sy
  40284c:	f3bf 8f4f 	dsb	sy
  402850:	b662      	cpsie	i
  402852:	e7fe      	b.n	402852 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402854:	4629      	mov	r1, r5
  402856:	480a      	ldr	r0, [pc, #40]	; (402880 <xTaskRemoveFromEventList+0x94>)
  402858:	4b06      	ldr	r3, [pc, #24]	; (402874 <xTaskRemoveFromEventList+0x88>)
  40285a:	4798      	blx	r3
  40285c:	e7e5      	b.n	40282a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40285e:	2000      	movs	r0, #0
}
  402860:	bd38      	pop	{r3, r4, r5, pc}
  402862:	bf00      	nop
  402864:	00401285 	.word	0x00401285
  402868:	20400ad8 	.word	0x20400ad8
  40286c:	20400ae4 	.word	0x20400ae4
  402870:	20400a6c 	.word	0x20400a6c
  402874:	00401239 	.word	0x00401239
  402878:	20400a60 	.word	0x20400a60
  40287c:	20400b5c 	.word	0x20400b5c
  402880:	20400b18 	.word	0x20400b18

00402884 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402884:	b130      	cbz	r0, 402894 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402886:	4a09      	ldr	r2, [pc, #36]	; (4028ac <vTaskSetTimeOutState+0x28>)
  402888:	6812      	ldr	r2, [r2, #0]
  40288a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40288c:	4a08      	ldr	r2, [pc, #32]	; (4028b0 <vTaskSetTimeOutState+0x2c>)
  40288e:	6812      	ldr	r2, [r2, #0]
  402890:	6042      	str	r2, [r0, #4]
  402892:	4770      	bx	lr
  402894:	f04f 0380 	mov.w	r3, #128	; 0x80
  402898:	b672      	cpsid	i
  40289a:	f383 8811 	msr	BASEPRI, r3
  40289e:	f3bf 8f6f 	isb	sy
  4028a2:	f3bf 8f4f 	dsb	sy
  4028a6:	b662      	cpsie	i
  4028a8:	e7fe      	b.n	4028a8 <vTaskSetTimeOutState+0x24>
  4028aa:	bf00      	nop
  4028ac:	20400b14 	.word	0x20400b14
  4028b0:	20400b58 	.word	0x20400b58

004028b4 <xTaskCheckForTimeOut>:
{
  4028b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4028b6:	b1c0      	cbz	r0, 4028ea <xTaskCheckForTimeOut+0x36>
  4028b8:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4028ba:	b309      	cbz	r1, 402900 <xTaskCheckForTimeOut+0x4c>
  4028bc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4028be:	4b1d      	ldr	r3, [pc, #116]	; (402934 <xTaskCheckForTimeOut+0x80>)
  4028c0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4028c2:	4b1d      	ldr	r3, [pc, #116]	; (402938 <xTaskCheckForTimeOut+0x84>)
  4028c4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4028c6:	682b      	ldr	r3, [r5, #0]
  4028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028cc:	d02e      	beq.n	40292c <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4028ce:	491b      	ldr	r1, [pc, #108]	; (40293c <xTaskCheckForTimeOut+0x88>)
  4028d0:	6809      	ldr	r1, [r1, #0]
  4028d2:	6820      	ldr	r0, [r4, #0]
  4028d4:	4288      	cmp	r0, r1
  4028d6:	d002      	beq.n	4028de <xTaskCheckForTimeOut+0x2a>
  4028d8:	6861      	ldr	r1, [r4, #4]
  4028da:	428a      	cmp	r2, r1
  4028dc:	d228      	bcs.n	402930 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4028de:	6861      	ldr	r1, [r4, #4]
  4028e0:	1a50      	subs	r0, r2, r1
  4028e2:	4283      	cmp	r3, r0
  4028e4:	d817      	bhi.n	402916 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4028e6:	2401      	movs	r4, #1
  4028e8:	e01c      	b.n	402924 <xTaskCheckForTimeOut+0x70>
  4028ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028ee:	b672      	cpsid	i
  4028f0:	f383 8811 	msr	BASEPRI, r3
  4028f4:	f3bf 8f6f 	isb	sy
  4028f8:	f3bf 8f4f 	dsb	sy
  4028fc:	b662      	cpsie	i
  4028fe:	e7fe      	b.n	4028fe <xTaskCheckForTimeOut+0x4a>
  402900:	f04f 0380 	mov.w	r3, #128	; 0x80
  402904:	b672      	cpsid	i
  402906:	f383 8811 	msr	BASEPRI, r3
  40290a:	f3bf 8f6f 	isb	sy
  40290e:	f3bf 8f4f 	dsb	sy
  402912:	b662      	cpsie	i
  402914:	e7fe      	b.n	402914 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402916:	1a9b      	subs	r3, r3, r2
  402918:	440b      	add	r3, r1
  40291a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40291c:	4620      	mov	r0, r4
  40291e:	4b08      	ldr	r3, [pc, #32]	; (402940 <xTaskCheckForTimeOut+0x8c>)
  402920:	4798      	blx	r3
			xReturn = pdFALSE;
  402922:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402924:	4b07      	ldr	r3, [pc, #28]	; (402944 <xTaskCheckForTimeOut+0x90>)
  402926:	4798      	blx	r3
}
  402928:	4620      	mov	r0, r4
  40292a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  40292c:	2400      	movs	r4, #0
  40292e:	e7f9      	b.n	402924 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402930:	2401      	movs	r4, #1
  402932:	e7f7      	b.n	402924 <xTaskCheckForTimeOut+0x70>
  402934:	00401369 	.word	0x00401369
  402938:	20400b58 	.word	0x20400b58
  40293c:	20400b14 	.word	0x20400b14
  402940:	00402885 	.word	0x00402885
  402944:	004013b5 	.word	0x004013b5

00402948 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402948:	2201      	movs	r2, #1
  40294a:	4b01      	ldr	r3, [pc, #4]	; (402950 <vTaskMissedYield+0x8>)
  40294c:	601a      	str	r2, [r3, #0]
  40294e:	4770      	bx	lr
  402950:	20400b5c 	.word	0x20400b5c

00402954 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402954:	4b05      	ldr	r3, [pc, #20]	; (40296c <xTaskGetSchedulerState+0x18>)
  402956:	681b      	ldr	r3, [r3, #0]
  402958:	b133      	cbz	r3, 402968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40295a:	4b05      	ldr	r3, [pc, #20]	; (402970 <xTaskGetSchedulerState+0x1c>)
  40295c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40295e:	2b00      	cmp	r3, #0
  402960:	bf0c      	ite	eq
  402962:	2002      	moveq	r0, #2
  402964:	2000      	movne	r0, #0
  402966:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402968:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40296a:	4770      	bx	lr
  40296c:	20400b2c 	.word	0x20400b2c
  402970:	20400ad8 	.word	0x20400ad8

00402974 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402974:	2800      	cmp	r0, #0
  402976:	d044      	beq.n	402a02 <vTaskPriorityInherit+0x8e>
	{
  402978:	b538      	push	{r3, r4, r5, lr}
  40297a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40297c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40297e:	4921      	ldr	r1, [pc, #132]	; (402a04 <vTaskPriorityInherit+0x90>)
  402980:	6809      	ldr	r1, [r1, #0]
  402982:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402984:	428a      	cmp	r2, r1
  402986:	d214      	bcs.n	4029b2 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402988:	6981      	ldr	r1, [r0, #24]
  40298a:	2900      	cmp	r1, #0
  40298c:	db05      	blt.n	40299a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40298e:	491d      	ldr	r1, [pc, #116]	; (402a04 <vTaskPriorityInherit+0x90>)
  402990:	6809      	ldr	r1, [r1, #0]
  402992:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402994:	f1c1 0105 	rsb	r1, r1, #5
  402998:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40299a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40299e:	491a      	ldr	r1, [pc, #104]	; (402a08 <vTaskPriorityInherit+0x94>)
  4029a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4029a4:	6961      	ldr	r1, [r4, #20]
  4029a6:	4291      	cmp	r1, r2
  4029a8:	d004      	beq.n	4029b4 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4029aa:	4a16      	ldr	r2, [pc, #88]	; (402a04 <vTaskPriorityInherit+0x90>)
  4029ac:	6812      	ldr	r2, [r2, #0]
  4029ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4029b0:	62e2      	str	r2, [r4, #44]	; 0x2c
  4029b2:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029b4:	1d25      	adds	r5, r4, #4
  4029b6:	4628      	mov	r0, r5
  4029b8:	4b14      	ldr	r3, [pc, #80]	; (402a0c <vTaskPriorityInherit+0x98>)
  4029ba:	4798      	blx	r3
  4029bc:	b970      	cbnz	r0, 4029dc <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4029be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4029c4:	4a10      	ldr	r2, [pc, #64]	; (402a08 <vTaskPriorityInherit+0x94>)
  4029c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4029ca:	b93a      	cbnz	r2, 4029dc <vTaskPriorityInherit+0x68>
  4029cc:	4810      	ldr	r0, [pc, #64]	; (402a10 <vTaskPriorityInherit+0x9c>)
  4029ce:	6802      	ldr	r2, [r0, #0]
  4029d0:	2101      	movs	r1, #1
  4029d2:	fa01 f303 	lsl.w	r3, r1, r3
  4029d6:	ea22 0303 	bic.w	r3, r2, r3
  4029da:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4029dc:	4b09      	ldr	r3, [pc, #36]	; (402a04 <vTaskPriorityInherit+0x90>)
  4029de:	681b      	ldr	r3, [r3, #0]
  4029e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4029e2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4029e4:	4a0a      	ldr	r2, [pc, #40]	; (402a10 <vTaskPriorityInherit+0x9c>)
  4029e6:	6811      	ldr	r1, [r2, #0]
  4029e8:	2301      	movs	r3, #1
  4029ea:	4083      	lsls	r3, r0
  4029ec:	430b      	orrs	r3, r1
  4029ee:	6013      	str	r3, [r2, #0]
  4029f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4029f4:	4629      	mov	r1, r5
  4029f6:	4b04      	ldr	r3, [pc, #16]	; (402a08 <vTaskPriorityInherit+0x94>)
  4029f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4029fc:	4b05      	ldr	r3, [pc, #20]	; (402a14 <vTaskPriorityInherit+0xa0>)
  4029fe:	4798      	blx	r3
  402a00:	bd38      	pop	{r3, r4, r5, pc}
  402a02:	4770      	bx	lr
  402a04:	20400a60 	.word	0x20400a60
  402a08:	20400a6c 	.word	0x20400a6c
  402a0c:	00401285 	.word	0x00401285
  402a10:	20400ae4 	.word	0x20400ae4
  402a14:	00401239 	.word	0x00401239

00402a18 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402a18:	2800      	cmp	r0, #0
  402a1a:	d04d      	beq.n	402ab8 <xTaskPriorityDisinherit+0xa0>
	{
  402a1c:	b538      	push	{r3, r4, r5, lr}
  402a1e:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402a20:	4a27      	ldr	r2, [pc, #156]	; (402ac0 <xTaskPriorityDisinherit+0xa8>)
  402a22:	6812      	ldr	r2, [r2, #0]
  402a24:	4290      	cmp	r0, r2
  402a26:	d00a      	beq.n	402a3e <xTaskPriorityDisinherit+0x26>
  402a28:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a2c:	b672      	cpsid	i
  402a2e:	f383 8811 	msr	BASEPRI, r3
  402a32:	f3bf 8f6f 	isb	sy
  402a36:	f3bf 8f4f 	dsb	sy
  402a3a:	b662      	cpsie	i
  402a3c:	e7fe      	b.n	402a3c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402a3e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402a40:	b952      	cbnz	r2, 402a58 <xTaskPriorityDisinherit+0x40>
  402a42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a46:	b672      	cpsid	i
  402a48:	f383 8811 	msr	BASEPRI, r3
  402a4c:	f3bf 8f6f 	isb	sy
  402a50:	f3bf 8f4f 	dsb	sy
  402a54:	b662      	cpsie	i
  402a56:	e7fe      	b.n	402a56 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402a58:	3a01      	subs	r2, #1
  402a5a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402a5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402a5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402a60:	4288      	cmp	r0, r1
  402a62:	d02b      	beq.n	402abc <xTaskPriorityDisinherit+0xa4>
  402a64:	bb52      	cbnz	r2, 402abc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402a66:	1d25      	adds	r5, r4, #4
  402a68:	4628      	mov	r0, r5
  402a6a:	4b16      	ldr	r3, [pc, #88]	; (402ac4 <xTaskPriorityDisinherit+0xac>)
  402a6c:	4798      	blx	r3
  402a6e:	b968      	cbnz	r0, 402a8c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402a72:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402a76:	4b14      	ldr	r3, [pc, #80]	; (402ac8 <xTaskPriorityDisinherit+0xb0>)
  402a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402a7c:	b933      	cbnz	r3, 402a8c <xTaskPriorityDisinherit+0x74>
  402a7e:	4813      	ldr	r0, [pc, #76]	; (402acc <xTaskPriorityDisinherit+0xb4>)
  402a80:	6803      	ldr	r3, [r0, #0]
  402a82:	2201      	movs	r2, #1
  402a84:	408a      	lsls	r2, r1
  402a86:	ea23 0302 	bic.w	r3, r3, r2
  402a8a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402a8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402a8e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a90:	f1c0 0305 	rsb	r3, r0, #5
  402a94:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402a96:	4a0d      	ldr	r2, [pc, #52]	; (402acc <xTaskPriorityDisinherit+0xb4>)
  402a98:	6811      	ldr	r1, [r2, #0]
  402a9a:	2401      	movs	r4, #1
  402a9c:	fa04 f300 	lsl.w	r3, r4, r0
  402aa0:	430b      	orrs	r3, r1
  402aa2:	6013      	str	r3, [r2, #0]
  402aa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402aa8:	4629      	mov	r1, r5
  402aaa:	4b07      	ldr	r3, [pc, #28]	; (402ac8 <xTaskPriorityDisinherit+0xb0>)
  402aac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ab0:	4b07      	ldr	r3, [pc, #28]	; (402ad0 <xTaskPriorityDisinherit+0xb8>)
  402ab2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402ab4:	4620      	mov	r0, r4
  402ab6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402ab8:	2000      	movs	r0, #0
  402aba:	4770      	bx	lr
  402abc:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402abe:	bd38      	pop	{r3, r4, r5, pc}
  402ac0:	20400a60 	.word	0x20400a60
  402ac4:	00401285 	.word	0x00401285
  402ac8:	20400a6c 	.word	0x20400a6c
  402acc:	20400ae4 	.word	0x20400ae4
  402ad0:	00401239 	.word	0x00401239

00402ad4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402ad4:	4b05      	ldr	r3, [pc, #20]	; (402aec <pvTaskIncrementMutexHeldCount+0x18>)
  402ad6:	681b      	ldr	r3, [r3, #0]
  402ad8:	b123      	cbz	r3, 402ae4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402ada:	4b04      	ldr	r3, [pc, #16]	; (402aec <pvTaskIncrementMutexHeldCount+0x18>)
  402adc:	681a      	ldr	r2, [r3, #0]
  402ade:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402ae0:	3301      	adds	r3, #1
  402ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402ae4:	4b01      	ldr	r3, [pc, #4]	; (402aec <pvTaskIncrementMutexHeldCount+0x18>)
  402ae6:	6818      	ldr	r0, [r3, #0]
	}
  402ae8:	4770      	bx	lr
  402aea:	bf00      	nop
  402aec:	20400a60 	.word	0x20400a60

00402af0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402af0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402af2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402af4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402af6:	4291      	cmp	r1, r2
  402af8:	d80c      	bhi.n	402b14 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402afa:	1ad2      	subs	r2, r2, r3
  402afc:	6983      	ldr	r3, [r0, #24]
  402afe:	429a      	cmp	r2, r3
  402b00:	d301      	bcc.n	402b06 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402b02:	2001      	movs	r0, #1
  402b04:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402b06:	1d01      	adds	r1, r0, #4
  402b08:	4b09      	ldr	r3, [pc, #36]	; (402b30 <prvInsertTimerInActiveList+0x40>)
  402b0a:	6818      	ldr	r0, [r3, #0]
  402b0c:	4b09      	ldr	r3, [pc, #36]	; (402b34 <prvInsertTimerInActiveList+0x44>)
  402b0e:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402b10:	2000      	movs	r0, #0
  402b12:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402b14:	429a      	cmp	r2, r3
  402b16:	d203      	bcs.n	402b20 <prvInsertTimerInActiveList+0x30>
  402b18:	4299      	cmp	r1, r3
  402b1a:	d301      	bcc.n	402b20 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402b1c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402b1e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b20:	1d01      	adds	r1, r0, #4
  402b22:	4b05      	ldr	r3, [pc, #20]	; (402b38 <prvInsertTimerInActiveList+0x48>)
  402b24:	6818      	ldr	r0, [r3, #0]
  402b26:	4b03      	ldr	r3, [pc, #12]	; (402b34 <prvInsertTimerInActiveList+0x44>)
  402b28:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402b2a:	2000      	movs	r0, #0
  402b2c:	bd08      	pop	{r3, pc}
  402b2e:	bf00      	nop
  402b30:	20400b64 	.word	0x20400b64
  402b34:	00401251 	.word	0x00401251
  402b38:	20400b60 	.word	0x20400b60

00402b3c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402b3c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402b3e:	4b15      	ldr	r3, [pc, #84]	; (402b94 <prvCheckForValidListAndQueue+0x58>)
  402b40:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402b42:	4b15      	ldr	r3, [pc, #84]	; (402b98 <prvCheckForValidListAndQueue+0x5c>)
  402b44:	681b      	ldr	r3, [r3, #0]
  402b46:	b113      	cbz	r3, 402b4e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402b48:	4b14      	ldr	r3, [pc, #80]	; (402b9c <prvCheckForValidListAndQueue+0x60>)
  402b4a:	4798      	blx	r3
  402b4c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402b4e:	4d14      	ldr	r5, [pc, #80]	; (402ba0 <prvCheckForValidListAndQueue+0x64>)
  402b50:	4628      	mov	r0, r5
  402b52:	4e14      	ldr	r6, [pc, #80]	; (402ba4 <prvCheckForValidListAndQueue+0x68>)
  402b54:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402b56:	4c14      	ldr	r4, [pc, #80]	; (402ba8 <prvCheckForValidListAndQueue+0x6c>)
  402b58:	4620      	mov	r0, r4
  402b5a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402b5c:	4b13      	ldr	r3, [pc, #76]	; (402bac <prvCheckForValidListAndQueue+0x70>)
  402b5e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402b60:	4b13      	ldr	r3, [pc, #76]	; (402bb0 <prvCheckForValidListAndQueue+0x74>)
  402b62:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402b64:	2200      	movs	r2, #0
  402b66:	2110      	movs	r1, #16
  402b68:	2005      	movs	r0, #5
  402b6a:	4b12      	ldr	r3, [pc, #72]	; (402bb4 <prvCheckForValidListAndQueue+0x78>)
  402b6c:	4798      	blx	r3
  402b6e:	4b0a      	ldr	r3, [pc, #40]	; (402b98 <prvCheckForValidListAndQueue+0x5c>)
  402b70:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402b72:	b118      	cbz	r0, 402b7c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402b74:	4910      	ldr	r1, [pc, #64]	; (402bb8 <prvCheckForValidListAndQueue+0x7c>)
  402b76:	4b11      	ldr	r3, [pc, #68]	; (402bbc <prvCheckForValidListAndQueue+0x80>)
  402b78:	4798      	blx	r3
  402b7a:	e7e5      	b.n	402b48 <prvCheckForValidListAndQueue+0xc>
  402b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b80:	b672      	cpsid	i
  402b82:	f383 8811 	msr	BASEPRI, r3
  402b86:	f3bf 8f6f 	isb	sy
  402b8a:	f3bf 8f4f 	dsb	sy
  402b8e:	b662      	cpsie	i
  402b90:	e7fe      	b.n	402b90 <prvCheckForValidListAndQueue+0x54>
  402b92:	bf00      	nop
  402b94:	00401369 	.word	0x00401369
  402b98:	20400b94 	.word	0x20400b94
  402b9c:	004013b5 	.word	0x004013b5
  402ba0:	20400b68 	.word	0x20400b68
  402ba4:	0040121d 	.word	0x0040121d
  402ba8:	20400b7c 	.word	0x20400b7c
  402bac:	20400b60 	.word	0x20400b60
  402bb0:	20400b64 	.word	0x20400b64
  402bb4:	00401889 	.word	0x00401889
  402bb8:	00409fec 	.word	0x00409fec
  402bbc:	00401e99 	.word	0x00401e99

00402bc0 <xTimerCreateTimerTask>:
{
  402bc0:	b510      	push	{r4, lr}
  402bc2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402bc4:	4b0f      	ldr	r3, [pc, #60]	; (402c04 <xTimerCreateTimerTask+0x44>)
  402bc6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402bc8:	4b0f      	ldr	r3, [pc, #60]	; (402c08 <xTimerCreateTimerTask+0x48>)
  402bca:	681b      	ldr	r3, [r3, #0]
  402bcc:	b173      	cbz	r3, 402bec <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402bce:	2300      	movs	r3, #0
  402bd0:	9303      	str	r3, [sp, #12]
  402bd2:	9302      	str	r3, [sp, #8]
  402bd4:	9301      	str	r3, [sp, #4]
  402bd6:	2204      	movs	r2, #4
  402bd8:	9200      	str	r2, [sp, #0]
  402bda:	f44f 7282 	mov.w	r2, #260	; 0x104
  402bde:	490b      	ldr	r1, [pc, #44]	; (402c0c <xTimerCreateTimerTask+0x4c>)
  402be0:	480b      	ldr	r0, [pc, #44]	; (402c10 <xTimerCreateTimerTask+0x50>)
  402be2:	4c0c      	ldr	r4, [pc, #48]	; (402c14 <xTimerCreateTimerTask+0x54>)
  402be4:	47a0      	blx	r4
	configASSERT( xReturn );
  402be6:	b108      	cbz	r0, 402bec <xTimerCreateTimerTask+0x2c>
}
  402be8:	b004      	add	sp, #16
  402bea:	bd10      	pop	{r4, pc}
  402bec:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bf0:	b672      	cpsid	i
  402bf2:	f383 8811 	msr	BASEPRI, r3
  402bf6:	f3bf 8f6f 	isb	sy
  402bfa:	f3bf 8f4f 	dsb	sy
  402bfe:	b662      	cpsie	i
  402c00:	e7fe      	b.n	402c00 <xTimerCreateTimerTask+0x40>
  402c02:	bf00      	nop
  402c04:	00402b3d 	.word	0x00402b3d
  402c08:	20400b94 	.word	0x20400b94
  402c0c:	00409ff4 	.word	0x00409ff4
  402c10:	00402d41 	.word	0x00402d41
  402c14:	00401fa9 	.word	0x00401fa9

00402c18 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402c18:	b1d8      	cbz	r0, 402c52 <xTimerGenericCommand+0x3a>
{
  402c1a:	b530      	push	{r4, r5, lr}
  402c1c:	b085      	sub	sp, #20
  402c1e:	4615      	mov	r5, r2
  402c20:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402c22:	4a15      	ldr	r2, [pc, #84]	; (402c78 <xTimerGenericCommand+0x60>)
  402c24:	6810      	ldr	r0, [r2, #0]
  402c26:	b320      	cbz	r0, 402c72 <xTimerGenericCommand+0x5a>
  402c28:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402c2a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402c2c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402c2e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402c30:	2905      	cmp	r1, #5
  402c32:	dc19      	bgt.n	402c68 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402c34:	4b11      	ldr	r3, [pc, #68]	; (402c7c <xTimerGenericCommand+0x64>)
  402c36:	4798      	blx	r3
  402c38:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402c3a:	f04f 0300 	mov.w	r3, #0
  402c3e:	bf0c      	ite	eq
  402c40:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402c42:	461a      	movne	r2, r3
  402c44:	4669      	mov	r1, sp
  402c46:	480c      	ldr	r0, [pc, #48]	; (402c78 <xTimerGenericCommand+0x60>)
  402c48:	6800      	ldr	r0, [r0, #0]
  402c4a:	4c0d      	ldr	r4, [pc, #52]	; (402c80 <xTimerGenericCommand+0x68>)
  402c4c:	47a0      	blx	r4
}
  402c4e:	b005      	add	sp, #20
  402c50:	bd30      	pop	{r4, r5, pc}
  402c52:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c56:	b672      	cpsid	i
  402c58:	f383 8811 	msr	BASEPRI, r3
  402c5c:	f3bf 8f6f 	isb	sy
  402c60:	f3bf 8f4f 	dsb	sy
  402c64:	b662      	cpsie	i
  402c66:	e7fe      	b.n	402c66 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402c68:	2300      	movs	r3, #0
  402c6a:	4669      	mov	r1, sp
  402c6c:	4c05      	ldr	r4, [pc, #20]	; (402c84 <xTimerGenericCommand+0x6c>)
  402c6e:	47a0      	blx	r4
  402c70:	e7ed      	b.n	402c4e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402c72:	2000      	movs	r0, #0
	return xReturn;
  402c74:	e7eb      	b.n	402c4e <xTimerGenericCommand+0x36>
  402c76:	bf00      	nop
  402c78:	20400b94 	.word	0x20400b94
  402c7c:	00402955 	.word	0x00402955
  402c80:	00401905 	.word	0x00401905
  402c84:	00401ae9 	.word	0x00401ae9

00402c88 <prvSampleTimeNow>:
{
  402c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c8c:	b082      	sub	sp, #8
  402c8e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402c90:	4b24      	ldr	r3, [pc, #144]	; (402d24 <prvSampleTimeNow+0x9c>)
  402c92:	4798      	blx	r3
  402c94:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402c96:	4b24      	ldr	r3, [pc, #144]	; (402d28 <prvSampleTimeNow+0xa0>)
  402c98:	681b      	ldr	r3, [r3, #0]
  402c9a:	4298      	cmp	r0, r3
  402c9c:	d31b      	bcc.n	402cd6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402c9e:	2300      	movs	r3, #0
  402ca0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402ca4:	4b20      	ldr	r3, [pc, #128]	; (402d28 <prvSampleTimeNow+0xa0>)
  402ca6:	601f      	str	r7, [r3, #0]
}
  402ca8:	4638      	mov	r0, r7
  402caa:	b002      	add	sp, #8
  402cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402cb0:	2100      	movs	r1, #0
  402cb2:	9100      	str	r1, [sp, #0]
  402cb4:	460b      	mov	r3, r1
  402cb6:	4652      	mov	r2, sl
  402cb8:	4620      	mov	r0, r4
  402cba:	4c1c      	ldr	r4, [pc, #112]	; (402d2c <prvSampleTimeNow+0xa4>)
  402cbc:	47a0      	blx	r4
				configASSERT( xResult );
  402cbe:	b960      	cbnz	r0, 402cda <prvSampleTimeNow+0x52>
  402cc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cc4:	b672      	cpsid	i
  402cc6:	f383 8811 	msr	BASEPRI, r3
  402cca:	f3bf 8f6f 	isb	sy
  402cce:	f3bf 8f4f 	dsb	sy
  402cd2:	b662      	cpsie	i
  402cd4:	e7fe      	b.n	402cd4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402cd6:	4d16      	ldr	r5, [pc, #88]	; (402d30 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402cd8:	4e16      	ldr	r6, [pc, #88]	; (402d34 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402cda:	682b      	ldr	r3, [r5, #0]
  402cdc:	681a      	ldr	r2, [r3, #0]
  402cde:	b1c2      	cbz	r2, 402d12 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ce0:	68db      	ldr	r3, [r3, #12]
  402ce2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ce6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ce8:	f104 0904 	add.w	r9, r4, #4
  402cec:	4648      	mov	r0, r9
  402cee:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402cf2:	4620      	mov	r0, r4
  402cf4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402cf6:	69e3      	ldr	r3, [r4, #28]
  402cf8:	2b01      	cmp	r3, #1
  402cfa:	d1ee      	bne.n	402cda <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402cfc:	69a3      	ldr	r3, [r4, #24]
  402cfe:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402d00:	459a      	cmp	sl, r3
  402d02:	d2d5      	bcs.n	402cb0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402d04:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d06:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d08:	4649      	mov	r1, r9
  402d0a:	6828      	ldr	r0, [r5, #0]
  402d0c:	4b0a      	ldr	r3, [pc, #40]	; (402d38 <prvSampleTimeNow+0xb0>)
  402d0e:	4798      	blx	r3
  402d10:	e7e3      	b.n	402cda <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402d12:	4a0a      	ldr	r2, [pc, #40]	; (402d3c <prvSampleTimeNow+0xb4>)
  402d14:	6810      	ldr	r0, [r2, #0]
  402d16:	4906      	ldr	r1, [pc, #24]	; (402d30 <prvSampleTimeNow+0xa8>)
  402d18:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402d1a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402d1c:	2301      	movs	r3, #1
  402d1e:	f8c8 3000 	str.w	r3, [r8]
  402d22:	e7bf      	b.n	402ca4 <prvSampleTimeNow+0x1c>
  402d24:	00402279 	.word	0x00402279
  402d28:	20400b90 	.word	0x20400b90
  402d2c:	00402c19 	.word	0x00402c19
  402d30:	20400b60 	.word	0x20400b60
  402d34:	00401285 	.word	0x00401285
  402d38:	00401251 	.word	0x00401251
  402d3c:	20400b64 	.word	0x20400b64

00402d40 <prvTimerTask>:
{
  402d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d44:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402d46:	4e75      	ldr	r6, [pc, #468]	; (402f1c <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402d48:	4f75      	ldr	r7, [pc, #468]	; (402f20 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402d4a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402f48 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402d4e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402f4c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402d52:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402d54:	681a      	ldr	r2, [r3, #0]
  402d56:	2a00      	cmp	r2, #0
  402d58:	f000 80ce 	beq.w	402ef8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d5c:	68db      	ldr	r3, [r3, #12]
  402d5e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402d60:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d62:	a804      	add	r0, sp, #16
  402d64:	4b6f      	ldr	r3, [pc, #444]	; (402f24 <prvTimerTask+0x1e4>)
  402d66:	4798      	blx	r3
  402d68:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d6a:	9b04      	ldr	r3, [sp, #16]
  402d6c:	2b00      	cmp	r3, #0
  402d6e:	d144      	bne.n	402dfa <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402d70:	42a0      	cmp	r0, r4
  402d72:	d212      	bcs.n	402d9a <prvTimerTask+0x5a>
  402d74:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402d76:	1b61      	subs	r1, r4, r5
  402d78:	4b6b      	ldr	r3, [pc, #428]	; (402f28 <prvTimerTask+0x1e8>)
  402d7a:	6818      	ldr	r0, [r3, #0]
  402d7c:	4b6b      	ldr	r3, [pc, #428]	; (402f2c <prvTimerTask+0x1ec>)
  402d7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402d80:	4b6b      	ldr	r3, [pc, #428]	; (402f30 <prvTimerTask+0x1f0>)
  402d82:	4798      	blx	r3
  402d84:	2800      	cmp	r0, #0
  402d86:	d13a      	bne.n	402dfe <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402d8c:	f8c9 3000 	str.w	r3, [r9]
  402d90:	f3bf 8f4f 	dsb	sy
  402d94:	f3bf 8f6f 	isb	sy
  402d98:	e031      	b.n	402dfe <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402d9a:	4b65      	ldr	r3, [pc, #404]	; (402f30 <prvTimerTask+0x1f0>)
  402d9c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d9e:	6833      	ldr	r3, [r6, #0]
  402da0:	68db      	ldr	r3, [r3, #12]
  402da2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402da6:	f10a 0004 	add.w	r0, sl, #4
  402daa:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402dac:	f8da 301c 	ldr.w	r3, [sl, #28]
  402db0:	2b01      	cmp	r3, #1
  402db2:	d004      	beq.n	402dbe <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402db4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402db8:	4650      	mov	r0, sl
  402dba:	4798      	blx	r3
  402dbc:	e01f      	b.n	402dfe <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402dbe:	f8da 1018 	ldr.w	r1, [sl, #24]
  402dc2:	4623      	mov	r3, r4
  402dc4:	462a      	mov	r2, r5
  402dc6:	4421      	add	r1, r4
  402dc8:	4650      	mov	r0, sl
  402dca:	4d5a      	ldr	r5, [pc, #360]	; (402f34 <prvTimerTask+0x1f4>)
  402dcc:	47a8      	blx	r5
  402dce:	2801      	cmp	r0, #1
  402dd0:	d1f0      	bne.n	402db4 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402dd2:	2100      	movs	r1, #0
  402dd4:	9100      	str	r1, [sp, #0]
  402dd6:	460b      	mov	r3, r1
  402dd8:	4622      	mov	r2, r4
  402dda:	4650      	mov	r0, sl
  402ddc:	4c56      	ldr	r4, [pc, #344]	; (402f38 <prvTimerTask+0x1f8>)
  402dde:	47a0      	blx	r4
			configASSERT( xResult );
  402de0:	2800      	cmp	r0, #0
  402de2:	d1e7      	bne.n	402db4 <prvTimerTask+0x74>
  402de4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402de8:	b672      	cpsid	i
  402dea:	f383 8811 	msr	BASEPRI, r3
  402dee:	f3bf 8f6f 	isb	sy
  402df2:	f3bf 8f4f 	dsb	sy
  402df6:	b662      	cpsie	i
  402df8:	e7fe      	b.n	402df8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402dfa:	4b4d      	ldr	r3, [pc, #308]	; (402f30 <prvTimerTask+0x1f0>)
  402dfc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402dfe:	4d4a      	ldr	r5, [pc, #296]	; (402f28 <prvTimerTask+0x1e8>)
  402e00:	4c4e      	ldr	r4, [pc, #312]	; (402f3c <prvTimerTask+0x1fc>)
  402e02:	e006      	b.n	402e12 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402e04:	9907      	ldr	r1, [sp, #28]
  402e06:	9806      	ldr	r0, [sp, #24]
  402e08:	9b05      	ldr	r3, [sp, #20]
  402e0a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402e0c:	9b04      	ldr	r3, [sp, #16]
  402e0e:	2b00      	cmp	r3, #0
  402e10:	da09      	bge.n	402e26 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402e12:	2300      	movs	r3, #0
  402e14:	461a      	mov	r2, r3
  402e16:	a904      	add	r1, sp, #16
  402e18:	6828      	ldr	r0, [r5, #0]
  402e1a:	47a0      	blx	r4
  402e1c:	2800      	cmp	r0, #0
  402e1e:	d098      	beq.n	402d52 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402e20:	9b04      	ldr	r3, [sp, #16]
  402e22:	2b00      	cmp	r3, #0
  402e24:	dbee      	blt.n	402e04 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402e26:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402e2a:	f8da 3014 	ldr.w	r3, [sl, #20]
  402e2e:	b113      	cbz	r3, 402e36 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e30:	f10a 0004 	add.w	r0, sl, #4
  402e34:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e36:	a803      	add	r0, sp, #12
  402e38:	4b3a      	ldr	r3, [pc, #232]	; (402f24 <prvTimerTask+0x1e4>)
  402e3a:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402e3c:	9b04      	ldr	r3, [sp, #16]
  402e3e:	2b09      	cmp	r3, #9
  402e40:	d8e7      	bhi.n	402e12 <prvTimerTask+0xd2>
  402e42:	a201      	add	r2, pc, #4	; (adr r2, 402e48 <prvTimerTask+0x108>)
  402e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402e48:	00402e71 	.word	0x00402e71
  402e4c:	00402e71 	.word	0x00402e71
  402e50:	00402e71 	.word	0x00402e71
  402e54:	00402e13 	.word	0x00402e13
  402e58:	00402ec5 	.word	0x00402ec5
  402e5c:	00402ef1 	.word	0x00402ef1
  402e60:	00402e71 	.word	0x00402e71
  402e64:	00402e71 	.word	0x00402e71
  402e68:	00402e13 	.word	0x00402e13
  402e6c:	00402ec5 	.word	0x00402ec5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402e70:	9c05      	ldr	r4, [sp, #20]
  402e72:	f8da 1018 	ldr.w	r1, [sl, #24]
  402e76:	4623      	mov	r3, r4
  402e78:	4602      	mov	r2, r0
  402e7a:	4421      	add	r1, r4
  402e7c:	4650      	mov	r0, sl
  402e7e:	4c2d      	ldr	r4, [pc, #180]	; (402f34 <prvTimerTask+0x1f4>)
  402e80:	47a0      	blx	r4
  402e82:	2801      	cmp	r0, #1
  402e84:	d1bc      	bne.n	402e00 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402e86:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402e8a:	4650      	mov	r0, sl
  402e8c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402e8e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402e92:	2b01      	cmp	r3, #1
  402e94:	d1b4      	bne.n	402e00 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402e96:	f8da 2018 	ldr.w	r2, [sl, #24]
  402e9a:	2100      	movs	r1, #0
  402e9c:	9100      	str	r1, [sp, #0]
  402e9e:	460b      	mov	r3, r1
  402ea0:	9805      	ldr	r0, [sp, #20]
  402ea2:	4402      	add	r2, r0
  402ea4:	4650      	mov	r0, sl
  402ea6:	4c24      	ldr	r4, [pc, #144]	; (402f38 <prvTimerTask+0x1f8>)
  402ea8:	47a0      	blx	r4
							configASSERT( xResult );
  402eaa:	2800      	cmp	r0, #0
  402eac:	d1a8      	bne.n	402e00 <prvTimerTask+0xc0>
  402eae:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eb2:	b672      	cpsid	i
  402eb4:	f383 8811 	msr	BASEPRI, r3
  402eb8:	f3bf 8f6f 	isb	sy
  402ebc:	f3bf 8f4f 	dsb	sy
  402ec0:	b662      	cpsie	i
  402ec2:	e7fe      	b.n	402ec2 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402ec4:	9905      	ldr	r1, [sp, #20]
  402ec6:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402eca:	b131      	cbz	r1, 402eda <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402ecc:	4603      	mov	r3, r0
  402ece:	4602      	mov	r2, r0
  402ed0:	4401      	add	r1, r0
  402ed2:	4650      	mov	r0, sl
  402ed4:	4c17      	ldr	r4, [pc, #92]	; (402f34 <prvTimerTask+0x1f4>)
  402ed6:	47a0      	blx	r4
  402ed8:	e792      	b.n	402e00 <prvTimerTask+0xc0>
  402eda:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ede:	b672      	cpsid	i
  402ee0:	f383 8811 	msr	BASEPRI, r3
  402ee4:	f3bf 8f6f 	isb	sy
  402ee8:	f3bf 8f4f 	dsb	sy
  402eec:	b662      	cpsie	i
  402eee:	e7fe      	b.n	402eee <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402ef0:	4650      	mov	r0, sl
  402ef2:	4b13      	ldr	r3, [pc, #76]	; (402f40 <prvTimerTask+0x200>)
  402ef4:	4798      	blx	r3
  402ef6:	e783      	b.n	402e00 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402ef8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402efa:	a804      	add	r0, sp, #16
  402efc:	4b09      	ldr	r3, [pc, #36]	; (402f24 <prvTimerTask+0x1e4>)
  402efe:	4798      	blx	r3
  402f00:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402f02:	9b04      	ldr	r3, [sp, #16]
  402f04:	2b00      	cmp	r3, #0
  402f06:	f47f af78 	bne.w	402dfa <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402f0a:	4b0e      	ldr	r3, [pc, #56]	; (402f44 <prvTimerTask+0x204>)
  402f0c:	681b      	ldr	r3, [r3, #0]
  402f0e:	681a      	ldr	r2, [r3, #0]
  402f10:	fab2 f282 	clz	r2, r2
  402f14:	0952      	lsrs	r2, r2, #5
  402f16:	2400      	movs	r4, #0
  402f18:	e72d      	b.n	402d76 <prvTimerTask+0x36>
  402f1a:	bf00      	nop
  402f1c:	20400b60 	.word	0x20400b60
  402f20:	00402269 	.word	0x00402269
  402f24:	00402c89 	.word	0x00402c89
  402f28:	20400b94 	.word	0x20400b94
  402f2c:	00401ecd 	.word	0x00401ecd
  402f30:	004023d1 	.word	0x004023d1
  402f34:	00402af1 	.word	0x00402af1
  402f38:	00402c19 	.word	0x00402c19
  402f3c:	00401cc9 	.word	0x00401cc9
  402f40:	004015f5 	.word	0x004015f5
  402f44:	20400b64 	.word	0x20400b64
  402f48:	e000ed04 	.word	0xe000ed04
  402f4c:	00401285 	.word	0x00401285

00402f50 <EchoCallback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void EchoCallback(void){
  402f50:	b510      	push	{r4, lr}
  402f52:	b082      	sub	sp, #8
	if(pio_get(ECHO_PIO_A, PIO_INPUT, ECHO_IDX_MASK_A)){
  402f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402f58:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402f5c:	480f      	ldr	r0, [pc, #60]	; (402f9c <EchoCallback+0x4c>)
  402f5e:	4b10      	ldr	r3, [pc, #64]	; (402fa0 <EchoCallback+0x50>)
  402f60:	4798      	blx	r3
  402f62:	b9b0      	cbnz	r0, 402f92 <EchoCallback+0x42>
		tc_start(TIMER_A, TIMER_CHANNEL_A);
		}else{
		float ts = ((float) tc_read_cv(TIMER_A, TIMER_CHANNEL_A))/32000.0;
  402f64:	2101      	movs	r1, #1
  402f66:	480f      	ldr	r0, [pc, #60]	; (402fa4 <EchoCallback+0x54>)
  402f68:	4b0f      	ldr	r3, [pc, #60]	; (402fa8 <EchoCallback+0x58>)
  402f6a:	4798      	blx	r3
  402f6c:	ee07 0a90 	vmov	s15, r0
  402f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
  402f74:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 402fac <EchoCallback+0x5c>
  402f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
  402f7c:	a902      	add	r1, sp, #8
  402f7e:	ed61 7a01 	vstmdb	r1!, {s15}
		xQueueSendToBackFromISR( hc04_A_EchoQueue, &ts, NULL );
  402f82:	2300      	movs	r3, #0
  402f84:	461a      	mov	r2, r3
  402f86:	480a      	ldr	r0, [pc, #40]	; (402fb0 <EchoCallback+0x60>)
  402f88:	6800      	ldr	r0, [r0, #0]
  402f8a:	4c0a      	ldr	r4, [pc, #40]	; (402fb4 <EchoCallback+0x64>)
  402f8c:	47a0      	blx	r4
	}
}
  402f8e:	b002      	add	sp, #8
  402f90:	bd10      	pop	{r4, pc}
		tc_start(TIMER_A, TIMER_CHANNEL_A);
  402f92:	2101      	movs	r1, #1
  402f94:	4803      	ldr	r0, [pc, #12]	; (402fa4 <EchoCallback+0x54>)
  402f96:	4b08      	ldr	r3, [pc, #32]	; (402fb8 <EchoCallback+0x68>)
  402f98:	4798      	blx	r3
  402f9a:	e7f8      	b.n	402f8e <EchoCallback+0x3e>
  402f9c:	400e1200 	.word	0x400e1200
  402fa0:	00400749 	.word	0x00400749
  402fa4:	4000c000 	.word	0x4000c000
  402fa8:	00400e13 	.word	0x00400e13
  402fac:	46fa0000 	.word	0x46fa0000
  402fb0:	20400ccc 	.word	0x20400ccc
  402fb4:	00401ae9 	.word	0x00401ae9
  402fb8:	00400e0b 	.word	0x00400e0b

00402fbc <AFEC_callback>:
	flag_tc = true;
	//printf("AA      ");
}

static void AFEC_callback(void)
{
  402fbc:	b510      	push	{r4, lr}
  402fbe:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402fc0:	4b06      	ldr	r3, [pc, #24]	; (402fdc <AFEC_callback+0x20>)
  402fc2:	2200      	movs	r2, #0
  402fc4:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	int32_t ph_value;
	ph_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL);
  402fc8:	a902      	add	r1, sp, #8
  402fca:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR( xQueueAfec, &ph_value, 0);
  402fce:	4613      	mov	r3, r2
  402fd0:	4803      	ldr	r0, [pc, #12]	; (402fe0 <AFEC_callback+0x24>)
  402fd2:	6800      	ldr	r0, [r0, #0]
  402fd4:	4c03      	ldr	r4, [pc, #12]	; (402fe4 <AFEC_callback+0x28>)
  402fd6:	47a0      	blx	r4
	
}
  402fd8:	b002      	add	sp, #8
  402fda:	bd10      	pop	{r4, pc}
  402fdc:	4003c000 	.word	0x4003c000
  402fe0:	20400cd8 	.word	0x20400cd8
  402fe4:	00401ae9 	.word	0x00401ae9

00402fe8 <WaterCallback>:
void WaterCallback(void){
  402fe8:	b508      	push	{r3, lr}
	spin_counter++;
  402fea:	4a05      	ldr	r2, [pc, #20]	; (403000 <WaterCallback+0x18>)
  402fec:	6813      	ldr	r3, [r2, #0]
  402fee:	3301      	adds	r3, #1
  402ff0:	6013      	str	r3, [r2, #0]
	xSemaphoreGiveFromISR(xSemaphoreWater, NULL);
  402ff2:	2100      	movs	r1, #0
  402ff4:	4b03      	ldr	r3, [pc, #12]	; (403004 <WaterCallback+0x1c>)
  402ff6:	6818      	ldr	r0, [r3, #0]
  402ff8:	4b03      	ldr	r3, [pc, #12]	; (403008 <WaterCallback+0x20>)
  402ffa:	4798      	blx	r3
  402ffc:	bd08      	pop	{r3, pc}
  402ffe:	bf00      	nop
  403000:	20400b9c 	.word	0x20400b9c
  403004:	20400cd4 	.word	0x20400cd4
  403008:	00401be9 	.word	0x00401be9

0040300c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40300c:	b570      	push	{r4, r5, r6, lr}
  40300e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403010:	4b2a      	ldr	r3, [pc, #168]	; (4030bc <usart_serial_putchar+0xb0>)
  403012:	4298      	cmp	r0, r3
  403014:	d013      	beq.n	40303e <usart_serial_putchar+0x32>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403016:	4b2a      	ldr	r3, [pc, #168]	; (4030c0 <usart_serial_putchar+0xb4>)
  403018:	4298      	cmp	r0, r3
  40301a:	d019      	beq.n	403050 <usart_serial_putchar+0x44>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40301c:	4b29      	ldr	r3, [pc, #164]	; (4030c4 <usart_serial_putchar+0xb8>)
  40301e:	4298      	cmp	r0, r3
  403020:	d01f      	beq.n	403062 <usart_serial_putchar+0x56>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403022:	4b29      	ldr	r3, [pc, #164]	; (4030c8 <usart_serial_putchar+0xbc>)
  403024:	4298      	cmp	r0, r3
  403026:	d025      	beq.n	403074 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403028:	4b28      	ldr	r3, [pc, #160]	; (4030cc <usart_serial_putchar+0xc0>)
  40302a:	4298      	cmp	r0, r3
  40302c:	d02b      	beq.n	403086 <usart_serial_putchar+0x7a>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40302e:	4b28      	ldr	r3, [pc, #160]	; (4030d0 <usart_serial_putchar+0xc4>)
  403030:	4298      	cmp	r0, r3
  403032:	d031      	beq.n	403098 <usart_serial_putchar+0x8c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403034:	4b27      	ldr	r3, [pc, #156]	; (4030d4 <usart_serial_putchar+0xc8>)
  403036:	4298      	cmp	r0, r3
  403038:	d037      	beq.n	4030aa <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40303a:	2000      	movs	r0, #0
}
  40303c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40303e:	461e      	mov	r6, r3
  403040:	4d25      	ldr	r5, [pc, #148]	; (4030d8 <usart_serial_putchar+0xcc>)
  403042:	4621      	mov	r1, r4
  403044:	4630      	mov	r0, r6
  403046:	47a8      	blx	r5
  403048:	2800      	cmp	r0, #0
  40304a:	d1fa      	bne.n	403042 <usart_serial_putchar+0x36>
		return 1;
  40304c:	2001      	movs	r0, #1
  40304e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403050:	461e      	mov	r6, r3
  403052:	4d21      	ldr	r5, [pc, #132]	; (4030d8 <usart_serial_putchar+0xcc>)
  403054:	4621      	mov	r1, r4
  403056:	4630      	mov	r0, r6
  403058:	47a8      	blx	r5
  40305a:	2800      	cmp	r0, #0
  40305c:	d1fa      	bne.n	403054 <usart_serial_putchar+0x48>
		return 1;
  40305e:	2001      	movs	r0, #1
  403060:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403062:	461e      	mov	r6, r3
  403064:	4d1c      	ldr	r5, [pc, #112]	; (4030d8 <usart_serial_putchar+0xcc>)
  403066:	4621      	mov	r1, r4
  403068:	4630      	mov	r0, r6
  40306a:	47a8      	blx	r5
  40306c:	2800      	cmp	r0, #0
  40306e:	d1fa      	bne.n	403066 <usart_serial_putchar+0x5a>
		return 1;
  403070:	2001      	movs	r0, #1
  403072:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403074:	461e      	mov	r6, r3
  403076:	4d18      	ldr	r5, [pc, #96]	; (4030d8 <usart_serial_putchar+0xcc>)
  403078:	4621      	mov	r1, r4
  40307a:	4630      	mov	r0, r6
  40307c:	47a8      	blx	r5
  40307e:	2800      	cmp	r0, #0
  403080:	d1fa      	bne.n	403078 <usart_serial_putchar+0x6c>
		return 1;
  403082:	2001      	movs	r0, #1
  403084:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403086:	461e      	mov	r6, r3
  403088:	4d14      	ldr	r5, [pc, #80]	; (4030dc <usart_serial_putchar+0xd0>)
  40308a:	4621      	mov	r1, r4
  40308c:	4630      	mov	r0, r6
  40308e:	47a8      	blx	r5
  403090:	2800      	cmp	r0, #0
  403092:	d1fa      	bne.n	40308a <usart_serial_putchar+0x7e>
		return 1;
  403094:	2001      	movs	r0, #1
  403096:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403098:	461e      	mov	r6, r3
  40309a:	4d10      	ldr	r5, [pc, #64]	; (4030dc <usart_serial_putchar+0xd0>)
  40309c:	4621      	mov	r1, r4
  40309e:	4630      	mov	r0, r6
  4030a0:	47a8      	blx	r5
  4030a2:	2800      	cmp	r0, #0
  4030a4:	d1fa      	bne.n	40309c <usart_serial_putchar+0x90>
		return 1;
  4030a6:	2001      	movs	r0, #1
  4030a8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4030aa:	461e      	mov	r6, r3
  4030ac:	4d0b      	ldr	r5, [pc, #44]	; (4030dc <usart_serial_putchar+0xd0>)
  4030ae:	4621      	mov	r1, r4
  4030b0:	4630      	mov	r0, r6
  4030b2:	47a8      	blx	r5
  4030b4:	2800      	cmp	r0, #0
  4030b6:	d1fa      	bne.n	4030ae <usart_serial_putchar+0xa2>
		return 1;
  4030b8:	2001      	movs	r0, #1
  4030ba:	bd70      	pop	{r4, r5, r6, pc}
  4030bc:	400e0800 	.word	0x400e0800
  4030c0:	400e0a00 	.word	0x400e0a00
  4030c4:	400e1a00 	.word	0x400e1a00
  4030c8:	400e1c00 	.word	0x400e1c00
  4030cc:	40024000 	.word	0x40024000
  4030d0:	40028000 	.word	0x40028000
  4030d4:	4002c000 	.word	0x4002c000
  4030d8:	00400e33 	.word	0x00400e33
  4030dc:	00400f3d 	.word	0x00400f3d

004030e0 <task_data>:
		}
		vTaskDelay(500);
	}
}

void task_data(void){
  4030e0:	b580      	push	{r7, lr}
  4030e2:	b092      	sub	sp, #72	; 0x48
	xQueueData = xQueueCreate( 10, sizeof( sensorData ) );
  4030e4:	2200      	movs	r2, #0
  4030e6:	2148      	movs	r1, #72	; 0x48
  4030e8:	200a      	movs	r0, #10
  4030ea:	4b11      	ldr	r3, [pc, #68]	; (403130 <task_data+0x50>)
  4030ec:	4798      	blx	r3
  4030ee:	4b11      	ldr	r3, [pc, #68]	; (403134 <task_data+0x54>)
  4030f0:	6018      	str	r0, [r3, #0]
	
	sensorData data;

	while (true) {
		if (xQueueReceive( xQueueData, &(data), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  4030f2:	461e      	mov	r6, r3
  4030f4:	4d10      	ldr	r5, [pc, #64]	; (403138 <task_data+0x58>)
			printf("---------------------------");
  4030f6:	4f11      	ldr	r7, [pc, #68]	; (40313c <task_data+0x5c>)
  4030f8:	e003      	b.n	403102 <task_data+0x22>
			printf("\nID: %d \t", data.id);
			printf("VALUE: %d \n", data.value);
			printf("TIME: %s \n", data.timestamp);
			printf("---------------------------");
		}
		vTaskDelay(300);
  4030fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
  4030fe:	4b10      	ldr	r3, [pc, #64]	; (403140 <task_data+0x60>)
  403100:	4798      	blx	r3
		if (xQueueReceive( xQueueData, &(data), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403102:	2300      	movs	r3, #0
  403104:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403108:	4669      	mov	r1, sp
  40310a:	6830      	ldr	r0, [r6, #0]
  40310c:	47a8      	blx	r5
  40310e:	2800      	cmp	r0, #0
  403110:	d0f3      	beq.n	4030fa <task_data+0x1a>
			printf("---------------------------");
  403112:	4638      	mov	r0, r7
  403114:	4c0b      	ldr	r4, [pc, #44]	; (403144 <task_data+0x64>)
  403116:	47a0      	blx	r4
			printf("\nID: %d \t", data.id);
  403118:	9900      	ldr	r1, [sp, #0]
  40311a:	480b      	ldr	r0, [pc, #44]	; (403148 <task_data+0x68>)
  40311c:	47a0      	blx	r4
			printf("VALUE: %d \n", data.value);
  40311e:	9901      	ldr	r1, [sp, #4]
  403120:	480a      	ldr	r0, [pc, #40]	; (40314c <task_data+0x6c>)
  403122:	47a0      	blx	r4
			printf("TIME: %s \n", data.timestamp);
  403124:	a902      	add	r1, sp, #8
  403126:	480a      	ldr	r0, [pc, #40]	; (403150 <task_data+0x70>)
  403128:	47a0      	blx	r4
			printf("---------------------------");
  40312a:	4638      	mov	r0, r7
  40312c:	47a0      	blx	r4
  40312e:	e7e4      	b.n	4030fa <task_data+0x1a>
  403130:	00401889 	.word	0x00401889
  403134:	20400ce8 	.word	0x20400ce8
  403138:	00401cc9 	.word	0x00401cc9
  40313c:	0040a07c 	.word	0x0040a07c
  403140:	004024f1 	.word	0x004024f1
  403144:	0040431d 	.word	0x0040431d
  403148:	0040a098 	.word	0x0040a098
  40314c:	0040a0a4 	.word	0x0040a0a4
  403150:	0040a0b0 	.word	0x0040a0b0

00403154 <task_timer2>:
static void task_timer2(void *pvParameters){
  403154:	b508      	push	{r3, lr}
	xSemaphoreCounter2 = xSemaphoreCreateBinary();
  403156:	2203      	movs	r2, #3
  403158:	2100      	movs	r1, #0
  40315a:	2001      	movs	r0, #1
  40315c:	4b07      	ldr	r3, [pc, #28]	; (40317c <task_timer2+0x28>)
  40315e:	4798      	blx	r3
  403160:	4b07      	ldr	r3, [pc, #28]	; (403180 <task_timer2+0x2c>)
  403162:	6018      	str	r0, [r3, #0]
		vTaskDelay(10000 / portTICK_PERIOD_MS);
  403164:	4e07      	ldr	r6, [pc, #28]	; (403184 <task_timer2+0x30>)
		xSemaphoreGive(xSemaphoreCounter2);
  403166:	461d      	mov	r5, r3
  403168:	4c07      	ldr	r4, [pc, #28]	; (403188 <task_timer2+0x34>)
		vTaskDelay(10000 / portTICK_PERIOD_MS);
  40316a:	f242 7010 	movw	r0, #10000	; 0x2710
  40316e:	47b0      	blx	r6
		xSemaphoreGive(xSemaphoreCounter2);
  403170:	2300      	movs	r3, #0
  403172:	461a      	mov	r2, r3
  403174:	4619      	mov	r1, r3
  403176:	6828      	ldr	r0, [r5, #0]
  403178:	47a0      	blx	r4
  40317a:	e7f6      	b.n	40316a <task_timer2+0x16>
  40317c:	00401889 	.word	0x00401889
  403180:	20400cb8 	.word	0x20400cb8
  403184:	004024f1 	.word	0x004024f1
  403188:	00401905 	.word	0x00401905

0040318c <task_timer>:
static void task_timer(void *pvParameters){
  40318c:	b508      	push	{r3, lr}
	xSemaphoreCounter = xSemaphoreCreateBinary();
  40318e:	2203      	movs	r2, #3
  403190:	2100      	movs	r1, #0
  403192:	2001      	movs	r0, #1
  403194:	4b07      	ldr	r3, [pc, #28]	; (4031b4 <task_timer+0x28>)
  403196:	4798      	blx	r3
  403198:	4b07      	ldr	r3, [pc, #28]	; (4031b8 <task_timer+0x2c>)
  40319a:	6018      	str	r0, [r3, #0]
		vTaskDelay(500 / portTICK_PERIOD_MS);
  40319c:	4e07      	ldr	r6, [pc, #28]	; (4031bc <task_timer+0x30>)
		xSemaphoreGive(xSemaphoreCounter);
  40319e:	461d      	mov	r5, r3
  4031a0:	4c07      	ldr	r4, [pc, #28]	; (4031c0 <task_timer+0x34>)
		vTaskDelay(500 / portTICK_PERIOD_MS);
  4031a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4031a6:	47b0      	blx	r6
		xSemaphoreGive(xSemaphoreCounter);
  4031a8:	2300      	movs	r3, #0
  4031aa:	461a      	mov	r2, r3
  4031ac:	4619      	mov	r1, r3
  4031ae:	6828      	ldr	r0, [r5, #0]
  4031b0:	47a0      	blx	r4
  4031b2:	e7f6      	b.n	4031a2 <task_timer+0x16>
  4031b4:	00401889 	.word	0x00401889
  4031b8:	20400cb0 	.word	0x20400cb0
  4031bc:	004024f1 	.word	0x004024f1
  4031c0:	00401905 	.word	0x00401905

004031c4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031c6:	b083      	sub	sp, #12
  4031c8:	4605      	mov	r5, r0
  4031ca:	460c      	mov	r4, r1
	uint32_t val = 0;
  4031cc:	2300      	movs	r3, #0
  4031ce:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4031d0:	4b2a      	ldr	r3, [pc, #168]	; (40327c <usart_serial_getchar+0xb8>)
  4031d2:	4298      	cmp	r0, r3
  4031d4:	d013      	beq.n	4031fe <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4031d6:	4b2a      	ldr	r3, [pc, #168]	; (403280 <usart_serial_getchar+0xbc>)
  4031d8:	4298      	cmp	r0, r3
  4031da:	d018      	beq.n	40320e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4031dc:	4b29      	ldr	r3, [pc, #164]	; (403284 <usart_serial_getchar+0xc0>)
  4031de:	4298      	cmp	r0, r3
  4031e0:	d01d      	beq.n	40321e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4031e2:	4b29      	ldr	r3, [pc, #164]	; (403288 <usart_serial_getchar+0xc4>)
  4031e4:	429d      	cmp	r5, r3
  4031e6:	d022      	beq.n	40322e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4031e8:	4b28      	ldr	r3, [pc, #160]	; (40328c <usart_serial_getchar+0xc8>)
  4031ea:	429d      	cmp	r5, r3
  4031ec:	d027      	beq.n	40323e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4031ee:	4b28      	ldr	r3, [pc, #160]	; (403290 <usart_serial_getchar+0xcc>)
  4031f0:	429d      	cmp	r5, r3
  4031f2:	d02e      	beq.n	403252 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4031f4:	4b27      	ldr	r3, [pc, #156]	; (403294 <usart_serial_getchar+0xd0>)
  4031f6:	429d      	cmp	r5, r3
  4031f8:	d035      	beq.n	403266 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4031fa:	b003      	add	sp, #12
  4031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4031fe:	461f      	mov	r7, r3
  403200:	4e25      	ldr	r6, [pc, #148]	; (403298 <usart_serial_getchar+0xd4>)
  403202:	4621      	mov	r1, r4
  403204:	4638      	mov	r0, r7
  403206:	47b0      	blx	r6
  403208:	2800      	cmp	r0, #0
  40320a:	d1fa      	bne.n	403202 <usart_serial_getchar+0x3e>
  40320c:	e7e9      	b.n	4031e2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40320e:	461f      	mov	r7, r3
  403210:	4e21      	ldr	r6, [pc, #132]	; (403298 <usart_serial_getchar+0xd4>)
  403212:	4621      	mov	r1, r4
  403214:	4638      	mov	r0, r7
  403216:	47b0      	blx	r6
  403218:	2800      	cmp	r0, #0
  40321a:	d1fa      	bne.n	403212 <usart_serial_getchar+0x4e>
  40321c:	e7e4      	b.n	4031e8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40321e:	461f      	mov	r7, r3
  403220:	4e1d      	ldr	r6, [pc, #116]	; (403298 <usart_serial_getchar+0xd4>)
  403222:	4621      	mov	r1, r4
  403224:	4638      	mov	r0, r7
  403226:	47b0      	blx	r6
  403228:	2800      	cmp	r0, #0
  40322a:	d1fa      	bne.n	403222 <usart_serial_getchar+0x5e>
  40322c:	e7df      	b.n	4031ee <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40322e:	461f      	mov	r7, r3
  403230:	4e19      	ldr	r6, [pc, #100]	; (403298 <usart_serial_getchar+0xd4>)
  403232:	4621      	mov	r1, r4
  403234:	4638      	mov	r0, r7
  403236:	47b0      	blx	r6
  403238:	2800      	cmp	r0, #0
  40323a:	d1fa      	bne.n	403232 <usart_serial_getchar+0x6e>
  40323c:	e7da      	b.n	4031f4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40323e:	461e      	mov	r6, r3
  403240:	4d16      	ldr	r5, [pc, #88]	; (40329c <usart_serial_getchar+0xd8>)
  403242:	a901      	add	r1, sp, #4
  403244:	4630      	mov	r0, r6
  403246:	47a8      	blx	r5
  403248:	2800      	cmp	r0, #0
  40324a:	d1fa      	bne.n	403242 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40324c:	9b01      	ldr	r3, [sp, #4]
  40324e:	7023      	strb	r3, [r4, #0]
  403250:	e7d3      	b.n	4031fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403252:	461e      	mov	r6, r3
  403254:	4d11      	ldr	r5, [pc, #68]	; (40329c <usart_serial_getchar+0xd8>)
  403256:	a901      	add	r1, sp, #4
  403258:	4630      	mov	r0, r6
  40325a:	47a8      	blx	r5
  40325c:	2800      	cmp	r0, #0
  40325e:	d1fa      	bne.n	403256 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403260:	9b01      	ldr	r3, [sp, #4]
  403262:	7023      	strb	r3, [r4, #0]
  403264:	e7c9      	b.n	4031fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403266:	461e      	mov	r6, r3
  403268:	4d0c      	ldr	r5, [pc, #48]	; (40329c <usart_serial_getchar+0xd8>)
  40326a:	a901      	add	r1, sp, #4
  40326c:	4630      	mov	r0, r6
  40326e:	47a8      	blx	r5
  403270:	2800      	cmp	r0, #0
  403272:	d1fa      	bne.n	40326a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403274:	9b01      	ldr	r3, [sp, #4]
  403276:	7023      	strb	r3, [r4, #0]
}
  403278:	e7bf      	b.n	4031fa <usart_serial_getchar+0x36>
  40327a:	bf00      	nop
  40327c:	400e0800 	.word	0x400e0800
  403280:	400e0a00 	.word	0x400e0a00
  403284:	400e1a00 	.word	0x400e1a00
  403288:	400e1c00 	.word	0x400e1c00
  40328c:	40024000 	.word	0x40024000
  403290:	40028000 	.word	0x40028000
  403294:	4002c000 	.word	0x4002c000
  403298:	00400e45 	.word	0x00400e45
  40329c:	00400f53 	.word	0x00400f53

004032a0 <vApplicationStackOverflowHook>:
{
  4032a0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4032a2:	460a      	mov	r2, r1
  4032a4:	4601      	mov	r1, r0
  4032a6:	4802      	ldr	r0, [pc, #8]	; (4032b0 <vApplicationStackOverflowHook+0x10>)
  4032a8:	4b02      	ldr	r3, [pc, #8]	; (4032b4 <vApplicationStackOverflowHook+0x14>)
  4032aa:	4798      	blx	r3
  4032ac:	e7fe      	b.n	4032ac <vApplicationStackOverflowHook+0xc>
  4032ae:	bf00      	nop
  4032b0:	0040a0bc 	.word	0x0040a0bc
  4032b4:	0040431d 	.word	0x0040431d

004032b8 <vApplicationTickHook>:
{
  4032b8:	4770      	bx	lr

004032ba <vApplicationMallocFailedHook>:
  4032ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032be:	b672      	cpsid	i
  4032c0:	f383 8811 	msr	BASEPRI, r3
  4032c4:	f3bf 8f6f 	isb	sy
  4032c8:	f3bf 8f4f 	dsb	sy
  4032cc:	b662      	cpsie	i
  4032ce:	e7fe      	b.n	4032ce <vApplicationMallocFailedHook+0x14>

004032d0 <TC0_Handler>:
void TC0_Handler(void){
  4032d0:	b500      	push	{lr}
  4032d2:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 1);
  4032d4:	2101      	movs	r1, #1
  4032d6:	4805      	ldr	r0, [pc, #20]	; (4032ec <TC0_Handler+0x1c>)
  4032d8:	4b05      	ldr	r3, [pc, #20]	; (4032f0 <TC0_Handler+0x20>)
  4032da:	4798      	blx	r3
  4032dc:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  4032de:	9b01      	ldr	r3, [sp, #4]
	flag_tc = true;
  4032e0:	2201      	movs	r2, #1
  4032e2:	4b04      	ldr	r3, [pc, #16]	; (4032f4 <TC0_Handler+0x24>)
  4032e4:	601a      	str	r2, [r3, #0]
}
  4032e6:	b003      	add	sp, #12
  4032e8:	f85d fb04 	ldr.w	pc, [sp], #4
  4032ec:	4000c000 	.word	0x4000c000
  4032f0:	00400e2b 	.word	0x00400e2b
  4032f4:	20400b98 	.word	0x20400b98

004032f8 <RTC_Handler>:
{
  4032f8:	b538      	push	{r3, r4, r5, lr}
	printf("ALBBBBBBBBBBBBBBRME");
  4032fa:	480c      	ldr	r0, [pc, #48]	; (40332c <RTC_Handler+0x34>)
  4032fc:	4b0c      	ldr	r3, [pc, #48]	; (403330 <RTC_Handler+0x38>)
  4032fe:	4798      	blx	r3
	uint32_t ul_status = rtc_get_status(RTC);
  403300:	4c0c      	ldr	r4, [pc, #48]	; (403334 <RTC_Handler+0x3c>)
  403302:	4620      	mov	r0, r4
  403304:	4b0c      	ldr	r3, [pc, #48]	; (403338 <RTC_Handler+0x40>)
  403306:	4798      	blx	r3
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  403308:	2101      	movs	r1, #1
  40330a:	4620      	mov	r0, r4
  40330c:	4d0b      	ldr	r5, [pc, #44]	; (40333c <RTC_Handler+0x44>)
  40330e:	47a8      	blx	r5
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  403310:	2108      	movs	r1, #8
  403312:	4620      	mov	r0, r4
  403314:	47a8      	blx	r5
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  403316:	2110      	movs	r1, #16
  403318:	4620      	mov	r0, r4
  40331a:	47a8      	blx	r5
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40331c:	2120      	movs	r1, #32
  40331e:	4620      	mov	r0, r4
  403320:	47a8      	blx	r5
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  403322:	2104      	movs	r1, #4
  403324:	4620      	mov	r0, r4
  403326:	47a8      	blx	r5
  403328:	bd38      	pop	{r3, r4, r5, pc}
  40332a:	bf00      	nop
  40332c:	00409ffc 	.word	0x00409ffc
  403330:	0040431d 	.word	0x0040431d
  403334:	400e1860 	.word	0x400e1860
  403338:	00400de9 	.word	0x00400de9
  40333c:	00400ded 	.word	0x00400ded

00403340 <TC_init0>:
void TC_init0(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403340:	b570      	push	{r4, r5, r6, lr}
  403342:	4605      	mov	r5, r0
  403344:	460c      	mov	r4, r1
  403346:	4616      	mov	r6, r2
	pmc_enable_periph_clk(ID_TC);
  403348:	4608      	mov	r0, r1
  40334a:	4b0f      	ldr	r3, [pc, #60]	; (403388 <TC_init0+0x48>)
  40334c:	4798      	blx	r3
	tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_CPCTRG);
  40334e:	f244 0204 	movw	r2, #16388	; 0x4004
  403352:	4631      	mov	r1, r6
  403354:	4628      	mov	r0, r5
  403356:	4b0d      	ldr	r3, [pc, #52]	; (40338c <TC_init0+0x4c>)
  403358:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, 65535);
  40335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40335e:	4631      	mov	r1, r6
  403360:	4628      	mov	r0, r5
  403362:	4b0b      	ldr	r3, [pc, #44]	; (403390 <TC_init0+0x50>)
  403364:	4798      	blx	r3
  403366:	b263      	sxtb	r3, r4
  403368:	095b      	lsrs	r3, r3, #5
  40336a:	f004 041f 	and.w	r4, r4, #31
  40336e:	2201      	movs	r2, #1
  403370:	fa02 f404 	lsl.w	r4, r2, r4
  403374:	4a07      	ldr	r2, [pc, #28]	; (403394 <TC_init0+0x54>)
  403376:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  40337a:	2210      	movs	r2, #16
  40337c:	4631      	mov	r1, r6
  40337e:	4628      	mov	r0, r5
  403380:	4b05      	ldr	r3, [pc, #20]	; (403398 <TC_init0+0x58>)
  403382:	4798      	blx	r3
  403384:	bd70      	pop	{r4, r5, r6, pc}
  403386:	bf00      	nop
  403388:	00400b69 	.word	0x00400b69
  40338c:	00400df1 	.word	0x00400df1
  403390:	00400e1b 	.word	0x00400e1b
  403394:	e000e100 	.word	0xe000e100
  403398:	00400e23 	.word	0x00400e23

0040339c <RTC_init>:
void RTC_init(){
  40339c:	b530      	push	{r4, r5, lr}
  40339e:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_RTC);
  4033a0:	2002      	movs	r0, #2
  4033a2:	4b0c      	ldr	r3, [pc, #48]	; (4033d4 <RTC_init+0x38>)
  4033a4:	4798      	blx	r3
	rtc_set_hour_mode(RTC, 0);
  4033a6:	4c0c      	ldr	r4, [pc, #48]	; (4033d8 <RTC_init+0x3c>)
  4033a8:	2100      	movs	r1, #0
  4033aa:	4620      	mov	r0, r4
  4033ac:	4b0b      	ldr	r3, [pc, #44]	; (4033dc <RTC_init+0x40>)
  4033ae:	4798      	blx	r3
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  4033b0:	230c      	movs	r3, #12
  4033b2:	9300      	str	r3, [sp, #0]
  4033b4:	2313      	movs	r3, #19
  4033b6:	2203      	movs	r2, #3
  4033b8:	f240 71e2 	movw	r1, #2018	; 0x7e2
  4033bc:	4620      	mov	r0, r4
  4033be:	4d08      	ldr	r5, [pc, #32]	; (4033e0 <RTC_init+0x44>)
  4033c0:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  4033c2:	2300      	movs	r3, #0
  4033c4:	222d      	movs	r2, #45	; 0x2d
  4033c6:	210f      	movs	r1, #15
  4033c8:	4620      	mov	r0, r4
  4033ca:	4c06      	ldr	r4, [pc, #24]	; (4033e4 <RTC_init+0x48>)
  4033cc:	47a0      	blx	r4
}
  4033ce:	b003      	add	sp, #12
  4033d0:	bd30      	pop	{r4, r5, pc}
  4033d2:	bf00      	nop
  4033d4:	00400b69 	.word	0x00400b69
  4033d8:	400e1860 	.word	0x400e1860
  4033dc:	00400bbd 	.word	0x00400bbd
  4033e0:	00400d31 	.word	0x00400d31
  4033e4:	00400c2d 	.word	0x00400c2d

004033e8 <io_init>:
void io_init(void){
  4033e8:	b570      	push	{r4, r5, r6, lr}
  4033ea:	b082      	sub	sp, #8
	pmc_enable_periph_clk(TRIGGER_PIO_ID_A);
  4033ec:	2010      	movs	r0, #16
  4033ee:	4c24      	ldr	r4, [pc, #144]	; (403480 <io_init+0x98>)
  4033f0:	47a0      	blx	r4
	pio_configure(TRIGGER_PIO_A, PIO_OUTPUT_0, TRIGGER_IDX_MASK_A, PIO_DEFAULT);
  4033f2:	2300      	movs	r3, #0
  4033f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4033f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033fc:	4821      	ldr	r0, [pc, #132]	; (403484 <io_init+0x9c>)
  4033fe:	4e22      	ldr	r6, [pc, #136]	; (403488 <io_init+0xa0>)
  403400:	47b0      	blx	r6
	pmc_enable_periph_clk(ECHO_PIO_ID_A);
  403402:	200c      	movs	r0, #12
  403404:	47a0      	blx	r4
	pio_configure(ECHO_PIO_A, PIO_INPUT, ECHO_IDX_MASK_A, PIO_PULLUP);
  403406:	4d21      	ldr	r5, [pc, #132]	; (40348c <io_init+0xa4>)
  403408:	2301      	movs	r3, #1
  40340a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40340e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403412:	4628      	mov	r0, r5
  403414:	47b0      	blx	r6
	pmc_enable_periph_clk(WATER_PIO_ID_A);
  403416:	200a      	movs	r0, #10
  403418:	47a0      	blx	r4
	pio_configure(WATER_PIO_A, PIO_INPUT, WATER_IDX_MASK_A, PIO_PULLUP);
  40341a:	4c1d      	ldr	r4, [pc, #116]	; (403490 <io_init+0xa8>)
  40341c:	2301      	movs	r3, #1
  40341e:	2210      	movs	r2, #16
  403420:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403424:	4620      	mov	r0, r4
  403426:	47b0      	blx	r6
	pio_handler_set(ECHO_PIO_A,
  403428:	4b1a      	ldr	r3, [pc, #104]	; (403494 <io_init+0xac>)
  40342a:	9300      	str	r3, [sp, #0]
  40342c:	2340      	movs	r3, #64	; 0x40
  40342e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  403432:	210c      	movs	r1, #12
  403434:	4628      	mov	r0, r5
  403436:	4e18      	ldr	r6, [pc, #96]	; (403498 <io_init+0xb0>)
  403438:	47b0      	blx	r6
	pio_handler_set(WATER_PIO_A,
  40343a:	4b18      	ldr	r3, [pc, #96]	; (40349c <io_init+0xb4>)
  40343c:	9300      	str	r3, [sp, #0]
  40343e:	2340      	movs	r3, #64	; 0x40
  403440:	2210      	movs	r2, #16
  403442:	210a      	movs	r1, #10
  403444:	4620      	mov	r0, r4
  403446:	47b0      	blx	r6
  403448:	4b15      	ldr	r3, [pc, #84]	; (4034a0 <io_init+0xb8>)
  40344a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40344e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403450:	22a0      	movs	r2, #160	; 0xa0
  403452:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403456:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40345a:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40345c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_enable_interrupt(ECHO_PIO_A, ECHO_IDX_MASK_A);
  403460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403464:	4628      	mov	r0, r5
  403466:	4e0f      	ldr	r6, [pc, #60]	; (4034a4 <io_init+0xbc>)
  403468:	47b0      	blx	r6
	pio_enable_interrupt(WATER_PIO_A, WATER_IDX_MASK_A);
  40346a:	2110      	movs	r1, #16
  40346c:	4620      	mov	r0, r4
  40346e:	47b0      	blx	r6
	pio_get_interrupt_status(ECHO_PIO_A); // clear IRQ
  403470:	4628      	mov	r0, r5
  403472:	4d0d      	ldr	r5, [pc, #52]	; (4034a8 <io_init+0xc0>)
  403474:	47a8      	blx	r5
	pio_get_interrupt_status(WATER_PIO_A); // clear IRQ
  403476:	4620      	mov	r0, r4
  403478:	47a8      	blx	r5
}
  40347a:	b002      	add	sp, #8
  40347c:	bd70      	pop	{r4, r5, r6, pc}
  40347e:	bf00      	nop
  403480:	00400b69 	.word	0x00400b69
  403484:	400e1400 	.word	0x400e1400
  403488:	00400855 	.word	0x00400855
  40348c:	400e1200 	.word	0x400e1200
  403490:	400e0e00 	.word	0x400e0e00
  403494:	00402f51 	.word	0x00402f51
  403498:	00400975 	.word	0x00400975
  40349c:	00402fe9 	.word	0x00402fe9
  4034a0:	e000e100 	.word	0xe000e100
  4034a4:	00400917 	.word	0x00400917
  4034a8:	0040091b 	.word	0x0040091b

004034ac <signal_trigger>:
void signal_trigger(void){
  4034ac:	b510      	push	{r4, lr}
	pio_set(TRIGGER_PIO_A, TRIGGER_IDX_MASK_A);
  4034ae:	4c08      	ldr	r4, [pc, #32]	; (4034d0 <signal_trigger+0x24>)
  4034b0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4034b4:	4620      	mov	r0, r4
  4034b6:	4b07      	ldr	r3, [pc, #28]	; (4034d4 <signal_trigger+0x28>)
  4034b8:	4798      	blx	r3
	delay_us(10);
  4034ba:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4034be:	4b06      	ldr	r3, [pc, #24]	; (4034d8 <signal_trigger+0x2c>)
  4034c0:	4798      	blx	r3
	pio_clear(TRIGGER_PIO_A, TRIGGER_IDX_MASK_A);
  4034c2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4034c6:	4620      	mov	r0, r4
  4034c8:	4b04      	ldr	r3, [pc, #16]	; (4034dc <signal_trigger+0x30>)
  4034ca:	4798      	blx	r3
  4034cc:	bd10      	pop	{r4, pc}
  4034ce:	bf00      	nop
  4034d0:	400e1400 	.word	0x400e1400
  4034d4:	00400741 	.word	0x00400741
  4034d8:	20400001 	.word	0x20400001
  4034dc:	00400745 	.word	0x00400745

004034e0 <get_time>:
void get_time(char *timestamp){
  4034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034e4:	b085      	sub	sp, #20
  4034e6:	4683      	mov	fp, r0
	rtc_get_date(RTC, &year, &month, &day, &week);
  4034e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403560 <get_time+0x80>
  4034ec:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403564 <get_time+0x84>
  4034f0:	4c13      	ldr	r4, [pc, #76]	; (403540 <get_time+0x60>)
  4034f2:	f8df a074 	ldr.w	sl, [pc, #116]	; 403568 <get_time+0x88>
  4034f6:	4b13      	ldr	r3, [pc, #76]	; (403544 <get_time+0x64>)
  4034f8:	9300      	str	r3, [sp, #0]
  4034fa:	4643      	mov	r3, r8
  4034fc:	464a      	mov	r2, r9
  4034fe:	4621      	mov	r1, r4
  403500:	4650      	mov	r0, sl
  403502:	4d11      	ldr	r5, [pc, #68]	; (403548 <get_time+0x68>)
  403504:	47a8      	blx	r5
	rtc_get_time(RTC, &hour, &minute, &second);
  403506:	4f11      	ldr	r7, [pc, #68]	; (40354c <get_time+0x6c>)
  403508:	4e11      	ldr	r6, [pc, #68]	; (403550 <get_time+0x70>)
  40350a:	4d12      	ldr	r5, [pc, #72]	; (403554 <get_time+0x74>)
  40350c:	463b      	mov	r3, r7
  40350e:	4632      	mov	r2, r6
  403510:	4629      	mov	r1, r5
  403512:	4650      	mov	r0, sl
  403514:	f8df a054 	ldr.w	sl, [pc, #84]	; 40356c <get_time+0x8c>
  403518:	47d0      	blx	sl
	sprintf(timestamp, "%d/%d/%d - %02d:%02d:%02d", day, month, year, hour, minute, second);
  40351a:	f8d9 3000 	ldr.w	r3, [r9]
  40351e:	f8d8 2000 	ldr.w	r2, [r8]
  403522:	6839      	ldr	r1, [r7, #0]
  403524:	9103      	str	r1, [sp, #12]
  403526:	6831      	ldr	r1, [r6, #0]
  403528:	9102      	str	r1, [sp, #8]
  40352a:	6829      	ldr	r1, [r5, #0]
  40352c:	9101      	str	r1, [sp, #4]
  40352e:	6821      	ldr	r1, [r4, #0]
  403530:	9100      	str	r1, [sp, #0]
  403532:	4909      	ldr	r1, [pc, #36]	; (403558 <get_time+0x78>)
  403534:	4658      	mov	r0, fp
  403536:	4c09      	ldr	r4, [pc, #36]	; (40355c <get_time+0x7c>)
  403538:	47a0      	blx	r4
}
  40353a:	b005      	add	sp, #20
  40353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403540:	20400cdc 	.word	0x20400cdc
  403544:	20400cac 	.word	0x20400cac
  403548:	00400cbd 	.word	0x00400cbd
  40354c:	20400cc0 	.word	0x20400cc0
  403550:	20400cc8 	.word	0x20400cc8
  403554:	20400cd0 	.word	0x20400cd0
  403558:	0040a010 	.word	0x0040a010
  40355c:	00404c71 	.word	0x00404c71
  403560:	20400ce4 	.word	0x20400ce4
  403564:	20400cbc 	.word	0x20400cbc
  403568:	400e1860 	.word	0x400e1860
  40356c:	00400bd3 	.word	0x00400bd3

00403570 <task_afec>:
void task_afec(void){
  403570:	b5f0      	push	{r4, r5, r6, r7, lr}
  403572:	b0ad      	sub	sp, #180	; 0xb4
	xQueueAfec = xQueueCreate( 10, sizeof( int32_t ) );
  403574:	2200      	movs	r2, #0
  403576:	2104      	movs	r1, #4
  403578:	200a      	movs	r0, #10
  40357a:	4b31      	ldr	r3, [pc, #196]	; (403640 <task_afec+0xd0>)
  40357c:	4798      	blx	r3
  40357e:	4b31      	ldr	r3, [pc, #196]	; (403644 <task_afec+0xd4>)
  403580:	6018      	str	r0, [r3, #0]
	afec_enable(AFEC0);
  403582:	4c31      	ldr	r4, [pc, #196]	; (403648 <task_afec+0xd8>)
  403584:	4620      	mov	r0, r4
  403586:	4b31      	ldr	r3, [pc, #196]	; (40364c <task_afec+0xdc>)
  403588:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  40358a:	a803      	add	r0, sp, #12
  40358c:	4b30      	ldr	r3, [pc, #192]	; (403650 <task_afec+0xe0>)
  40358e:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  403590:	a903      	add	r1, sp, #12
  403592:	4620      	mov	r0, r4
  403594:	4b2f      	ldr	r3, [pc, #188]	; (403654 <task_afec+0xe4>)
  403596:	4798      	blx	r3
	reg = afec->AFEC_MR;
  403598:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40359a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  40359e:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_callback, 5);
  4035a0:	2305      	movs	r3, #5
  4035a2:	4a2d      	ldr	r2, [pc, #180]	; (403658 <task_afec+0xe8>)
  4035a4:	2100      	movs	r1, #0
  4035a6:	4620      	mov	r0, r4
  4035a8:	4d2c      	ldr	r5, [pc, #176]	; (40365c <task_afec+0xec>)
  4035aa:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4035ac:	4668      	mov	r0, sp
  4035ae:	4b2c      	ldr	r3, [pc, #176]	; (403660 <task_afec+0xf0>)
  4035b0:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4035b2:	2500      	movs	r5, #0
  4035b4:	f88d 5001 	strb.w	r5, [sp, #1]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL, &afec_ch_cfg);
  4035b8:	466a      	mov	r2, sp
  4035ba:	4629      	mov	r1, r5
  4035bc:	4620      	mov	r0, r4
  4035be:	4b29      	ldr	r3, [pc, #164]	; (403664 <task_afec+0xf4>)
  4035c0:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  4035c2:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4035c4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4035c8:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4035ca:	a801      	add	r0, sp, #4
  4035cc:	4b26      	ldr	r3, [pc, #152]	; (403668 <task_afec+0xf8>)
  4035ce:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  4035d0:	a901      	add	r1, sp, #4
  4035d2:	4620      	mov	r0, r4
  4035d4:	4b25      	ldr	r3, [pc, #148]	; (40366c <task_afec+0xfc>)
  4035d6:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4035d8:	2301      	movs	r3, #1
  4035da:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  4035dc:	2302      	movs	r3, #2
  4035de:	6023      	str	r3, [r4, #0]
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  2000 / portTICK_PERIOD_MS)) {
  4035e0:	4f18      	ldr	r7, [pc, #96]	; (403644 <task_afec+0xd4>)
  4035e2:	4e23      	ldr	r6, [pc, #140]	; (403670 <task_afec+0x100>)
	vTaskDelay(1000 / portTICK_PERIOD_MS);
  4035e4:	4d23      	ldr	r5, [pc, #140]	; (403674 <task_afec+0x104>)
  4035e6:	e002      	b.n	4035ee <task_afec+0x7e>
		vTaskDelay(500);
  4035e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4035ec:	47a8      	blx	r5
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  2000 / portTICK_PERIOD_MS)) {
  4035ee:	2300      	movs	r3, #0
  4035f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  4035f4:	a919      	add	r1, sp, #100	; 0x64
  4035f6:	6838      	ldr	r0, [r7, #0]
  4035f8:	47b0      	blx	r6
  4035fa:	2800      	cmp	r0, #0
  4035fc:	d0f4      	beq.n	4035e8 <task_afec+0x78>
	ul_vol = ADC_value * 100 / 4096;
  4035fe:	2364      	movs	r3, #100	; 0x64
  403600:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403602:	fb03 f302 	mul.w	r3, r3, r2
  403606:	2b00      	cmp	r3, #0
  403608:	bfb8      	it	lt
  40360a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
  40360e:	131c      	asrs	r4, r3, #12
	vTaskDelay(1000 / portTICK_PERIOD_MS);
  403610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403614:	47a8      	blx	r5
  403616:	2202      	movs	r2, #2
  403618:	4b0b      	ldr	r3, [pc, #44]	; (403648 <task_afec+0xd8>)
  40361a:	601a      	str	r2, [r3, #0]
			get_time(&timestamp);
  40361c:	a809      	add	r0, sp, #36	; 0x24
  40361e:	4b16      	ldr	r3, [pc, #88]	; (403678 <task_afec+0x108>)
  403620:	4798      	blx	r3
			data.id = 3;
  403622:	2303      	movs	r3, #3
  403624:	931a      	str	r3, [sp, #104]	; 0x68
			data.value = ph_value;
  403626:	941b      	str	r4, [sp, #108]	; 0x6c
			strcpy(data.timestamp, timestamp);
  403628:	a909      	add	r1, sp, #36	; 0x24
  40362a:	a81c      	add	r0, sp, #112	; 0x70
  40362c:	4b13      	ldr	r3, [pc, #76]	; (40367c <task_afec+0x10c>)
  40362e:	4798      	blx	r3
			xQueueSend( xQueueData, &data, 0);
  403630:	2300      	movs	r3, #0
  403632:	461a      	mov	r2, r3
  403634:	a91a      	add	r1, sp, #104	; 0x68
  403636:	4812      	ldr	r0, [pc, #72]	; (403680 <task_afec+0x110>)
  403638:	6800      	ldr	r0, [r0, #0]
  40363a:	4c12      	ldr	r4, [pc, #72]	; (403684 <task_afec+0x114>)
  40363c:	47a0      	blx	r4
  40363e:	e7d3      	b.n	4035e8 <task_afec+0x78>
  403640:	00401889 	.word	0x00401889
  403644:	20400cd8 	.word	0x20400cd8
  403648:	4003c000 	.word	0x4003c000
  40364c:	004006dd 	.word	0x004006dd
  403650:	0040050d 	.word	0x0040050d
  403654:	0040055d 	.word	0x0040055d
  403658:	00402fbd 	.word	0x00402fbd
  40365c:	0040065d 	.word	0x0040065d
  403660:	0040053d 	.word	0x0040053d
  403664:	004004c9 	.word	0x004004c9
  403668:	00400547 	.word	0x00400547
  40366c:	004004f9 	.word	0x004004f9
  403670:	00401cc9 	.word	0x00401cc9
  403674:	004024f1 	.word	0x004024f1
  403678:	004034e1 	.word	0x004034e1
  40367c:	00404cbd 	.word	0x00404cbd
  403680:	20400ce8 	.word	0x20400ce8
  403684:	00401905 	.word	0x00401905

00403688 <task_water_cicles>:
static void task_water_cicles(void *pvParameters){
  403688:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  40368c:	b0a2      	sub	sp, #136	; 0x88
	xSemaphoreWater = xSemaphoreCreateBinary();
  40368e:	2203      	movs	r2, #3
  403690:	2100      	movs	r1, #0
  403692:	2001      	movs	r0, #1
  403694:	4c2a      	ldr	r4, [pc, #168]	; (403740 <task_water_cicles+0xb8>)
  403696:	47a0      	blx	r4
  403698:	4b2a      	ldr	r3, [pc, #168]	; (403744 <task_water_cicles+0xbc>)
  40369a:	6018      	str	r0, [r3, #0]
	xSemaphoreCounter = xSemaphoreCreateBinary();
  40369c:	2203      	movs	r2, #3
  40369e:	2100      	movs	r1, #0
  4036a0:	2001      	movs	r0, #1
  4036a2:	47a0      	blx	r4
  4036a4:	4b28      	ldr	r3, [pc, #160]	; (403748 <task_water_cicles+0xc0>)
  4036a6:	6018      	str	r0, [r3, #0]
	io_init();
  4036a8:	4b28      	ldr	r3, [pc, #160]	; (40374c <task_water_cicles+0xc4>)
  4036aa:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphoreWater, ( TickType_t ) 50) == pdTRUE)
  4036ac:	f8df a094 	ldr.w	sl, [pc, #148]	; 403744 <task_water_cicles+0xbc>
  4036b0:	2400      	movs	r4, #0
  4036b2:	4d27      	ldr	r5, [pc, #156]	; (403750 <task_water_cicles+0xc8>)
				water_flow = 7.2727 * cicles + 3.63636;
  4036b4:	f20f 0978 	addw	r9, pc, #120	; 0x78
  4036b8:	e9d9 8900 	ldrd	r8, r9, [r9]
  4036bc:	e011      	b.n	4036e2 <task_water_cicles+0x5a>
				water_flow = 0;
  4036be:	4626      	mov	r6, r4
			get_time(&timestamp);
  4036c0:	4668      	mov	r0, sp
  4036c2:	4b24      	ldr	r3, [pc, #144]	; (403754 <task_water_cicles+0xcc>)
  4036c4:	4798      	blx	r3
			data.id = 2;
  4036c6:	2302      	movs	r3, #2
  4036c8:	9310      	str	r3, [sp, #64]	; 0x40
			data.value = water_flow;
  4036ca:	9611      	str	r6, [sp, #68]	; 0x44
			strcpy(data.timestamp, timestamp);
  4036cc:	4669      	mov	r1, sp
  4036ce:	a812      	add	r0, sp, #72	; 0x48
  4036d0:	4b21      	ldr	r3, [pc, #132]	; (403758 <task_water_cicles+0xd0>)
  4036d2:	4798      	blx	r3
			xQueueSend( xQueueData, &data, 0);
  4036d4:	4623      	mov	r3, r4
  4036d6:	4622      	mov	r2, r4
  4036d8:	a910      	add	r1, sp, #64	; 0x40
  4036da:	4820      	ldr	r0, [pc, #128]	; (40375c <task_water_cicles+0xd4>)
  4036dc:	6800      	ldr	r0, [r0, #0]
  4036de:	4e20      	ldr	r6, [pc, #128]	; (403760 <task_water_cicles+0xd8>)
  4036e0:	47b0      	blx	r6
static void task_water_cicles(void *pvParameters){
  4036e2:	f04f 0b00 	mov.w	fp, #0
		if( xSemaphoreTake(xSemaphoreWater, ( TickType_t ) 50) == pdTRUE)
  4036e6:	4623      	mov	r3, r4
  4036e8:	2232      	movs	r2, #50	; 0x32
  4036ea:	4621      	mov	r1, r4
  4036ec:	f8da 0000 	ldr.w	r0, [sl]
  4036f0:	47a8      	blx	r5
  4036f2:	2801      	cmp	r0, #1
			cicles = cicles + 1;
  4036f4:	bf08      	it	eq
  4036f6:	f10b 0b01 	addeq.w	fp, fp, #1
		if( xSemaphoreTake(xSemaphoreCounter, ( TickType_t ) 5) == pdTRUE){
  4036fa:	4623      	mov	r3, r4
  4036fc:	2205      	movs	r2, #5
  4036fe:	4621      	mov	r1, r4
  403700:	4811      	ldr	r0, [pc, #68]	; (403748 <task_water_cicles+0xc0>)
  403702:	6800      	ldr	r0, [r0, #0]
  403704:	47a8      	blx	r5
  403706:	2801      	cmp	r0, #1
  403708:	d1ed      	bne.n	4036e6 <task_water_cicles+0x5e>
			if(cicles <= 16){
  40370a:	f1bb 0f10 	cmp.w	fp, #16
  40370e:	ddd6      	ble.n	4036be <task_water_cicles+0x36>
				water_flow = 7.2727 * cicles + 3.63636;
  403710:	4658      	mov	r0, fp
  403712:	4b14      	ldr	r3, [pc, #80]	; (403764 <task_water_cicles+0xdc>)
  403714:	4798      	blx	r3
  403716:	4642      	mov	r2, r8
  403718:	464b      	mov	r3, r9
  40371a:	4e13      	ldr	r6, [pc, #76]	; (403768 <task_water_cicles+0xe0>)
  40371c:	47b0      	blx	r6
  40371e:	a306      	add	r3, pc, #24	; (adr r3, 403738 <task_water_cicles+0xb0>)
  403720:	e9d3 2300 	ldrd	r2, r3, [r3]
  403724:	4e11      	ldr	r6, [pc, #68]	; (40376c <task_water_cicles+0xe4>)
  403726:	47b0      	blx	r6
  403728:	4b11      	ldr	r3, [pc, #68]	; (403770 <task_water_cicles+0xe8>)
  40372a:	4798      	blx	r3
  40372c:	4606      	mov	r6, r0
  40372e:	e7c7      	b.n	4036c0 <task_water_cicles+0x38>
  403730:	ab367a10 	.word	0xab367a10
  403734:	401d173e 	.word	0x401d173e
  403738:	e963dc48 	.word	0xe963dc48
  40373c:	400d1743 	.word	0x400d1743
  403740:	00401889 	.word	0x00401889
  403744:	20400cd4 	.word	0x20400cd4
  403748:	20400cb0 	.word	0x20400cb0
  40374c:	004033e9 	.word	0x004033e9
  403750:	00401cc9 	.word	0x00401cc9
  403754:	004034e1 	.word	0x004034e1
  403758:	00404cbd 	.word	0x00404cbd
  40375c:	20400ce8 	.word	0x20400ce8
  403760:	00401905 	.word	0x00401905
  403764:	00403ced 	.word	0x00403ced
  403768:	00403db9 	.word	0x00403db9
  40376c:	00403a55 	.word	0x00403a55
  403770:	004041dd 	.word	0x004041dd

00403774 <task_hc04_A>:
static void task_hc04_A(void *pvParameters){
  403774:	e92d 4ed0 	stmdb	sp!, {r4, r6, r7, r9, sl, fp, lr}
  403778:	ed2d 8b02 	vpush	{d8}
  40377c:	b0a5      	sub	sp, #148	; 0x94
	xSemaphoreCounter2 = xSemaphoreCreateBinary();
  40377e:	2203      	movs	r2, #3
  403780:	2100      	movs	r1, #0
  403782:	2001      	movs	r0, #1
  403784:	4c2c      	ldr	r4, [pc, #176]	; (403838 <task_hc04_A+0xc4>)
  403786:	47a0      	blx	r4
  403788:	4b2c      	ldr	r3, [pc, #176]	; (40383c <task_hc04_A+0xc8>)
  40378a:	6018      	str	r0, [r3, #0]
	hc04_A_EchoQueue = xQueueCreate( 1, sizeof( float ) );
  40378c:	2200      	movs	r2, #0
  40378e:	2104      	movs	r1, #4
  403790:	2001      	movs	r0, #1
  403792:	47a0      	blx	r4
  403794:	4b2a      	ldr	r3, [pc, #168]	; (403840 <task_hc04_A+0xcc>)
  403796:	6018      	str	r0, [r3, #0]
	TC_init0(TIMER_A, TIMER_ID_A, TIMER_CHANNEL_A, TIMER_FREQ_A);
  403798:	232a      	movs	r3, #42	; 0x2a
  40379a:	2201      	movs	r2, #1
  40379c:	2118      	movs	r1, #24
  40379e:	4829      	ldr	r0, [pc, #164]	; (403844 <task_hc04_A+0xd0>)
  4037a0:	4c29      	ldr	r4, [pc, #164]	; (403848 <task_hc04_A+0xd4>)
  4037a2:	47a0      	blx	r4
		signal_trigger();
  4037a4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 403880 <task_hc04_A+0x10c>
		if( xQueueReceive(hc04_A_EchoQueue, &ts, ( TickType_t ) 100 / portTICK_PERIOD_MS) == pdTRUE ){
  4037a8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 403840 <task_hc04_A+0xcc>
	return(ts * SOUND_SPEED_MS/2);
  4037ac:	2600      	movs	r6, #0
  4037ae:	4f27      	ldr	r7, [pc, #156]	; (40384c <task_hc04_A+0xd8>)
			int water_level = (int) (224 - (dm*100));
  4037b0:	eddf 8a27 	vldr	s17, [pc, #156]	; 403850 <task_hc04_A+0xdc>
  4037b4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 403854 <task_hc04_A+0xe0>
  4037b8:	e003      	b.n	4037c2 <task_hc04_A+0x4e>
		vTaskDelay(500 / portTICK_PERIOD_MS);
  4037ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4037be:	4b26      	ldr	r3, [pc, #152]	; (403858 <task_hc04_A+0xe4>)
  4037c0:	4798      	blx	r3
		signal_trigger();
  4037c2:	47d0      	blx	sl
		if( xQueueReceive(hc04_A_EchoQueue, &ts, ( TickType_t ) 100 / portTICK_PERIOD_MS) == pdTRUE ){
  4037c4:	2300      	movs	r3, #0
  4037c6:	2264      	movs	r2, #100	; 0x64
  4037c8:	a911      	add	r1, sp, #68	; 0x44
  4037ca:	f8d9 0000 	ldr.w	r0, [r9]
  4037ce:	4c23      	ldr	r4, [pc, #140]	; (40385c <task_hc04_A+0xe8>)
  4037d0:	47a0      	blx	r4
  4037d2:	2801      	cmp	r0, #1
  4037d4:	d1f1      	bne.n	4037ba <task_hc04_A+0x46>
			float dm = calc_distance_m(ts);
  4037d6:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
			if( xSemaphoreTake(xSemaphoreCounter2, ( TickType_t ) 5) == pdTRUE){
  4037da:	2300      	movs	r3, #0
  4037dc:	2205      	movs	r2, #5
  4037de:	4619      	mov	r1, r3
  4037e0:	4816      	ldr	r0, [pc, #88]	; (40383c <task_hc04_A+0xc8>)
  4037e2:	6800      	ldr	r0, [r0, #0]
  4037e4:	47a0      	blx	r4
  4037e6:	2801      	cmp	r0, #1
  4037e8:	d1e7      	bne.n	4037ba <task_hc04_A+0x46>
				get_time(&timestamp);
  4037ea:	a801      	add	r0, sp, #4
  4037ec:	4b1c      	ldr	r3, [pc, #112]	; (403860 <task_hc04_A+0xec>)
  4037ee:	4798      	blx	r3
				data.id = 1;
  4037f0:	2301      	movs	r3, #1
  4037f2:	9312      	str	r3, [sp, #72]	; 0x48
	return(ts * SOUND_SPEED_MS/2);
  4037f4:	4658      	mov	r0, fp
  4037f6:	4b1b      	ldr	r3, [pc, #108]	; (403864 <task_hc04_A+0xf0>)
  4037f8:	4798      	blx	r3
  4037fa:	4c1b      	ldr	r4, [pc, #108]	; (403868 <task_hc04_A+0xf4>)
  4037fc:	4632      	mov	r2, r6
  4037fe:	463b      	mov	r3, r7
  403800:	47a0      	blx	r4
  403802:	2200      	movs	r2, #0
  403804:	4b19      	ldr	r3, [pc, #100]	; (40386c <task_hc04_A+0xf8>)
  403806:	47a0      	blx	r4
  403808:	4b19      	ldr	r3, [pc, #100]	; (403870 <task_hc04_A+0xfc>)
  40380a:	4798      	blx	r3
			int water_level = (int) (224 - (dm*100));
  40380c:	ee07 0a90 	vmov	s15, r0
  403810:	ee67 7aa8 	vmul.f32	s15, s15, s17
  403814:	ee78 7a67 	vsub.f32	s15, s16, s15
  403818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  40381c:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
				strcpy(data.timestamp, timestamp);
  403820:	a901      	add	r1, sp, #4
  403822:	a814      	add	r0, sp, #80	; 0x50
  403824:	4b13      	ldr	r3, [pc, #76]	; (403874 <task_hc04_A+0x100>)
  403826:	4798      	blx	r3
				xQueueSend( xQueueData, &data, 0);
  403828:	2300      	movs	r3, #0
  40382a:	461a      	mov	r2, r3
  40382c:	a912      	add	r1, sp, #72	; 0x48
  40382e:	4812      	ldr	r0, [pc, #72]	; (403878 <task_hc04_A+0x104>)
  403830:	6800      	ldr	r0, [r0, #0]
  403832:	4c12      	ldr	r4, [pc, #72]	; (40387c <task_hc04_A+0x108>)
  403834:	47a0      	blx	r4
  403836:	e7c0      	b.n	4037ba <task_hc04_A+0x46>
  403838:	00401889 	.word	0x00401889
  40383c:	20400cb8 	.word	0x20400cb8
  403840:	20400ccc 	.word	0x20400ccc
  403844:	4000c000 	.word	0x4000c000
  403848:	00403341 	.word	0x00403341
  40384c:	40754000 	.word	0x40754000
  403850:	42c80000 	.word	0x42c80000
  403854:	43600000 	.word	0x43600000
  403858:	004024f1 	.word	0x004024f1
  40385c:	00401cc9 	.word	0x00401cc9
  403860:	004034e1 	.word	0x004034e1
  403864:	00403d11 	.word	0x00403d11
  403868:	00403db9 	.word	0x00403db9
  40386c:	3fe00000 	.word	0x3fe00000
  403870:	0040422d 	.word	0x0040422d
  403874:	00404cbd 	.word	0x00404cbd
  403878:	20400ce8 	.word	0x20400ce8
  40387c:	00401905 	.word	0x00401905
  403880:	004034ad 	.word	0x004034ad

00403884 <main>:
/**
*  \brief FreeRTOS Real Time Kernel example entry point.
*
*  \return Unused (ANSI-C compatibility).
*/
int main(void){
  403884:	b500      	push	{lr}
  403886:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403888:	4b4e      	ldr	r3, [pc, #312]	; (4039c4 <main+0x140>)
  40388a:	4798      	blx	r3
	board_init();
  40388c:	4b4e      	ldr	r3, [pc, #312]	; (4039c8 <main+0x144>)
  40388e:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;
  403890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403894:	4b4d      	ldr	r3, [pc, #308]	; (4039cc <main+0x148>)
  403896:	605a      	str	r2, [r3, #4]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403898:	4d4d      	ldr	r5, [pc, #308]	; (4039d0 <main+0x14c>)
  40389a:	4b4e      	ldr	r3, [pc, #312]	; (4039d4 <main+0x150>)
  40389c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40389e:	4a4e      	ldr	r2, [pc, #312]	; (4039d8 <main+0x154>)
  4038a0:	4b4e      	ldr	r3, [pc, #312]	; (4039dc <main+0x158>)
  4038a2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4038a4:	4a4e      	ldr	r2, [pc, #312]	; (4039e0 <main+0x15c>)
  4038a6:	4b4f      	ldr	r3, [pc, #316]	; (4039e4 <main+0x160>)
  4038a8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4038aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4038ae:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4038b0:	23c0      	movs	r3, #192	; 0xc0
  4038b2:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4038b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4038b8:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4038ba:	2400      	movs	r4, #0
  4038bc:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4038be:	9408      	str	r4, [sp, #32]
  4038c0:	200e      	movs	r0, #14
  4038c2:	4b49      	ldr	r3, [pc, #292]	; (4039e8 <main+0x164>)
  4038c4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4038c6:	4a49      	ldr	r2, [pc, #292]	; (4039ec <main+0x168>)
  4038c8:	a904      	add	r1, sp, #16
  4038ca:	4628      	mov	r0, r5
  4038cc:	4b48      	ldr	r3, [pc, #288]	; (4039f0 <main+0x16c>)
  4038ce:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4038d0:	4628      	mov	r0, r5
  4038d2:	4b48      	ldr	r3, [pc, #288]	; (4039f4 <main+0x170>)
  4038d4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4038d6:	4628      	mov	r0, r5
  4038d8:	4b47      	ldr	r3, [pc, #284]	; (4039f8 <main+0x174>)
  4038da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4038dc:	4e47      	ldr	r6, [pc, #284]	; (4039fc <main+0x178>)
  4038de:	6833      	ldr	r3, [r6, #0]
  4038e0:	4621      	mov	r1, r4
  4038e2:	6898      	ldr	r0, [r3, #8]
  4038e4:	4d46      	ldr	r5, [pc, #280]	; (403a00 <main+0x17c>)
  4038e6:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4038e8:	6833      	ldr	r3, [r6, #0]
  4038ea:	4621      	mov	r1, r4
  4038ec:	6858      	ldr	r0, [r3, #4]
  4038ee:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4038f0:	6833      	ldr	r3, [r6, #0]
  4038f2:	4621      	mov	r1, r4
  4038f4:	6898      	ldr	r0, [r3, #8]
  4038f6:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();
	RTC_init();
  4038f8:	4b42      	ldr	r3, [pc, #264]	; (403a04 <main+0x180>)
  4038fa:	4798      	blx	r3
	
	
	/* Create task to run the hc04_A sensor*/
	if (xTaskCreate(task_hc04_A, "hc04_A", TASK_UARTTX_STACK_SIZE, NULL,
  4038fc:	9403      	str	r4, [sp, #12]
  4038fe:	9402      	str	r4, [sp, #8]
  403900:	9401      	str	r4, [sp, #4]
  403902:	9400      	str	r4, [sp, #0]
  403904:	4623      	mov	r3, r4
  403906:	f44f 7200 	mov.w	r2, #512	; 0x200
  40390a:	493f      	ldr	r1, [pc, #252]	; (403a08 <main+0x184>)
  40390c:	483f      	ldr	r0, [pc, #252]	; (403a0c <main+0x188>)
  40390e:	4c40      	ldr	r4, [pc, #256]	; (403a10 <main+0x18c>)
  403910:	47a0      	blx	r4
  403912:	2801      	cmp	r0, #1
  403914:	d002      	beq.n	40391c <main+0x98>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403916:	483f      	ldr	r0, [pc, #252]	; (403a14 <main+0x190>)
  403918:	4b3f      	ldr	r3, [pc, #252]	; (403a18 <main+0x194>)
  40391a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_water_cicles, "cicles", TASK_UARTTX_STACK_SIZE, NULL,
  40391c:	2300      	movs	r3, #0
  40391e:	9303      	str	r3, [sp, #12]
  403920:	9302      	str	r3, [sp, #8]
  403922:	9301      	str	r3, [sp, #4]
  403924:	9300      	str	r3, [sp, #0]
  403926:	f44f 7200 	mov.w	r2, #512	; 0x200
  40392a:	493c      	ldr	r1, [pc, #240]	; (403a1c <main+0x198>)
  40392c:	483c      	ldr	r0, [pc, #240]	; (403a20 <main+0x19c>)
  40392e:	4c38      	ldr	r4, [pc, #224]	; (403a10 <main+0x18c>)
  403930:	47a0      	blx	r4
  403932:	2801      	cmp	r0, #1
  403934:	d002      	beq.n	40393c <main+0xb8>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403936:	4837      	ldr	r0, [pc, #220]	; (403a14 <main+0x190>)
  403938:	4b37      	ldr	r3, [pc, #220]	; (403a18 <main+0x194>)
  40393a:	4798      	blx	r3
	}

	if (xTaskCreate(task_timer, "timer", TASK_UARTTX_STACK_SIZE, NULL,
  40393c:	2300      	movs	r3, #0
  40393e:	9303      	str	r3, [sp, #12]
  403940:	9302      	str	r3, [sp, #8]
  403942:	9301      	str	r3, [sp, #4]
  403944:	9300      	str	r3, [sp, #0]
  403946:	f44f 7200 	mov.w	r2, #512	; 0x200
  40394a:	4936      	ldr	r1, [pc, #216]	; (403a24 <main+0x1a0>)
  40394c:	4836      	ldr	r0, [pc, #216]	; (403a28 <main+0x1a4>)
  40394e:	4c30      	ldr	r4, [pc, #192]	; (403a10 <main+0x18c>)
  403950:	47a0      	blx	r4
  403952:	2801      	cmp	r0, #1
  403954:	d002      	beq.n	40395c <main+0xd8>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403956:	482f      	ldr	r0, [pc, #188]	; (403a14 <main+0x190>)
  403958:	4b2f      	ldr	r3, [pc, #188]	; (403a18 <main+0x194>)
  40395a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_timer2, "timer2", TASK_UARTTX_STACK_SIZE, NULL,
  40395c:	2300      	movs	r3, #0
  40395e:	9303      	str	r3, [sp, #12]
  403960:	9302      	str	r3, [sp, #8]
  403962:	9301      	str	r3, [sp, #4]
  403964:	9300      	str	r3, [sp, #0]
  403966:	f44f 7200 	mov.w	r2, #512	; 0x200
  40396a:	4930      	ldr	r1, [pc, #192]	; (403a2c <main+0x1a8>)
  40396c:	4830      	ldr	r0, [pc, #192]	; (403a30 <main+0x1ac>)
  40396e:	4c28      	ldr	r4, [pc, #160]	; (403a10 <main+0x18c>)
  403970:	47a0      	blx	r4
  403972:	2801      	cmp	r0, #1
  403974:	d002      	beq.n	40397c <main+0xf8>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403976:	4827      	ldr	r0, [pc, #156]	; (403a14 <main+0x190>)
  403978:	4b27      	ldr	r3, [pc, #156]	; (403a18 <main+0x194>)
  40397a:	4798      	blx	r3
	}

	if (xTaskCreate(task_afec, "afec", TASK_UARTTX_STACK_SIZE, NULL,
  40397c:	2300      	movs	r3, #0
  40397e:	9303      	str	r3, [sp, #12]
  403980:	9302      	str	r3, [sp, #8]
  403982:	9301      	str	r3, [sp, #4]
  403984:	9300      	str	r3, [sp, #0]
  403986:	f44f 7200 	mov.w	r2, #512	; 0x200
  40398a:	492a      	ldr	r1, [pc, #168]	; (403a34 <main+0x1b0>)
  40398c:	482a      	ldr	r0, [pc, #168]	; (403a38 <main+0x1b4>)
  40398e:	4c20      	ldr	r4, [pc, #128]	; (403a10 <main+0x18c>)
  403990:	47a0      	blx	r4
  403992:	2801      	cmp	r0, #1
  403994:	d002      	beq.n	40399c <main+0x118>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403996:	481f      	ldr	r0, [pc, #124]	; (403a14 <main+0x190>)
  403998:	4b1f      	ldr	r3, [pc, #124]	; (403a18 <main+0x194>)
  40399a:	4798      	blx	r3
	}

	if (xTaskCreate(task_data, "data", TASK_UARTTX_STACK_SIZE, NULL,
  40399c:	2300      	movs	r3, #0
  40399e:	9303      	str	r3, [sp, #12]
  4039a0:	9302      	str	r3, [sp, #8]
  4039a2:	9301      	str	r3, [sp, #4]
  4039a4:	9300      	str	r3, [sp, #0]
  4039a6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4039aa:	4924      	ldr	r1, [pc, #144]	; (403a3c <main+0x1b8>)
  4039ac:	4824      	ldr	r0, [pc, #144]	; (403a40 <main+0x1bc>)
  4039ae:	4c18      	ldr	r4, [pc, #96]	; (403a10 <main+0x18c>)
  4039b0:	47a0      	blx	r4
  4039b2:	2801      	cmp	r0, #1
  4039b4:	d002      	beq.n	4039bc <main+0x138>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  4039b6:	4817      	ldr	r0, [pc, #92]	; (403a14 <main+0x190>)
  4039b8:	4b17      	ldr	r3, [pc, #92]	; (403a18 <main+0x194>)
  4039ba:	4798      	blx	r3
	}



	/* Start the scheduler. */
	vTaskStartScheduler();
  4039bc:	4b21      	ldr	r3, [pc, #132]	; (403a44 <main+0x1c0>)
  4039be:	4798      	blx	r3
  4039c0:	e7fe      	b.n	4039c0 <main+0x13c>
  4039c2:	bf00      	nop
  4039c4:	004001ad 	.word	0x004001ad
  4039c8:	004002a9 	.word	0x004002a9
  4039cc:	400e1850 	.word	0x400e1850
  4039d0:	40028000 	.word	0x40028000
  4039d4:	20400be4 	.word	0x20400be4
  4039d8:	0040300d 	.word	0x0040300d
  4039dc:	20400be0 	.word	0x20400be0
  4039e0:	004031c5 	.word	0x004031c5
  4039e4:	20400bdc 	.word	0x20400bdc
  4039e8:	00400b69 	.word	0x00400b69
  4039ec:	08f0d180 	.word	0x08f0d180
  4039f0:	00400edd 	.word	0x00400edd
  4039f4:	00400f31 	.word	0x00400f31
  4039f8:	00400f37 	.word	0x00400f37
  4039fc:	20400014 	.word	0x20400014
  403a00:	00404ad1 	.word	0x00404ad1
  403a04:	0040339d 	.word	0x0040339d
  403a08:	0040a02c 	.word	0x0040a02c
  403a0c:	00403775 	.word	0x00403775
  403a10:	00401fa9 	.word	0x00401fa9
  403a14:	0040a034 	.word	0x0040a034
  403a18:	0040431d 	.word	0x0040431d
  403a1c:	0040a054 	.word	0x0040a054
  403a20:	00403689 	.word	0x00403689
  403a24:	0040a05c 	.word	0x0040a05c
  403a28:	0040318d 	.word	0x0040318d
  403a2c:	0040a064 	.word	0x0040a064
  403a30:	00403155 	.word	0x00403155
  403a34:	0040a06c 	.word	0x0040a06c
  403a38:	00403571 	.word	0x00403571
  403a3c:	0040a074 	.word	0x0040a074
  403a40:	004030e1 	.word	0x004030e1
  403a44:	004021dd 	.word	0x004021dd

00403a48 <__aeabi_drsub>:
  403a48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403a4c:	e002      	b.n	403a54 <__adddf3>
  403a4e:	bf00      	nop

00403a50 <__aeabi_dsub>:
  403a50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403a54 <__adddf3>:
  403a54:	b530      	push	{r4, r5, lr}
  403a56:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403a5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403a5e:	ea94 0f05 	teq	r4, r5
  403a62:	bf08      	it	eq
  403a64:	ea90 0f02 	teqeq	r0, r2
  403a68:	bf1f      	itttt	ne
  403a6a:	ea54 0c00 	orrsne.w	ip, r4, r0
  403a6e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403a72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403a76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403a7a:	f000 80e2 	beq.w	403c42 <__adddf3+0x1ee>
  403a7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403a82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403a86:	bfb8      	it	lt
  403a88:	426d      	neglt	r5, r5
  403a8a:	dd0c      	ble.n	403aa6 <__adddf3+0x52>
  403a8c:	442c      	add	r4, r5
  403a8e:	ea80 0202 	eor.w	r2, r0, r2
  403a92:	ea81 0303 	eor.w	r3, r1, r3
  403a96:	ea82 0000 	eor.w	r0, r2, r0
  403a9a:	ea83 0101 	eor.w	r1, r3, r1
  403a9e:	ea80 0202 	eor.w	r2, r0, r2
  403aa2:	ea81 0303 	eor.w	r3, r1, r3
  403aa6:	2d36      	cmp	r5, #54	; 0x36
  403aa8:	bf88      	it	hi
  403aaa:	bd30      	pophi	{r4, r5, pc}
  403aac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403ab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403ab4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403ab8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403abc:	d002      	beq.n	403ac4 <__adddf3+0x70>
  403abe:	4240      	negs	r0, r0
  403ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403ac4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403ac8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403acc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403ad0:	d002      	beq.n	403ad8 <__adddf3+0x84>
  403ad2:	4252      	negs	r2, r2
  403ad4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403ad8:	ea94 0f05 	teq	r4, r5
  403adc:	f000 80a7 	beq.w	403c2e <__adddf3+0x1da>
  403ae0:	f1a4 0401 	sub.w	r4, r4, #1
  403ae4:	f1d5 0e20 	rsbs	lr, r5, #32
  403ae8:	db0d      	blt.n	403b06 <__adddf3+0xb2>
  403aea:	fa02 fc0e 	lsl.w	ip, r2, lr
  403aee:	fa22 f205 	lsr.w	r2, r2, r5
  403af2:	1880      	adds	r0, r0, r2
  403af4:	f141 0100 	adc.w	r1, r1, #0
  403af8:	fa03 f20e 	lsl.w	r2, r3, lr
  403afc:	1880      	adds	r0, r0, r2
  403afe:	fa43 f305 	asr.w	r3, r3, r5
  403b02:	4159      	adcs	r1, r3
  403b04:	e00e      	b.n	403b24 <__adddf3+0xd0>
  403b06:	f1a5 0520 	sub.w	r5, r5, #32
  403b0a:	f10e 0e20 	add.w	lr, lr, #32
  403b0e:	2a01      	cmp	r2, #1
  403b10:	fa03 fc0e 	lsl.w	ip, r3, lr
  403b14:	bf28      	it	cs
  403b16:	f04c 0c02 	orrcs.w	ip, ip, #2
  403b1a:	fa43 f305 	asr.w	r3, r3, r5
  403b1e:	18c0      	adds	r0, r0, r3
  403b20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403b28:	d507      	bpl.n	403b3a <__adddf3+0xe6>
  403b2a:	f04f 0e00 	mov.w	lr, #0
  403b2e:	f1dc 0c00 	rsbs	ip, ip, #0
  403b32:	eb7e 0000 	sbcs.w	r0, lr, r0
  403b36:	eb6e 0101 	sbc.w	r1, lr, r1
  403b3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403b3e:	d31b      	bcc.n	403b78 <__adddf3+0x124>
  403b40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403b44:	d30c      	bcc.n	403b60 <__adddf3+0x10c>
  403b46:	0849      	lsrs	r1, r1, #1
  403b48:	ea5f 0030 	movs.w	r0, r0, rrx
  403b4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403b50:	f104 0401 	add.w	r4, r4, #1
  403b54:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403b58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403b5c:	f080 809a 	bcs.w	403c94 <__adddf3+0x240>
  403b60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403b64:	bf08      	it	eq
  403b66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403b6a:	f150 0000 	adcs.w	r0, r0, #0
  403b6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403b72:	ea41 0105 	orr.w	r1, r1, r5
  403b76:	bd30      	pop	{r4, r5, pc}
  403b78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403b7c:	4140      	adcs	r0, r0
  403b7e:	eb41 0101 	adc.w	r1, r1, r1
  403b82:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403b86:	f1a4 0401 	sub.w	r4, r4, #1
  403b8a:	d1e9      	bne.n	403b60 <__adddf3+0x10c>
  403b8c:	f091 0f00 	teq	r1, #0
  403b90:	bf04      	itt	eq
  403b92:	4601      	moveq	r1, r0
  403b94:	2000      	moveq	r0, #0
  403b96:	fab1 f381 	clz	r3, r1
  403b9a:	bf08      	it	eq
  403b9c:	3320      	addeq	r3, #32
  403b9e:	f1a3 030b 	sub.w	r3, r3, #11
  403ba2:	f1b3 0220 	subs.w	r2, r3, #32
  403ba6:	da0c      	bge.n	403bc2 <__adddf3+0x16e>
  403ba8:	320c      	adds	r2, #12
  403baa:	dd08      	ble.n	403bbe <__adddf3+0x16a>
  403bac:	f102 0c14 	add.w	ip, r2, #20
  403bb0:	f1c2 020c 	rsb	r2, r2, #12
  403bb4:	fa01 f00c 	lsl.w	r0, r1, ip
  403bb8:	fa21 f102 	lsr.w	r1, r1, r2
  403bbc:	e00c      	b.n	403bd8 <__adddf3+0x184>
  403bbe:	f102 0214 	add.w	r2, r2, #20
  403bc2:	bfd8      	it	le
  403bc4:	f1c2 0c20 	rsble	ip, r2, #32
  403bc8:	fa01 f102 	lsl.w	r1, r1, r2
  403bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
  403bd0:	bfdc      	itt	le
  403bd2:	ea41 010c 	orrle.w	r1, r1, ip
  403bd6:	4090      	lslle	r0, r2
  403bd8:	1ae4      	subs	r4, r4, r3
  403bda:	bfa2      	ittt	ge
  403bdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403be0:	4329      	orrge	r1, r5
  403be2:	bd30      	popge	{r4, r5, pc}
  403be4:	ea6f 0404 	mvn.w	r4, r4
  403be8:	3c1f      	subs	r4, #31
  403bea:	da1c      	bge.n	403c26 <__adddf3+0x1d2>
  403bec:	340c      	adds	r4, #12
  403bee:	dc0e      	bgt.n	403c0e <__adddf3+0x1ba>
  403bf0:	f104 0414 	add.w	r4, r4, #20
  403bf4:	f1c4 0220 	rsb	r2, r4, #32
  403bf8:	fa20 f004 	lsr.w	r0, r0, r4
  403bfc:	fa01 f302 	lsl.w	r3, r1, r2
  403c00:	ea40 0003 	orr.w	r0, r0, r3
  403c04:	fa21 f304 	lsr.w	r3, r1, r4
  403c08:	ea45 0103 	orr.w	r1, r5, r3
  403c0c:	bd30      	pop	{r4, r5, pc}
  403c0e:	f1c4 040c 	rsb	r4, r4, #12
  403c12:	f1c4 0220 	rsb	r2, r4, #32
  403c16:	fa20 f002 	lsr.w	r0, r0, r2
  403c1a:	fa01 f304 	lsl.w	r3, r1, r4
  403c1e:	ea40 0003 	orr.w	r0, r0, r3
  403c22:	4629      	mov	r1, r5
  403c24:	bd30      	pop	{r4, r5, pc}
  403c26:	fa21 f004 	lsr.w	r0, r1, r4
  403c2a:	4629      	mov	r1, r5
  403c2c:	bd30      	pop	{r4, r5, pc}
  403c2e:	f094 0f00 	teq	r4, #0
  403c32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403c36:	bf06      	itte	eq
  403c38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403c3c:	3401      	addeq	r4, #1
  403c3e:	3d01      	subne	r5, #1
  403c40:	e74e      	b.n	403ae0 <__adddf3+0x8c>
  403c42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403c46:	bf18      	it	ne
  403c48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403c4c:	d029      	beq.n	403ca2 <__adddf3+0x24e>
  403c4e:	ea94 0f05 	teq	r4, r5
  403c52:	bf08      	it	eq
  403c54:	ea90 0f02 	teqeq	r0, r2
  403c58:	d005      	beq.n	403c66 <__adddf3+0x212>
  403c5a:	ea54 0c00 	orrs.w	ip, r4, r0
  403c5e:	bf04      	itt	eq
  403c60:	4619      	moveq	r1, r3
  403c62:	4610      	moveq	r0, r2
  403c64:	bd30      	pop	{r4, r5, pc}
  403c66:	ea91 0f03 	teq	r1, r3
  403c6a:	bf1e      	ittt	ne
  403c6c:	2100      	movne	r1, #0
  403c6e:	2000      	movne	r0, #0
  403c70:	bd30      	popne	{r4, r5, pc}
  403c72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403c76:	d105      	bne.n	403c84 <__adddf3+0x230>
  403c78:	0040      	lsls	r0, r0, #1
  403c7a:	4149      	adcs	r1, r1
  403c7c:	bf28      	it	cs
  403c7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403c82:	bd30      	pop	{r4, r5, pc}
  403c84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403c88:	bf3c      	itt	cc
  403c8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403c8e:	bd30      	popcc	{r4, r5, pc}
  403c90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403c94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403c98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403c9c:	f04f 0000 	mov.w	r0, #0
  403ca0:	bd30      	pop	{r4, r5, pc}
  403ca2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403ca6:	bf1a      	itte	ne
  403ca8:	4619      	movne	r1, r3
  403caa:	4610      	movne	r0, r2
  403cac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403cb0:	bf1c      	itt	ne
  403cb2:	460b      	movne	r3, r1
  403cb4:	4602      	movne	r2, r0
  403cb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403cba:	bf06      	itte	eq
  403cbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403cc0:	ea91 0f03 	teqeq	r1, r3
  403cc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403cc8:	bd30      	pop	{r4, r5, pc}
  403cca:	bf00      	nop

00403ccc <__aeabi_ui2d>:
  403ccc:	f090 0f00 	teq	r0, #0
  403cd0:	bf04      	itt	eq
  403cd2:	2100      	moveq	r1, #0
  403cd4:	4770      	bxeq	lr
  403cd6:	b530      	push	{r4, r5, lr}
  403cd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403cdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403ce0:	f04f 0500 	mov.w	r5, #0
  403ce4:	f04f 0100 	mov.w	r1, #0
  403ce8:	e750      	b.n	403b8c <__adddf3+0x138>
  403cea:	bf00      	nop

00403cec <__aeabi_i2d>:
  403cec:	f090 0f00 	teq	r0, #0
  403cf0:	bf04      	itt	eq
  403cf2:	2100      	moveq	r1, #0
  403cf4:	4770      	bxeq	lr
  403cf6:	b530      	push	{r4, r5, lr}
  403cf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403cfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403d00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403d04:	bf48      	it	mi
  403d06:	4240      	negmi	r0, r0
  403d08:	f04f 0100 	mov.w	r1, #0
  403d0c:	e73e      	b.n	403b8c <__adddf3+0x138>
  403d0e:	bf00      	nop

00403d10 <__aeabi_f2d>:
  403d10:	0042      	lsls	r2, r0, #1
  403d12:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403d16:	ea4f 0131 	mov.w	r1, r1, rrx
  403d1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403d1e:	bf1f      	itttt	ne
  403d20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403d24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403d28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403d2c:	4770      	bxne	lr
  403d2e:	f092 0f00 	teq	r2, #0
  403d32:	bf14      	ite	ne
  403d34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403d38:	4770      	bxeq	lr
  403d3a:	b530      	push	{r4, r5, lr}
  403d3c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403d40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403d44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403d48:	e720      	b.n	403b8c <__adddf3+0x138>
  403d4a:	bf00      	nop

00403d4c <__aeabi_ul2d>:
  403d4c:	ea50 0201 	orrs.w	r2, r0, r1
  403d50:	bf08      	it	eq
  403d52:	4770      	bxeq	lr
  403d54:	b530      	push	{r4, r5, lr}
  403d56:	f04f 0500 	mov.w	r5, #0
  403d5a:	e00a      	b.n	403d72 <__aeabi_l2d+0x16>

00403d5c <__aeabi_l2d>:
  403d5c:	ea50 0201 	orrs.w	r2, r0, r1
  403d60:	bf08      	it	eq
  403d62:	4770      	bxeq	lr
  403d64:	b530      	push	{r4, r5, lr}
  403d66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403d6a:	d502      	bpl.n	403d72 <__aeabi_l2d+0x16>
  403d6c:	4240      	negs	r0, r0
  403d6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d72:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403d76:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403d7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403d7e:	f43f aedc 	beq.w	403b3a <__adddf3+0xe6>
  403d82:	f04f 0203 	mov.w	r2, #3
  403d86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403d8a:	bf18      	it	ne
  403d8c:	3203      	addne	r2, #3
  403d8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403d92:	bf18      	it	ne
  403d94:	3203      	addne	r2, #3
  403d96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403d9a:	f1c2 0320 	rsb	r3, r2, #32
  403d9e:	fa00 fc03 	lsl.w	ip, r0, r3
  403da2:	fa20 f002 	lsr.w	r0, r0, r2
  403da6:	fa01 fe03 	lsl.w	lr, r1, r3
  403daa:	ea40 000e 	orr.w	r0, r0, lr
  403dae:	fa21 f102 	lsr.w	r1, r1, r2
  403db2:	4414      	add	r4, r2
  403db4:	e6c1      	b.n	403b3a <__adddf3+0xe6>
  403db6:	bf00      	nop

00403db8 <__aeabi_dmul>:
  403db8:	b570      	push	{r4, r5, r6, lr}
  403dba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403dbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403dc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403dc6:	bf1d      	ittte	ne
  403dc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403dcc:	ea94 0f0c 	teqne	r4, ip
  403dd0:	ea95 0f0c 	teqne	r5, ip
  403dd4:	f000 f8de 	bleq	403f94 <__aeabi_dmul+0x1dc>
  403dd8:	442c      	add	r4, r5
  403dda:	ea81 0603 	eor.w	r6, r1, r3
  403dde:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403de2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403de6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403dea:	bf18      	it	ne
  403dec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403df0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403df8:	d038      	beq.n	403e6c <__aeabi_dmul+0xb4>
  403dfa:	fba0 ce02 	umull	ip, lr, r0, r2
  403dfe:	f04f 0500 	mov.w	r5, #0
  403e02:	fbe1 e502 	umlal	lr, r5, r1, r2
  403e06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403e0a:	fbe0 e503 	umlal	lr, r5, r0, r3
  403e0e:	f04f 0600 	mov.w	r6, #0
  403e12:	fbe1 5603 	umlal	r5, r6, r1, r3
  403e16:	f09c 0f00 	teq	ip, #0
  403e1a:	bf18      	it	ne
  403e1c:	f04e 0e01 	orrne.w	lr, lr, #1
  403e20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403e24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403e28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403e2c:	d204      	bcs.n	403e38 <__aeabi_dmul+0x80>
  403e2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403e32:	416d      	adcs	r5, r5
  403e34:	eb46 0606 	adc.w	r6, r6, r6
  403e38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403e3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403e40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403e44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403e48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403e4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403e50:	bf88      	it	hi
  403e52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403e56:	d81e      	bhi.n	403e96 <__aeabi_dmul+0xde>
  403e58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403e5c:	bf08      	it	eq
  403e5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403e62:	f150 0000 	adcs.w	r0, r0, #0
  403e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403e6a:	bd70      	pop	{r4, r5, r6, pc}
  403e6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403e70:	ea46 0101 	orr.w	r1, r6, r1
  403e74:	ea40 0002 	orr.w	r0, r0, r2
  403e78:	ea81 0103 	eor.w	r1, r1, r3
  403e7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403e80:	bfc2      	ittt	gt
  403e82:	ebd4 050c 	rsbsgt	r5, r4, ip
  403e86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403e8a:	bd70      	popgt	{r4, r5, r6, pc}
  403e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403e90:	f04f 0e00 	mov.w	lr, #0
  403e94:	3c01      	subs	r4, #1
  403e96:	f300 80ab 	bgt.w	403ff0 <__aeabi_dmul+0x238>
  403e9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403e9e:	bfde      	ittt	le
  403ea0:	2000      	movle	r0, #0
  403ea2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403ea6:	bd70      	pople	{r4, r5, r6, pc}
  403ea8:	f1c4 0400 	rsb	r4, r4, #0
  403eac:	3c20      	subs	r4, #32
  403eae:	da35      	bge.n	403f1c <__aeabi_dmul+0x164>
  403eb0:	340c      	adds	r4, #12
  403eb2:	dc1b      	bgt.n	403eec <__aeabi_dmul+0x134>
  403eb4:	f104 0414 	add.w	r4, r4, #20
  403eb8:	f1c4 0520 	rsb	r5, r4, #32
  403ebc:	fa00 f305 	lsl.w	r3, r0, r5
  403ec0:	fa20 f004 	lsr.w	r0, r0, r4
  403ec4:	fa01 f205 	lsl.w	r2, r1, r5
  403ec8:	ea40 0002 	orr.w	r0, r0, r2
  403ecc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403ed0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403ed4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403ed8:	fa21 f604 	lsr.w	r6, r1, r4
  403edc:	eb42 0106 	adc.w	r1, r2, r6
  403ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403ee4:	bf08      	it	eq
  403ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403eea:	bd70      	pop	{r4, r5, r6, pc}
  403eec:	f1c4 040c 	rsb	r4, r4, #12
  403ef0:	f1c4 0520 	rsb	r5, r4, #32
  403ef4:	fa00 f304 	lsl.w	r3, r0, r4
  403ef8:	fa20 f005 	lsr.w	r0, r0, r5
  403efc:	fa01 f204 	lsl.w	r2, r1, r4
  403f00:	ea40 0002 	orr.w	r0, r0, r2
  403f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403f08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403f0c:	f141 0100 	adc.w	r1, r1, #0
  403f10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403f14:	bf08      	it	eq
  403f16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403f1a:	bd70      	pop	{r4, r5, r6, pc}
  403f1c:	f1c4 0520 	rsb	r5, r4, #32
  403f20:	fa00 f205 	lsl.w	r2, r0, r5
  403f24:	ea4e 0e02 	orr.w	lr, lr, r2
  403f28:	fa20 f304 	lsr.w	r3, r0, r4
  403f2c:	fa01 f205 	lsl.w	r2, r1, r5
  403f30:	ea43 0302 	orr.w	r3, r3, r2
  403f34:	fa21 f004 	lsr.w	r0, r1, r4
  403f38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403f3c:	fa21 f204 	lsr.w	r2, r1, r4
  403f40:	ea20 0002 	bic.w	r0, r0, r2
  403f44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403f48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403f4c:	bf08      	it	eq
  403f4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403f52:	bd70      	pop	{r4, r5, r6, pc}
  403f54:	f094 0f00 	teq	r4, #0
  403f58:	d10f      	bne.n	403f7a <__aeabi_dmul+0x1c2>
  403f5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403f5e:	0040      	lsls	r0, r0, #1
  403f60:	eb41 0101 	adc.w	r1, r1, r1
  403f64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403f68:	bf08      	it	eq
  403f6a:	3c01      	subeq	r4, #1
  403f6c:	d0f7      	beq.n	403f5e <__aeabi_dmul+0x1a6>
  403f6e:	ea41 0106 	orr.w	r1, r1, r6
  403f72:	f095 0f00 	teq	r5, #0
  403f76:	bf18      	it	ne
  403f78:	4770      	bxne	lr
  403f7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403f7e:	0052      	lsls	r2, r2, #1
  403f80:	eb43 0303 	adc.w	r3, r3, r3
  403f84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403f88:	bf08      	it	eq
  403f8a:	3d01      	subeq	r5, #1
  403f8c:	d0f7      	beq.n	403f7e <__aeabi_dmul+0x1c6>
  403f8e:	ea43 0306 	orr.w	r3, r3, r6
  403f92:	4770      	bx	lr
  403f94:	ea94 0f0c 	teq	r4, ip
  403f98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403f9c:	bf18      	it	ne
  403f9e:	ea95 0f0c 	teqne	r5, ip
  403fa2:	d00c      	beq.n	403fbe <__aeabi_dmul+0x206>
  403fa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403fa8:	bf18      	it	ne
  403faa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403fae:	d1d1      	bne.n	403f54 <__aeabi_dmul+0x19c>
  403fb0:	ea81 0103 	eor.w	r1, r1, r3
  403fb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403fb8:	f04f 0000 	mov.w	r0, #0
  403fbc:	bd70      	pop	{r4, r5, r6, pc}
  403fbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403fc2:	bf06      	itte	eq
  403fc4:	4610      	moveq	r0, r2
  403fc6:	4619      	moveq	r1, r3
  403fc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403fcc:	d019      	beq.n	404002 <__aeabi_dmul+0x24a>
  403fce:	ea94 0f0c 	teq	r4, ip
  403fd2:	d102      	bne.n	403fda <__aeabi_dmul+0x222>
  403fd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403fd8:	d113      	bne.n	404002 <__aeabi_dmul+0x24a>
  403fda:	ea95 0f0c 	teq	r5, ip
  403fde:	d105      	bne.n	403fec <__aeabi_dmul+0x234>
  403fe0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403fe4:	bf1c      	itt	ne
  403fe6:	4610      	movne	r0, r2
  403fe8:	4619      	movne	r1, r3
  403fea:	d10a      	bne.n	404002 <__aeabi_dmul+0x24a>
  403fec:	ea81 0103 	eor.w	r1, r1, r3
  403ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403ff4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403ff8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403ffc:	f04f 0000 	mov.w	r0, #0
  404000:	bd70      	pop	{r4, r5, r6, pc}
  404002:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404006:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40400a:	bd70      	pop	{r4, r5, r6, pc}

0040400c <__aeabi_ddiv>:
  40400c:	b570      	push	{r4, r5, r6, lr}
  40400e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404012:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404016:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40401a:	bf1d      	ittte	ne
  40401c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404020:	ea94 0f0c 	teqne	r4, ip
  404024:	ea95 0f0c 	teqne	r5, ip
  404028:	f000 f8a7 	bleq	40417a <__aeabi_ddiv+0x16e>
  40402c:	eba4 0405 	sub.w	r4, r4, r5
  404030:	ea81 0e03 	eor.w	lr, r1, r3
  404034:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404038:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40403c:	f000 8088 	beq.w	404150 <__aeabi_ddiv+0x144>
  404040:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404044:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404048:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40404c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404050:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404054:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404058:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40405c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404060:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404064:	429d      	cmp	r5, r3
  404066:	bf08      	it	eq
  404068:	4296      	cmpeq	r6, r2
  40406a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40406e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404072:	d202      	bcs.n	40407a <__aeabi_ddiv+0x6e>
  404074:	085b      	lsrs	r3, r3, #1
  404076:	ea4f 0232 	mov.w	r2, r2, rrx
  40407a:	1ab6      	subs	r6, r6, r2
  40407c:	eb65 0503 	sbc.w	r5, r5, r3
  404080:	085b      	lsrs	r3, r3, #1
  404082:	ea4f 0232 	mov.w	r2, r2, rrx
  404086:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40408a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40408e:	ebb6 0e02 	subs.w	lr, r6, r2
  404092:	eb75 0e03 	sbcs.w	lr, r5, r3
  404096:	bf22      	ittt	cs
  404098:	1ab6      	subcs	r6, r6, r2
  40409a:	4675      	movcs	r5, lr
  40409c:	ea40 000c 	orrcs.w	r0, r0, ip
  4040a0:	085b      	lsrs	r3, r3, #1
  4040a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4040a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4040aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4040ae:	bf22      	ittt	cs
  4040b0:	1ab6      	subcs	r6, r6, r2
  4040b2:	4675      	movcs	r5, lr
  4040b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4040b8:	085b      	lsrs	r3, r3, #1
  4040ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4040be:	ebb6 0e02 	subs.w	lr, r6, r2
  4040c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4040c6:	bf22      	ittt	cs
  4040c8:	1ab6      	subcs	r6, r6, r2
  4040ca:	4675      	movcs	r5, lr
  4040cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4040d0:	085b      	lsrs	r3, r3, #1
  4040d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4040d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4040da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4040de:	bf22      	ittt	cs
  4040e0:	1ab6      	subcs	r6, r6, r2
  4040e2:	4675      	movcs	r5, lr
  4040e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4040e8:	ea55 0e06 	orrs.w	lr, r5, r6
  4040ec:	d018      	beq.n	404120 <__aeabi_ddiv+0x114>
  4040ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4040f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4040f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4040fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4040fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404102:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404106:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40410a:	d1c0      	bne.n	40408e <__aeabi_ddiv+0x82>
  40410c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404110:	d10b      	bne.n	40412a <__aeabi_ddiv+0x11e>
  404112:	ea41 0100 	orr.w	r1, r1, r0
  404116:	f04f 0000 	mov.w	r0, #0
  40411a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40411e:	e7b6      	b.n	40408e <__aeabi_ddiv+0x82>
  404120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404124:	bf04      	itt	eq
  404126:	4301      	orreq	r1, r0
  404128:	2000      	moveq	r0, #0
  40412a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40412e:	bf88      	it	hi
  404130:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404134:	f63f aeaf 	bhi.w	403e96 <__aeabi_dmul+0xde>
  404138:	ebb5 0c03 	subs.w	ip, r5, r3
  40413c:	bf04      	itt	eq
  40413e:	ebb6 0c02 	subseq.w	ip, r6, r2
  404142:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404146:	f150 0000 	adcs.w	r0, r0, #0
  40414a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40414e:	bd70      	pop	{r4, r5, r6, pc}
  404150:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404154:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404158:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40415c:	bfc2      	ittt	gt
  40415e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404162:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404166:	bd70      	popgt	{r4, r5, r6, pc}
  404168:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40416c:	f04f 0e00 	mov.w	lr, #0
  404170:	3c01      	subs	r4, #1
  404172:	e690      	b.n	403e96 <__aeabi_dmul+0xde>
  404174:	ea45 0e06 	orr.w	lr, r5, r6
  404178:	e68d      	b.n	403e96 <__aeabi_dmul+0xde>
  40417a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40417e:	ea94 0f0c 	teq	r4, ip
  404182:	bf08      	it	eq
  404184:	ea95 0f0c 	teqeq	r5, ip
  404188:	f43f af3b 	beq.w	404002 <__aeabi_dmul+0x24a>
  40418c:	ea94 0f0c 	teq	r4, ip
  404190:	d10a      	bne.n	4041a8 <__aeabi_ddiv+0x19c>
  404192:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404196:	f47f af34 	bne.w	404002 <__aeabi_dmul+0x24a>
  40419a:	ea95 0f0c 	teq	r5, ip
  40419e:	f47f af25 	bne.w	403fec <__aeabi_dmul+0x234>
  4041a2:	4610      	mov	r0, r2
  4041a4:	4619      	mov	r1, r3
  4041a6:	e72c      	b.n	404002 <__aeabi_dmul+0x24a>
  4041a8:	ea95 0f0c 	teq	r5, ip
  4041ac:	d106      	bne.n	4041bc <__aeabi_ddiv+0x1b0>
  4041ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4041b2:	f43f aefd 	beq.w	403fb0 <__aeabi_dmul+0x1f8>
  4041b6:	4610      	mov	r0, r2
  4041b8:	4619      	mov	r1, r3
  4041ba:	e722      	b.n	404002 <__aeabi_dmul+0x24a>
  4041bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4041c0:	bf18      	it	ne
  4041c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4041c6:	f47f aec5 	bne.w	403f54 <__aeabi_dmul+0x19c>
  4041ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4041ce:	f47f af0d 	bne.w	403fec <__aeabi_dmul+0x234>
  4041d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4041d6:	f47f aeeb 	bne.w	403fb0 <__aeabi_dmul+0x1f8>
  4041da:	e712      	b.n	404002 <__aeabi_dmul+0x24a>

004041dc <__aeabi_d2iz>:
  4041dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4041e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4041e4:	d215      	bcs.n	404212 <__aeabi_d2iz+0x36>
  4041e6:	d511      	bpl.n	40420c <__aeabi_d2iz+0x30>
  4041e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4041ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4041f0:	d912      	bls.n	404218 <__aeabi_d2iz+0x3c>
  4041f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4041f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4041fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4041fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404202:	fa23 f002 	lsr.w	r0, r3, r2
  404206:	bf18      	it	ne
  404208:	4240      	negne	r0, r0
  40420a:	4770      	bx	lr
  40420c:	f04f 0000 	mov.w	r0, #0
  404210:	4770      	bx	lr
  404212:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404216:	d105      	bne.n	404224 <__aeabi_d2iz+0x48>
  404218:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40421c:	bf08      	it	eq
  40421e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404222:	4770      	bx	lr
  404224:	f04f 0000 	mov.w	r0, #0
  404228:	4770      	bx	lr
  40422a:	bf00      	nop

0040422c <__aeabi_d2f>:
  40422c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404230:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404234:	bf24      	itt	cs
  404236:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40423a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40423e:	d90d      	bls.n	40425c <__aeabi_d2f+0x30>
  404240:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404244:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404248:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40424c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404250:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404254:	bf08      	it	eq
  404256:	f020 0001 	biceq.w	r0, r0, #1
  40425a:	4770      	bx	lr
  40425c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404260:	d121      	bne.n	4042a6 <__aeabi_d2f+0x7a>
  404262:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404266:	bfbc      	itt	lt
  404268:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40426c:	4770      	bxlt	lr
  40426e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404272:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404276:	f1c2 0218 	rsb	r2, r2, #24
  40427a:	f1c2 0c20 	rsb	ip, r2, #32
  40427e:	fa10 f30c 	lsls.w	r3, r0, ip
  404282:	fa20 f002 	lsr.w	r0, r0, r2
  404286:	bf18      	it	ne
  404288:	f040 0001 	orrne.w	r0, r0, #1
  40428c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404290:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404294:	fa03 fc0c 	lsl.w	ip, r3, ip
  404298:	ea40 000c 	orr.w	r0, r0, ip
  40429c:	fa23 f302 	lsr.w	r3, r3, r2
  4042a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4042a4:	e7cc      	b.n	404240 <__aeabi_d2f+0x14>
  4042a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4042aa:	d107      	bne.n	4042bc <__aeabi_d2f+0x90>
  4042ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4042b0:	bf1e      	ittt	ne
  4042b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4042b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4042ba:	4770      	bxne	lr
  4042bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4042c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4042c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4042c8:	4770      	bx	lr
  4042ca:	bf00      	nop

004042cc <__libc_init_array>:
  4042cc:	b570      	push	{r4, r5, r6, lr}
  4042ce:	4e0f      	ldr	r6, [pc, #60]	; (40430c <__libc_init_array+0x40>)
  4042d0:	4d0f      	ldr	r5, [pc, #60]	; (404310 <__libc_init_array+0x44>)
  4042d2:	1b76      	subs	r6, r6, r5
  4042d4:	10b6      	asrs	r6, r6, #2
  4042d6:	bf18      	it	ne
  4042d8:	2400      	movne	r4, #0
  4042da:	d005      	beq.n	4042e8 <__libc_init_array+0x1c>
  4042dc:	3401      	adds	r4, #1
  4042de:	f855 3b04 	ldr.w	r3, [r5], #4
  4042e2:	4798      	blx	r3
  4042e4:	42a6      	cmp	r6, r4
  4042e6:	d1f9      	bne.n	4042dc <__libc_init_array+0x10>
  4042e8:	4e0a      	ldr	r6, [pc, #40]	; (404314 <__libc_init_array+0x48>)
  4042ea:	4d0b      	ldr	r5, [pc, #44]	; (404318 <__libc_init_array+0x4c>)
  4042ec:	1b76      	subs	r6, r6, r5
  4042ee:	f006 f847 	bl	40a380 <_init>
  4042f2:	10b6      	asrs	r6, r6, #2
  4042f4:	bf18      	it	ne
  4042f6:	2400      	movne	r4, #0
  4042f8:	d006      	beq.n	404308 <__libc_init_array+0x3c>
  4042fa:	3401      	adds	r4, #1
  4042fc:	f855 3b04 	ldr.w	r3, [r5], #4
  404300:	4798      	blx	r3
  404302:	42a6      	cmp	r6, r4
  404304:	d1f9      	bne.n	4042fa <__libc_init_array+0x2e>
  404306:	bd70      	pop	{r4, r5, r6, pc}
  404308:	bd70      	pop	{r4, r5, r6, pc}
  40430a:	bf00      	nop
  40430c:	0040a38c 	.word	0x0040a38c
  404310:	0040a38c 	.word	0x0040a38c
  404314:	0040a394 	.word	0x0040a394
  404318:	0040a38c 	.word	0x0040a38c

0040431c <iprintf>:
  40431c:	b40f      	push	{r0, r1, r2, r3}
  40431e:	b500      	push	{lr}
  404320:	4907      	ldr	r1, [pc, #28]	; (404340 <iprintf+0x24>)
  404322:	b083      	sub	sp, #12
  404324:	ab04      	add	r3, sp, #16
  404326:	6808      	ldr	r0, [r1, #0]
  404328:	f853 2b04 	ldr.w	r2, [r3], #4
  40432c:	6881      	ldr	r1, [r0, #8]
  40432e:	9301      	str	r3, [sp, #4]
  404330:	f002 f802 	bl	406338 <_vfiprintf_r>
  404334:	b003      	add	sp, #12
  404336:	f85d eb04 	ldr.w	lr, [sp], #4
  40433a:	b004      	add	sp, #16
  40433c:	4770      	bx	lr
  40433e:	bf00      	nop
  404340:	20400014 	.word	0x20400014

00404344 <malloc>:
  404344:	4b02      	ldr	r3, [pc, #8]	; (404350 <malloc+0xc>)
  404346:	4601      	mov	r1, r0
  404348:	6818      	ldr	r0, [r3, #0]
  40434a:	f000 b80b 	b.w	404364 <_malloc_r>
  40434e:	bf00      	nop
  404350:	20400014 	.word	0x20400014

00404354 <free>:
  404354:	4b02      	ldr	r3, [pc, #8]	; (404360 <free+0xc>)
  404356:	4601      	mov	r1, r0
  404358:	6818      	ldr	r0, [r3, #0]
  40435a:	f004 b8c9 	b.w	4084f0 <_free_r>
  40435e:	bf00      	nop
  404360:	20400014 	.word	0x20400014

00404364 <_malloc_r>:
  404364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404368:	f101 060b 	add.w	r6, r1, #11
  40436c:	2e16      	cmp	r6, #22
  40436e:	b083      	sub	sp, #12
  404370:	4605      	mov	r5, r0
  404372:	f240 809e 	bls.w	4044b2 <_malloc_r+0x14e>
  404376:	f036 0607 	bics.w	r6, r6, #7
  40437a:	f100 80bd 	bmi.w	4044f8 <_malloc_r+0x194>
  40437e:	42b1      	cmp	r1, r6
  404380:	f200 80ba 	bhi.w	4044f8 <_malloc_r+0x194>
  404384:	f000 fb86 	bl	404a94 <__malloc_lock>
  404388:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40438c:	f0c0 8293 	bcc.w	4048b6 <_malloc_r+0x552>
  404390:	0a73      	lsrs	r3, r6, #9
  404392:	f000 80b8 	beq.w	404506 <_malloc_r+0x1a2>
  404396:	2b04      	cmp	r3, #4
  404398:	f200 8179 	bhi.w	40468e <_malloc_r+0x32a>
  40439c:	09b3      	lsrs	r3, r6, #6
  40439e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4043a2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4043a6:	00c3      	lsls	r3, r0, #3
  4043a8:	4fbf      	ldr	r7, [pc, #764]	; (4046a8 <_malloc_r+0x344>)
  4043aa:	443b      	add	r3, r7
  4043ac:	f1a3 0108 	sub.w	r1, r3, #8
  4043b0:	685c      	ldr	r4, [r3, #4]
  4043b2:	42a1      	cmp	r1, r4
  4043b4:	d106      	bne.n	4043c4 <_malloc_r+0x60>
  4043b6:	e00c      	b.n	4043d2 <_malloc_r+0x6e>
  4043b8:	2a00      	cmp	r2, #0
  4043ba:	f280 80aa 	bge.w	404512 <_malloc_r+0x1ae>
  4043be:	68e4      	ldr	r4, [r4, #12]
  4043c0:	42a1      	cmp	r1, r4
  4043c2:	d006      	beq.n	4043d2 <_malloc_r+0x6e>
  4043c4:	6863      	ldr	r3, [r4, #4]
  4043c6:	f023 0303 	bic.w	r3, r3, #3
  4043ca:	1b9a      	subs	r2, r3, r6
  4043cc:	2a0f      	cmp	r2, #15
  4043ce:	ddf3      	ble.n	4043b8 <_malloc_r+0x54>
  4043d0:	4670      	mov	r0, lr
  4043d2:	693c      	ldr	r4, [r7, #16]
  4043d4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4046bc <_malloc_r+0x358>
  4043d8:	4574      	cmp	r4, lr
  4043da:	f000 81ab 	beq.w	404734 <_malloc_r+0x3d0>
  4043de:	6863      	ldr	r3, [r4, #4]
  4043e0:	f023 0303 	bic.w	r3, r3, #3
  4043e4:	1b9a      	subs	r2, r3, r6
  4043e6:	2a0f      	cmp	r2, #15
  4043e8:	f300 8190 	bgt.w	40470c <_malloc_r+0x3a8>
  4043ec:	2a00      	cmp	r2, #0
  4043ee:	f8c7 e014 	str.w	lr, [r7, #20]
  4043f2:	f8c7 e010 	str.w	lr, [r7, #16]
  4043f6:	f280 809d 	bge.w	404534 <_malloc_r+0x1d0>
  4043fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4043fe:	f080 8161 	bcs.w	4046c4 <_malloc_r+0x360>
  404402:	08db      	lsrs	r3, r3, #3
  404404:	f103 0c01 	add.w	ip, r3, #1
  404408:	1099      	asrs	r1, r3, #2
  40440a:	687a      	ldr	r2, [r7, #4]
  40440c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404410:	f8c4 8008 	str.w	r8, [r4, #8]
  404414:	2301      	movs	r3, #1
  404416:	408b      	lsls	r3, r1
  404418:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40441c:	4313      	orrs	r3, r2
  40441e:	3908      	subs	r1, #8
  404420:	60e1      	str	r1, [r4, #12]
  404422:	607b      	str	r3, [r7, #4]
  404424:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404428:	f8c8 400c 	str.w	r4, [r8, #12]
  40442c:	1082      	asrs	r2, r0, #2
  40442e:	2401      	movs	r4, #1
  404430:	4094      	lsls	r4, r2
  404432:	429c      	cmp	r4, r3
  404434:	f200 808b 	bhi.w	40454e <_malloc_r+0x1ea>
  404438:	421c      	tst	r4, r3
  40443a:	d106      	bne.n	40444a <_malloc_r+0xe6>
  40443c:	f020 0003 	bic.w	r0, r0, #3
  404440:	0064      	lsls	r4, r4, #1
  404442:	421c      	tst	r4, r3
  404444:	f100 0004 	add.w	r0, r0, #4
  404448:	d0fa      	beq.n	404440 <_malloc_r+0xdc>
  40444a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40444e:	46cc      	mov	ip, r9
  404450:	4680      	mov	r8, r0
  404452:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404456:	459c      	cmp	ip, r3
  404458:	d107      	bne.n	40446a <_malloc_r+0x106>
  40445a:	e16d      	b.n	404738 <_malloc_r+0x3d4>
  40445c:	2a00      	cmp	r2, #0
  40445e:	f280 817b 	bge.w	404758 <_malloc_r+0x3f4>
  404462:	68db      	ldr	r3, [r3, #12]
  404464:	459c      	cmp	ip, r3
  404466:	f000 8167 	beq.w	404738 <_malloc_r+0x3d4>
  40446a:	6859      	ldr	r1, [r3, #4]
  40446c:	f021 0103 	bic.w	r1, r1, #3
  404470:	1b8a      	subs	r2, r1, r6
  404472:	2a0f      	cmp	r2, #15
  404474:	ddf2      	ble.n	40445c <_malloc_r+0xf8>
  404476:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40447a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40447e:	9300      	str	r3, [sp, #0]
  404480:	199c      	adds	r4, r3, r6
  404482:	4628      	mov	r0, r5
  404484:	f046 0601 	orr.w	r6, r6, #1
  404488:	f042 0501 	orr.w	r5, r2, #1
  40448c:	605e      	str	r6, [r3, #4]
  40448e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404492:	f8cc 8008 	str.w	r8, [ip, #8]
  404496:	617c      	str	r4, [r7, #20]
  404498:	613c      	str	r4, [r7, #16]
  40449a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40449e:	f8c4 e008 	str.w	lr, [r4, #8]
  4044a2:	6065      	str	r5, [r4, #4]
  4044a4:	505a      	str	r2, [r3, r1]
  4044a6:	f000 fafb 	bl	404aa0 <__malloc_unlock>
  4044aa:	9b00      	ldr	r3, [sp, #0]
  4044ac:	f103 0408 	add.w	r4, r3, #8
  4044b0:	e01e      	b.n	4044f0 <_malloc_r+0x18c>
  4044b2:	2910      	cmp	r1, #16
  4044b4:	d820      	bhi.n	4044f8 <_malloc_r+0x194>
  4044b6:	f000 faed 	bl	404a94 <__malloc_lock>
  4044ba:	2610      	movs	r6, #16
  4044bc:	2318      	movs	r3, #24
  4044be:	2002      	movs	r0, #2
  4044c0:	4f79      	ldr	r7, [pc, #484]	; (4046a8 <_malloc_r+0x344>)
  4044c2:	443b      	add	r3, r7
  4044c4:	f1a3 0208 	sub.w	r2, r3, #8
  4044c8:	685c      	ldr	r4, [r3, #4]
  4044ca:	4294      	cmp	r4, r2
  4044cc:	f000 813d 	beq.w	40474a <_malloc_r+0x3e6>
  4044d0:	6863      	ldr	r3, [r4, #4]
  4044d2:	68e1      	ldr	r1, [r4, #12]
  4044d4:	68a6      	ldr	r6, [r4, #8]
  4044d6:	f023 0303 	bic.w	r3, r3, #3
  4044da:	4423      	add	r3, r4
  4044dc:	4628      	mov	r0, r5
  4044de:	685a      	ldr	r2, [r3, #4]
  4044e0:	60f1      	str	r1, [r6, #12]
  4044e2:	f042 0201 	orr.w	r2, r2, #1
  4044e6:	608e      	str	r6, [r1, #8]
  4044e8:	605a      	str	r2, [r3, #4]
  4044ea:	f000 fad9 	bl	404aa0 <__malloc_unlock>
  4044ee:	3408      	adds	r4, #8
  4044f0:	4620      	mov	r0, r4
  4044f2:	b003      	add	sp, #12
  4044f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f8:	2400      	movs	r4, #0
  4044fa:	230c      	movs	r3, #12
  4044fc:	4620      	mov	r0, r4
  4044fe:	602b      	str	r3, [r5, #0]
  404500:	b003      	add	sp, #12
  404502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404506:	2040      	movs	r0, #64	; 0x40
  404508:	f44f 7300 	mov.w	r3, #512	; 0x200
  40450c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404510:	e74a      	b.n	4043a8 <_malloc_r+0x44>
  404512:	4423      	add	r3, r4
  404514:	68e1      	ldr	r1, [r4, #12]
  404516:	685a      	ldr	r2, [r3, #4]
  404518:	68a6      	ldr	r6, [r4, #8]
  40451a:	f042 0201 	orr.w	r2, r2, #1
  40451e:	60f1      	str	r1, [r6, #12]
  404520:	4628      	mov	r0, r5
  404522:	608e      	str	r6, [r1, #8]
  404524:	605a      	str	r2, [r3, #4]
  404526:	f000 fabb 	bl	404aa0 <__malloc_unlock>
  40452a:	3408      	adds	r4, #8
  40452c:	4620      	mov	r0, r4
  40452e:	b003      	add	sp, #12
  404530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404534:	4423      	add	r3, r4
  404536:	4628      	mov	r0, r5
  404538:	685a      	ldr	r2, [r3, #4]
  40453a:	f042 0201 	orr.w	r2, r2, #1
  40453e:	605a      	str	r2, [r3, #4]
  404540:	f000 faae 	bl	404aa0 <__malloc_unlock>
  404544:	3408      	adds	r4, #8
  404546:	4620      	mov	r0, r4
  404548:	b003      	add	sp, #12
  40454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40454e:	68bc      	ldr	r4, [r7, #8]
  404550:	6863      	ldr	r3, [r4, #4]
  404552:	f023 0803 	bic.w	r8, r3, #3
  404556:	45b0      	cmp	r8, r6
  404558:	d304      	bcc.n	404564 <_malloc_r+0x200>
  40455a:	eba8 0306 	sub.w	r3, r8, r6
  40455e:	2b0f      	cmp	r3, #15
  404560:	f300 8085 	bgt.w	40466e <_malloc_r+0x30a>
  404564:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4046c0 <_malloc_r+0x35c>
  404568:	4b50      	ldr	r3, [pc, #320]	; (4046ac <_malloc_r+0x348>)
  40456a:	f8d9 2000 	ldr.w	r2, [r9]
  40456e:	681b      	ldr	r3, [r3, #0]
  404570:	3201      	adds	r2, #1
  404572:	4433      	add	r3, r6
  404574:	eb04 0a08 	add.w	sl, r4, r8
  404578:	f000 8155 	beq.w	404826 <_malloc_r+0x4c2>
  40457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404580:	330f      	adds	r3, #15
  404582:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404586:	f02b 0b0f 	bic.w	fp, fp, #15
  40458a:	4659      	mov	r1, fp
  40458c:	4628      	mov	r0, r5
  40458e:	f000 fa8d 	bl	404aac <_sbrk_r>
  404592:	1c41      	adds	r1, r0, #1
  404594:	4602      	mov	r2, r0
  404596:	f000 80fc 	beq.w	404792 <_malloc_r+0x42e>
  40459a:	4582      	cmp	sl, r0
  40459c:	f200 80f7 	bhi.w	40478e <_malloc_r+0x42a>
  4045a0:	4b43      	ldr	r3, [pc, #268]	; (4046b0 <_malloc_r+0x34c>)
  4045a2:	6819      	ldr	r1, [r3, #0]
  4045a4:	4459      	add	r1, fp
  4045a6:	6019      	str	r1, [r3, #0]
  4045a8:	f000 814d 	beq.w	404846 <_malloc_r+0x4e2>
  4045ac:	f8d9 0000 	ldr.w	r0, [r9]
  4045b0:	3001      	adds	r0, #1
  4045b2:	bf1b      	ittet	ne
  4045b4:	eba2 0a0a 	subne.w	sl, r2, sl
  4045b8:	4451      	addne	r1, sl
  4045ba:	f8c9 2000 	streq.w	r2, [r9]
  4045be:	6019      	strne	r1, [r3, #0]
  4045c0:	f012 0107 	ands.w	r1, r2, #7
  4045c4:	f000 8115 	beq.w	4047f2 <_malloc_r+0x48e>
  4045c8:	f1c1 0008 	rsb	r0, r1, #8
  4045cc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4045d0:	4402      	add	r2, r0
  4045d2:	3108      	adds	r1, #8
  4045d4:	eb02 090b 	add.w	r9, r2, fp
  4045d8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4045dc:	eba1 0909 	sub.w	r9, r1, r9
  4045e0:	4649      	mov	r1, r9
  4045e2:	4628      	mov	r0, r5
  4045e4:	9301      	str	r3, [sp, #4]
  4045e6:	9200      	str	r2, [sp, #0]
  4045e8:	f000 fa60 	bl	404aac <_sbrk_r>
  4045ec:	1c43      	adds	r3, r0, #1
  4045ee:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4045f2:	f000 8143 	beq.w	40487c <_malloc_r+0x518>
  4045f6:	1a80      	subs	r0, r0, r2
  4045f8:	4448      	add	r0, r9
  4045fa:	f040 0001 	orr.w	r0, r0, #1
  4045fe:	6819      	ldr	r1, [r3, #0]
  404600:	60ba      	str	r2, [r7, #8]
  404602:	4449      	add	r1, r9
  404604:	42bc      	cmp	r4, r7
  404606:	6050      	str	r0, [r2, #4]
  404608:	6019      	str	r1, [r3, #0]
  40460a:	d017      	beq.n	40463c <_malloc_r+0x2d8>
  40460c:	f1b8 0f0f 	cmp.w	r8, #15
  404610:	f240 80fb 	bls.w	40480a <_malloc_r+0x4a6>
  404614:	6860      	ldr	r0, [r4, #4]
  404616:	f1a8 020c 	sub.w	r2, r8, #12
  40461a:	f022 0207 	bic.w	r2, r2, #7
  40461e:	eb04 0e02 	add.w	lr, r4, r2
  404622:	f000 0001 	and.w	r0, r0, #1
  404626:	f04f 0c05 	mov.w	ip, #5
  40462a:	4310      	orrs	r0, r2
  40462c:	2a0f      	cmp	r2, #15
  40462e:	6060      	str	r0, [r4, #4]
  404630:	f8ce c004 	str.w	ip, [lr, #4]
  404634:	f8ce c008 	str.w	ip, [lr, #8]
  404638:	f200 8117 	bhi.w	40486a <_malloc_r+0x506>
  40463c:	4b1d      	ldr	r3, [pc, #116]	; (4046b4 <_malloc_r+0x350>)
  40463e:	68bc      	ldr	r4, [r7, #8]
  404640:	681a      	ldr	r2, [r3, #0]
  404642:	4291      	cmp	r1, r2
  404644:	bf88      	it	hi
  404646:	6019      	strhi	r1, [r3, #0]
  404648:	4b1b      	ldr	r3, [pc, #108]	; (4046b8 <_malloc_r+0x354>)
  40464a:	681a      	ldr	r2, [r3, #0]
  40464c:	4291      	cmp	r1, r2
  40464e:	6862      	ldr	r2, [r4, #4]
  404650:	bf88      	it	hi
  404652:	6019      	strhi	r1, [r3, #0]
  404654:	f022 0203 	bic.w	r2, r2, #3
  404658:	4296      	cmp	r6, r2
  40465a:	eba2 0306 	sub.w	r3, r2, r6
  40465e:	d801      	bhi.n	404664 <_malloc_r+0x300>
  404660:	2b0f      	cmp	r3, #15
  404662:	dc04      	bgt.n	40466e <_malloc_r+0x30a>
  404664:	4628      	mov	r0, r5
  404666:	f000 fa1b 	bl	404aa0 <__malloc_unlock>
  40466a:	2400      	movs	r4, #0
  40466c:	e740      	b.n	4044f0 <_malloc_r+0x18c>
  40466e:	19a2      	adds	r2, r4, r6
  404670:	f043 0301 	orr.w	r3, r3, #1
  404674:	f046 0601 	orr.w	r6, r6, #1
  404678:	6066      	str	r6, [r4, #4]
  40467a:	4628      	mov	r0, r5
  40467c:	60ba      	str	r2, [r7, #8]
  40467e:	6053      	str	r3, [r2, #4]
  404680:	f000 fa0e 	bl	404aa0 <__malloc_unlock>
  404684:	3408      	adds	r4, #8
  404686:	4620      	mov	r0, r4
  404688:	b003      	add	sp, #12
  40468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40468e:	2b14      	cmp	r3, #20
  404690:	d971      	bls.n	404776 <_malloc_r+0x412>
  404692:	2b54      	cmp	r3, #84	; 0x54
  404694:	f200 80a3 	bhi.w	4047de <_malloc_r+0x47a>
  404698:	0b33      	lsrs	r3, r6, #12
  40469a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40469e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4046a2:	00c3      	lsls	r3, r0, #3
  4046a4:	e680      	b.n	4043a8 <_malloc_r+0x44>
  4046a6:	bf00      	nop
  4046a8:	20400440 	.word	0x20400440
  4046ac:	20400bd0 	.word	0x20400bd0
  4046b0:	20400ba0 	.word	0x20400ba0
  4046b4:	20400bc8 	.word	0x20400bc8
  4046b8:	20400bcc 	.word	0x20400bcc
  4046bc:	20400448 	.word	0x20400448
  4046c0:	20400848 	.word	0x20400848
  4046c4:	0a5a      	lsrs	r2, r3, #9
  4046c6:	2a04      	cmp	r2, #4
  4046c8:	d95b      	bls.n	404782 <_malloc_r+0x41e>
  4046ca:	2a14      	cmp	r2, #20
  4046cc:	f200 80ae 	bhi.w	40482c <_malloc_r+0x4c8>
  4046d0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4046d4:	00c9      	lsls	r1, r1, #3
  4046d6:	325b      	adds	r2, #91	; 0x5b
  4046d8:	eb07 0c01 	add.w	ip, r7, r1
  4046dc:	5879      	ldr	r1, [r7, r1]
  4046de:	f1ac 0c08 	sub.w	ip, ip, #8
  4046e2:	458c      	cmp	ip, r1
  4046e4:	f000 8088 	beq.w	4047f8 <_malloc_r+0x494>
  4046e8:	684a      	ldr	r2, [r1, #4]
  4046ea:	f022 0203 	bic.w	r2, r2, #3
  4046ee:	4293      	cmp	r3, r2
  4046f0:	d273      	bcs.n	4047da <_malloc_r+0x476>
  4046f2:	6889      	ldr	r1, [r1, #8]
  4046f4:	458c      	cmp	ip, r1
  4046f6:	d1f7      	bne.n	4046e8 <_malloc_r+0x384>
  4046f8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4046fc:	687b      	ldr	r3, [r7, #4]
  4046fe:	60e2      	str	r2, [r4, #12]
  404700:	f8c4 c008 	str.w	ip, [r4, #8]
  404704:	6094      	str	r4, [r2, #8]
  404706:	f8cc 400c 	str.w	r4, [ip, #12]
  40470a:	e68f      	b.n	40442c <_malloc_r+0xc8>
  40470c:	19a1      	adds	r1, r4, r6
  40470e:	f046 0c01 	orr.w	ip, r6, #1
  404712:	f042 0601 	orr.w	r6, r2, #1
  404716:	f8c4 c004 	str.w	ip, [r4, #4]
  40471a:	4628      	mov	r0, r5
  40471c:	6179      	str	r1, [r7, #20]
  40471e:	6139      	str	r1, [r7, #16]
  404720:	f8c1 e00c 	str.w	lr, [r1, #12]
  404724:	f8c1 e008 	str.w	lr, [r1, #8]
  404728:	604e      	str	r6, [r1, #4]
  40472a:	50e2      	str	r2, [r4, r3]
  40472c:	f000 f9b8 	bl	404aa0 <__malloc_unlock>
  404730:	3408      	adds	r4, #8
  404732:	e6dd      	b.n	4044f0 <_malloc_r+0x18c>
  404734:	687b      	ldr	r3, [r7, #4]
  404736:	e679      	b.n	40442c <_malloc_r+0xc8>
  404738:	f108 0801 	add.w	r8, r8, #1
  40473c:	f018 0f03 	tst.w	r8, #3
  404740:	f10c 0c08 	add.w	ip, ip, #8
  404744:	f47f ae85 	bne.w	404452 <_malloc_r+0xee>
  404748:	e02d      	b.n	4047a6 <_malloc_r+0x442>
  40474a:	68dc      	ldr	r4, [r3, #12]
  40474c:	42a3      	cmp	r3, r4
  40474e:	bf08      	it	eq
  404750:	3002      	addeq	r0, #2
  404752:	f43f ae3e 	beq.w	4043d2 <_malloc_r+0x6e>
  404756:	e6bb      	b.n	4044d0 <_malloc_r+0x16c>
  404758:	4419      	add	r1, r3
  40475a:	461c      	mov	r4, r3
  40475c:	684a      	ldr	r2, [r1, #4]
  40475e:	68db      	ldr	r3, [r3, #12]
  404760:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404764:	f042 0201 	orr.w	r2, r2, #1
  404768:	604a      	str	r2, [r1, #4]
  40476a:	4628      	mov	r0, r5
  40476c:	60f3      	str	r3, [r6, #12]
  40476e:	609e      	str	r6, [r3, #8]
  404770:	f000 f996 	bl	404aa0 <__malloc_unlock>
  404774:	e6bc      	b.n	4044f0 <_malloc_r+0x18c>
  404776:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40477a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40477e:	00c3      	lsls	r3, r0, #3
  404780:	e612      	b.n	4043a8 <_malloc_r+0x44>
  404782:	099a      	lsrs	r2, r3, #6
  404784:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404788:	00c9      	lsls	r1, r1, #3
  40478a:	3238      	adds	r2, #56	; 0x38
  40478c:	e7a4      	b.n	4046d8 <_malloc_r+0x374>
  40478e:	42bc      	cmp	r4, r7
  404790:	d054      	beq.n	40483c <_malloc_r+0x4d8>
  404792:	68bc      	ldr	r4, [r7, #8]
  404794:	6862      	ldr	r2, [r4, #4]
  404796:	f022 0203 	bic.w	r2, r2, #3
  40479a:	e75d      	b.n	404658 <_malloc_r+0x2f4>
  40479c:	f859 3908 	ldr.w	r3, [r9], #-8
  4047a0:	4599      	cmp	r9, r3
  4047a2:	f040 8086 	bne.w	4048b2 <_malloc_r+0x54e>
  4047a6:	f010 0f03 	tst.w	r0, #3
  4047aa:	f100 30ff 	add.w	r0, r0, #4294967295
  4047ae:	d1f5      	bne.n	40479c <_malloc_r+0x438>
  4047b0:	687b      	ldr	r3, [r7, #4]
  4047b2:	ea23 0304 	bic.w	r3, r3, r4
  4047b6:	607b      	str	r3, [r7, #4]
  4047b8:	0064      	lsls	r4, r4, #1
  4047ba:	429c      	cmp	r4, r3
  4047bc:	f63f aec7 	bhi.w	40454e <_malloc_r+0x1ea>
  4047c0:	2c00      	cmp	r4, #0
  4047c2:	f43f aec4 	beq.w	40454e <_malloc_r+0x1ea>
  4047c6:	421c      	tst	r4, r3
  4047c8:	4640      	mov	r0, r8
  4047ca:	f47f ae3e 	bne.w	40444a <_malloc_r+0xe6>
  4047ce:	0064      	lsls	r4, r4, #1
  4047d0:	421c      	tst	r4, r3
  4047d2:	f100 0004 	add.w	r0, r0, #4
  4047d6:	d0fa      	beq.n	4047ce <_malloc_r+0x46a>
  4047d8:	e637      	b.n	40444a <_malloc_r+0xe6>
  4047da:	468c      	mov	ip, r1
  4047dc:	e78c      	b.n	4046f8 <_malloc_r+0x394>
  4047de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4047e2:	d815      	bhi.n	404810 <_malloc_r+0x4ac>
  4047e4:	0bf3      	lsrs	r3, r6, #15
  4047e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4047ea:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4047ee:	00c3      	lsls	r3, r0, #3
  4047f0:	e5da      	b.n	4043a8 <_malloc_r+0x44>
  4047f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4047f6:	e6ed      	b.n	4045d4 <_malloc_r+0x270>
  4047f8:	687b      	ldr	r3, [r7, #4]
  4047fa:	1092      	asrs	r2, r2, #2
  4047fc:	2101      	movs	r1, #1
  4047fe:	fa01 f202 	lsl.w	r2, r1, r2
  404802:	4313      	orrs	r3, r2
  404804:	607b      	str	r3, [r7, #4]
  404806:	4662      	mov	r2, ip
  404808:	e779      	b.n	4046fe <_malloc_r+0x39a>
  40480a:	2301      	movs	r3, #1
  40480c:	6053      	str	r3, [r2, #4]
  40480e:	e729      	b.n	404664 <_malloc_r+0x300>
  404810:	f240 5254 	movw	r2, #1364	; 0x554
  404814:	4293      	cmp	r3, r2
  404816:	d822      	bhi.n	40485e <_malloc_r+0x4fa>
  404818:	0cb3      	lsrs	r3, r6, #18
  40481a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40481e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404822:	00c3      	lsls	r3, r0, #3
  404824:	e5c0      	b.n	4043a8 <_malloc_r+0x44>
  404826:	f103 0b10 	add.w	fp, r3, #16
  40482a:	e6ae      	b.n	40458a <_malloc_r+0x226>
  40482c:	2a54      	cmp	r2, #84	; 0x54
  40482e:	d829      	bhi.n	404884 <_malloc_r+0x520>
  404830:	0b1a      	lsrs	r2, r3, #12
  404832:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404836:	00c9      	lsls	r1, r1, #3
  404838:	326e      	adds	r2, #110	; 0x6e
  40483a:	e74d      	b.n	4046d8 <_malloc_r+0x374>
  40483c:	4b20      	ldr	r3, [pc, #128]	; (4048c0 <_malloc_r+0x55c>)
  40483e:	6819      	ldr	r1, [r3, #0]
  404840:	4459      	add	r1, fp
  404842:	6019      	str	r1, [r3, #0]
  404844:	e6b2      	b.n	4045ac <_malloc_r+0x248>
  404846:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40484a:	2800      	cmp	r0, #0
  40484c:	f47f aeae 	bne.w	4045ac <_malloc_r+0x248>
  404850:	eb08 030b 	add.w	r3, r8, fp
  404854:	68ba      	ldr	r2, [r7, #8]
  404856:	f043 0301 	orr.w	r3, r3, #1
  40485a:	6053      	str	r3, [r2, #4]
  40485c:	e6ee      	b.n	40463c <_malloc_r+0x2d8>
  40485e:	207f      	movs	r0, #127	; 0x7f
  404860:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404864:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404868:	e59e      	b.n	4043a8 <_malloc_r+0x44>
  40486a:	f104 0108 	add.w	r1, r4, #8
  40486e:	4628      	mov	r0, r5
  404870:	9300      	str	r3, [sp, #0]
  404872:	f003 fe3d 	bl	4084f0 <_free_r>
  404876:	9b00      	ldr	r3, [sp, #0]
  404878:	6819      	ldr	r1, [r3, #0]
  40487a:	e6df      	b.n	40463c <_malloc_r+0x2d8>
  40487c:	2001      	movs	r0, #1
  40487e:	f04f 0900 	mov.w	r9, #0
  404882:	e6bc      	b.n	4045fe <_malloc_r+0x29a>
  404884:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404888:	d805      	bhi.n	404896 <_malloc_r+0x532>
  40488a:	0bda      	lsrs	r2, r3, #15
  40488c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404890:	00c9      	lsls	r1, r1, #3
  404892:	3277      	adds	r2, #119	; 0x77
  404894:	e720      	b.n	4046d8 <_malloc_r+0x374>
  404896:	f240 5154 	movw	r1, #1364	; 0x554
  40489a:	428a      	cmp	r2, r1
  40489c:	d805      	bhi.n	4048aa <_malloc_r+0x546>
  40489e:	0c9a      	lsrs	r2, r3, #18
  4048a0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4048a4:	00c9      	lsls	r1, r1, #3
  4048a6:	327c      	adds	r2, #124	; 0x7c
  4048a8:	e716      	b.n	4046d8 <_malloc_r+0x374>
  4048aa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4048ae:	227e      	movs	r2, #126	; 0x7e
  4048b0:	e712      	b.n	4046d8 <_malloc_r+0x374>
  4048b2:	687b      	ldr	r3, [r7, #4]
  4048b4:	e780      	b.n	4047b8 <_malloc_r+0x454>
  4048b6:	08f0      	lsrs	r0, r6, #3
  4048b8:	f106 0308 	add.w	r3, r6, #8
  4048bc:	e600      	b.n	4044c0 <_malloc_r+0x15c>
  4048be:	bf00      	nop
  4048c0:	20400ba0 	.word	0x20400ba0

004048c4 <memcpy>:
  4048c4:	4684      	mov	ip, r0
  4048c6:	ea41 0300 	orr.w	r3, r1, r0
  4048ca:	f013 0303 	ands.w	r3, r3, #3
  4048ce:	d16d      	bne.n	4049ac <memcpy+0xe8>
  4048d0:	3a40      	subs	r2, #64	; 0x40
  4048d2:	d341      	bcc.n	404958 <memcpy+0x94>
  4048d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4048d8:	f840 3b04 	str.w	r3, [r0], #4
  4048dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4048e0:	f840 3b04 	str.w	r3, [r0], #4
  4048e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4048e8:	f840 3b04 	str.w	r3, [r0], #4
  4048ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4048f0:	f840 3b04 	str.w	r3, [r0], #4
  4048f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4048f8:	f840 3b04 	str.w	r3, [r0], #4
  4048fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404900:	f840 3b04 	str.w	r3, [r0], #4
  404904:	f851 3b04 	ldr.w	r3, [r1], #4
  404908:	f840 3b04 	str.w	r3, [r0], #4
  40490c:	f851 3b04 	ldr.w	r3, [r1], #4
  404910:	f840 3b04 	str.w	r3, [r0], #4
  404914:	f851 3b04 	ldr.w	r3, [r1], #4
  404918:	f840 3b04 	str.w	r3, [r0], #4
  40491c:	f851 3b04 	ldr.w	r3, [r1], #4
  404920:	f840 3b04 	str.w	r3, [r0], #4
  404924:	f851 3b04 	ldr.w	r3, [r1], #4
  404928:	f840 3b04 	str.w	r3, [r0], #4
  40492c:	f851 3b04 	ldr.w	r3, [r1], #4
  404930:	f840 3b04 	str.w	r3, [r0], #4
  404934:	f851 3b04 	ldr.w	r3, [r1], #4
  404938:	f840 3b04 	str.w	r3, [r0], #4
  40493c:	f851 3b04 	ldr.w	r3, [r1], #4
  404940:	f840 3b04 	str.w	r3, [r0], #4
  404944:	f851 3b04 	ldr.w	r3, [r1], #4
  404948:	f840 3b04 	str.w	r3, [r0], #4
  40494c:	f851 3b04 	ldr.w	r3, [r1], #4
  404950:	f840 3b04 	str.w	r3, [r0], #4
  404954:	3a40      	subs	r2, #64	; 0x40
  404956:	d2bd      	bcs.n	4048d4 <memcpy+0x10>
  404958:	3230      	adds	r2, #48	; 0x30
  40495a:	d311      	bcc.n	404980 <memcpy+0xbc>
  40495c:	f851 3b04 	ldr.w	r3, [r1], #4
  404960:	f840 3b04 	str.w	r3, [r0], #4
  404964:	f851 3b04 	ldr.w	r3, [r1], #4
  404968:	f840 3b04 	str.w	r3, [r0], #4
  40496c:	f851 3b04 	ldr.w	r3, [r1], #4
  404970:	f840 3b04 	str.w	r3, [r0], #4
  404974:	f851 3b04 	ldr.w	r3, [r1], #4
  404978:	f840 3b04 	str.w	r3, [r0], #4
  40497c:	3a10      	subs	r2, #16
  40497e:	d2ed      	bcs.n	40495c <memcpy+0x98>
  404980:	320c      	adds	r2, #12
  404982:	d305      	bcc.n	404990 <memcpy+0xcc>
  404984:	f851 3b04 	ldr.w	r3, [r1], #4
  404988:	f840 3b04 	str.w	r3, [r0], #4
  40498c:	3a04      	subs	r2, #4
  40498e:	d2f9      	bcs.n	404984 <memcpy+0xc0>
  404990:	3204      	adds	r2, #4
  404992:	d008      	beq.n	4049a6 <memcpy+0xe2>
  404994:	07d2      	lsls	r2, r2, #31
  404996:	bf1c      	itt	ne
  404998:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40499c:	f800 3b01 	strbne.w	r3, [r0], #1
  4049a0:	d301      	bcc.n	4049a6 <memcpy+0xe2>
  4049a2:	880b      	ldrh	r3, [r1, #0]
  4049a4:	8003      	strh	r3, [r0, #0]
  4049a6:	4660      	mov	r0, ip
  4049a8:	4770      	bx	lr
  4049aa:	bf00      	nop
  4049ac:	2a08      	cmp	r2, #8
  4049ae:	d313      	bcc.n	4049d8 <memcpy+0x114>
  4049b0:	078b      	lsls	r3, r1, #30
  4049b2:	d08d      	beq.n	4048d0 <memcpy+0xc>
  4049b4:	f010 0303 	ands.w	r3, r0, #3
  4049b8:	d08a      	beq.n	4048d0 <memcpy+0xc>
  4049ba:	f1c3 0304 	rsb	r3, r3, #4
  4049be:	1ad2      	subs	r2, r2, r3
  4049c0:	07db      	lsls	r3, r3, #31
  4049c2:	bf1c      	itt	ne
  4049c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4049c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4049cc:	d380      	bcc.n	4048d0 <memcpy+0xc>
  4049ce:	f831 3b02 	ldrh.w	r3, [r1], #2
  4049d2:	f820 3b02 	strh.w	r3, [r0], #2
  4049d6:	e77b      	b.n	4048d0 <memcpy+0xc>
  4049d8:	3a04      	subs	r2, #4
  4049da:	d3d9      	bcc.n	404990 <memcpy+0xcc>
  4049dc:	3a01      	subs	r2, #1
  4049de:	f811 3b01 	ldrb.w	r3, [r1], #1
  4049e2:	f800 3b01 	strb.w	r3, [r0], #1
  4049e6:	d2f9      	bcs.n	4049dc <memcpy+0x118>
  4049e8:	780b      	ldrb	r3, [r1, #0]
  4049ea:	7003      	strb	r3, [r0, #0]
  4049ec:	784b      	ldrb	r3, [r1, #1]
  4049ee:	7043      	strb	r3, [r0, #1]
  4049f0:	788b      	ldrb	r3, [r1, #2]
  4049f2:	7083      	strb	r3, [r0, #2]
  4049f4:	4660      	mov	r0, ip
  4049f6:	4770      	bx	lr

004049f8 <memset>:
  4049f8:	b470      	push	{r4, r5, r6}
  4049fa:	0786      	lsls	r6, r0, #30
  4049fc:	d046      	beq.n	404a8c <memset+0x94>
  4049fe:	1e54      	subs	r4, r2, #1
  404a00:	2a00      	cmp	r2, #0
  404a02:	d041      	beq.n	404a88 <memset+0x90>
  404a04:	b2ca      	uxtb	r2, r1
  404a06:	4603      	mov	r3, r0
  404a08:	e002      	b.n	404a10 <memset+0x18>
  404a0a:	f114 34ff 	adds.w	r4, r4, #4294967295
  404a0e:	d33b      	bcc.n	404a88 <memset+0x90>
  404a10:	f803 2b01 	strb.w	r2, [r3], #1
  404a14:	079d      	lsls	r5, r3, #30
  404a16:	d1f8      	bne.n	404a0a <memset+0x12>
  404a18:	2c03      	cmp	r4, #3
  404a1a:	d92e      	bls.n	404a7a <memset+0x82>
  404a1c:	b2cd      	uxtb	r5, r1
  404a1e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404a22:	2c0f      	cmp	r4, #15
  404a24:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404a28:	d919      	bls.n	404a5e <memset+0x66>
  404a2a:	f103 0210 	add.w	r2, r3, #16
  404a2e:	4626      	mov	r6, r4
  404a30:	3e10      	subs	r6, #16
  404a32:	2e0f      	cmp	r6, #15
  404a34:	f842 5c10 	str.w	r5, [r2, #-16]
  404a38:	f842 5c0c 	str.w	r5, [r2, #-12]
  404a3c:	f842 5c08 	str.w	r5, [r2, #-8]
  404a40:	f842 5c04 	str.w	r5, [r2, #-4]
  404a44:	f102 0210 	add.w	r2, r2, #16
  404a48:	d8f2      	bhi.n	404a30 <memset+0x38>
  404a4a:	f1a4 0210 	sub.w	r2, r4, #16
  404a4e:	f022 020f 	bic.w	r2, r2, #15
  404a52:	f004 040f 	and.w	r4, r4, #15
  404a56:	3210      	adds	r2, #16
  404a58:	2c03      	cmp	r4, #3
  404a5a:	4413      	add	r3, r2
  404a5c:	d90d      	bls.n	404a7a <memset+0x82>
  404a5e:	461e      	mov	r6, r3
  404a60:	4622      	mov	r2, r4
  404a62:	3a04      	subs	r2, #4
  404a64:	2a03      	cmp	r2, #3
  404a66:	f846 5b04 	str.w	r5, [r6], #4
  404a6a:	d8fa      	bhi.n	404a62 <memset+0x6a>
  404a6c:	1f22      	subs	r2, r4, #4
  404a6e:	f022 0203 	bic.w	r2, r2, #3
  404a72:	3204      	adds	r2, #4
  404a74:	4413      	add	r3, r2
  404a76:	f004 0403 	and.w	r4, r4, #3
  404a7a:	b12c      	cbz	r4, 404a88 <memset+0x90>
  404a7c:	b2c9      	uxtb	r1, r1
  404a7e:	441c      	add	r4, r3
  404a80:	f803 1b01 	strb.w	r1, [r3], #1
  404a84:	429c      	cmp	r4, r3
  404a86:	d1fb      	bne.n	404a80 <memset+0x88>
  404a88:	bc70      	pop	{r4, r5, r6}
  404a8a:	4770      	bx	lr
  404a8c:	4614      	mov	r4, r2
  404a8e:	4603      	mov	r3, r0
  404a90:	e7c2      	b.n	404a18 <memset+0x20>
  404a92:	bf00      	nop

00404a94 <__malloc_lock>:
  404a94:	4801      	ldr	r0, [pc, #4]	; (404a9c <__malloc_lock+0x8>)
  404a96:	f003 bfd3 	b.w	408a40 <__retarget_lock_acquire_recursive>
  404a9a:	bf00      	nop
  404a9c:	20400cfc 	.word	0x20400cfc

00404aa0 <__malloc_unlock>:
  404aa0:	4801      	ldr	r0, [pc, #4]	; (404aa8 <__malloc_unlock+0x8>)
  404aa2:	f003 bfcf 	b.w	408a44 <__retarget_lock_release_recursive>
  404aa6:	bf00      	nop
  404aa8:	20400cfc 	.word	0x20400cfc

00404aac <_sbrk_r>:
  404aac:	b538      	push	{r3, r4, r5, lr}
  404aae:	4c07      	ldr	r4, [pc, #28]	; (404acc <_sbrk_r+0x20>)
  404ab0:	2300      	movs	r3, #0
  404ab2:	4605      	mov	r5, r0
  404ab4:	4608      	mov	r0, r1
  404ab6:	6023      	str	r3, [r4, #0]
  404ab8:	f7fc fb88 	bl	4011cc <_sbrk>
  404abc:	1c43      	adds	r3, r0, #1
  404abe:	d000      	beq.n	404ac2 <_sbrk_r+0x16>
  404ac0:	bd38      	pop	{r3, r4, r5, pc}
  404ac2:	6823      	ldr	r3, [r4, #0]
  404ac4:	2b00      	cmp	r3, #0
  404ac6:	d0fb      	beq.n	404ac0 <_sbrk_r+0x14>
  404ac8:	602b      	str	r3, [r5, #0]
  404aca:	bd38      	pop	{r3, r4, r5, pc}
  404acc:	20400d10 	.word	0x20400d10

00404ad0 <setbuf>:
  404ad0:	2900      	cmp	r1, #0
  404ad2:	bf0c      	ite	eq
  404ad4:	2202      	moveq	r2, #2
  404ad6:	2200      	movne	r2, #0
  404ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404adc:	f000 b800 	b.w	404ae0 <setvbuf>

00404ae0 <setvbuf>:
  404ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404ae4:	4c61      	ldr	r4, [pc, #388]	; (404c6c <setvbuf+0x18c>)
  404ae6:	6825      	ldr	r5, [r4, #0]
  404ae8:	b083      	sub	sp, #12
  404aea:	4604      	mov	r4, r0
  404aec:	460f      	mov	r7, r1
  404aee:	4690      	mov	r8, r2
  404af0:	461e      	mov	r6, r3
  404af2:	b115      	cbz	r5, 404afa <setvbuf+0x1a>
  404af4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404af6:	2b00      	cmp	r3, #0
  404af8:	d064      	beq.n	404bc4 <setvbuf+0xe4>
  404afa:	f1b8 0f02 	cmp.w	r8, #2
  404afe:	d006      	beq.n	404b0e <setvbuf+0x2e>
  404b00:	f1b8 0f01 	cmp.w	r8, #1
  404b04:	f200 809f 	bhi.w	404c46 <setvbuf+0x166>
  404b08:	2e00      	cmp	r6, #0
  404b0a:	f2c0 809c 	blt.w	404c46 <setvbuf+0x166>
  404b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404b10:	07d8      	lsls	r0, r3, #31
  404b12:	d534      	bpl.n	404b7e <setvbuf+0x9e>
  404b14:	4621      	mov	r1, r4
  404b16:	4628      	mov	r0, r5
  404b18:	f003 fb6c 	bl	4081f4 <_fflush_r>
  404b1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404b1e:	b141      	cbz	r1, 404b32 <setvbuf+0x52>
  404b20:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404b24:	4299      	cmp	r1, r3
  404b26:	d002      	beq.n	404b2e <setvbuf+0x4e>
  404b28:	4628      	mov	r0, r5
  404b2a:	f003 fce1 	bl	4084f0 <_free_r>
  404b2e:	2300      	movs	r3, #0
  404b30:	6323      	str	r3, [r4, #48]	; 0x30
  404b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b36:	2200      	movs	r2, #0
  404b38:	61a2      	str	r2, [r4, #24]
  404b3a:	6062      	str	r2, [r4, #4]
  404b3c:	061a      	lsls	r2, r3, #24
  404b3e:	d43a      	bmi.n	404bb6 <setvbuf+0xd6>
  404b40:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404b44:	f023 0303 	bic.w	r3, r3, #3
  404b48:	f1b8 0f02 	cmp.w	r8, #2
  404b4c:	81a3      	strh	r3, [r4, #12]
  404b4e:	d01d      	beq.n	404b8c <setvbuf+0xac>
  404b50:	ab01      	add	r3, sp, #4
  404b52:	466a      	mov	r2, sp
  404b54:	4621      	mov	r1, r4
  404b56:	4628      	mov	r0, r5
  404b58:	f003 ff76 	bl	408a48 <__swhatbuf_r>
  404b5c:	89a3      	ldrh	r3, [r4, #12]
  404b5e:	4318      	orrs	r0, r3
  404b60:	81a0      	strh	r0, [r4, #12]
  404b62:	2e00      	cmp	r6, #0
  404b64:	d132      	bne.n	404bcc <setvbuf+0xec>
  404b66:	9e00      	ldr	r6, [sp, #0]
  404b68:	4630      	mov	r0, r6
  404b6a:	f7ff fbeb 	bl	404344 <malloc>
  404b6e:	4607      	mov	r7, r0
  404b70:	2800      	cmp	r0, #0
  404b72:	d06b      	beq.n	404c4c <setvbuf+0x16c>
  404b74:	89a3      	ldrh	r3, [r4, #12]
  404b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404b7a:	81a3      	strh	r3, [r4, #12]
  404b7c:	e028      	b.n	404bd0 <setvbuf+0xf0>
  404b7e:	89a3      	ldrh	r3, [r4, #12]
  404b80:	0599      	lsls	r1, r3, #22
  404b82:	d4c7      	bmi.n	404b14 <setvbuf+0x34>
  404b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b86:	f003 ff5b 	bl	408a40 <__retarget_lock_acquire_recursive>
  404b8a:	e7c3      	b.n	404b14 <setvbuf+0x34>
  404b8c:	2500      	movs	r5, #0
  404b8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404b90:	2600      	movs	r6, #0
  404b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404b96:	f043 0302 	orr.w	r3, r3, #2
  404b9a:	2001      	movs	r0, #1
  404b9c:	60a6      	str	r6, [r4, #8]
  404b9e:	07ce      	lsls	r6, r1, #31
  404ba0:	81a3      	strh	r3, [r4, #12]
  404ba2:	6022      	str	r2, [r4, #0]
  404ba4:	6122      	str	r2, [r4, #16]
  404ba6:	6160      	str	r0, [r4, #20]
  404ba8:	d401      	bmi.n	404bae <setvbuf+0xce>
  404baa:	0598      	lsls	r0, r3, #22
  404bac:	d53e      	bpl.n	404c2c <setvbuf+0x14c>
  404bae:	4628      	mov	r0, r5
  404bb0:	b003      	add	sp, #12
  404bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404bb6:	6921      	ldr	r1, [r4, #16]
  404bb8:	4628      	mov	r0, r5
  404bba:	f003 fc99 	bl	4084f0 <_free_r>
  404bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bc2:	e7bd      	b.n	404b40 <setvbuf+0x60>
  404bc4:	4628      	mov	r0, r5
  404bc6:	f003 fb6d 	bl	4082a4 <__sinit>
  404bca:	e796      	b.n	404afa <setvbuf+0x1a>
  404bcc:	2f00      	cmp	r7, #0
  404bce:	d0cb      	beq.n	404b68 <setvbuf+0x88>
  404bd0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404bd2:	2b00      	cmp	r3, #0
  404bd4:	d033      	beq.n	404c3e <setvbuf+0x15e>
  404bd6:	9b00      	ldr	r3, [sp, #0]
  404bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404bdc:	6027      	str	r7, [r4, #0]
  404bde:	429e      	cmp	r6, r3
  404be0:	bf1c      	itt	ne
  404be2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404be6:	81a2      	strhne	r2, [r4, #12]
  404be8:	f1b8 0f01 	cmp.w	r8, #1
  404bec:	bf04      	itt	eq
  404bee:	f042 0201 	orreq.w	r2, r2, #1
  404bf2:	81a2      	strheq	r2, [r4, #12]
  404bf4:	b292      	uxth	r2, r2
  404bf6:	f012 0308 	ands.w	r3, r2, #8
  404bfa:	6127      	str	r7, [r4, #16]
  404bfc:	6166      	str	r6, [r4, #20]
  404bfe:	d00e      	beq.n	404c1e <setvbuf+0x13e>
  404c00:	07d1      	lsls	r1, r2, #31
  404c02:	d51a      	bpl.n	404c3a <setvbuf+0x15a>
  404c04:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404c06:	4276      	negs	r6, r6
  404c08:	2300      	movs	r3, #0
  404c0a:	f015 0501 	ands.w	r5, r5, #1
  404c0e:	61a6      	str	r6, [r4, #24]
  404c10:	60a3      	str	r3, [r4, #8]
  404c12:	d009      	beq.n	404c28 <setvbuf+0x148>
  404c14:	2500      	movs	r5, #0
  404c16:	4628      	mov	r0, r5
  404c18:	b003      	add	sp, #12
  404c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404c1e:	60a3      	str	r3, [r4, #8]
  404c20:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404c22:	f015 0501 	ands.w	r5, r5, #1
  404c26:	d1f5      	bne.n	404c14 <setvbuf+0x134>
  404c28:	0593      	lsls	r3, r2, #22
  404c2a:	d4c0      	bmi.n	404bae <setvbuf+0xce>
  404c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c2e:	f003 ff09 	bl	408a44 <__retarget_lock_release_recursive>
  404c32:	4628      	mov	r0, r5
  404c34:	b003      	add	sp, #12
  404c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404c3a:	60a6      	str	r6, [r4, #8]
  404c3c:	e7f0      	b.n	404c20 <setvbuf+0x140>
  404c3e:	4628      	mov	r0, r5
  404c40:	f003 fb30 	bl	4082a4 <__sinit>
  404c44:	e7c7      	b.n	404bd6 <setvbuf+0xf6>
  404c46:	f04f 35ff 	mov.w	r5, #4294967295
  404c4a:	e7b0      	b.n	404bae <setvbuf+0xce>
  404c4c:	f8dd 9000 	ldr.w	r9, [sp]
  404c50:	45b1      	cmp	r9, r6
  404c52:	d004      	beq.n	404c5e <setvbuf+0x17e>
  404c54:	4648      	mov	r0, r9
  404c56:	f7ff fb75 	bl	404344 <malloc>
  404c5a:	4607      	mov	r7, r0
  404c5c:	b920      	cbnz	r0, 404c68 <setvbuf+0x188>
  404c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c62:	f04f 35ff 	mov.w	r5, #4294967295
  404c66:	e792      	b.n	404b8e <setvbuf+0xae>
  404c68:	464e      	mov	r6, r9
  404c6a:	e783      	b.n	404b74 <setvbuf+0x94>
  404c6c:	20400014 	.word	0x20400014

00404c70 <sprintf>:
  404c70:	b40e      	push	{r1, r2, r3}
  404c72:	b5f0      	push	{r4, r5, r6, r7, lr}
  404c74:	b09c      	sub	sp, #112	; 0x70
  404c76:	ab21      	add	r3, sp, #132	; 0x84
  404c78:	490f      	ldr	r1, [pc, #60]	; (404cb8 <sprintf+0x48>)
  404c7a:	f853 2b04 	ldr.w	r2, [r3], #4
  404c7e:	9301      	str	r3, [sp, #4]
  404c80:	4605      	mov	r5, r0
  404c82:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404c86:	6808      	ldr	r0, [r1, #0]
  404c88:	9502      	str	r5, [sp, #8]
  404c8a:	f44f 7702 	mov.w	r7, #520	; 0x208
  404c8e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404c92:	a902      	add	r1, sp, #8
  404c94:	9506      	str	r5, [sp, #24]
  404c96:	f8ad 7014 	strh.w	r7, [sp, #20]
  404c9a:	9404      	str	r4, [sp, #16]
  404c9c:	9407      	str	r4, [sp, #28]
  404c9e:	f8ad 6016 	strh.w	r6, [sp, #22]
  404ca2:	f000 f8db 	bl	404e5c <_svfprintf_r>
  404ca6:	9b02      	ldr	r3, [sp, #8]
  404ca8:	2200      	movs	r2, #0
  404caa:	701a      	strb	r2, [r3, #0]
  404cac:	b01c      	add	sp, #112	; 0x70
  404cae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404cb2:	b003      	add	sp, #12
  404cb4:	4770      	bx	lr
  404cb6:	bf00      	nop
  404cb8:	20400014 	.word	0x20400014

00404cbc <strcpy>:
  404cbc:	ea80 0201 	eor.w	r2, r0, r1
  404cc0:	4684      	mov	ip, r0
  404cc2:	f012 0f03 	tst.w	r2, #3
  404cc6:	d14f      	bne.n	404d68 <strcpy+0xac>
  404cc8:	f011 0f03 	tst.w	r1, #3
  404ccc:	d132      	bne.n	404d34 <strcpy+0x78>
  404cce:	f84d 4d04 	str.w	r4, [sp, #-4]!
  404cd2:	f011 0f04 	tst.w	r1, #4
  404cd6:	f851 3b04 	ldr.w	r3, [r1], #4
  404cda:	d00b      	beq.n	404cf4 <strcpy+0x38>
  404cdc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404ce0:	439a      	bics	r2, r3
  404ce2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404ce6:	bf04      	itt	eq
  404ce8:	f84c 3b04 	streq.w	r3, [ip], #4
  404cec:	f851 3b04 	ldreq.w	r3, [r1], #4
  404cf0:	d116      	bne.n	404d20 <strcpy+0x64>
  404cf2:	bf00      	nop
  404cf4:	f851 4b04 	ldr.w	r4, [r1], #4
  404cf8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404cfc:	439a      	bics	r2, r3
  404cfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404d02:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404d06:	d10b      	bne.n	404d20 <strcpy+0x64>
  404d08:	f84c 3b04 	str.w	r3, [ip], #4
  404d0c:	43a2      	bics	r2, r4
  404d0e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404d12:	bf04      	itt	eq
  404d14:	f851 3b04 	ldreq.w	r3, [r1], #4
  404d18:	f84c 4b04 	streq.w	r4, [ip], #4
  404d1c:	d0ea      	beq.n	404cf4 <strcpy+0x38>
  404d1e:	4623      	mov	r3, r4
  404d20:	f80c 3b01 	strb.w	r3, [ip], #1
  404d24:	f013 0fff 	tst.w	r3, #255	; 0xff
  404d28:	ea4f 2333 	mov.w	r3, r3, ror #8
  404d2c:	d1f8      	bne.n	404d20 <strcpy+0x64>
  404d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404d32:	4770      	bx	lr
  404d34:	f011 0f01 	tst.w	r1, #1
  404d38:	d006      	beq.n	404d48 <strcpy+0x8c>
  404d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
  404d3e:	f80c 2b01 	strb.w	r2, [ip], #1
  404d42:	2a00      	cmp	r2, #0
  404d44:	bf08      	it	eq
  404d46:	4770      	bxeq	lr
  404d48:	f011 0f02 	tst.w	r1, #2
  404d4c:	d0bf      	beq.n	404cce <strcpy+0x12>
  404d4e:	f831 2b02 	ldrh.w	r2, [r1], #2
  404d52:	f012 0fff 	tst.w	r2, #255	; 0xff
  404d56:	bf16      	itet	ne
  404d58:	f82c 2b02 	strhne.w	r2, [ip], #2
  404d5c:	f88c 2000 	strbeq.w	r2, [ip]
  404d60:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  404d64:	d1b3      	bne.n	404cce <strcpy+0x12>
  404d66:	4770      	bx	lr
  404d68:	f811 2b01 	ldrb.w	r2, [r1], #1
  404d6c:	f80c 2b01 	strb.w	r2, [ip], #1
  404d70:	2a00      	cmp	r2, #0
  404d72:	d1f9      	bne.n	404d68 <strcpy+0xac>
  404d74:	4770      	bx	lr
  404d76:	bf00      	nop
	...

00404d80 <strlen>:
  404d80:	f890 f000 	pld	[r0]
  404d84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404d88:	f020 0107 	bic.w	r1, r0, #7
  404d8c:	f06f 0c00 	mvn.w	ip, #0
  404d90:	f010 0407 	ands.w	r4, r0, #7
  404d94:	f891 f020 	pld	[r1, #32]
  404d98:	f040 8049 	bne.w	404e2e <strlen+0xae>
  404d9c:	f04f 0400 	mov.w	r4, #0
  404da0:	f06f 0007 	mvn.w	r0, #7
  404da4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404da8:	f891 f040 	pld	[r1, #64]	; 0x40
  404dac:	f100 0008 	add.w	r0, r0, #8
  404db0:	fa82 f24c 	uadd8	r2, r2, ip
  404db4:	faa4 f28c 	sel	r2, r4, ip
  404db8:	fa83 f34c 	uadd8	r3, r3, ip
  404dbc:	faa2 f38c 	sel	r3, r2, ip
  404dc0:	bb4b      	cbnz	r3, 404e16 <strlen+0x96>
  404dc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404dc6:	fa82 f24c 	uadd8	r2, r2, ip
  404dca:	f100 0008 	add.w	r0, r0, #8
  404dce:	faa4 f28c 	sel	r2, r4, ip
  404dd2:	fa83 f34c 	uadd8	r3, r3, ip
  404dd6:	faa2 f38c 	sel	r3, r2, ip
  404dda:	b9e3      	cbnz	r3, 404e16 <strlen+0x96>
  404ddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404de0:	fa82 f24c 	uadd8	r2, r2, ip
  404de4:	f100 0008 	add.w	r0, r0, #8
  404de8:	faa4 f28c 	sel	r2, r4, ip
  404dec:	fa83 f34c 	uadd8	r3, r3, ip
  404df0:	faa2 f38c 	sel	r3, r2, ip
  404df4:	b97b      	cbnz	r3, 404e16 <strlen+0x96>
  404df6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404dfa:	f101 0120 	add.w	r1, r1, #32
  404dfe:	fa82 f24c 	uadd8	r2, r2, ip
  404e02:	f100 0008 	add.w	r0, r0, #8
  404e06:	faa4 f28c 	sel	r2, r4, ip
  404e0a:	fa83 f34c 	uadd8	r3, r3, ip
  404e0e:	faa2 f38c 	sel	r3, r2, ip
  404e12:	2b00      	cmp	r3, #0
  404e14:	d0c6      	beq.n	404da4 <strlen+0x24>
  404e16:	2a00      	cmp	r2, #0
  404e18:	bf04      	itt	eq
  404e1a:	3004      	addeq	r0, #4
  404e1c:	461a      	moveq	r2, r3
  404e1e:	ba12      	rev	r2, r2
  404e20:	fab2 f282 	clz	r2, r2
  404e24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404e28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404e2c:	4770      	bx	lr
  404e2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404e32:	f004 0503 	and.w	r5, r4, #3
  404e36:	f1c4 0000 	rsb	r0, r4, #0
  404e3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404e3e:	f014 0f04 	tst.w	r4, #4
  404e42:	f891 f040 	pld	[r1, #64]	; 0x40
  404e46:	fa0c f505 	lsl.w	r5, ip, r5
  404e4a:	ea62 0205 	orn	r2, r2, r5
  404e4e:	bf1c      	itt	ne
  404e50:	ea63 0305 	ornne	r3, r3, r5
  404e54:	4662      	movne	r2, ip
  404e56:	f04f 0400 	mov.w	r4, #0
  404e5a:	e7a9      	b.n	404db0 <strlen+0x30>

00404e5c <_svfprintf_r>:
  404e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e60:	b0c3      	sub	sp, #268	; 0x10c
  404e62:	460c      	mov	r4, r1
  404e64:	910b      	str	r1, [sp, #44]	; 0x2c
  404e66:	4692      	mov	sl, r2
  404e68:	930f      	str	r3, [sp, #60]	; 0x3c
  404e6a:	900c      	str	r0, [sp, #48]	; 0x30
  404e6c:	f003 fdd6 	bl	408a1c <_localeconv_r>
  404e70:	6803      	ldr	r3, [r0, #0]
  404e72:	931a      	str	r3, [sp, #104]	; 0x68
  404e74:	4618      	mov	r0, r3
  404e76:	f7ff ff83 	bl	404d80 <strlen>
  404e7a:	89a3      	ldrh	r3, [r4, #12]
  404e7c:	9019      	str	r0, [sp, #100]	; 0x64
  404e7e:	0619      	lsls	r1, r3, #24
  404e80:	d503      	bpl.n	404e8a <_svfprintf_r+0x2e>
  404e82:	6923      	ldr	r3, [r4, #16]
  404e84:	2b00      	cmp	r3, #0
  404e86:	f001 8003 	beq.w	405e90 <_svfprintf_r+0x1034>
  404e8a:	2300      	movs	r3, #0
  404e8c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404e90:	9313      	str	r3, [sp, #76]	; 0x4c
  404e92:	9315      	str	r3, [sp, #84]	; 0x54
  404e94:	9314      	str	r3, [sp, #80]	; 0x50
  404e96:	9327      	str	r3, [sp, #156]	; 0x9c
  404e98:	9326      	str	r3, [sp, #152]	; 0x98
  404e9a:	9318      	str	r3, [sp, #96]	; 0x60
  404e9c:	931b      	str	r3, [sp, #108]	; 0x6c
  404e9e:	9309      	str	r3, [sp, #36]	; 0x24
  404ea0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404ea4:	46c8      	mov	r8, r9
  404ea6:	9316      	str	r3, [sp, #88]	; 0x58
  404ea8:	9317      	str	r3, [sp, #92]	; 0x5c
  404eaa:	f89a 3000 	ldrb.w	r3, [sl]
  404eae:	4654      	mov	r4, sl
  404eb0:	b1e3      	cbz	r3, 404eec <_svfprintf_r+0x90>
  404eb2:	2b25      	cmp	r3, #37	; 0x25
  404eb4:	d102      	bne.n	404ebc <_svfprintf_r+0x60>
  404eb6:	e019      	b.n	404eec <_svfprintf_r+0x90>
  404eb8:	2b25      	cmp	r3, #37	; 0x25
  404eba:	d003      	beq.n	404ec4 <_svfprintf_r+0x68>
  404ebc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404ec0:	2b00      	cmp	r3, #0
  404ec2:	d1f9      	bne.n	404eb8 <_svfprintf_r+0x5c>
  404ec4:	eba4 050a 	sub.w	r5, r4, sl
  404ec8:	b185      	cbz	r5, 404eec <_svfprintf_r+0x90>
  404eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ecc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404ece:	f8c8 a000 	str.w	sl, [r8]
  404ed2:	3301      	adds	r3, #1
  404ed4:	442a      	add	r2, r5
  404ed6:	2b07      	cmp	r3, #7
  404ed8:	f8c8 5004 	str.w	r5, [r8, #4]
  404edc:	9227      	str	r2, [sp, #156]	; 0x9c
  404ede:	9326      	str	r3, [sp, #152]	; 0x98
  404ee0:	dc7f      	bgt.n	404fe2 <_svfprintf_r+0x186>
  404ee2:	f108 0808 	add.w	r8, r8, #8
  404ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ee8:	442b      	add	r3, r5
  404eea:	9309      	str	r3, [sp, #36]	; 0x24
  404eec:	7823      	ldrb	r3, [r4, #0]
  404eee:	2b00      	cmp	r3, #0
  404ef0:	d07f      	beq.n	404ff2 <_svfprintf_r+0x196>
  404ef2:	2300      	movs	r3, #0
  404ef4:	461a      	mov	r2, r3
  404ef6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404efa:	4619      	mov	r1, r3
  404efc:	930d      	str	r3, [sp, #52]	; 0x34
  404efe:	469b      	mov	fp, r3
  404f00:	f04f 30ff 	mov.w	r0, #4294967295
  404f04:	7863      	ldrb	r3, [r4, #1]
  404f06:	900a      	str	r0, [sp, #40]	; 0x28
  404f08:	f104 0a01 	add.w	sl, r4, #1
  404f0c:	f10a 0a01 	add.w	sl, sl, #1
  404f10:	f1a3 0020 	sub.w	r0, r3, #32
  404f14:	2858      	cmp	r0, #88	; 0x58
  404f16:	f200 83c1 	bhi.w	40569c <_svfprintf_r+0x840>
  404f1a:	e8df f010 	tbh	[pc, r0, lsl #1]
  404f1e:	0238      	.short	0x0238
  404f20:	03bf03bf 	.word	0x03bf03bf
  404f24:	03bf0240 	.word	0x03bf0240
  404f28:	03bf03bf 	.word	0x03bf03bf
  404f2c:	03bf03bf 	.word	0x03bf03bf
  404f30:	024503bf 	.word	0x024503bf
  404f34:	03bf0203 	.word	0x03bf0203
  404f38:	026b005d 	.word	0x026b005d
  404f3c:	028603bf 	.word	0x028603bf
  404f40:	039d039d 	.word	0x039d039d
  404f44:	039d039d 	.word	0x039d039d
  404f48:	039d039d 	.word	0x039d039d
  404f4c:	039d039d 	.word	0x039d039d
  404f50:	03bf039d 	.word	0x03bf039d
  404f54:	03bf03bf 	.word	0x03bf03bf
  404f58:	03bf03bf 	.word	0x03bf03bf
  404f5c:	03bf03bf 	.word	0x03bf03bf
  404f60:	03bf03bf 	.word	0x03bf03bf
  404f64:	033703bf 	.word	0x033703bf
  404f68:	03bf0357 	.word	0x03bf0357
  404f6c:	03bf0357 	.word	0x03bf0357
  404f70:	03bf03bf 	.word	0x03bf03bf
  404f74:	039803bf 	.word	0x039803bf
  404f78:	03bf03bf 	.word	0x03bf03bf
  404f7c:	03bf03ad 	.word	0x03bf03ad
  404f80:	03bf03bf 	.word	0x03bf03bf
  404f84:	03bf03bf 	.word	0x03bf03bf
  404f88:	03bf0259 	.word	0x03bf0259
  404f8c:	031e03bf 	.word	0x031e03bf
  404f90:	03bf03bf 	.word	0x03bf03bf
  404f94:	03bf03bf 	.word	0x03bf03bf
  404f98:	03bf03bf 	.word	0x03bf03bf
  404f9c:	03bf03bf 	.word	0x03bf03bf
  404fa0:	03bf03bf 	.word	0x03bf03bf
  404fa4:	02db02c6 	.word	0x02db02c6
  404fa8:	03570357 	.word	0x03570357
  404fac:	028b0357 	.word	0x028b0357
  404fb0:	03bf02db 	.word	0x03bf02db
  404fb4:	029003bf 	.word	0x029003bf
  404fb8:	029d03bf 	.word	0x029d03bf
  404fbc:	02b401cc 	.word	0x02b401cc
  404fc0:	03bf0208 	.word	0x03bf0208
  404fc4:	03bf01e1 	.word	0x03bf01e1
  404fc8:	03bf007e 	.word	0x03bf007e
  404fcc:	020d03bf 	.word	0x020d03bf
  404fd0:	980d      	ldr	r0, [sp, #52]	; 0x34
  404fd2:	930f      	str	r3, [sp, #60]	; 0x3c
  404fd4:	4240      	negs	r0, r0
  404fd6:	900d      	str	r0, [sp, #52]	; 0x34
  404fd8:	f04b 0b04 	orr.w	fp, fp, #4
  404fdc:	f89a 3000 	ldrb.w	r3, [sl]
  404fe0:	e794      	b.n	404f0c <_svfprintf_r+0xb0>
  404fe2:	aa25      	add	r2, sp, #148	; 0x94
  404fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fe6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fe8:	f004 fb5a 	bl	4096a0 <__ssprint_r>
  404fec:	b940      	cbnz	r0, 405000 <_svfprintf_r+0x1a4>
  404fee:	46c8      	mov	r8, r9
  404ff0:	e779      	b.n	404ee6 <_svfprintf_r+0x8a>
  404ff2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404ff4:	b123      	cbz	r3, 405000 <_svfprintf_r+0x1a4>
  404ff6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ffa:	aa25      	add	r2, sp, #148	; 0x94
  404ffc:	f004 fb50 	bl	4096a0 <__ssprint_r>
  405000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405002:	899b      	ldrh	r3, [r3, #12]
  405004:	f013 0f40 	tst.w	r3, #64	; 0x40
  405008:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40500a:	bf18      	it	ne
  40500c:	f04f 33ff 	movne.w	r3, #4294967295
  405010:	9309      	str	r3, [sp, #36]	; 0x24
  405012:	9809      	ldr	r0, [sp, #36]	; 0x24
  405014:	b043      	add	sp, #268	; 0x10c
  405016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40501a:	f01b 0f20 	tst.w	fp, #32
  40501e:	9311      	str	r3, [sp, #68]	; 0x44
  405020:	f040 81dd 	bne.w	4053de <_svfprintf_r+0x582>
  405024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405026:	f01b 0f10 	tst.w	fp, #16
  40502a:	4613      	mov	r3, r2
  40502c:	f040 856e 	bne.w	405b0c <_svfprintf_r+0xcb0>
  405030:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405034:	f000 856a 	beq.w	405b0c <_svfprintf_r+0xcb0>
  405038:	8814      	ldrh	r4, [r2, #0]
  40503a:	3204      	adds	r2, #4
  40503c:	2500      	movs	r5, #0
  40503e:	2301      	movs	r3, #1
  405040:	920f      	str	r2, [sp, #60]	; 0x3c
  405042:	2700      	movs	r7, #0
  405044:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405048:	990a      	ldr	r1, [sp, #40]	; 0x28
  40504a:	1c4a      	adds	r2, r1, #1
  40504c:	f000 8265 	beq.w	40551a <_svfprintf_r+0x6be>
  405050:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405054:	9207      	str	r2, [sp, #28]
  405056:	ea54 0205 	orrs.w	r2, r4, r5
  40505a:	f040 8264 	bne.w	405526 <_svfprintf_r+0x6ca>
  40505e:	2900      	cmp	r1, #0
  405060:	f040 843c 	bne.w	4058dc <_svfprintf_r+0xa80>
  405064:	2b00      	cmp	r3, #0
  405066:	f040 84d7 	bne.w	405a18 <_svfprintf_r+0xbbc>
  40506a:	f01b 0301 	ands.w	r3, fp, #1
  40506e:	930e      	str	r3, [sp, #56]	; 0x38
  405070:	f000 8604 	beq.w	405c7c <_svfprintf_r+0xe20>
  405074:	ae42      	add	r6, sp, #264	; 0x108
  405076:	2330      	movs	r3, #48	; 0x30
  405078:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40507c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40507e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405080:	4293      	cmp	r3, r2
  405082:	bfb8      	it	lt
  405084:	4613      	movlt	r3, r2
  405086:	9308      	str	r3, [sp, #32]
  405088:	2300      	movs	r3, #0
  40508a:	9312      	str	r3, [sp, #72]	; 0x48
  40508c:	b117      	cbz	r7, 405094 <_svfprintf_r+0x238>
  40508e:	9b08      	ldr	r3, [sp, #32]
  405090:	3301      	adds	r3, #1
  405092:	9308      	str	r3, [sp, #32]
  405094:	9b07      	ldr	r3, [sp, #28]
  405096:	f013 0302 	ands.w	r3, r3, #2
  40509a:	9310      	str	r3, [sp, #64]	; 0x40
  40509c:	d002      	beq.n	4050a4 <_svfprintf_r+0x248>
  40509e:	9b08      	ldr	r3, [sp, #32]
  4050a0:	3302      	adds	r3, #2
  4050a2:	9308      	str	r3, [sp, #32]
  4050a4:	9b07      	ldr	r3, [sp, #28]
  4050a6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4050aa:	f040 830e 	bne.w	4056ca <_svfprintf_r+0x86e>
  4050ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050b0:	9a08      	ldr	r2, [sp, #32]
  4050b2:	eba3 0b02 	sub.w	fp, r3, r2
  4050b6:	f1bb 0f00 	cmp.w	fp, #0
  4050ba:	f340 8306 	ble.w	4056ca <_svfprintf_r+0x86e>
  4050be:	f1bb 0f10 	cmp.w	fp, #16
  4050c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4050c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4050c6:	dd29      	ble.n	40511c <_svfprintf_r+0x2c0>
  4050c8:	4643      	mov	r3, r8
  4050ca:	4621      	mov	r1, r4
  4050cc:	46a8      	mov	r8, r5
  4050ce:	2710      	movs	r7, #16
  4050d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4050d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4050d4:	e006      	b.n	4050e4 <_svfprintf_r+0x288>
  4050d6:	f1ab 0b10 	sub.w	fp, fp, #16
  4050da:	f1bb 0f10 	cmp.w	fp, #16
  4050de:	f103 0308 	add.w	r3, r3, #8
  4050e2:	dd18      	ble.n	405116 <_svfprintf_r+0x2ba>
  4050e4:	3201      	adds	r2, #1
  4050e6:	48b7      	ldr	r0, [pc, #732]	; (4053c4 <_svfprintf_r+0x568>)
  4050e8:	9226      	str	r2, [sp, #152]	; 0x98
  4050ea:	3110      	adds	r1, #16
  4050ec:	2a07      	cmp	r2, #7
  4050ee:	9127      	str	r1, [sp, #156]	; 0x9c
  4050f0:	e883 0081 	stmia.w	r3, {r0, r7}
  4050f4:	ddef      	ble.n	4050d6 <_svfprintf_r+0x27a>
  4050f6:	aa25      	add	r2, sp, #148	; 0x94
  4050f8:	4629      	mov	r1, r5
  4050fa:	4620      	mov	r0, r4
  4050fc:	f004 fad0 	bl	4096a0 <__ssprint_r>
  405100:	2800      	cmp	r0, #0
  405102:	f47f af7d 	bne.w	405000 <_svfprintf_r+0x1a4>
  405106:	f1ab 0b10 	sub.w	fp, fp, #16
  40510a:	f1bb 0f10 	cmp.w	fp, #16
  40510e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405110:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405112:	464b      	mov	r3, r9
  405114:	dce6      	bgt.n	4050e4 <_svfprintf_r+0x288>
  405116:	4645      	mov	r5, r8
  405118:	460c      	mov	r4, r1
  40511a:	4698      	mov	r8, r3
  40511c:	3201      	adds	r2, #1
  40511e:	4ba9      	ldr	r3, [pc, #676]	; (4053c4 <_svfprintf_r+0x568>)
  405120:	9226      	str	r2, [sp, #152]	; 0x98
  405122:	445c      	add	r4, fp
  405124:	2a07      	cmp	r2, #7
  405126:	9427      	str	r4, [sp, #156]	; 0x9c
  405128:	e888 0808 	stmia.w	r8, {r3, fp}
  40512c:	f300 8498 	bgt.w	405a60 <_svfprintf_r+0xc04>
  405130:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405134:	f108 0808 	add.w	r8, r8, #8
  405138:	b177      	cbz	r7, 405158 <_svfprintf_r+0x2fc>
  40513a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40513c:	3301      	adds	r3, #1
  40513e:	3401      	adds	r4, #1
  405140:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405144:	2201      	movs	r2, #1
  405146:	2b07      	cmp	r3, #7
  405148:	9427      	str	r4, [sp, #156]	; 0x9c
  40514a:	9326      	str	r3, [sp, #152]	; 0x98
  40514c:	e888 0006 	stmia.w	r8, {r1, r2}
  405150:	f300 83db 	bgt.w	40590a <_svfprintf_r+0xaae>
  405154:	f108 0808 	add.w	r8, r8, #8
  405158:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40515a:	b16b      	cbz	r3, 405178 <_svfprintf_r+0x31c>
  40515c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40515e:	3301      	adds	r3, #1
  405160:	3402      	adds	r4, #2
  405162:	a91e      	add	r1, sp, #120	; 0x78
  405164:	2202      	movs	r2, #2
  405166:	2b07      	cmp	r3, #7
  405168:	9427      	str	r4, [sp, #156]	; 0x9c
  40516a:	9326      	str	r3, [sp, #152]	; 0x98
  40516c:	e888 0006 	stmia.w	r8, {r1, r2}
  405170:	f300 83d6 	bgt.w	405920 <_svfprintf_r+0xac4>
  405174:	f108 0808 	add.w	r8, r8, #8
  405178:	2d80      	cmp	r5, #128	; 0x80
  40517a:	f000 8315 	beq.w	4057a8 <_svfprintf_r+0x94c>
  40517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405182:	1a9f      	subs	r7, r3, r2
  405184:	2f00      	cmp	r7, #0
  405186:	dd36      	ble.n	4051f6 <_svfprintf_r+0x39a>
  405188:	2f10      	cmp	r7, #16
  40518a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40518c:	4d8e      	ldr	r5, [pc, #568]	; (4053c8 <_svfprintf_r+0x56c>)
  40518e:	dd27      	ble.n	4051e0 <_svfprintf_r+0x384>
  405190:	4642      	mov	r2, r8
  405192:	4621      	mov	r1, r4
  405194:	46b0      	mov	r8, r6
  405196:	f04f 0b10 	mov.w	fp, #16
  40519a:	462e      	mov	r6, r5
  40519c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40519e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4051a0:	e004      	b.n	4051ac <_svfprintf_r+0x350>
  4051a2:	3f10      	subs	r7, #16
  4051a4:	2f10      	cmp	r7, #16
  4051a6:	f102 0208 	add.w	r2, r2, #8
  4051aa:	dd15      	ble.n	4051d8 <_svfprintf_r+0x37c>
  4051ac:	3301      	adds	r3, #1
  4051ae:	3110      	adds	r1, #16
  4051b0:	2b07      	cmp	r3, #7
  4051b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4051b4:	9326      	str	r3, [sp, #152]	; 0x98
  4051b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4051ba:	ddf2      	ble.n	4051a2 <_svfprintf_r+0x346>
  4051bc:	aa25      	add	r2, sp, #148	; 0x94
  4051be:	4629      	mov	r1, r5
  4051c0:	4620      	mov	r0, r4
  4051c2:	f004 fa6d 	bl	4096a0 <__ssprint_r>
  4051c6:	2800      	cmp	r0, #0
  4051c8:	f47f af1a 	bne.w	405000 <_svfprintf_r+0x1a4>
  4051cc:	3f10      	subs	r7, #16
  4051ce:	2f10      	cmp	r7, #16
  4051d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4051d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051d4:	464a      	mov	r2, r9
  4051d6:	dce9      	bgt.n	4051ac <_svfprintf_r+0x350>
  4051d8:	4635      	mov	r5, r6
  4051da:	460c      	mov	r4, r1
  4051dc:	4646      	mov	r6, r8
  4051de:	4690      	mov	r8, r2
  4051e0:	3301      	adds	r3, #1
  4051e2:	443c      	add	r4, r7
  4051e4:	2b07      	cmp	r3, #7
  4051e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4051e8:	9326      	str	r3, [sp, #152]	; 0x98
  4051ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051ee:	f300 8381 	bgt.w	4058f4 <_svfprintf_r+0xa98>
  4051f2:	f108 0808 	add.w	r8, r8, #8
  4051f6:	9b07      	ldr	r3, [sp, #28]
  4051f8:	05df      	lsls	r7, r3, #23
  4051fa:	f100 8268 	bmi.w	4056ce <_svfprintf_r+0x872>
  4051fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405200:	990e      	ldr	r1, [sp, #56]	; 0x38
  405202:	f8c8 6000 	str.w	r6, [r8]
  405206:	3301      	adds	r3, #1
  405208:	440c      	add	r4, r1
  40520a:	2b07      	cmp	r3, #7
  40520c:	9427      	str	r4, [sp, #156]	; 0x9c
  40520e:	f8c8 1004 	str.w	r1, [r8, #4]
  405212:	9326      	str	r3, [sp, #152]	; 0x98
  405214:	f300 834d 	bgt.w	4058b2 <_svfprintf_r+0xa56>
  405218:	f108 0808 	add.w	r8, r8, #8
  40521c:	9b07      	ldr	r3, [sp, #28]
  40521e:	075b      	lsls	r3, r3, #29
  405220:	d53a      	bpl.n	405298 <_svfprintf_r+0x43c>
  405222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405224:	9a08      	ldr	r2, [sp, #32]
  405226:	1a9d      	subs	r5, r3, r2
  405228:	2d00      	cmp	r5, #0
  40522a:	dd35      	ble.n	405298 <_svfprintf_r+0x43c>
  40522c:	2d10      	cmp	r5, #16
  40522e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405230:	dd20      	ble.n	405274 <_svfprintf_r+0x418>
  405232:	2610      	movs	r6, #16
  405234:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405236:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40523a:	e004      	b.n	405246 <_svfprintf_r+0x3ea>
  40523c:	3d10      	subs	r5, #16
  40523e:	2d10      	cmp	r5, #16
  405240:	f108 0808 	add.w	r8, r8, #8
  405244:	dd16      	ble.n	405274 <_svfprintf_r+0x418>
  405246:	3301      	adds	r3, #1
  405248:	4a5e      	ldr	r2, [pc, #376]	; (4053c4 <_svfprintf_r+0x568>)
  40524a:	9326      	str	r3, [sp, #152]	; 0x98
  40524c:	3410      	adds	r4, #16
  40524e:	2b07      	cmp	r3, #7
  405250:	9427      	str	r4, [sp, #156]	; 0x9c
  405252:	e888 0044 	stmia.w	r8, {r2, r6}
  405256:	ddf1      	ble.n	40523c <_svfprintf_r+0x3e0>
  405258:	aa25      	add	r2, sp, #148	; 0x94
  40525a:	4659      	mov	r1, fp
  40525c:	4638      	mov	r0, r7
  40525e:	f004 fa1f 	bl	4096a0 <__ssprint_r>
  405262:	2800      	cmp	r0, #0
  405264:	f47f aecc 	bne.w	405000 <_svfprintf_r+0x1a4>
  405268:	3d10      	subs	r5, #16
  40526a:	2d10      	cmp	r5, #16
  40526c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40526e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405270:	46c8      	mov	r8, r9
  405272:	dce8      	bgt.n	405246 <_svfprintf_r+0x3ea>
  405274:	3301      	adds	r3, #1
  405276:	4a53      	ldr	r2, [pc, #332]	; (4053c4 <_svfprintf_r+0x568>)
  405278:	9326      	str	r3, [sp, #152]	; 0x98
  40527a:	442c      	add	r4, r5
  40527c:	2b07      	cmp	r3, #7
  40527e:	9427      	str	r4, [sp, #156]	; 0x9c
  405280:	e888 0024 	stmia.w	r8, {r2, r5}
  405284:	dd08      	ble.n	405298 <_svfprintf_r+0x43c>
  405286:	aa25      	add	r2, sp, #148	; 0x94
  405288:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40528a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40528c:	f004 fa08 	bl	4096a0 <__ssprint_r>
  405290:	2800      	cmp	r0, #0
  405292:	f47f aeb5 	bne.w	405000 <_svfprintf_r+0x1a4>
  405296:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405298:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40529a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40529c:	9908      	ldr	r1, [sp, #32]
  40529e:	428a      	cmp	r2, r1
  4052a0:	bfac      	ite	ge
  4052a2:	189b      	addge	r3, r3, r2
  4052a4:	185b      	addlt	r3, r3, r1
  4052a6:	9309      	str	r3, [sp, #36]	; 0x24
  4052a8:	2c00      	cmp	r4, #0
  4052aa:	f040 830d 	bne.w	4058c8 <_svfprintf_r+0xa6c>
  4052ae:	2300      	movs	r3, #0
  4052b0:	9326      	str	r3, [sp, #152]	; 0x98
  4052b2:	46c8      	mov	r8, r9
  4052b4:	e5f9      	b.n	404eaa <_svfprintf_r+0x4e>
  4052b6:	9311      	str	r3, [sp, #68]	; 0x44
  4052b8:	f01b 0320 	ands.w	r3, fp, #32
  4052bc:	f040 81e3 	bne.w	405686 <_svfprintf_r+0x82a>
  4052c0:	f01b 0210 	ands.w	r2, fp, #16
  4052c4:	f040 842e 	bne.w	405b24 <_svfprintf_r+0xcc8>
  4052c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4052cc:	f000 842a 	beq.w	405b24 <_svfprintf_r+0xcc8>
  4052d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4052d2:	4613      	mov	r3, r2
  4052d4:	460a      	mov	r2, r1
  4052d6:	3204      	adds	r2, #4
  4052d8:	880c      	ldrh	r4, [r1, #0]
  4052da:	920f      	str	r2, [sp, #60]	; 0x3c
  4052dc:	2500      	movs	r5, #0
  4052de:	e6b0      	b.n	405042 <_svfprintf_r+0x1e6>
  4052e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4052e2:	9311      	str	r3, [sp, #68]	; 0x44
  4052e4:	6816      	ldr	r6, [r2, #0]
  4052e6:	2400      	movs	r4, #0
  4052e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4052ec:	1d15      	adds	r5, r2, #4
  4052ee:	2e00      	cmp	r6, #0
  4052f0:	f000 86a7 	beq.w	406042 <_svfprintf_r+0x11e6>
  4052f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052f6:	1c53      	adds	r3, r2, #1
  4052f8:	f000 8609 	beq.w	405f0e <_svfprintf_r+0x10b2>
  4052fc:	4621      	mov	r1, r4
  4052fe:	4630      	mov	r0, r6
  405300:	f003 fc36 	bl	408b70 <memchr>
  405304:	2800      	cmp	r0, #0
  405306:	f000 86e1 	beq.w	4060cc <_svfprintf_r+0x1270>
  40530a:	1b83      	subs	r3, r0, r6
  40530c:	930e      	str	r3, [sp, #56]	; 0x38
  40530e:	940a      	str	r4, [sp, #40]	; 0x28
  405310:	950f      	str	r5, [sp, #60]	; 0x3c
  405312:	f8cd b01c 	str.w	fp, [sp, #28]
  405316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40531a:	9308      	str	r3, [sp, #32]
  40531c:	9412      	str	r4, [sp, #72]	; 0x48
  40531e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405322:	e6b3      	b.n	40508c <_svfprintf_r+0x230>
  405324:	f89a 3000 	ldrb.w	r3, [sl]
  405328:	2201      	movs	r2, #1
  40532a:	212b      	movs	r1, #43	; 0x2b
  40532c:	e5ee      	b.n	404f0c <_svfprintf_r+0xb0>
  40532e:	f04b 0b20 	orr.w	fp, fp, #32
  405332:	f89a 3000 	ldrb.w	r3, [sl]
  405336:	e5e9      	b.n	404f0c <_svfprintf_r+0xb0>
  405338:	9311      	str	r3, [sp, #68]	; 0x44
  40533a:	2a00      	cmp	r2, #0
  40533c:	f040 8795 	bne.w	40626a <_svfprintf_r+0x140e>
  405340:	4b22      	ldr	r3, [pc, #136]	; (4053cc <_svfprintf_r+0x570>)
  405342:	9318      	str	r3, [sp, #96]	; 0x60
  405344:	f01b 0f20 	tst.w	fp, #32
  405348:	f040 8111 	bne.w	40556e <_svfprintf_r+0x712>
  40534c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40534e:	f01b 0f10 	tst.w	fp, #16
  405352:	4613      	mov	r3, r2
  405354:	f040 83e1 	bne.w	405b1a <_svfprintf_r+0xcbe>
  405358:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40535c:	f000 83dd 	beq.w	405b1a <_svfprintf_r+0xcbe>
  405360:	3304      	adds	r3, #4
  405362:	8814      	ldrh	r4, [r2, #0]
  405364:	930f      	str	r3, [sp, #60]	; 0x3c
  405366:	2500      	movs	r5, #0
  405368:	f01b 0f01 	tst.w	fp, #1
  40536c:	f000 810c 	beq.w	405588 <_svfprintf_r+0x72c>
  405370:	ea54 0305 	orrs.w	r3, r4, r5
  405374:	f000 8108 	beq.w	405588 <_svfprintf_r+0x72c>
  405378:	2330      	movs	r3, #48	; 0x30
  40537a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40537e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  405382:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  405386:	f04b 0b02 	orr.w	fp, fp, #2
  40538a:	2302      	movs	r3, #2
  40538c:	e659      	b.n	405042 <_svfprintf_r+0x1e6>
  40538e:	f89a 3000 	ldrb.w	r3, [sl]
  405392:	2900      	cmp	r1, #0
  405394:	f47f adba 	bne.w	404f0c <_svfprintf_r+0xb0>
  405398:	2201      	movs	r2, #1
  40539a:	2120      	movs	r1, #32
  40539c:	e5b6      	b.n	404f0c <_svfprintf_r+0xb0>
  40539e:	f04b 0b01 	orr.w	fp, fp, #1
  4053a2:	f89a 3000 	ldrb.w	r3, [sl]
  4053a6:	e5b1      	b.n	404f0c <_svfprintf_r+0xb0>
  4053a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4053aa:	6823      	ldr	r3, [r4, #0]
  4053ac:	930d      	str	r3, [sp, #52]	; 0x34
  4053ae:	4618      	mov	r0, r3
  4053b0:	2800      	cmp	r0, #0
  4053b2:	4623      	mov	r3, r4
  4053b4:	f103 0304 	add.w	r3, r3, #4
  4053b8:	f6ff ae0a 	blt.w	404fd0 <_svfprintf_r+0x174>
  4053bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4053be:	f89a 3000 	ldrb.w	r3, [sl]
  4053c2:	e5a3      	b.n	404f0c <_svfprintf_r+0xb0>
  4053c4:	0040a11c 	.word	0x0040a11c
  4053c8:	0040a12c 	.word	0x0040a12c
  4053cc:	0040a0fc 	.word	0x0040a0fc
  4053d0:	f04b 0b10 	orr.w	fp, fp, #16
  4053d4:	f01b 0f20 	tst.w	fp, #32
  4053d8:	9311      	str	r3, [sp, #68]	; 0x44
  4053da:	f43f ae23 	beq.w	405024 <_svfprintf_r+0x1c8>
  4053de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4053e0:	3507      	adds	r5, #7
  4053e2:	f025 0307 	bic.w	r3, r5, #7
  4053e6:	f103 0208 	add.w	r2, r3, #8
  4053ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4053f0:	2301      	movs	r3, #1
  4053f2:	e626      	b.n	405042 <_svfprintf_r+0x1e6>
  4053f4:	f89a 3000 	ldrb.w	r3, [sl]
  4053f8:	2b2a      	cmp	r3, #42	; 0x2a
  4053fa:	f10a 0401 	add.w	r4, sl, #1
  4053fe:	f000 8727 	beq.w	406250 <_svfprintf_r+0x13f4>
  405402:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405406:	2809      	cmp	r0, #9
  405408:	46a2      	mov	sl, r4
  40540a:	f200 86ad 	bhi.w	406168 <_svfprintf_r+0x130c>
  40540e:	2300      	movs	r3, #0
  405410:	461c      	mov	r4, r3
  405412:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405416:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40541a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40541e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405422:	2809      	cmp	r0, #9
  405424:	d9f5      	bls.n	405412 <_svfprintf_r+0x5b6>
  405426:	940a      	str	r4, [sp, #40]	; 0x28
  405428:	e572      	b.n	404f10 <_svfprintf_r+0xb4>
  40542a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40542e:	f89a 3000 	ldrb.w	r3, [sl]
  405432:	e56b      	b.n	404f0c <_svfprintf_r+0xb0>
  405434:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  405438:	f89a 3000 	ldrb.w	r3, [sl]
  40543c:	e566      	b.n	404f0c <_svfprintf_r+0xb0>
  40543e:	f89a 3000 	ldrb.w	r3, [sl]
  405442:	2b6c      	cmp	r3, #108	; 0x6c
  405444:	bf03      	ittte	eq
  405446:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40544a:	f04b 0b20 	orreq.w	fp, fp, #32
  40544e:	f10a 0a01 	addeq.w	sl, sl, #1
  405452:	f04b 0b10 	orrne.w	fp, fp, #16
  405456:	e559      	b.n	404f0c <_svfprintf_r+0xb0>
  405458:	2a00      	cmp	r2, #0
  40545a:	f040 8711 	bne.w	406280 <_svfprintf_r+0x1424>
  40545e:	f01b 0f20 	tst.w	fp, #32
  405462:	f040 84f9 	bne.w	405e58 <_svfprintf_r+0xffc>
  405466:	f01b 0f10 	tst.w	fp, #16
  40546a:	f040 84ac 	bne.w	405dc6 <_svfprintf_r+0xf6a>
  40546e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405472:	f000 84a8 	beq.w	405dc6 <_svfprintf_r+0xf6a>
  405476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405478:	6813      	ldr	r3, [r2, #0]
  40547a:	3204      	adds	r2, #4
  40547c:	920f      	str	r2, [sp, #60]	; 0x3c
  40547e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  405482:	801a      	strh	r2, [r3, #0]
  405484:	e511      	b.n	404eaa <_svfprintf_r+0x4e>
  405486:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405488:	4bb3      	ldr	r3, [pc, #716]	; (405758 <_svfprintf_r+0x8fc>)
  40548a:	680c      	ldr	r4, [r1, #0]
  40548c:	9318      	str	r3, [sp, #96]	; 0x60
  40548e:	2230      	movs	r2, #48	; 0x30
  405490:	2378      	movs	r3, #120	; 0x78
  405492:	3104      	adds	r1, #4
  405494:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  405498:	9311      	str	r3, [sp, #68]	; 0x44
  40549a:	f04b 0b02 	orr.w	fp, fp, #2
  40549e:	910f      	str	r1, [sp, #60]	; 0x3c
  4054a0:	2500      	movs	r5, #0
  4054a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4054a6:	2302      	movs	r3, #2
  4054a8:	e5cb      	b.n	405042 <_svfprintf_r+0x1e6>
  4054aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4054ac:	9311      	str	r3, [sp, #68]	; 0x44
  4054ae:	680a      	ldr	r2, [r1, #0]
  4054b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4054b4:	2300      	movs	r3, #0
  4054b6:	460a      	mov	r2, r1
  4054b8:	461f      	mov	r7, r3
  4054ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4054be:	3204      	adds	r2, #4
  4054c0:	2301      	movs	r3, #1
  4054c2:	9308      	str	r3, [sp, #32]
  4054c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4054c8:	970a      	str	r7, [sp, #40]	; 0x28
  4054ca:	9712      	str	r7, [sp, #72]	; 0x48
  4054cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4054ce:	930e      	str	r3, [sp, #56]	; 0x38
  4054d0:	ae28      	add	r6, sp, #160	; 0xa0
  4054d2:	e5df      	b.n	405094 <_svfprintf_r+0x238>
  4054d4:	9311      	str	r3, [sp, #68]	; 0x44
  4054d6:	2a00      	cmp	r2, #0
  4054d8:	f040 86ea 	bne.w	4062b0 <_svfprintf_r+0x1454>
  4054dc:	f01b 0f20 	tst.w	fp, #32
  4054e0:	d15d      	bne.n	40559e <_svfprintf_r+0x742>
  4054e2:	f01b 0f10 	tst.w	fp, #16
  4054e6:	f040 8308 	bne.w	405afa <_svfprintf_r+0xc9e>
  4054ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4054ee:	f000 8304 	beq.w	405afa <_svfprintf_r+0xc9e>
  4054f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4054f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4054f8:	3104      	adds	r1, #4
  4054fa:	17e5      	asrs	r5, r4, #31
  4054fc:	4622      	mov	r2, r4
  4054fe:	462b      	mov	r3, r5
  405500:	910f      	str	r1, [sp, #60]	; 0x3c
  405502:	2a00      	cmp	r2, #0
  405504:	f173 0300 	sbcs.w	r3, r3, #0
  405508:	db58      	blt.n	4055bc <_svfprintf_r+0x760>
  40550a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40550c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405510:	1c4a      	adds	r2, r1, #1
  405512:	f04f 0301 	mov.w	r3, #1
  405516:	f47f ad9b 	bne.w	405050 <_svfprintf_r+0x1f4>
  40551a:	ea54 0205 	orrs.w	r2, r4, r5
  40551e:	f000 81df 	beq.w	4058e0 <_svfprintf_r+0xa84>
  405522:	f8cd b01c 	str.w	fp, [sp, #28]
  405526:	2b01      	cmp	r3, #1
  405528:	f000 827b 	beq.w	405a22 <_svfprintf_r+0xbc6>
  40552c:	2b02      	cmp	r3, #2
  40552e:	f040 8206 	bne.w	40593e <_svfprintf_r+0xae2>
  405532:	9818      	ldr	r0, [sp, #96]	; 0x60
  405534:	464e      	mov	r6, r9
  405536:	0923      	lsrs	r3, r4, #4
  405538:	f004 010f 	and.w	r1, r4, #15
  40553c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405540:	092a      	lsrs	r2, r5, #4
  405542:	461c      	mov	r4, r3
  405544:	4615      	mov	r5, r2
  405546:	5c43      	ldrb	r3, [r0, r1]
  405548:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40554c:	ea54 0305 	orrs.w	r3, r4, r5
  405550:	d1f1      	bne.n	405536 <_svfprintf_r+0x6da>
  405552:	eba9 0306 	sub.w	r3, r9, r6
  405556:	930e      	str	r3, [sp, #56]	; 0x38
  405558:	e590      	b.n	40507c <_svfprintf_r+0x220>
  40555a:	9311      	str	r3, [sp, #68]	; 0x44
  40555c:	2a00      	cmp	r2, #0
  40555e:	f040 86a3 	bne.w	4062a8 <_svfprintf_r+0x144c>
  405562:	4b7e      	ldr	r3, [pc, #504]	; (40575c <_svfprintf_r+0x900>)
  405564:	9318      	str	r3, [sp, #96]	; 0x60
  405566:	f01b 0f20 	tst.w	fp, #32
  40556a:	f43f aeef 	beq.w	40534c <_svfprintf_r+0x4f0>
  40556e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405570:	3507      	adds	r5, #7
  405572:	f025 0307 	bic.w	r3, r5, #7
  405576:	f103 0208 	add.w	r2, r3, #8
  40557a:	f01b 0f01 	tst.w	fp, #1
  40557e:	920f      	str	r2, [sp, #60]	; 0x3c
  405580:	e9d3 4500 	ldrd	r4, r5, [r3]
  405584:	f47f aef4 	bne.w	405370 <_svfprintf_r+0x514>
  405588:	2302      	movs	r3, #2
  40558a:	e55a      	b.n	405042 <_svfprintf_r+0x1e6>
  40558c:	9311      	str	r3, [sp, #68]	; 0x44
  40558e:	2a00      	cmp	r2, #0
  405590:	f040 8686 	bne.w	4062a0 <_svfprintf_r+0x1444>
  405594:	f04b 0b10 	orr.w	fp, fp, #16
  405598:	f01b 0f20 	tst.w	fp, #32
  40559c:	d0a1      	beq.n	4054e2 <_svfprintf_r+0x686>
  40559e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4055a0:	3507      	adds	r5, #7
  4055a2:	f025 0507 	bic.w	r5, r5, #7
  4055a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4055aa:	2a00      	cmp	r2, #0
  4055ac:	f105 0108 	add.w	r1, r5, #8
  4055b0:	461d      	mov	r5, r3
  4055b2:	f173 0300 	sbcs.w	r3, r3, #0
  4055b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4055b8:	4614      	mov	r4, r2
  4055ba:	daa6      	bge.n	40550a <_svfprintf_r+0x6ae>
  4055bc:	272d      	movs	r7, #45	; 0x2d
  4055be:	4264      	negs	r4, r4
  4055c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4055c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4055c8:	2301      	movs	r3, #1
  4055ca:	e53d      	b.n	405048 <_svfprintf_r+0x1ec>
  4055cc:	9311      	str	r3, [sp, #68]	; 0x44
  4055ce:	2a00      	cmp	r2, #0
  4055d0:	f040 8662 	bne.w	406298 <_svfprintf_r+0x143c>
  4055d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4055d6:	3507      	adds	r5, #7
  4055d8:	f025 0307 	bic.w	r3, r5, #7
  4055dc:	f103 0208 	add.w	r2, r3, #8
  4055e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4055e2:	681a      	ldr	r2, [r3, #0]
  4055e4:	9215      	str	r2, [sp, #84]	; 0x54
  4055e6:	685b      	ldr	r3, [r3, #4]
  4055e8:	9314      	str	r3, [sp, #80]	; 0x50
  4055ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4055ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4055f2:	4628      	mov	r0, r5
  4055f4:	4621      	mov	r1, r4
  4055f6:	f04f 32ff 	mov.w	r2, #4294967295
  4055fa:	4b59      	ldr	r3, [pc, #356]	; (405760 <_svfprintf_r+0x904>)
  4055fc:	f004 fb54 	bl	409ca8 <__aeabi_dcmpun>
  405600:	2800      	cmp	r0, #0
  405602:	f040 834a 	bne.w	405c9a <_svfprintf_r+0xe3e>
  405606:	4628      	mov	r0, r5
  405608:	4621      	mov	r1, r4
  40560a:	f04f 32ff 	mov.w	r2, #4294967295
  40560e:	4b54      	ldr	r3, [pc, #336]	; (405760 <_svfprintf_r+0x904>)
  405610:	f004 fb2c 	bl	409c6c <__aeabi_dcmple>
  405614:	2800      	cmp	r0, #0
  405616:	f040 8340 	bne.w	405c9a <_svfprintf_r+0xe3e>
  40561a:	a815      	add	r0, sp, #84	; 0x54
  40561c:	c80d      	ldmia	r0, {r0, r2, r3}
  40561e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405620:	f004 fb1a 	bl	409c58 <__aeabi_dcmplt>
  405624:	2800      	cmp	r0, #0
  405626:	f040 8530 	bne.w	40608a <_svfprintf_r+0x122e>
  40562a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40562e:	4e4d      	ldr	r6, [pc, #308]	; (405764 <_svfprintf_r+0x908>)
  405630:	4b4d      	ldr	r3, [pc, #308]	; (405768 <_svfprintf_r+0x90c>)
  405632:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  405636:	9007      	str	r0, [sp, #28]
  405638:	9811      	ldr	r0, [sp, #68]	; 0x44
  40563a:	2203      	movs	r2, #3
  40563c:	2100      	movs	r1, #0
  40563e:	9208      	str	r2, [sp, #32]
  405640:	910a      	str	r1, [sp, #40]	; 0x28
  405642:	2847      	cmp	r0, #71	; 0x47
  405644:	bfd8      	it	le
  405646:	461e      	movle	r6, r3
  405648:	920e      	str	r2, [sp, #56]	; 0x38
  40564a:	9112      	str	r1, [sp, #72]	; 0x48
  40564c:	e51e      	b.n	40508c <_svfprintf_r+0x230>
  40564e:	f04b 0b08 	orr.w	fp, fp, #8
  405652:	f89a 3000 	ldrb.w	r3, [sl]
  405656:	e459      	b.n	404f0c <_svfprintf_r+0xb0>
  405658:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40565c:	2300      	movs	r3, #0
  40565e:	461c      	mov	r4, r3
  405660:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405664:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405668:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40566c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405670:	2809      	cmp	r0, #9
  405672:	d9f5      	bls.n	405660 <_svfprintf_r+0x804>
  405674:	940d      	str	r4, [sp, #52]	; 0x34
  405676:	e44b      	b.n	404f10 <_svfprintf_r+0xb4>
  405678:	f04b 0b10 	orr.w	fp, fp, #16
  40567c:	9311      	str	r3, [sp, #68]	; 0x44
  40567e:	f01b 0320 	ands.w	r3, fp, #32
  405682:	f43f ae1d 	beq.w	4052c0 <_svfprintf_r+0x464>
  405686:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405688:	3507      	adds	r5, #7
  40568a:	f025 0307 	bic.w	r3, r5, #7
  40568e:	f103 0208 	add.w	r2, r3, #8
  405692:	e9d3 4500 	ldrd	r4, r5, [r3]
  405696:	920f      	str	r2, [sp, #60]	; 0x3c
  405698:	2300      	movs	r3, #0
  40569a:	e4d2      	b.n	405042 <_svfprintf_r+0x1e6>
  40569c:	9311      	str	r3, [sp, #68]	; 0x44
  40569e:	2a00      	cmp	r2, #0
  4056a0:	f040 85e7 	bne.w	406272 <_svfprintf_r+0x1416>
  4056a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056a6:	2a00      	cmp	r2, #0
  4056a8:	f43f aca3 	beq.w	404ff2 <_svfprintf_r+0x196>
  4056ac:	2300      	movs	r3, #0
  4056ae:	2101      	movs	r1, #1
  4056b0:	461f      	mov	r7, r3
  4056b2:	9108      	str	r1, [sp, #32]
  4056b4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4056b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4056bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4056c0:	930a      	str	r3, [sp, #40]	; 0x28
  4056c2:	9312      	str	r3, [sp, #72]	; 0x48
  4056c4:	910e      	str	r1, [sp, #56]	; 0x38
  4056c6:	ae28      	add	r6, sp, #160	; 0xa0
  4056c8:	e4e4      	b.n	405094 <_svfprintf_r+0x238>
  4056ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056cc:	e534      	b.n	405138 <_svfprintf_r+0x2dc>
  4056ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056d0:	2b65      	cmp	r3, #101	; 0x65
  4056d2:	f340 80a7 	ble.w	405824 <_svfprintf_r+0x9c8>
  4056d6:	a815      	add	r0, sp, #84	; 0x54
  4056d8:	c80d      	ldmia	r0, {r0, r2, r3}
  4056da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4056dc:	f004 fab2 	bl	409c44 <__aeabi_dcmpeq>
  4056e0:	2800      	cmp	r0, #0
  4056e2:	f000 8150 	beq.w	405986 <_svfprintf_r+0xb2a>
  4056e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4056e8:	4a20      	ldr	r2, [pc, #128]	; (40576c <_svfprintf_r+0x910>)
  4056ea:	f8c8 2000 	str.w	r2, [r8]
  4056ee:	3301      	adds	r3, #1
  4056f0:	3401      	adds	r4, #1
  4056f2:	2201      	movs	r2, #1
  4056f4:	2b07      	cmp	r3, #7
  4056f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4056f8:	9326      	str	r3, [sp, #152]	; 0x98
  4056fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4056fe:	f300 836a 	bgt.w	405dd6 <_svfprintf_r+0xf7a>
  405702:	f108 0808 	add.w	r8, r8, #8
  405706:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40570a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40570c:	4293      	cmp	r3, r2
  40570e:	db03      	blt.n	405718 <_svfprintf_r+0x8bc>
  405710:	9b07      	ldr	r3, [sp, #28]
  405712:	07dd      	lsls	r5, r3, #31
  405714:	f57f ad82 	bpl.w	40521c <_svfprintf_r+0x3c0>
  405718:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40571a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40571c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40571e:	f8c8 2000 	str.w	r2, [r8]
  405722:	3301      	adds	r3, #1
  405724:	440c      	add	r4, r1
  405726:	2b07      	cmp	r3, #7
  405728:	f8c8 1004 	str.w	r1, [r8, #4]
  40572c:	9427      	str	r4, [sp, #156]	; 0x9c
  40572e:	9326      	str	r3, [sp, #152]	; 0x98
  405730:	f300 839e 	bgt.w	405e70 <_svfprintf_r+0x1014>
  405734:	f108 0808 	add.w	r8, r8, #8
  405738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40573a:	1e5e      	subs	r6, r3, #1
  40573c:	2e00      	cmp	r6, #0
  40573e:	f77f ad6d 	ble.w	40521c <_svfprintf_r+0x3c0>
  405742:	2e10      	cmp	r6, #16
  405744:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405746:	4d0a      	ldr	r5, [pc, #40]	; (405770 <_svfprintf_r+0x914>)
  405748:	f340 81f5 	ble.w	405b36 <_svfprintf_r+0xcda>
  40574c:	4622      	mov	r2, r4
  40574e:	2710      	movs	r7, #16
  405750:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405754:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405756:	e013      	b.n	405780 <_svfprintf_r+0x924>
  405758:	0040a0fc 	.word	0x0040a0fc
  40575c:	0040a0e8 	.word	0x0040a0e8
  405760:	7fefffff 	.word	0x7fefffff
  405764:	0040a0dc 	.word	0x0040a0dc
  405768:	0040a0d8 	.word	0x0040a0d8
  40576c:	0040a118 	.word	0x0040a118
  405770:	0040a12c 	.word	0x0040a12c
  405774:	f108 0808 	add.w	r8, r8, #8
  405778:	3e10      	subs	r6, #16
  40577a:	2e10      	cmp	r6, #16
  40577c:	f340 81da 	ble.w	405b34 <_svfprintf_r+0xcd8>
  405780:	3301      	adds	r3, #1
  405782:	3210      	adds	r2, #16
  405784:	2b07      	cmp	r3, #7
  405786:	9227      	str	r2, [sp, #156]	; 0x9c
  405788:	9326      	str	r3, [sp, #152]	; 0x98
  40578a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40578e:	ddf1      	ble.n	405774 <_svfprintf_r+0x918>
  405790:	aa25      	add	r2, sp, #148	; 0x94
  405792:	4621      	mov	r1, r4
  405794:	4658      	mov	r0, fp
  405796:	f003 ff83 	bl	4096a0 <__ssprint_r>
  40579a:	2800      	cmp	r0, #0
  40579c:	f47f ac30 	bne.w	405000 <_svfprintf_r+0x1a4>
  4057a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4057a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057a4:	46c8      	mov	r8, r9
  4057a6:	e7e7      	b.n	405778 <_svfprintf_r+0x91c>
  4057a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4057aa:	9a08      	ldr	r2, [sp, #32]
  4057ac:	1a9f      	subs	r7, r3, r2
  4057ae:	2f00      	cmp	r7, #0
  4057b0:	f77f ace5 	ble.w	40517e <_svfprintf_r+0x322>
  4057b4:	2f10      	cmp	r7, #16
  4057b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057b8:	4db6      	ldr	r5, [pc, #728]	; (405a94 <_svfprintf_r+0xc38>)
  4057ba:	dd27      	ble.n	40580c <_svfprintf_r+0x9b0>
  4057bc:	4642      	mov	r2, r8
  4057be:	4621      	mov	r1, r4
  4057c0:	46b0      	mov	r8, r6
  4057c2:	f04f 0b10 	mov.w	fp, #16
  4057c6:	462e      	mov	r6, r5
  4057c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4057ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4057cc:	e004      	b.n	4057d8 <_svfprintf_r+0x97c>
  4057ce:	3f10      	subs	r7, #16
  4057d0:	2f10      	cmp	r7, #16
  4057d2:	f102 0208 	add.w	r2, r2, #8
  4057d6:	dd15      	ble.n	405804 <_svfprintf_r+0x9a8>
  4057d8:	3301      	adds	r3, #1
  4057da:	3110      	adds	r1, #16
  4057dc:	2b07      	cmp	r3, #7
  4057de:	9127      	str	r1, [sp, #156]	; 0x9c
  4057e0:	9326      	str	r3, [sp, #152]	; 0x98
  4057e2:	e882 0840 	stmia.w	r2, {r6, fp}
  4057e6:	ddf2      	ble.n	4057ce <_svfprintf_r+0x972>
  4057e8:	aa25      	add	r2, sp, #148	; 0x94
  4057ea:	4629      	mov	r1, r5
  4057ec:	4620      	mov	r0, r4
  4057ee:	f003 ff57 	bl	4096a0 <__ssprint_r>
  4057f2:	2800      	cmp	r0, #0
  4057f4:	f47f ac04 	bne.w	405000 <_svfprintf_r+0x1a4>
  4057f8:	3f10      	subs	r7, #16
  4057fa:	2f10      	cmp	r7, #16
  4057fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4057fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405800:	464a      	mov	r2, r9
  405802:	dce9      	bgt.n	4057d8 <_svfprintf_r+0x97c>
  405804:	4635      	mov	r5, r6
  405806:	460c      	mov	r4, r1
  405808:	4646      	mov	r6, r8
  40580a:	4690      	mov	r8, r2
  40580c:	3301      	adds	r3, #1
  40580e:	443c      	add	r4, r7
  405810:	2b07      	cmp	r3, #7
  405812:	9427      	str	r4, [sp, #156]	; 0x9c
  405814:	9326      	str	r3, [sp, #152]	; 0x98
  405816:	e888 00a0 	stmia.w	r8, {r5, r7}
  40581a:	f300 8232 	bgt.w	405c82 <_svfprintf_r+0xe26>
  40581e:	f108 0808 	add.w	r8, r8, #8
  405822:	e4ac      	b.n	40517e <_svfprintf_r+0x322>
  405824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405826:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405828:	2b01      	cmp	r3, #1
  40582a:	f340 81fe 	ble.w	405c2a <_svfprintf_r+0xdce>
  40582e:	3701      	adds	r7, #1
  405830:	3401      	adds	r4, #1
  405832:	2301      	movs	r3, #1
  405834:	2f07      	cmp	r7, #7
  405836:	9427      	str	r4, [sp, #156]	; 0x9c
  405838:	9726      	str	r7, [sp, #152]	; 0x98
  40583a:	f8c8 6000 	str.w	r6, [r8]
  40583e:	f8c8 3004 	str.w	r3, [r8, #4]
  405842:	f300 8203 	bgt.w	405c4c <_svfprintf_r+0xdf0>
  405846:	f108 0808 	add.w	r8, r8, #8
  40584a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40584c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40584e:	f8c8 3000 	str.w	r3, [r8]
  405852:	3701      	adds	r7, #1
  405854:	4414      	add	r4, r2
  405856:	2f07      	cmp	r7, #7
  405858:	9427      	str	r4, [sp, #156]	; 0x9c
  40585a:	9726      	str	r7, [sp, #152]	; 0x98
  40585c:	f8c8 2004 	str.w	r2, [r8, #4]
  405860:	f300 8200 	bgt.w	405c64 <_svfprintf_r+0xe08>
  405864:	f108 0808 	add.w	r8, r8, #8
  405868:	a815      	add	r0, sp, #84	; 0x54
  40586a:	c80d      	ldmia	r0, {r0, r2, r3}
  40586c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40586e:	f004 f9e9 	bl	409c44 <__aeabi_dcmpeq>
  405872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405874:	2800      	cmp	r0, #0
  405876:	f040 8101 	bne.w	405a7c <_svfprintf_r+0xc20>
  40587a:	3b01      	subs	r3, #1
  40587c:	3701      	adds	r7, #1
  40587e:	3601      	adds	r6, #1
  405880:	441c      	add	r4, r3
  405882:	2f07      	cmp	r7, #7
  405884:	9726      	str	r7, [sp, #152]	; 0x98
  405886:	9427      	str	r4, [sp, #156]	; 0x9c
  405888:	f8c8 6000 	str.w	r6, [r8]
  40588c:	f8c8 3004 	str.w	r3, [r8, #4]
  405890:	f300 8127 	bgt.w	405ae2 <_svfprintf_r+0xc86>
  405894:	f108 0808 	add.w	r8, r8, #8
  405898:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40589a:	f8c8 2004 	str.w	r2, [r8, #4]
  40589e:	3701      	adds	r7, #1
  4058a0:	4414      	add	r4, r2
  4058a2:	ab21      	add	r3, sp, #132	; 0x84
  4058a4:	2f07      	cmp	r7, #7
  4058a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4058a8:	9726      	str	r7, [sp, #152]	; 0x98
  4058aa:	f8c8 3000 	str.w	r3, [r8]
  4058ae:	f77f acb3 	ble.w	405218 <_svfprintf_r+0x3bc>
  4058b2:	aa25      	add	r2, sp, #148	; 0x94
  4058b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058b8:	f003 fef2 	bl	4096a0 <__ssprint_r>
  4058bc:	2800      	cmp	r0, #0
  4058be:	f47f ab9f 	bne.w	405000 <_svfprintf_r+0x1a4>
  4058c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058c4:	46c8      	mov	r8, r9
  4058c6:	e4a9      	b.n	40521c <_svfprintf_r+0x3c0>
  4058c8:	aa25      	add	r2, sp, #148	; 0x94
  4058ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058ce:	f003 fee7 	bl	4096a0 <__ssprint_r>
  4058d2:	2800      	cmp	r0, #0
  4058d4:	f43f aceb 	beq.w	4052ae <_svfprintf_r+0x452>
  4058d8:	f7ff bb92 	b.w	405000 <_svfprintf_r+0x1a4>
  4058dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4058e0:	2b01      	cmp	r3, #1
  4058e2:	f000 8134 	beq.w	405b4e <_svfprintf_r+0xcf2>
  4058e6:	2b02      	cmp	r3, #2
  4058e8:	d125      	bne.n	405936 <_svfprintf_r+0xada>
  4058ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4058ee:	2400      	movs	r4, #0
  4058f0:	2500      	movs	r5, #0
  4058f2:	e61e      	b.n	405532 <_svfprintf_r+0x6d6>
  4058f4:	aa25      	add	r2, sp, #148	; 0x94
  4058f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058fa:	f003 fed1 	bl	4096a0 <__ssprint_r>
  4058fe:	2800      	cmp	r0, #0
  405900:	f47f ab7e 	bne.w	405000 <_svfprintf_r+0x1a4>
  405904:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405906:	46c8      	mov	r8, r9
  405908:	e475      	b.n	4051f6 <_svfprintf_r+0x39a>
  40590a:	aa25      	add	r2, sp, #148	; 0x94
  40590c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40590e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405910:	f003 fec6 	bl	4096a0 <__ssprint_r>
  405914:	2800      	cmp	r0, #0
  405916:	f47f ab73 	bne.w	405000 <_svfprintf_r+0x1a4>
  40591a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40591c:	46c8      	mov	r8, r9
  40591e:	e41b      	b.n	405158 <_svfprintf_r+0x2fc>
  405920:	aa25      	add	r2, sp, #148	; 0x94
  405922:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405924:	980c      	ldr	r0, [sp, #48]	; 0x30
  405926:	f003 febb 	bl	4096a0 <__ssprint_r>
  40592a:	2800      	cmp	r0, #0
  40592c:	f47f ab68 	bne.w	405000 <_svfprintf_r+0x1a4>
  405930:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405932:	46c8      	mov	r8, r9
  405934:	e420      	b.n	405178 <_svfprintf_r+0x31c>
  405936:	f8cd b01c 	str.w	fp, [sp, #28]
  40593a:	2400      	movs	r4, #0
  40593c:	2500      	movs	r5, #0
  40593e:	4649      	mov	r1, r9
  405940:	e000      	b.n	405944 <_svfprintf_r+0xae8>
  405942:	4631      	mov	r1, r6
  405944:	08e2      	lsrs	r2, r4, #3
  405946:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40594a:	08e8      	lsrs	r0, r5, #3
  40594c:	f004 0307 	and.w	r3, r4, #7
  405950:	4605      	mov	r5, r0
  405952:	4614      	mov	r4, r2
  405954:	3330      	adds	r3, #48	; 0x30
  405956:	ea54 0205 	orrs.w	r2, r4, r5
  40595a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40595e:	f101 36ff 	add.w	r6, r1, #4294967295
  405962:	d1ee      	bne.n	405942 <_svfprintf_r+0xae6>
  405964:	9a07      	ldr	r2, [sp, #28]
  405966:	07d2      	lsls	r2, r2, #31
  405968:	f57f adf3 	bpl.w	405552 <_svfprintf_r+0x6f6>
  40596c:	2b30      	cmp	r3, #48	; 0x30
  40596e:	f43f adf0 	beq.w	405552 <_svfprintf_r+0x6f6>
  405972:	3902      	subs	r1, #2
  405974:	2330      	movs	r3, #48	; 0x30
  405976:	f806 3c01 	strb.w	r3, [r6, #-1]
  40597a:	eba9 0301 	sub.w	r3, r9, r1
  40597e:	930e      	str	r3, [sp, #56]	; 0x38
  405980:	460e      	mov	r6, r1
  405982:	f7ff bb7b 	b.w	40507c <_svfprintf_r+0x220>
  405986:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405988:	2900      	cmp	r1, #0
  40598a:	f340 822e 	ble.w	405dea <_svfprintf_r+0xf8e>
  40598e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405992:	4293      	cmp	r3, r2
  405994:	bfa8      	it	ge
  405996:	4613      	movge	r3, r2
  405998:	2b00      	cmp	r3, #0
  40599a:	461f      	mov	r7, r3
  40599c:	dd0d      	ble.n	4059ba <_svfprintf_r+0xb5e>
  40599e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059a0:	f8c8 6000 	str.w	r6, [r8]
  4059a4:	3301      	adds	r3, #1
  4059a6:	443c      	add	r4, r7
  4059a8:	2b07      	cmp	r3, #7
  4059aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4059ac:	f8c8 7004 	str.w	r7, [r8, #4]
  4059b0:	9326      	str	r3, [sp, #152]	; 0x98
  4059b2:	f300 831f 	bgt.w	405ff4 <_svfprintf_r+0x1198>
  4059b6:	f108 0808 	add.w	r8, r8, #8
  4059ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4059bc:	2f00      	cmp	r7, #0
  4059be:	bfa8      	it	ge
  4059c0:	1bdb      	subge	r3, r3, r7
  4059c2:	2b00      	cmp	r3, #0
  4059c4:	461f      	mov	r7, r3
  4059c6:	f340 80d6 	ble.w	405b76 <_svfprintf_r+0xd1a>
  4059ca:	2f10      	cmp	r7, #16
  4059cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059ce:	4d31      	ldr	r5, [pc, #196]	; (405a94 <_svfprintf_r+0xc38>)
  4059d0:	f340 81ed 	ble.w	405dae <_svfprintf_r+0xf52>
  4059d4:	4642      	mov	r2, r8
  4059d6:	4621      	mov	r1, r4
  4059d8:	46b0      	mov	r8, r6
  4059da:	f04f 0b10 	mov.w	fp, #16
  4059de:	462e      	mov	r6, r5
  4059e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4059e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4059e4:	e004      	b.n	4059f0 <_svfprintf_r+0xb94>
  4059e6:	3208      	adds	r2, #8
  4059e8:	3f10      	subs	r7, #16
  4059ea:	2f10      	cmp	r7, #16
  4059ec:	f340 81db 	ble.w	405da6 <_svfprintf_r+0xf4a>
  4059f0:	3301      	adds	r3, #1
  4059f2:	3110      	adds	r1, #16
  4059f4:	2b07      	cmp	r3, #7
  4059f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4059f8:	9326      	str	r3, [sp, #152]	; 0x98
  4059fa:	e882 0840 	stmia.w	r2, {r6, fp}
  4059fe:	ddf2      	ble.n	4059e6 <_svfprintf_r+0xb8a>
  405a00:	aa25      	add	r2, sp, #148	; 0x94
  405a02:	4629      	mov	r1, r5
  405a04:	4620      	mov	r0, r4
  405a06:	f003 fe4b 	bl	4096a0 <__ssprint_r>
  405a0a:	2800      	cmp	r0, #0
  405a0c:	f47f aaf8 	bne.w	405000 <_svfprintf_r+0x1a4>
  405a10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a14:	464a      	mov	r2, r9
  405a16:	e7e7      	b.n	4059e8 <_svfprintf_r+0xb8c>
  405a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a1a:	930e      	str	r3, [sp, #56]	; 0x38
  405a1c:	464e      	mov	r6, r9
  405a1e:	f7ff bb2d 	b.w	40507c <_svfprintf_r+0x220>
  405a22:	2d00      	cmp	r5, #0
  405a24:	bf08      	it	eq
  405a26:	2c0a      	cmpeq	r4, #10
  405a28:	f0c0 808f 	bcc.w	405b4a <_svfprintf_r+0xcee>
  405a2c:	464e      	mov	r6, r9
  405a2e:	4620      	mov	r0, r4
  405a30:	4629      	mov	r1, r5
  405a32:	220a      	movs	r2, #10
  405a34:	2300      	movs	r3, #0
  405a36:	f004 f94d 	bl	409cd4 <__aeabi_uldivmod>
  405a3a:	3230      	adds	r2, #48	; 0x30
  405a3c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  405a40:	4620      	mov	r0, r4
  405a42:	4629      	mov	r1, r5
  405a44:	2300      	movs	r3, #0
  405a46:	220a      	movs	r2, #10
  405a48:	f004 f944 	bl	409cd4 <__aeabi_uldivmod>
  405a4c:	4604      	mov	r4, r0
  405a4e:	460d      	mov	r5, r1
  405a50:	ea54 0305 	orrs.w	r3, r4, r5
  405a54:	d1eb      	bne.n	405a2e <_svfprintf_r+0xbd2>
  405a56:	eba9 0306 	sub.w	r3, r9, r6
  405a5a:	930e      	str	r3, [sp, #56]	; 0x38
  405a5c:	f7ff bb0e 	b.w	40507c <_svfprintf_r+0x220>
  405a60:	aa25      	add	r2, sp, #148	; 0x94
  405a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a64:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a66:	f003 fe1b 	bl	4096a0 <__ssprint_r>
  405a6a:	2800      	cmp	r0, #0
  405a6c:	f47f aac8 	bne.w	405000 <_svfprintf_r+0x1a4>
  405a70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405a74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405a76:	46c8      	mov	r8, r9
  405a78:	f7ff bb5e 	b.w	405138 <_svfprintf_r+0x2dc>
  405a7c:	1e5e      	subs	r6, r3, #1
  405a7e:	2e00      	cmp	r6, #0
  405a80:	f77f af0a 	ble.w	405898 <_svfprintf_r+0xa3c>
  405a84:	2e10      	cmp	r6, #16
  405a86:	4d03      	ldr	r5, [pc, #12]	; (405a94 <_svfprintf_r+0xc38>)
  405a88:	dd22      	ble.n	405ad0 <_svfprintf_r+0xc74>
  405a8a:	4622      	mov	r2, r4
  405a8c:	f04f 0b10 	mov.w	fp, #16
  405a90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405a92:	e006      	b.n	405aa2 <_svfprintf_r+0xc46>
  405a94:	0040a12c 	.word	0x0040a12c
  405a98:	3e10      	subs	r6, #16
  405a9a:	2e10      	cmp	r6, #16
  405a9c:	f108 0808 	add.w	r8, r8, #8
  405aa0:	dd15      	ble.n	405ace <_svfprintf_r+0xc72>
  405aa2:	3701      	adds	r7, #1
  405aa4:	3210      	adds	r2, #16
  405aa6:	2f07      	cmp	r7, #7
  405aa8:	9227      	str	r2, [sp, #156]	; 0x9c
  405aaa:	9726      	str	r7, [sp, #152]	; 0x98
  405aac:	e888 0820 	stmia.w	r8, {r5, fp}
  405ab0:	ddf2      	ble.n	405a98 <_svfprintf_r+0xc3c>
  405ab2:	aa25      	add	r2, sp, #148	; 0x94
  405ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ab6:	4620      	mov	r0, r4
  405ab8:	f003 fdf2 	bl	4096a0 <__ssprint_r>
  405abc:	2800      	cmp	r0, #0
  405abe:	f47f aa9f 	bne.w	405000 <_svfprintf_r+0x1a4>
  405ac2:	3e10      	subs	r6, #16
  405ac4:	2e10      	cmp	r6, #16
  405ac6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405ac8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405aca:	46c8      	mov	r8, r9
  405acc:	dce9      	bgt.n	405aa2 <_svfprintf_r+0xc46>
  405ace:	4614      	mov	r4, r2
  405ad0:	3701      	adds	r7, #1
  405ad2:	4434      	add	r4, r6
  405ad4:	2f07      	cmp	r7, #7
  405ad6:	9427      	str	r4, [sp, #156]	; 0x9c
  405ad8:	9726      	str	r7, [sp, #152]	; 0x98
  405ada:	e888 0060 	stmia.w	r8, {r5, r6}
  405ade:	f77f aed9 	ble.w	405894 <_svfprintf_r+0xa38>
  405ae2:	aa25      	add	r2, sp, #148	; 0x94
  405ae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ae8:	f003 fdda 	bl	4096a0 <__ssprint_r>
  405aec:	2800      	cmp	r0, #0
  405aee:	f47f aa87 	bne.w	405000 <_svfprintf_r+0x1a4>
  405af2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405af4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405af6:	46c8      	mov	r8, r9
  405af8:	e6ce      	b.n	405898 <_svfprintf_r+0xa3c>
  405afa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405afc:	6814      	ldr	r4, [r2, #0]
  405afe:	4613      	mov	r3, r2
  405b00:	3304      	adds	r3, #4
  405b02:	17e5      	asrs	r5, r4, #31
  405b04:	930f      	str	r3, [sp, #60]	; 0x3c
  405b06:	4622      	mov	r2, r4
  405b08:	462b      	mov	r3, r5
  405b0a:	e4fa      	b.n	405502 <_svfprintf_r+0x6a6>
  405b0c:	3204      	adds	r2, #4
  405b0e:	681c      	ldr	r4, [r3, #0]
  405b10:	920f      	str	r2, [sp, #60]	; 0x3c
  405b12:	2301      	movs	r3, #1
  405b14:	2500      	movs	r5, #0
  405b16:	f7ff ba94 	b.w	405042 <_svfprintf_r+0x1e6>
  405b1a:	681c      	ldr	r4, [r3, #0]
  405b1c:	3304      	adds	r3, #4
  405b1e:	930f      	str	r3, [sp, #60]	; 0x3c
  405b20:	2500      	movs	r5, #0
  405b22:	e421      	b.n	405368 <_svfprintf_r+0x50c>
  405b24:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405b26:	460a      	mov	r2, r1
  405b28:	3204      	adds	r2, #4
  405b2a:	680c      	ldr	r4, [r1, #0]
  405b2c:	920f      	str	r2, [sp, #60]	; 0x3c
  405b2e:	2500      	movs	r5, #0
  405b30:	f7ff ba87 	b.w	405042 <_svfprintf_r+0x1e6>
  405b34:	4614      	mov	r4, r2
  405b36:	3301      	adds	r3, #1
  405b38:	4434      	add	r4, r6
  405b3a:	2b07      	cmp	r3, #7
  405b3c:	9427      	str	r4, [sp, #156]	; 0x9c
  405b3e:	9326      	str	r3, [sp, #152]	; 0x98
  405b40:	e888 0060 	stmia.w	r8, {r5, r6}
  405b44:	f77f ab68 	ble.w	405218 <_svfprintf_r+0x3bc>
  405b48:	e6b3      	b.n	4058b2 <_svfprintf_r+0xa56>
  405b4a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405b4e:	f8cd b01c 	str.w	fp, [sp, #28]
  405b52:	ae42      	add	r6, sp, #264	; 0x108
  405b54:	3430      	adds	r4, #48	; 0x30
  405b56:	2301      	movs	r3, #1
  405b58:	f806 4d41 	strb.w	r4, [r6, #-65]!
  405b5c:	930e      	str	r3, [sp, #56]	; 0x38
  405b5e:	f7ff ba8d 	b.w	40507c <_svfprintf_r+0x220>
  405b62:	aa25      	add	r2, sp, #148	; 0x94
  405b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b66:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b68:	f003 fd9a 	bl	4096a0 <__ssprint_r>
  405b6c:	2800      	cmp	r0, #0
  405b6e:	f47f aa47 	bne.w	405000 <_svfprintf_r+0x1a4>
  405b72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405b74:	46c8      	mov	r8, r9
  405b76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b7a:	429a      	cmp	r2, r3
  405b7c:	db44      	blt.n	405c08 <_svfprintf_r+0xdac>
  405b7e:	9b07      	ldr	r3, [sp, #28]
  405b80:	07d9      	lsls	r1, r3, #31
  405b82:	d441      	bmi.n	405c08 <_svfprintf_r+0xdac>
  405b84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405b86:	9812      	ldr	r0, [sp, #72]	; 0x48
  405b88:	1a9a      	subs	r2, r3, r2
  405b8a:	1a1d      	subs	r5, r3, r0
  405b8c:	4295      	cmp	r5, r2
  405b8e:	bfa8      	it	ge
  405b90:	4615      	movge	r5, r2
  405b92:	2d00      	cmp	r5, #0
  405b94:	dd0e      	ble.n	405bb4 <_svfprintf_r+0xd58>
  405b96:	9926      	ldr	r1, [sp, #152]	; 0x98
  405b98:	f8c8 5004 	str.w	r5, [r8, #4]
  405b9c:	3101      	adds	r1, #1
  405b9e:	4406      	add	r6, r0
  405ba0:	442c      	add	r4, r5
  405ba2:	2907      	cmp	r1, #7
  405ba4:	f8c8 6000 	str.w	r6, [r8]
  405ba8:	9427      	str	r4, [sp, #156]	; 0x9c
  405baa:	9126      	str	r1, [sp, #152]	; 0x98
  405bac:	f300 823b 	bgt.w	406026 <_svfprintf_r+0x11ca>
  405bb0:	f108 0808 	add.w	r8, r8, #8
  405bb4:	2d00      	cmp	r5, #0
  405bb6:	bfac      	ite	ge
  405bb8:	1b56      	subge	r6, r2, r5
  405bba:	4616      	movlt	r6, r2
  405bbc:	2e00      	cmp	r6, #0
  405bbe:	f77f ab2d 	ble.w	40521c <_svfprintf_r+0x3c0>
  405bc2:	2e10      	cmp	r6, #16
  405bc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bc6:	4db0      	ldr	r5, [pc, #704]	; (405e88 <_svfprintf_r+0x102c>)
  405bc8:	ddb5      	ble.n	405b36 <_svfprintf_r+0xcda>
  405bca:	4622      	mov	r2, r4
  405bcc:	2710      	movs	r7, #16
  405bce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405bd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405bd4:	e004      	b.n	405be0 <_svfprintf_r+0xd84>
  405bd6:	f108 0808 	add.w	r8, r8, #8
  405bda:	3e10      	subs	r6, #16
  405bdc:	2e10      	cmp	r6, #16
  405bde:	dda9      	ble.n	405b34 <_svfprintf_r+0xcd8>
  405be0:	3301      	adds	r3, #1
  405be2:	3210      	adds	r2, #16
  405be4:	2b07      	cmp	r3, #7
  405be6:	9227      	str	r2, [sp, #156]	; 0x9c
  405be8:	9326      	str	r3, [sp, #152]	; 0x98
  405bea:	e888 00a0 	stmia.w	r8, {r5, r7}
  405bee:	ddf2      	ble.n	405bd6 <_svfprintf_r+0xd7a>
  405bf0:	aa25      	add	r2, sp, #148	; 0x94
  405bf2:	4621      	mov	r1, r4
  405bf4:	4658      	mov	r0, fp
  405bf6:	f003 fd53 	bl	4096a0 <__ssprint_r>
  405bfa:	2800      	cmp	r0, #0
  405bfc:	f47f aa00 	bne.w	405000 <_svfprintf_r+0x1a4>
  405c00:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c04:	46c8      	mov	r8, r9
  405c06:	e7e8      	b.n	405bda <_svfprintf_r+0xd7e>
  405c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405c0a:	9819      	ldr	r0, [sp, #100]	; 0x64
  405c0c:	991a      	ldr	r1, [sp, #104]	; 0x68
  405c0e:	f8c8 1000 	str.w	r1, [r8]
  405c12:	3301      	adds	r3, #1
  405c14:	4404      	add	r4, r0
  405c16:	2b07      	cmp	r3, #7
  405c18:	9427      	str	r4, [sp, #156]	; 0x9c
  405c1a:	f8c8 0004 	str.w	r0, [r8, #4]
  405c1e:	9326      	str	r3, [sp, #152]	; 0x98
  405c20:	f300 81f5 	bgt.w	40600e <_svfprintf_r+0x11b2>
  405c24:	f108 0808 	add.w	r8, r8, #8
  405c28:	e7ac      	b.n	405b84 <_svfprintf_r+0xd28>
  405c2a:	9b07      	ldr	r3, [sp, #28]
  405c2c:	07da      	lsls	r2, r3, #31
  405c2e:	f53f adfe 	bmi.w	40582e <_svfprintf_r+0x9d2>
  405c32:	3701      	adds	r7, #1
  405c34:	3401      	adds	r4, #1
  405c36:	2301      	movs	r3, #1
  405c38:	2f07      	cmp	r7, #7
  405c3a:	9427      	str	r4, [sp, #156]	; 0x9c
  405c3c:	9726      	str	r7, [sp, #152]	; 0x98
  405c3e:	f8c8 6000 	str.w	r6, [r8]
  405c42:	f8c8 3004 	str.w	r3, [r8, #4]
  405c46:	f77f ae25 	ble.w	405894 <_svfprintf_r+0xa38>
  405c4a:	e74a      	b.n	405ae2 <_svfprintf_r+0xc86>
  405c4c:	aa25      	add	r2, sp, #148	; 0x94
  405c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c50:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c52:	f003 fd25 	bl	4096a0 <__ssprint_r>
  405c56:	2800      	cmp	r0, #0
  405c58:	f47f a9d2 	bne.w	405000 <_svfprintf_r+0x1a4>
  405c5c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c5e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c60:	46c8      	mov	r8, r9
  405c62:	e5f2      	b.n	40584a <_svfprintf_r+0x9ee>
  405c64:	aa25      	add	r2, sp, #148	; 0x94
  405c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c68:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c6a:	f003 fd19 	bl	4096a0 <__ssprint_r>
  405c6e:	2800      	cmp	r0, #0
  405c70:	f47f a9c6 	bne.w	405000 <_svfprintf_r+0x1a4>
  405c74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c76:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405c78:	46c8      	mov	r8, r9
  405c7a:	e5f5      	b.n	405868 <_svfprintf_r+0xa0c>
  405c7c:	464e      	mov	r6, r9
  405c7e:	f7ff b9fd 	b.w	40507c <_svfprintf_r+0x220>
  405c82:	aa25      	add	r2, sp, #148	; 0x94
  405c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c86:	980c      	ldr	r0, [sp, #48]	; 0x30
  405c88:	f003 fd0a 	bl	4096a0 <__ssprint_r>
  405c8c:	2800      	cmp	r0, #0
  405c8e:	f47f a9b7 	bne.w	405000 <_svfprintf_r+0x1a4>
  405c92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405c94:	46c8      	mov	r8, r9
  405c96:	f7ff ba72 	b.w	40517e <_svfprintf_r+0x322>
  405c9a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405c9c:	4622      	mov	r2, r4
  405c9e:	4620      	mov	r0, r4
  405ca0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405ca2:	4623      	mov	r3, r4
  405ca4:	4621      	mov	r1, r4
  405ca6:	f003 ffff 	bl	409ca8 <__aeabi_dcmpun>
  405caa:	2800      	cmp	r0, #0
  405cac:	f040 8286 	bne.w	4061bc <_svfprintf_r+0x1360>
  405cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cb2:	3301      	adds	r3, #1
  405cb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cb6:	f023 0320 	bic.w	r3, r3, #32
  405cba:	930e      	str	r3, [sp, #56]	; 0x38
  405cbc:	f000 81e2 	beq.w	406084 <_svfprintf_r+0x1228>
  405cc0:	2b47      	cmp	r3, #71	; 0x47
  405cc2:	f000 811e 	beq.w	405f02 <_svfprintf_r+0x10a6>
  405cc6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405cca:	9307      	str	r3, [sp, #28]
  405ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405cce:	1e1f      	subs	r7, r3, #0
  405cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405cd2:	9308      	str	r3, [sp, #32]
  405cd4:	bfbb      	ittet	lt
  405cd6:	463b      	movlt	r3, r7
  405cd8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405cdc:	2300      	movge	r3, #0
  405cde:	232d      	movlt	r3, #45	; 0x2d
  405ce0:	9310      	str	r3, [sp, #64]	; 0x40
  405ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ce4:	2b66      	cmp	r3, #102	; 0x66
  405ce6:	f000 81bb 	beq.w	406060 <_svfprintf_r+0x1204>
  405cea:	2b46      	cmp	r3, #70	; 0x46
  405cec:	f000 80df 	beq.w	405eae <_svfprintf_r+0x1052>
  405cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405cf2:	9a08      	ldr	r2, [sp, #32]
  405cf4:	2b45      	cmp	r3, #69	; 0x45
  405cf6:	bf0c      	ite	eq
  405cf8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405cfa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405cfc:	a823      	add	r0, sp, #140	; 0x8c
  405cfe:	a920      	add	r1, sp, #128	; 0x80
  405d00:	bf08      	it	eq
  405d02:	1c5d      	addeq	r5, r3, #1
  405d04:	9004      	str	r0, [sp, #16]
  405d06:	9103      	str	r1, [sp, #12]
  405d08:	a81f      	add	r0, sp, #124	; 0x7c
  405d0a:	2102      	movs	r1, #2
  405d0c:	463b      	mov	r3, r7
  405d0e:	9002      	str	r0, [sp, #8]
  405d10:	9501      	str	r5, [sp, #4]
  405d12:	9100      	str	r1, [sp, #0]
  405d14:	980c      	ldr	r0, [sp, #48]	; 0x30
  405d16:	f001 faa3 	bl	407260 <_dtoa_r>
  405d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d1c:	2b67      	cmp	r3, #103	; 0x67
  405d1e:	4606      	mov	r6, r0
  405d20:	f040 81e0 	bne.w	4060e4 <_svfprintf_r+0x1288>
  405d24:	f01b 0f01 	tst.w	fp, #1
  405d28:	f000 8246 	beq.w	4061b8 <_svfprintf_r+0x135c>
  405d2c:	1974      	adds	r4, r6, r5
  405d2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405d30:	9808      	ldr	r0, [sp, #32]
  405d32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405d34:	4639      	mov	r1, r7
  405d36:	f003 ff85 	bl	409c44 <__aeabi_dcmpeq>
  405d3a:	2800      	cmp	r0, #0
  405d3c:	f040 8165 	bne.w	40600a <_svfprintf_r+0x11ae>
  405d40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d42:	42a3      	cmp	r3, r4
  405d44:	d206      	bcs.n	405d54 <_svfprintf_r+0xef8>
  405d46:	2130      	movs	r1, #48	; 0x30
  405d48:	1c5a      	adds	r2, r3, #1
  405d4a:	9223      	str	r2, [sp, #140]	; 0x8c
  405d4c:	7019      	strb	r1, [r3, #0]
  405d4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405d50:	429c      	cmp	r4, r3
  405d52:	d8f9      	bhi.n	405d48 <_svfprintf_r+0xeec>
  405d54:	1b9b      	subs	r3, r3, r6
  405d56:	9313      	str	r3, [sp, #76]	; 0x4c
  405d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d5a:	2b47      	cmp	r3, #71	; 0x47
  405d5c:	f000 80e9 	beq.w	405f32 <_svfprintf_r+0x10d6>
  405d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d62:	2b65      	cmp	r3, #101	; 0x65
  405d64:	f340 81cd 	ble.w	406102 <_svfprintf_r+0x12a6>
  405d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d6a:	2b66      	cmp	r3, #102	; 0x66
  405d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405d6e:	9312      	str	r3, [sp, #72]	; 0x48
  405d70:	f000 819e 	beq.w	4060b0 <_svfprintf_r+0x1254>
  405d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d78:	4619      	mov	r1, r3
  405d7a:	4291      	cmp	r1, r2
  405d7c:	f300 818a 	bgt.w	406094 <_svfprintf_r+0x1238>
  405d80:	f01b 0f01 	tst.w	fp, #1
  405d84:	f040 8213 	bne.w	4061ae <_svfprintf_r+0x1352>
  405d88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405d8c:	9308      	str	r3, [sp, #32]
  405d8e:	2367      	movs	r3, #103	; 0x67
  405d90:	920e      	str	r2, [sp, #56]	; 0x38
  405d92:	9311      	str	r3, [sp, #68]	; 0x44
  405d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405d96:	2b00      	cmp	r3, #0
  405d98:	f040 80c4 	bne.w	405f24 <_svfprintf_r+0x10c8>
  405d9c:	930a      	str	r3, [sp, #40]	; 0x28
  405d9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405da2:	f7ff b973 	b.w	40508c <_svfprintf_r+0x230>
  405da6:	4635      	mov	r5, r6
  405da8:	460c      	mov	r4, r1
  405daa:	4646      	mov	r6, r8
  405dac:	4690      	mov	r8, r2
  405dae:	3301      	adds	r3, #1
  405db0:	443c      	add	r4, r7
  405db2:	2b07      	cmp	r3, #7
  405db4:	9427      	str	r4, [sp, #156]	; 0x9c
  405db6:	9326      	str	r3, [sp, #152]	; 0x98
  405db8:	e888 00a0 	stmia.w	r8, {r5, r7}
  405dbc:	f73f aed1 	bgt.w	405b62 <_svfprintf_r+0xd06>
  405dc0:	f108 0808 	add.w	r8, r8, #8
  405dc4:	e6d7      	b.n	405b76 <_svfprintf_r+0xd1a>
  405dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405dc8:	6813      	ldr	r3, [r2, #0]
  405dca:	3204      	adds	r2, #4
  405dcc:	920f      	str	r2, [sp, #60]	; 0x3c
  405dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405dd0:	601a      	str	r2, [r3, #0]
  405dd2:	f7ff b86a 	b.w	404eaa <_svfprintf_r+0x4e>
  405dd6:	aa25      	add	r2, sp, #148	; 0x94
  405dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405dda:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ddc:	f003 fc60 	bl	4096a0 <__ssprint_r>
  405de0:	2800      	cmp	r0, #0
  405de2:	f47f a90d 	bne.w	405000 <_svfprintf_r+0x1a4>
  405de6:	46c8      	mov	r8, r9
  405de8:	e48d      	b.n	405706 <_svfprintf_r+0x8aa>
  405dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405dec:	4a27      	ldr	r2, [pc, #156]	; (405e8c <_svfprintf_r+0x1030>)
  405dee:	f8c8 2000 	str.w	r2, [r8]
  405df2:	3301      	adds	r3, #1
  405df4:	3401      	adds	r4, #1
  405df6:	2201      	movs	r2, #1
  405df8:	2b07      	cmp	r3, #7
  405dfa:	9427      	str	r4, [sp, #156]	; 0x9c
  405dfc:	9326      	str	r3, [sp, #152]	; 0x98
  405dfe:	f8c8 2004 	str.w	r2, [r8, #4]
  405e02:	dc72      	bgt.n	405eea <_svfprintf_r+0x108e>
  405e04:	f108 0808 	add.w	r8, r8, #8
  405e08:	b929      	cbnz	r1, 405e16 <_svfprintf_r+0xfba>
  405e0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405e0c:	b91b      	cbnz	r3, 405e16 <_svfprintf_r+0xfba>
  405e0e:	9b07      	ldr	r3, [sp, #28]
  405e10:	07d8      	lsls	r0, r3, #31
  405e12:	f57f aa03 	bpl.w	40521c <_svfprintf_r+0x3c0>
  405e16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e18:	9819      	ldr	r0, [sp, #100]	; 0x64
  405e1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  405e1c:	f8c8 2000 	str.w	r2, [r8]
  405e20:	3301      	adds	r3, #1
  405e22:	4602      	mov	r2, r0
  405e24:	4422      	add	r2, r4
  405e26:	2b07      	cmp	r3, #7
  405e28:	9227      	str	r2, [sp, #156]	; 0x9c
  405e2a:	f8c8 0004 	str.w	r0, [r8, #4]
  405e2e:	9326      	str	r3, [sp, #152]	; 0x98
  405e30:	f300 818d 	bgt.w	40614e <_svfprintf_r+0x12f2>
  405e34:	f108 0808 	add.w	r8, r8, #8
  405e38:	2900      	cmp	r1, #0
  405e3a:	f2c0 8165 	blt.w	406108 <_svfprintf_r+0x12ac>
  405e3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405e40:	f8c8 6000 	str.w	r6, [r8]
  405e44:	3301      	adds	r3, #1
  405e46:	188c      	adds	r4, r1, r2
  405e48:	2b07      	cmp	r3, #7
  405e4a:	9427      	str	r4, [sp, #156]	; 0x9c
  405e4c:	9326      	str	r3, [sp, #152]	; 0x98
  405e4e:	f8c8 1004 	str.w	r1, [r8, #4]
  405e52:	f77f a9e1 	ble.w	405218 <_svfprintf_r+0x3bc>
  405e56:	e52c      	b.n	4058b2 <_svfprintf_r+0xa56>
  405e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  405e5c:	6813      	ldr	r3, [r2, #0]
  405e5e:	17cd      	asrs	r5, r1, #31
  405e60:	4608      	mov	r0, r1
  405e62:	3204      	adds	r2, #4
  405e64:	4629      	mov	r1, r5
  405e66:	920f      	str	r2, [sp, #60]	; 0x3c
  405e68:	e9c3 0100 	strd	r0, r1, [r3]
  405e6c:	f7ff b81d 	b.w	404eaa <_svfprintf_r+0x4e>
  405e70:	aa25      	add	r2, sp, #148	; 0x94
  405e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405e74:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e76:	f003 fc13 	bl	4096a0 <__ssprint_r>
  405e7a:	2800      	cmp	r0, #0
  405e7c:	f47f a8c0 	bne.w	405000 <_svfprintf_r+0x1a4>
  405e80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405e82:	46c8      	mov	r8, r9
  405e84:	e458      	b.n	405738 <_svfprintf_r+0x8dc>
  405e86:	bf00      	nop
  405e88:	0040a12c 	.word	0x0040a12c
  405e8c:	0040a118 	.word	0x0040a118
  405e90:	2140      	movs	r1, #64	; 0x40
  405e92:	980c      	ldr	r0, [sp, #48]	; 0x30
  405e94:	f7fe fa66 	bl	404364 <_malloc_r>
  405e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e9a:	6010      	str	r0, [r2, #0]
  405e9c:	6110      	str	r0, [r2, #16]
  405e9e:	2800      	cmp	r0, #0
  405ea0:	f000 81f2 	beq.w	406288 <_svfprintf_r+0x142c>
  405ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ea6:	2340      	movs	r3, #64	; 0x40
  405ea8:	6153      	str	r3, [r2, #20]
  405eaa:	f7fe bfee 	b.w	404e8a <_svfprintf_r+0x2e>
  405eae:	a823      	add	r0, sp, #140	; 0x8c
  405eb0:	a920      	add	r1, sp, #128	; 0x80
  405eb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405eb4:	9004      	str	r0, [sp, #16]
  405eb6:	9103      	str	r1, [sp, #12]
  405eb8:	a81f      	add	r0, sp, #124	; 0x7c
  405eba:	2103      	movs	r1, #3
  405ebc:	9002      	str	r0, [sp, #8]
  405ebe:	9a08      	ldr	r2, [sp, #32]
  405ec0:	9401      	str	r4, [sp, #4]
  405ec2:	463b      	mov	r3, r7
  405ec4:	9100      	str	r1, [sp, #0]
  405ec6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ec8:	f001 f9ca 	bl	407260 <_dtoa_r>
  405ecc:	4625      	mov	r5, r4
  405ece:	4606      	mov	r6, r0
  405ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405ed2:	2b46      	cmp	r3, #70	; 0x46
  405ed4:	eb06 0405 	add.w	r4, r6, r5
  405ed8:	f47f af29 	bne.w	405d2e <_svfprintf_r+0xed2>
  405edc:	7833      	ldrb	r3, [r6, #0]
  405ede:	2b30      	cmp	r3, #48	; 0x30
  405ee0:	f000 8178 	beq.w	4061d4 <_svfprintf_r+0x1378>
  405ee4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405ee6:	442c      	add	r4, r5
  405ee8:	e721      	b.n	405d2e <_svfprintf_r+0xed2>
  405eea:	aa25      	add	r2, sp, #148	; 0x94
  405eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405eee:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ef0:	f003 fbd6 	bl	4096a0 <__ssprint_r>
  405ef4:	2800      	cmp	r0, #0
  405ef6:	f47f a883 	bne.w	405000 <_svfprintf_r+0x1a4>
  405efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405efc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405efe:	46c8      	mov	r8, r9
  405f00:	e782      	b.n	405e08 <_svfprintf_r+0xfac>
  405f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f04:	2b00      	cmp	r3, #0
  405f06:	bf08      	it	eq
  405f08:	2301      	moveq	r3, #1
  405f0a:	930a      	str	r3, [sp, #40]	; 0x28
  405f0c:	e6db      	b.n	405cc6 <_svfprintf_r+0xe6a>
  405f0e:	4630      	mov	r0, r6
  405f10:	940a      	str	r4, [sp, #40]	; 0x28
  405f12:	f7fe ff35 	bl	404d80 <strlen>
  405f16:	950f      	str	r5, [sp, #60]	; 0x3c
  405f18:	900e      	str	r0, [sp, #56]	; 0x38
  405f1a:	f8cd b01c 	str.w	fp, [sp, #28]
  405f1e:	4603      	mov	r3, r0
  405f20:	f7ff b9f9 	b.w	405316 <_svfprintf_r+0x4ba>
  405f24:	272d      	movs	r7, #45	; 0x2d
  405f26:	2300      	movs	r3, #0
  405f28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405f2c:	930a      	str	r3, [sp, #40]	; 0x28
  405f2e:	f7ff b8ae 	b.w	40508e <_svfprintf_r+0x232>
  405f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405f34:	9312      	str	r3, [sp, #72]	; 0x48
  405f36:	461a      	mov	r2, r3
  405f38:	3303      	adds	r3, #3
  405f3a:	db04      	blt.n	405f46 <_svfprintf_r+0x10ea>
  405f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f3e:	4619      	mov	r1, r3
  405f40:	4291      	cmp	r1, r2
  405f42:	f6bf af17 	bge.w	405d74 <_svfprintf_r+0xf18>
  405f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f48:	3b02      	subs	r3, #2
  405f4a:	9311      	str	r3, [sp, #68]	; 0x44
  405f4c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405f50:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f56:	3b01      	subs	r3, #1
  405f58:	2b00      	cmp	r3, #0
  405f5a:	931f      	str	r3, [sp, #124]	; 0x7c
  405f5c:	bfbd      	ittte	lt
  405f5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405f60:	f1c3 0301 	rsblt	r3, r3, #1
  405f64:	222d      	movlt	r2, #45	; 0x2d
  405f66:	222b      	movge	r2, #43	; 0x2b
  405f68:	2b09      	cmp	r3, #9
  405f6a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  405f6e:	f340 8116 	ble.w	40619e <_svfprintf_r+0x1342>
  405f72:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405f76:	4620      	mov	r0, r4
  405f78:	4dab      	ldr	r5, [pc, #684]	; (406228 <_svfprintf_r+0x13cc>)
  405f7a:	e000      	b.n	405f7e <_svfprintf_r+0x1122>
  405f7c:	4610      	mov	r0, r2
  405f7e:	fb85 1203 	smull	r1, r2, r5, r3
  405f82:	17d9      	asrs	r1, r3, #31
  405f84:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405f88:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405f8c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405f90:	3230      	adds	r2, #48	; 0x30
  405f92:	2909      	cmp	r1, #9
  405f94:	f800 2c01 	strb.w	r2, [r0, #-1]
  405f98:	460b      	mov	r3, r1
  405f9a:	f100 32ff 	add.w	r2, r0, #4294967295
  405f9e:	dced      	bgt.n	405f7c <_svfprintf_r+0x1120>
  405fa0:	3330      	adds	r3, #48	; 0x30
  405fa2:	3802      	subs	r0, #2
  405fa4:	b2d9      	uxtb	r1, r3
  405fa6:	4284      	cmp	r4, r0
  405fa8:	f802 1c01 	strb.w	r1, [r2, #-1]
  405fac:	f240 8165 	bls.w	40627a <_svfprintf_r+0x141e>
  405fb0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405fb4:	4613      	mov	r3, r2
  405fb6:	e001      	b.n	405fbc <_svfprintf_r+0x1160>
  405fb8:	f813 1b01 	ldrb.w	r1, [r3], #1
  405fbc:	f800 1b01 	strb.w	r1, [r0], #1
  405fc0:	42a3      	cmp	r3, r4
  405fc2:	d1f9      	bne.n	405fb8 <_svfprintf_r+0x115c>
  405fc4:	3301      	adds	r3, #1
  405fc6:	1a9b      	subs	r3, r3, r2
  405fc8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405fcc:	4413      	add	r3, r2
  405fce:	aa21      	add	r2, sp, #132	; 0x84
  405fd0:	1a9b      	subs	r3, r3, r2
  405fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405fd4:	931b      	str	r3, [sp, #108]	; 0x6c
  405fd6:	2a01      	cmp	r2, #1
  405fd8:	4413      	add	r3, r2
  405fda:	930e      	str	r3, [sp, #56]	; 0x38
  405fdc:	f340 8119 	ble.w	406212 <_svfprintf_r+0x13b6>
  405fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405fe2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405fe4:	4413      	add	r3, r2
  405fe6:	930e      	str	r3, [sp, #56]	; 0x38
  405fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fec:	9308      	str	r3, [sp, #32]
  405fee:	2300      	movs	r3, #0
  405ff0:	9312      	str	r3, [sp, #72]	; 0x48
  405ff2:	e6cf      	b.n	405d94 <_svfprintf_r+0xf38>
  405ff4:	aa25      	add	r2, sp, #148	; 0x94
  405ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ff8:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ffa:	f003 fb51 	bl	4096a0 <__ssprint_r>
  405ffe:	2800      	cmp	r0, #0
  406000:	f47e affe 	bne.w	405000 <_svfprintf_r+0x1a4>
  406004:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406006:	46c8      	mov	r8, r9
  406008:	e4d7      	b.n	4059ba <_svfprintf_r+0xb5e>
  40600a:	4623      	mov	r3, r4
  40600c:	e6a2      	b.n	405d54 <_svfprintf_r+0xef8>
  40600e:	aa25      	add	r2, sp, #148	; 0x94
  406010:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406012:	980c      	ldr	r0, [sp, #48]	; 0x30
  406014:	f003 fb44 	bl	4096a0 <__ssprint_r>
  406018:	2800      	cmp	r0, #0
  40601a:	f47e aff1 	bne.w	405000 <_svfprintf_r+0x1a4>
  40601e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406020:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406022:	46c8      	mov	r8, r9
  406024:	e5ae      	b.n	405b84 <_svfprintf_r+0xd28>
  406026:	aa25      	add	r2, sp, #148	; 0x94
  406028:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40602a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40602c:	f003 fb38 	bl	4096a0 <__ssprint_r>
  406030:	2800      	cmp	r0, #0
  406032:	f47e afe5 	bne.w	405000 <_svfprintf_r+0x1a4>
  406036:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406038:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40603a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40603c:	1a9a      	subs	r2, r3, r2
  40603e:	46c8      	mov	r8, r9
  406040:	e5b8      	b.n	405bb4 <_svfprintf_r+0xd58>
  406042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406044:	9612      	str	r6, [sp, #72]	; 0x48
  406046:	2b06      	cmp	r3, #6
  406048:	bf28      	it	cs
  40604a:	2306      	movcs	r3, #6
  40604c:	960a      	str	r6, [sp, #40]	; 0x28
  40604e:	4637      	mov	r7, r6
  406050:	9308      	str	r3, [sp, #32]
  406052:	950f      	str	r5, [sp, #60]	; 0x3c
  406054:	f8cd b01c 	str.w	fp, [sp, #28]
  406058:	930e      	str	r3, [sp, #56]	; 0x38
  40605a:	4e74      	ldr	r6, [pc, #464]	; (40622c <_svfprintf_r+0x13d0>)
  40605c:	f7ff b816 	b.w	40508c <_svfprintf_r+0x230>
  406060:	a823      	add	r0, sp, #140	; 0x8c
  406062:	a920      	add	r1, sp, #128	; 0x80
  406064:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406066:	9004      	str	r0, [sp, #16]
  406068:	9103      	str	r1, [sp, #12]
  40606a:	a81f      	add	r0, sp, #124	; 0x7c
  40606c:	2103      	movs	r1, #3
  40606e:	9002      	str	r0, [sp, #8]
  406070:	9a08      	ldr	r2, [sp, #32]
  406072:	9501      	str	r5, [sp, #4]
  406074:	463b      	mov	r3, r7
  406076:	9100      	str	r1, [sp, #0]
  406078:	980c      	ldr	r0, [sp, #48]	; 0x30
  40607a:	f001 f8f1 	bl	407260 <_dtoa_r>
  40607e:	4606      	mov	r6, r0
  406080:	1944      	adds	r4, r0, r5
  406082:	e72b      	b.n	405edc <_svfprintf_r+0x1080>
  406084:	2306      	movs	r3, #6
  406086:	930a      	str	r3, [sp, #40]	; 0x28
  406088:	e61d      	b.n	405cc6 <_svfprintf_r+0xe6a>
  40608a:	272d      	movs	r7, #45	; 0x2d
  40608c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406090:	f7ff bacd 	b.w	40562e <_svfprintf_r+0x7d2>
  406094:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406098:	4413      	add	r3, r2
  40609a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40609c:	930e      	str	r3, [sp, #56]	; 0x38
  40609e:	2a00      	cmp	r2, #0
  4060a0:	f340 80b0 	ble.w	406204 <_svfprintf_r+0x13a8>
  4060a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4060a8:	9308      	str	r3, [sp, #32]
  4060aa:	2367      	movs	r3, #103	; 0x67
  4060ac:	9311      	str	r3, [sp, #68]	; 0x44
  4060ae:	e671      	b.n	405d94 <_svfprintf_r+0xf38>
  4060b0:	2b00      	cmp	r3, #0
  4060b2:	f340 80c3 	ble.w	40623c <_svfprintf_r+0x13e0>
  4060b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4060b8:	2a00      	cmp	r2, #0
  4060ba:	f040 8099 	bne.w	4061f0 <_svfprintf_r+0x1394>
  4060be:	f01b 0f01 	tst.w	fp, #1
  4060c2:	f040 8095 	bne.w	4061f0 <_svfprintf_r+0x1394>
  4060c6:	9308      	str	r3, [sp, #32]
  4060c8:	930e      	str	r3, [sp, #56]	; 0x38
  4060ca:	e663      	b.n	405d94 <_svfprintf_r+0xf38>
  4060cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4060ce:	9308      	str	r3, [sp, #32]
  4060d0:	930e      	str	r3, [sp, #56]	; 0x38
  4060d2:	900a      	str	r0, [sp, #40]	; 0x28
  4060d4:	950f      	str	r5, [sp, #60]	; 0x3c
  4060d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4060da:	9012      	str	r0, [sp, #72]	; 0x48
  4060dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4060e0:	f7fe bfd4 	b.w	40508c <_svfprintf_r+0x230>
  4060e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060e6:	2b47      	cmp	r3, #71	; 0x47
  4060e8:	f47f ae20 	bne.w	405d2c <_svfprintf_r+0xed0>
  4060ec:	f01b 0f01 	tst.w	fp, #1
  4060f0:	f47f aeee 	bne.w	405ed0 <_svfprintf_r+0x1074>
  4060f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4060f6:	1b9b      	subs	r3, r3, r6
  4060f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4060fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4060fc:	2b47      	cmp	r3, #71	; 0x47
  4060fe:	f43f af18 	beq.w	405f32 <_svfprintf_r+0x10d6>
  406102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406104:	9312      	str	r3, [sp, #72]	; 0x48
  406106:	e721      	b.n	405f4c <_svfprintf_r+0x10f0>
  406108:	424f      	negs	r7, r1
  40610a:	3110      	adds	r1, #16
  40610c:	4d48      	ldr	r5, [pc, #288]	; (406230 <_svfprintf_r+0x13d4>)
  40610e:	da2f      	bge.n	406170 <_svfprintf_r+0x1314>
  406110:	2410      	movs	r4, #16
  406112:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406116:	e004      	b.n	406122 <_svfprintf_r+0x12c6>
  406118:	f108 0808 	add.w	r8, r8, #8
  40611c:	3f10      	subs	r7, #16
  40611e:	2f10      	cmp	r7, #16
  406120:	dd26      	ble.n	406170 <_svfprintf_r+0x1314>
  406122:	3301      	adds	r3, #1
  406124:	3210      	adds	r2, #16
  406126:	2b07      	cmp	r3, #7
  406128:	9227      	str	r2, [sp, #156]	; 0x9c
  40612a:	9326      	str	r3, [sp, #152]	; 0x98
  40612c:	f8c8 5000 	str.w	r5, [r8]
  406130:	f8c8 4004 	str.w	r4, [r8, #4]
  406134:	ddf0      	ble.n	406118 <_svfprintf_r+0x12bc>
  406136:	aa25      	add	r2, sp, #148	; 0x94
  406138:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40613a:	4658      	mov	r0, fp
  40613c:	f003 fab0 	bl	4096a0 <__ssprint_r>
  406140:	2800      	cmp	r0, #0
  406142:	f47e af5d 	bne.w	405000 <_svfprintf_r+0x1a4>
  406146:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406148:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40614a:	46c8      	mov	r8, r9
  40614c:	e7e6      	b.n	40611c <_svfprintf_r+0x12c0>
  40614e:	aa25      	add	r2, sp, #148	; 0x94
  406150:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406152:	980c      	ldr	r0, [sp, #48]	; 0x30
  406154:	f003 faa4 	bl	4096a0 <__ssprint_r>
  406158:	2800      	cmp	r0, #0
  40615a:	f47e af51 	bne.w	405000 <_svfprintf_r+0x1a4>
  40615e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406160:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406162:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406164:	46c8      	mov	r8, r9
  406166:	e667      	b.n	405e38 <_svfprintf_r+0xfdc>
  406168:	2000      	movs	r0, #0
  40616a:	900a      	str	r0, [sp, #40]	; 0x28
  40616c:	f7fe bed0 	b.w	404f10 <_svfprintf_r+0xb4>
  406170:	3301      	adds	r3, #1
  406172:	443a      	add	r2, r7
  406174:	2b07      	cmp	r3, #7
  406176:	e888 00a0 	stmia.w	r8, {r5, r7}
  40617a:	9227      	str	r2, [sp, #156]	; 0x9c
  40617c:	9326      	str	r3, [sp, #152]	; 0x98
  40617e:	f108 0808 	add.w	r8, r8, #8
  406182:	f77f ae5c 	ble.w	405e3e <_svfprintf_r+0xfe2>
  406186:	aa25      	add	r2, sp, #148	; 0x94
  406188:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40618a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40618c:	f003 fa88 	bl	4096a0 <__ssprint_r>
  406190:	2800      	cmp	r0, #0
  406192:	f47e af35 	bne.w	405000 <_svfprintf_r+0x1a4>
  406196:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406198:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40619a:	46c8      	mov	r8, r9
  40619c:	e64f      	b.n	405e3e <_svfprintf_r+0xfe2>
  40619e:	3330      	adds	r3, #48	; 0x30
  4061a0:	2230      	movs	r2, #48	; 0x30
  4061a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4061a6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4061aa:	ab22      	add	r3, sp, #136	; 0x88
  4061ac:	e70f      	b.n	405fce <_svfprintf_r+0x1172>
  4061ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4061b2:	4413      	add	r3, r2
  4061b4:	930e      	str	r3, [sp, #56]	; 0x38
  4061b6:	e775      	b.n	4060a4 <_svfprintf_r+0x1248>
  4061b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4061ba:	e5cb      	b.n	405d54 <_svfprintf_r+0xef8>
  4061bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4061be:	4e1d      	ldr	r6, [pc, #116]	; (406234 <_svfprintf_r+0x13d8>)
  4061c0:	2b00      	cmp	r3, #0
  4061c2:	bfb6      	itet	lt
  4061c4:	272d      	movlt	r7, #45	; 0x2d
  4061c6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4061ca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4061ce:	4b1a      	ldr	r3, [pc, #104]	; (406238 <_svfprintf_r+0x13dc>)
  4061d0:	f7ff ba2f 	b.w	405632 <_svfprintf_r+0x7d6>
  4061d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4061d6:	9808      	ldr	r0, [sp, #32]
  4061d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4061da:	4639      	mov	r1, r7
  4061dc:	f003 fd32 	bl	409c44 <__aeabi_dcmpeq>
  4061e0:	2800      	cmp	r0, #0
  4061e2:	f47f ae7f 	bne.w	405ee4 <_svfprintf_r+0x1088>
  4061e6:	f1c5 0501 	rsb	r5, r5, #1
  4061ea:	951f      	str	r5, [sp, #124]	; 0x7c
  4061ec:	442c      	add	r4, r5
  4061ee:	e59e      	b.n	405d2e <_svfprintf_r+0xed2>
  4061f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4061f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4061f4:	4413      	add	r3, r2
  4061f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061f8:	441a      	add	r2, r3
  4061fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4061fe:	920e      	str	r2, [sp, #56]	; 0x38
  406200:	9308      	str	r3, [sp, #32]
  406202:	e5c7      	b.n	405d94 <_svfprintf_r+0xf38>
  406204:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406208:	f1c3 0301 	rsb	r3, r3, #1
  40620c:	441a      	add	r2, r3
  40620e:	4613      	mov	r3, r2
  406210:	e7d0      	b.n	4061b4 <_svfprintf_r+0x1358>
  406212:	f01b 0301 	ands.w	r3, fp, #1
  406216:	9312      	str	r3, [sp, #72]	; 0x48
  406218:	f47f aee2 	bne.w	405fe0 <_svfprintf_r+0x1184>
  40621c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40621e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406222:	9308      	str	r3, [sp, #32]
  406224:	e5b6      	b.n	405d94 <_svfprintf_r+0xf38>
  406226:	bf00      	nop
  406228:	66666667 	.word	0x66666667
  40622c:	0040a110 	.word	0x0040a110
  406230:	0040a12c 	.word	0x0040a12c
  406234:	0040a0e4 	.word	0x0040a0e4
  406238:	0040a0e0 	.word	0x0040a0e0
  40623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40623e:	b913      	cbnz	r3, 406246 <_svfprintf_r+0x13ea>
  406240:	f01b 0f01 	tst.w	fp, #1
  406244:	d002      	beq.n	40624c <_svfprintf_r+0x13f0>
  406246:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406248:	3301      	adds	r3, #1
  40624a:	e7d4      	b.n	4061f6 <_svfprintf_r+0x139a>
  40624c:	2301      	movs	r3, #1
  40624e:	e73a      	b.n	4060c6 <_svfprintf_r+0x126a>
  406250:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406252:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406256:	6828      	ldr	r0, [r5, #0]
  406258:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40625c:	900a      	str	r0, [sp, #40]	; 0x28
  40625e:	4628      	mov	r0, r5
  406260:	3004      	adds	r0, #4
  406262:	46a2      	mov	sl, r4
  406264:	900f      	str	r0, [sp, #60]	; 0x3c
  406266:	f7fe be51 	b.w	404f0c <_svfprintf_r+0xb0>
  40626a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40626e:	f7ff b867 	b.w	405340 <_svfprintf_r+0x4e4>
  406272:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406276:	f7ff ba15 	b.w	4056a4 <_svfprintf_r+0x848>
  40627a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40627e:	e6a6      	b.n	405fce <_svfprintf_r+0x1172>
  406280:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406284:	f7ff b8eb 	b.w	40545e <_svfprintf_r+0x602>
  406288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40628a:	230c      	movs	r3, #12
  40628c:	6013      	str	r3, [r2, #0]
  40628e:	f04f 33ff 	mov.w	r3, #4294967295
  406292:	9309      	str	r3, [sp, #36]	; 0x24
  406294:	f7fe bebd 	b.w	405012 <_svfprintf_r+0x1b6>
  406298:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40629c:	f7ff b99a 	b.w	4055d4 <_svfprintf_r+0x778>
  4062a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4062a4:	f7ff b976 	b.w	405594 <_svfprintf_r+0x738>
  4062a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4062ac:	f7ff b959 	b.w	405562 <_svfprintf_r+0x706>
  4062b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4062b4:	f7ff b912 	b.w	4054dc <_svfprintf_r+0x680>

004062b8 <__sprint_r.part.0>:
  4062b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4062be:	049c      	lsls	r4, r3, #18
  4062c0:	4693      	mov	fp, r2
  4062c2:	d52f      	bpl.n	406324 <__sprint_r.part.0+0x6c>
  4062c4:	6893      	ldr	r3, [r2, #8]
  4062c6:	6812      	ldr	r2, [r2, #0]
  4062c8:	b353      	cbz	r3, 406320 <__sprint_r.part.0+0x68>
  4062ca:	460e      	mov	r6, r1
  4062cc:	4607      	mov	r7, r0
  4062ce:	f102 0908 	add.w	r9, r2, #8
  4062d2:	e919 0420 	ldmdb	r9, {r5, sl}
  4062d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4062da:	d017      	beq.n	40630c <__sprint_r.part.0+0x54>
  4062dc:	3d04      	subs	r5, #4
  4062de:	2400      	movs	r4, #0
  4062e0:	e001      	b.n	4062e6 <__sprint_r.part.0+0x2e>
  4062e2:	45a0      	cmp	r8, r4
  4062e4:	d010      	beq.n	406308 <__sprint_r.part.0+0x50>
  4062e6:	4632      	mov	r2, r6
  4062e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4062ec:	4638      	mov	r0, r7
  4062ee:	f002 f87b 	bl	4083e8 <_fputwc_r>
  4062f2:	1c43      	adds	r3, r0, #1
  4062f4:	f104 0401 	add.w	r4, r4, #1
  4062f8:	d1f3      	bne.n	4062e2 <__sprint_r.part.0+0x2a>
  4062fa:	2300      	movs	r3, #0
  4062fc:	f8cb 3008 	str.w	r3, [fp, #8]
  406300:	f8cb 3004 	str.w	r3, [fp, #4]
  406304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406308:	f8db 3008 	ldr.w	r3, [fp, #8]
  40630c:	f02a 0a03 	bic.w	sl, sl, #3
  406310:	eba3 030a 	sub.w	r3, r3, sl
  406314:	f8cb 3008 	str.w	r3, [fp, #8]
  406318:	f109 0908 	add.w	r9, r9, #8
  40631c:	2b00      	cmp	r3, #0
  40631e:	d1d8      	bne.n	4062d2 <__sprint_r.part.0+0x1a>
  406320:	2000      	movs	r0, #0
  406322:	e7ea      	b.n	4062fa <__sprint_r.part.0+0x42>
  406324:	f002 f9ca 	bl	4086bc <__sfvwrite_r>
  406328:	2300      	movs	r3, #0
  40632a:	f8cb 3008 	str.w	r3, [fp, #8]
  40632e:	f8cb 3004 	str.w	r3, [fp, #4]
  406332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406336:	bf00      	nop

00406338 <_vfiprintf_r>:
  406338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40633c:	b0ad      	sub	sp, #180	; 0xb4
  40633e:	461d      	mov	r5, r3
  406340:	468b      	mov	fp, r1
  406342:	4690      	mov	r8, r2
  406344:	9307      	str	r3, [sp, #28]
  406346:	9006      	str	r0, [sp, #24]
  406348:	b118      	cbz	r0, 406352 <_vfiprintf_r+0x1a>
  40634a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40634c:	2b00      	cmp	r3, #0
  40634e:	f000 80f3 	beq.w	406538 <_vfiprintf_r+0x200>
  406352:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406356:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40635a:	07df      	lsls	r7, r3, #31
  40635c:	b281      	uxth	r1, r0
  40635e:	d402      	bmi.n	406366 <_vfiprintf_r+0x2e>
  406360:	058e      	lsls	r6, r1, #22
  406362:	f140 80fc 	bpl.w	40655e <_vfiprintf_r+0x226>
  406366:	048c      	lsls	r4, r1, #18
  406368:	d40a      	bmi.n	406380 <_vfiprintf_r+0x48>
  40636a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40636e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406372:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406376:	f8ab 100c 	strh.w	r1, [fp, #12]
  40637a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40637e:	b289      	uxth	r1, r1
  406380:	0708      	lsls	r0, r1, #28
  406382:	f140 80b3 	bpl.w	4064ec <_vfiprintf_r+0x1b4>
  406386:	f8db 3010 	ldr.w	r3, [fp, #16]
  40638a:	2b00      	cmp	r3, #0
  40638c:	f000 80ae 	beq.w	4064ec <_vfiprintf_r+0x1b4>
  406390:	f001 031a 	and.w	r3, r1, #26
  406394:	2b0a      	cmp	r3, #10
  406396:	f000 80b5 	beq.w	406504 <_vfiprintf_r+0x1cc>
  40639a:	2300      	movs	r3, #0
  40639c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4063a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4063a2:	9311      	str	r3, [sp, #68]	; 0x44
  4063a4:	9310      	str	r3, [sp, #64]	; 0x40
  4063a6:	9303      	str	r3, [sp, #12]
  4063a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4063ac:	46ca      	mov	sl, r9
  4063ae:	f8cd b010 	str.w	fp, [sp, #16]
  4063b2:	f898 3000 	ldrb.w	r3, [r8]
  4063b6:	4644      	mov	r4, r8
  4063b8:	b1fb      	cbz	r3, 4063fa <_vfiprintf_r+0xc2>
  4063ba:	2b25      	cmp	r3, #37	; 0x25
  4063bc:	d102      	bne.n	4063c4 <_vfiprintf_r+0x8c>
  4063be:	e01c      	b.n	4063fa <_vfiprintf_r+0xc2>
  4063c0:	2b25      	cmp	r3, #37	; 0x25
  4063c2:	d003      	beq.n	4063cc <_vfiprintf_r+0x94>
  4063c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4063c8:	2b00      	cmp	r3, #0
  4063ca:	d1f9      	bne.n	4063c0 <_vfiprintf_r+0x88>
  4063cc:	eba4 0508 	sub.w	r5, r4, r8
  4063d0:	b19d      	cbz	r5, 4063fa <_vfiprintf_r+0xc2>
  4063d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4063d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063d6:	f8ca 8000 	str.w	r8, [sl]
  4063da:	3301      	adds	r3, #1
  4063dc:	442a      	add	r2, r5
  4063de:	2b07      	cmp	r3, #7
  4063e0:	f8ca 5004 	str.w	r5, [sl, #4]
  4063e4:	9211      	str	r2, [sp, #68]	; 0x44
  4063e6:	9310      	str	r3, [sp, #64]	; 0x40
  4063e8:	dd7a      	ble.n	4064e0 <_vfiprintf_r+0x1a8>
  4063ea:	2a00      	cmp	r2, #0
  4063ec:	f040 84b0 	bne.w	406d50 <_vfiprintf_r+0xa18>
  4063f0:	9b03      	ldr	r3, [sp, #12]
  4063f2:	9210      	str	r2, [sp, #64]	; 0x40
  4063f4:	442b      	add	r3, r5
  4063f6:	46ca      	mov	sl, r9
  4063f8:	9303      	str	r3, [sp, #12]
  4063fa:	7823      	ldrb	r3, [r4, #0]
  4063fc:	2b00      	cmp	r3, #0
  4063fe:	f000 83e0 	beq.w	406bc2 <_vfiprintf_r+0x88a>
  406402:	2000      	movs	r0, #0
  406404:	f04f 0300 	mov.w	r3, #0
  406408:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40640c:	f104 0801 	add.w	r8, r4, #1
  406410:	7862      	ldrb	r2, [r4, #1]
  406412:	4605      	mov	r5, r0
  406414:	4606      	mov	r6, r0
  406416:	4603      	mov	r3, r0
  406418:	f04f 34ff 	mov.w	r4, #4294967295
  40641c:	f108 0801 	add.w	r8, r8, #1
  406420:	f1a2 0120 	sub.w	r1, r2, #32
  406424:	2958      	cmp	r1, #88	; 0x58
  406426:	f200 82de 	bhi.w	4069e6 <_vfiprintf_r+0x6ae>
  40642a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40642e:	0221      	.short	0x0221
  406430:	02dc02dc 	.word	0x02dc02dc
  406434:	02dc0229 	.word	0x02dc0229
  406438:	02dc02dc 	.word	0x02dc02dc
  40643c:	02dc02dc 	.word	0x02dc02dc
  406440:	028902dc 	.word	0x028902dc
  406444:	02dc0295 	.word	0x02dc0295
  406448:	02bd00a2 	.word	0x02bd00a2
  40644c:	019f02dc 	.word	0x019f02dc
  406450:	01a401a4 	.word	0x01a401a4
  406454:	01a401a4 	.word	0x01a401a4
  406458:	01a401a4 	.word	0x01a401a4
  40645c:	01a401a4 	.word	0x01a401a4
  406460:	02dc01a4 	.word	0x02dc01a4
  406464:	02dc02dc 	.word	0x02dc02dc
  406468:	02dc02dc 	.word	0x02dc02dc
  40646c:	02dc02dc 	.word	0x02dc02dc
  406470:	02dc02dc 	.word	0x02dc02dc
  406474:	01b202dc 	.word	0x01b202dc
  406478:	02dc02dc 	.word	0x02dc02dc
  40647c:	02dc02dc 	.word	0x02dc02dc
  406480:	02dc02dc 	.word	0x02dc02dc
  406484:	02dc02dc 	.word	0x02dc02dc
  406488:	02dc02dc 	.word	0x02dc02dc
  40648c:	02dc0197 	.word	0x02dc0197
  406490:	02dc02dc 	.word	0x02dc02dc
  406494:	02dc02dc 	.word	0x02dc02dc
  406498:	02dc019b 	.word	0x02dc019b
  40649c:	025302dc 	.word	0x025302dc
  4064a0:	02dc02dc 	.word	0x02dc02dc
  4064a4:	02dc02dc 	.word	0x02dc02dc
  4064a8:	02dc02dc 	.word	0x02dc02dc
  4064ac:	02dc02dc 	.word	0x02dc02dc
  4064b0:	02dc02dc 	.word	0x02dc02dc
  4064b4:	021b025a 	.word	0x021b025a
  4064b8:	02dc02dc 	.word	0x02dc02dc
  4064bc:	026e02dc 	.word	0x026e02dc
  4064c0:	02dc021b 	.word	0x02dc021b
  4064c4:	027302dc 	.word	0x027302dc
  4064c8:	01f502dc 	.word	0x01f502dc
  4064cc:	02090182 	.word	0x02090182
  4064d0:	02dc02d7 	.word	0x02dc02d7
  4064d4:	02dc029a 	.word	0x02dc029a
  4064d8:	02dc00a7 	.word	0x02dc00a7
  4064dc:	022e02dc 	.word	0x022e02dc
  4064e0:	f10a 0a08 	add.w	sl, sl, #8
  4064e4:	9b03      	ldr	r3, [sp, #12]
  4064e6:	442b      	add	r3, r5
  4064e8:	9303      	str	r3, [sp, #12]
  4064ea:	e786      	b.n	4063fa <_vfiprintf_r+0xc2>
  4064ec:	4659      	mov	r1, fp
  4064ee:	9806      	ldr	r0, [sp, #24]
  4064f0:	f000 fdac 	bl	40704c <__swsetup_r>
  4064f4:	bb18      	cbnz	r0, 40653e <_vfiprintf_r+0x206>
  4064f6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4064fa:	f001 031a 	and.w	r3, r1, #26
  4064fe:	2b0a      	cmp	r3, #10
  406500:	f47f af4b 	bne.w	40639a <_vfiprintf_r+0x62>
  406504:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406508:	2b00      	cmp	r3, #0
  40650a:	f6ff af46 	blt.w	40639a <_vfiprintf_r+0x62>
  40650e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406512:	07db      	lsls	r3, r3, #31
  406514:	d405      	bmi.n	406522 <_vfiprintf_r+0x1ea>
  406516:	058f      	lsls	r7, r1, #22
  406518:	d403      	bmi.n	406522 <_vfiprintf_r+0x1ea>
  40651a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40651e:	f002 fa91 	bl	408a44 <__retarget_lock_release_recursive>
  406522:	462b      	mov	r3, r5
  406524:	4642      	mov	r2, r8
  406526:	4659      	mov	r1, fp
  406528:	9806      	ldr	r0, [sp, #24]
  40652a:	f000 fd4d 	bl	406fc8 <__sbprintf>
  40652e:	9003      	str	r0, [sp, #12]
  406530:	9803      	ldr	r0, [sp, #12]
  406532:	b02d      	add	sp, #180	; 0xb4
  406534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406538:	f001 feb4 	bl	4082a4 <__sinit>
  40653c:	e709      	b.n	406352 <_vfiprintf_r+0x1a>
  40653e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406542:	07d9      	lsls	r1, r3, #31
  406544:	d404      	bmi.n	406550 <_vfiprintf_r+0x218>
  406546:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40654a:	059a      	lsls	r2, r3, #22
  40654c:	f140 84aa 	bpl.w	406ea4 <_vfiprintf_r+0xb6c>
  406550:	f04f 33ff 	mov.w	r3, #4294967295
  406554:	9303      	str	r3, [sp, #12]
  406556:	9803      	ldr	r0, [sp, #12]
  406558:	b02d      	add	sp, #180	; 0xb4
  40655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40655e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406562:	f002 fa6d 	bl	408a40 <__retarget_lock_acquire_recursive>
  406566:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40656a:	b281      	uxth	r1, r0
  40656c:	e6fb      	b.n	406366 <_vfiprintf_r+0x2e>
  40656e:	4276      	negs	r6, r6
  406570:	9207      	str	r2, [sp, #28]
  406572:	f043 0304 	orr.w	r3, r3, #4
  406576:	f898 2000 	ldrb.w	r2, [r8]
  40657a:	e74f      	b.n	40641c <_vfiprintf_r+0xe4>
  40657c:	9608      	str	r6, [sp, #32]
  40657e:	069e      	lsls	r6, r3, #26
  406580:	f100 8450 	bmi.w	406e24 <_vfiprintf_r+0xaec>
  406584:	9907      	ldr	r1, [sp, #28]
  406586:	06dd      	lsls	r5, r3, #27
  406588:	460a      	mov	r2, r1
  40658a:	f100 83ef 	bmi.w	406d6c <_vfiprintf_r+0xa34>
  40658e:	0658      	lsls	r0, r3, #25
  406590:	f140 83ec 	bpl.w	406d6c <_vfiprintf_r+0xa34>
  406594:	880e      	ldrh	r6, [r1, #0]
  406596:	3104      	adds	r1, #4
  406598:	2700      	movs	r7, #0
  40659a:	2201      	movs	r2, #1
  40659c:	9107      	str	r1, [sp, #28]
  40659e:	f04f 0100 	mov.w	r1, #0
  4065a2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4065a6:	2500      	movs	r5, #0
  4065a8:	1c61      	adds	r1, r4, #1
  4065aa:	f000 8116 	beq.w	4067da <_vfiprintf_r+0x4a2>
  4065ae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4065b2:	9102      	str	r1, [sp, #8]
  4065b4:	ea56 0107 	orrs.w	r1, r6, r7
  4065b8:	f040 8114 	bne.w	4067e4 <_vfiprintf_r+0x4ac>
  4065bc:	2c00      	cmp	r4, #0
  4065be:	f040 835c 	bne.w	406c7a <_vfiprintf_r+0x942>
  4065c2:	2a00      	cmp	r2, #0
  4065c4:	f040 83b7 	bne.w	406d36 <_vfiprintf_r+0x9fe>
  4065c8:	f013 0301 	ands.w	r3, r3, #1
  4065cc:	9305      	str	r3, [sp, #20]
  4065ce:	f000 8457 	beq.w	406e80 <_vfiprintf_r+0xb48>
  4065d2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4065d6:	2330      	movs	r3, #48	; 0x30
  4065d8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4065dc:	9b05      	ldr	r3, [sp, #20]
  4065de:	42a3      	cmp	r3, r4
  4065e0:	bfb8      	it	lt
  4065e2:	4623      	movlt	r3, r4
  4065e4:	9301      	str	r3, [sp, #4]
  4065e6:	b10d      	cbz	r5, 4065ec <_vfiprintf_r+0x2b4>
  4065e8:	3301      	adds	r3, #1
  4065ea:	9301      	str	r3, [sp, #4]
  4065ec:	9b02      	ldr	r3, [sp, #8]
  4065ee:	f013 0302 	ands.w	r3, r3, #2
  4065f2:	9309      	str	r3, [sp, #36]	; 0x24
  4065f4:	d002      	beq.n	4065fc <_vfiprintf_r+0x2c4>
  4065f6:	9b01      	ldr	r3, [sp, #4]
  4065f8:	3302      	adds	r3, #2
  4065fa:	9301      	str	r3, [sp, #4]
  4065fc:	9b02      	ldr	r3, [sp, #8]
  4065fe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406602:	930a      	str	r3, [sp, #40]	; 0x28
  406604:	f040 8217 	bne.w	406a36 <_vfiprintf_r+0x6fe>
  406608:	9b08      	ldr	r3, [sp, #32]
  40660a:	9a01      	ldr	r2, [sp, #4]
  40660c:	1a9d      	subs	r5, r3, r2
  40660e:	2d00      	cmp	r5, #0
  406610:	f340 8211 	ble.w	406a36 <_vfiprintf_r+0x6fe>
  406614:	2d10      	cmp	r5, #16
  406616:	f340 8490 	ble.w	406f3a <_vfiprintf_r+0xc02>
  40661a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40661c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40661e:	4ec4      	ldr	r6, [pc, #784]	; (406930 <_vfiprintf_r+0x5f8>)
  406620:	46d6      	mov	lr, sl
  406622:	2710      	movs	r7, #16
  406624:	46a2      	mov	sl, r4
  406626:	4619      	mov	r1, r3
  406628:	9c06      	ldr	r4, [sp, #24]
  40662a:	e007      	b.n	40663c <_vfiprintf_r+0x304>
  40662c:	f101 0c02 	add.w	ip, r1, #2
  406630:	f10e 0e08 	add.w	lr, lr, #8
  406634:	4601      	mov	r1, r0
  406636:	3d10      	subs	r5, #16
  406638:	2d10      	cmp	r5, #16
  40663a:	dd11      	ble.n	406660 <_vfiprintf_r+0x328>
  40663c:	1c48      	adds	r0, r1, #1
  40663e:	3210      	adds	r2, #16
  406640:	2807      	cmp	r0, #7
  406642:	9211      	str	r2, [sp, #68]	; 0x44
  406644:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406648:	9010      	str	r0, [sp, #64]	; 0x40
  40664a:	ddef      	ble.n	40662c <_vfiprintf_r+0x2f4>
  40664c:	2a00      	cmp	r2, #0
  40664e:	f040 81e4 	bne.w	406a1a <_vfiprintf_r+0x6e2>
  406652:	3d10      	subs	r5, #16
  406654:	2d10      	cmp	r5, #16
  406656:	4611      	mov	r1, r2
  406658:	f04f 0c01 	mov.w	ip, #1
  40665c:	46ce      	mov	lr, r9
  40665e:	dced      	bgt.n	40663c <_vfiprintf_r+0x304>
  406660:	4654      	mov	r4, sl
  406662:	4661      	mov	r1, ip
  406664:	46f2      	mov	sl, lr
  406666:	442a      	add	r2, r5
  406668:	2907      	cmp	r1, #7
  40666a:	9211      	str	r2, [sp, #68]	; 0x44
  40666c:	f8ca 6000 	str.w	r6, [sl]
  406670:	f8ca 5004 	str.w	r5, [sl, #4]
  406674:	9110      	str	r1, [sp, #64]	; 0x40
  406676:	f300 82ec 	bgt.w	406c52 <_vfiprintf_r+0x91a>
  40667a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40667e:	f10a 0a08 	add.w	sl, sl, #8
  406682:	1c48      	adds	r0, r1, #1
  406684:	2d00      	cmp	r5, #0
  406686:	f040 81de 	bne.w	406a46 <_vfiprintf_r+0x70e>
  40668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40668c:	2b00      	cmp	r3, #0
  40668e:	f000 81f8 	beq.w	406a82 <_vfiprintf_r+0x74a>
  406692:	3202      	adds	r2, #2
  406694:	a90e      	add	r1, sp, #56	; 0x38
  406696:	2302      	movs	r3, #2
  406698:	2807      	cmp	r0, #7
  40669a:	9211      	str	r2, [sp, #68]	; 0x44
  40669c:	9010      	str	r0, [sp, #64]	; 0x40
  40669e:	e88a 000a 	stmia.w	sl, {r1, r3}
  4066a2:	f340 81ea 	ble.w	406a7a <_vfiprintf_r+0x742>
  4066a6:	2a00      	cmp	r2, #0
  4066a8:	f040 838c 	bne.w	406dc4 <_vfiprintf_r+0xa8c>
  4066ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066ae:	2b80      	cmp	r3, #128	; 0x80
  4066b0:	f04f 0001 	mov.w	r0, #1
  4066b4:	4611      	mov	r1, r2
  4066b6:	46ca      	mov	sl, r9
  4066b8:	f040 81e7 	bne.w	406a8a <_vfiprintf_r+0x752>
  4066bc:	9b08      	ldr	r3, [sp, #32]
  4066be:	9d01      	ldr	r5, [sp, #4]
  4066c0:	1b5e      	subs	r6, r3, r5
  4066c2:	2e00      	cmp	r6, #0
  4066c4:	f340 81e1 	ble.w	406a8a <_vfiprintf_r+0x752>
  4066c8:	2e10      	cmp	r6, #16
  4066ca:	4d9a      	ldr	r5, [pc, #616]	; (406934 <_vfiprintf_r+0x5fc>)
  4066cc:	f340 8450 	ble.w	406f70 <_vfiprintf_r+0xc38>
  4066d0:	46d4      	mov	ip, sl
  4066d2:	2710      	movs	r7, #16
  4066d4:	46a2      	mov	sl, r4
  4066d6:	9c06      	ldr	r4, [sp, #24]
  4066d8:	e007      	b.n	4066ea <_vfiprintf_r+0x3b2>
  4066da:	f101 0e02 	add.w	lr, r1, #2
  4066de:	f10c 0c08 	add.w	ip, ip, #8
  4066e2:	4601      	mov	r1, r0
  4066e4:	3e10      	subs	r6, #16
  4066e6:	2e10      	cmp	r6, #16
  4066e8:	dd11      	ble.n	40670e <_vfiprintf_r+0x3d6>
  4066ea:	1c48      	adds	r0, r1, #1
  4066ec:	3210      	adds	r2, #16
  4066ee:	2807      	cmp	r0, #7
  4066f0:	9211      	str	r2, [sp, #68]	; 0x44
  4066f2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4066f6:	9010      	str	r0, [sp, #64]	; 0x40
  4066f8:	ddef      	ble.n	4066da <_vfiprintf_r+0x3a2>
  4066fa:	2a00      	cmp	r2, #0
  4066fc:	f040 829d 	bne.w	406c3a <_vfiprintf_r+0x902>
  406700:	3e10      	subs	r6, #16
  406702:	2e10      	cmp	r6, #16
  406704:	f04f 0e01 	mov.w	lr, #1
  406708:	4611      	mov	r1, r2
  40670a:	46cc      	mov	ip, r9
  40670c:	dced      	bgt.n	4066ea <_vfiprintf_r+0x3b2>
  40670e:	4654      	mov	r4, sl
  406710:	46e2      	mov	sl, ip
  406712:	4432      	add	r2, r6
  406714:	f1be 0f07 	cmp.w	lr, #7
  406718:	9211      	str	r2, [sp, #68]	; 0x44
  40671a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40671e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406722:	f300 8369 	bgt.w	406df8 <_vfiprintf_r+0xac0>
  406726:	f10a 0a08 	add.w	sl, sl, #8
  40672a:	f10e 0001 	add.w	r0, lr, #1
  40672e:	4671      	mov	r1, lr
  406730:	e1ab      	b.n	406a8a <_vfiprintf_r+0x752>
  406732:	9608      	str	r6, [sp, #32]
  406734:	f013 0220 	ands.w	r2, r3, #32
  406738:	f040 838c 	bne.w	406e54 <_vfiprintf_r+0xb1c>
  40673c:	f013 0110 	ands.w	r1, r3, #16
  406740:	f040 831a 	bne.w	406d78 <_vfiprintf_r+0xa40>
  406744:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406748:	f000 8316 	beq.w	406d78 <_vfiprintf_r+0xa40>
  40674c:	9807      	ldr	r0, [sp, #28]
  40674e:	460a      	mov	r2, r1
  406750:	4601      	mov	r1, r0
  406752:	3104      	adds	r1, #4
  406754:	8806      	ldrh	r6, [r0, #0]
  406756:	9107      	str	r1, [sp, #28]
  406758:	2700      	movs	r7, #0
  40675a:	e720      	b.n	40659e <_vfiprintf_r+0x266>
  40675c:	9608      	str	r6, [sp, #32]
  40675e:	f043 0310 	orr.w	r3, r3, #16
  406762:	e7e7      	b.n	406734 <_vfiprintf_r+0x3fc>
  406764:	9608      	str	r6, [sp, #32]
  406766:	f043 0310 	orr.w	r3, r3, #16
  40676a:	e708      	b.n	40657e <_vfiprintf_r+0x246>
  40676c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406770:	f898 2000 	ldrb.w	r2, [r8]
  406774:	e652      	b.n	40641c <_vfiprintf_r+0xe4>
  406776:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40677a:	2600      	movs	r6, #0
  40677c:	f818 2b01 	ldrb.w	r2, [r8], #1
  406780:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406784:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406788:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40678c:	2909      	cmp	r1, #9
  40678e:	d9f5      	bls.n	40677c <_vfiprintf_r+0x444>
  406790:	e646      	b.n	406420 <_vfiprintf_r+0xe8>
  406792:	9608      	str	r6, [sp, #32]
  406794:	2800      	cmp	r0, #0
  406796:	f040 8408 	bne.w	406faa <_vfiprintf_r+0xc72>
  40679a:	f043 0310 	orr.w	r3, r3, #16
  40679e:	069e      	lsls	r6, r3, #26
  4067a0:	f100 834c 	bmi.w	406e3c <_vfiprintf_r+0xb04>
  4067a4:	06dd      	lsls	r5, r3, #27
  4067a6:	f100 82f3 	bmi.w	406d90 <_vfiprintf_r+0xa58>
  4067aa:	0658      	lsls	r0, r3, #25
  4067ac:	f140 82f0 	bpl.w	406d90 <_vfiprintf_r+0xa58>
  4067b0:	9d07      	ldr	r5, [sp, #28]
  4067b2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4067b6:	462a      	mov	r2, r5
  4067b8:	17f7      	asrs	r7, r6, #31
  4067ba:	3204      	adds	r2, #4
  4067bc:	4630      	mov	r0, r6
  4067be:	4639      	mov	r1, r7
  4067c0:	9207      	str	r2, [sp, #28]
  4067c2:	2800      	cmp	r0, #0
  4067c4:	f171 0200 	sbcs.w	r2, r1, #0
  4067c8:	f2c0 835d 	blt.w	406e86 <_vfiprintf_r+0xb4e>
  4067cc:	1c61      	adds	r1, r4, #1
  4067ce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4067d2:	f04f 0201 	mov.w	r2, #1
  4067d6:	f47f aeea 	bne.w	4065ae <_vfiprintf_r+0x276>
  4067da:	ea56 0107 	orrs.w	r1, r6, r7
  4067de:	f000 824d 	beq.w	406c7c <_vfiprintf_r+0x944>
  4067e2:	9302      	str	r3, [sp, #8]
  4067e4:	2a01      	cmp	r2, #1
  4067e6:	f000 828c 	beq.w	406d02 <_vfiprintf_r+0x9ca>
  4067ea:	2a02      	cmp	r2, #2
  4067ec:	f040 825c 	bne.w	406ca8 <_vfiprintf_r+0x970>
  4067f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4067f2:	46cb      	mov	fp, r9
  4067f4:	0933      	lsrs	r3, r6, #4
  4067f6:	f006 010f 	and.w	r1, r6, #15
  4067fa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4067fe:	093a      	lsrs	r2, r7, #4
  406800:	461e      	mov	r6, r3
  406802:	4617      	mov	r7, r2
  406804:	5c43      	ldrb	r3, [r0, r1]
  406806:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40680a:	ea56 0307 	orrs.w	r3, r6, r7
  40680e:	d1f1      	bne.n	4067f4 <_vfiprintf_r+0x4bc>
  406810:	eba9 030b 	sub.w	r3, r9, fp
  406814:	9305      	str	r3, [sp, #20]
  406816:	e6e1      	b.n	4065dc <_vfiprintf_r+0x2a4>
  406818:	2800      	cmp	r0, #0
  40681a:	f040 83c0 	bne.w	406f9e <_vfiprintf_r+0xc66>
  40681e:	0699      	lsls	r1, r3, #26
  406820:	f100 8367 	bmi.w	406ef2 <_vfiprintf_r+0xbba>
  406824:	06da      	lsls	r2, r3, #27
  406826:	f100 80f1 	bmi.w	406a0c <_vfiprintf_r+0x6d4>
  40682a:	065b      	lsls	r3, r3, #25
  40682c:	f140 80ee 	bpl.w	406a0c <_vfiprintf_r+0x6d4>
  406830:	9a07      	ldr	r2, [sp, #28]
  406832:	6813      	ldr	r3, [r2, #0]
  406834:	3204      	adds	r2, #4
  406836:	9207      	str	r2, [sp, #28]
  406838:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40683c:	801a      	strh	r2, [r3, #0]
  40683e:	e5b8      	b.n	4063b2 <_vfiprintf_r+0x7a>
  406840:	9807      	ldr	r0, [sp, #28]
  406842:	4a3d      	ldr	r2, [pc, #244]	; (406938 <_vfiprintf_r+0x600>)
  406844:	9608      	str	r6, [sp, #32]
  406846:	920b      	str	r2, [sp, #44]	; 0x2c
  406848:	6806      	ldr	r6, [r0, #0]
  40684a:	2278      	movs	r2, #120	; 0x78
  40684c:	2130      	movs	r1, #48	; 0x30
  40684e:	3004      	adds	r0, #4
  406850:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406854:	f043 0302 	orr.w	r3, r3, #2
  406858:	9007      	str	r0, [sp, #28]
  40685a:	2700      	movs	r7, #0
  40685c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406860:	2202      	movs	r2, #2
  406862:	e69c      	b.n	40659e <_vfiprintf_r+0x266>
  406864:	9608      	str	r6, [sp, #32]
  406866:	2800      	cmp	r0, #0
  406868:	d099      	beq.n	40679e <_vfiprintf_r+0x466>
  40686a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40686e:	e796      	b.n	40679e <_vfiprintf_r+0x466>
  406870:	f898 2000 	ldrb.w	r2, [r8]
  406874:	2d00      	cmp	r5, #0
  406876:	f47f add1 	bne.w	40641c <_vfiprintf_r+0xe4>
  40687a:	2001      	movs	r0, #1
  40687c:	2520      	movs	r5, #32
  40687e:	e5cd      	b.n	40641c <_vfiprintf_r+0xe4>
  406880:	f043 0301 	orr.w	r3, r3, #1
  406884:	f898 2000 	ldrb.w	r2, [r8]
  406888:	e5c8      	b.n	40641c <_vfiprintf_r+0xe4>
  40688a:	9608      	str	r6, [sp, #32]
  40688c:	2800      	cmp	r0, #0
  40688e:	f040 8393 	bne.w	406fb8 <_vfiprintf_r+0xc80>
  406892:	4929      	ldr	r1, [pc, #164]	; (406938 <_vfiprintf_r+0x600>)
  406894:	910b      	str	r1, [sp, #44]	; 0x2c
  406896:	069f      	lsls	r7, r3, #26
  406898:	f100 82e8 	bmi.w	406e6c <_vfiprintf_r+0xb34>
  40689c:	9807      	ldr	r0, [sp, #28]
  40689e:	06de      	lsls	r6, r3, #27
  4068a0:	4601      	mov	r1, r0
  4068a2:	f100 8270 	bmi.w	406d86 <_vfiprintf_r+0xa4e>
  4068a6:	065d      	lsls	r5, r3, #25
  4068a8:	f140 826d 	bpl.w	406d86 <_vfiprintf_r+0xa4e>
  4068ac:	3104      	adds	r1, #4
  4068ae:	8806      	ldrh	r6, [r0, #0]
  4068b0:	9107      	str	r1, [sp, #28]
  4068b2:	2700      	movs	r7, #0
  4068b4:	07d8      	lsls	r0, r3, #31
  4068b6:	f140 8222 	bpl.w	406cfe <_vfiprintf_r+0x9c6>
  4068ba:	ea56 0107 	orrs.w	r1, r6, r7
  4068be:	f000 821e 	beq.w	406cfe <_vfiprintf_r+0x9c6>
  4068c2:	2130      	movs	r1, #48	; 0x30
  4068c4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4068c8:	f043 0302 	orr.w	r3, r3, #2
  4068cc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4068d0:	2202      	movs	r2, #2
  4068d2:	e664      	b.n	40659e <_vfiprintf_r+0x266>
  4068d4:	9608      	str	r6, [sp, #32]
  4068d6:	2800      	cmp	r0, #0
  4068d8:	f040 836b 	bne.w	406fb2 <_vfiprintf_r+0xc7a>
  4068dc:	4917      	ldr	r1, [pc, #92]	; (40693c <_vfiprintf_r+0x604>)
  4068de:	910b      	str	r1, [sp, #44]	; 0x2c
  4068e0:	e7d9      	b.n	406896 <_vfiprintf_r+0x55e>
  4068e2:	9907      	ldr	r1, [sp, #28]
  4068e4:	9608      	str	r6, [sp, #32]
  4068e6:	680a      	ldr	r2, [r1, #0]
  4068e8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4068ec:	f04f 0000 	mov.w	r0, #0
  4068f0:	460a      	mov	r2, r1
  4068f2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4068f6:	3204      	adds	r2, #4
  4068f8:	2001      	movs	r0, #1
  4068fa:	9001      	str	r0, [sp, #4]
  4068fc:	9207      	str	r2, [sp, #28]
  4068fe:	9005      	str	r0, [sp, #20]
  406900:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406904:	9302      	str	r3, [sp, #8]
  406906:	2400      	movs	r4, #0
  406908:	e670      	b.n	4065ec <_vfiprintf_r+0x2b4>
  40690a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40690e:	f898 2000 	ldrb.w	r2, [r8]
  406912:	e583      	b.n	40641c <_vfiprintf_r+0xe4>
  406914:	f898 2000 	ldrb.w	r2, [r8]
  406918:	2a6c      	cmp	r2, #108	; 0x6c
  40691a:	bf03      	ittte	eq
  40691c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406920:	f043 0320 	orreq.w	r3, r3, #32
  406924:	f108 0801 	addeq.w	r8, r8, #1
  406928:	f043 0310 	orrne.w	r3, r3, #16
  40692c:	e576      	b.n	40641c <_vfiprintf_r+0xe4>
  40692e:	bf00      	nop
  406930:	0040a13c 	.word	0x0040a13c
  406934:	0040a14c 	.word	0x0040a14c
  406938:	0040a0fc 	.word	0x0040a0fc
  40693c:	0040a0e8 	.word	0x0040a0e8
  406940:	9907      	ldr	r1, [sp, #28]
  406942:	680e      	ldr	r6, [r1, #0]
  406944:	460a      	mov	r2, r1
  406946:	2e00      	cmp	r6, #0
  406948:	f102 0204 	add.w	r2, r2, #4
  40694c:	f6ff ae0f 	blt.w	40656e <_vfiprintf_r+0x236>
  406950:	9207      	str	r2, [sp, #28]
  406952:	f898 2000 	ldrb.w	r2, [r8]
  406956:	e561      	b.n	40641c <_vfiprintf_r+0xe4>
  406958:	f898 2000 	ldrb.w	r2, [r8]
  40695c:	2001      	movs	r0, #1
  40695e:	252b      	movs	r5, #43	; 0x2b
  406960:	e55c      	b.n	40641c <_vfiprintf_r+0xe4>
  406962:	9907      	ldr	r1, [sp, #28]
  406964:	9608      	str	r6, [sp, #32]
  406966:	f8d1 b000 	ldr.w	fp, [r1]
  40696a:	f04f 0200 	mov.w	r2, #0
  40696e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406972:	1d0e      	adds	r6, r1, #4
  406974:	f1bb 0f00 	cmp.w	fp, #0
  406978:	f000 82e5 	beq.w	406f46 <_vfiprintf_r+0xc0e>
  40697c:	1c67      	adds	r7, r4, #1
  40697e:	f000 82c4 	beq.w	406f0a <_vfiprintf_r+0xbd2>
  406982:	4622      	mov	r2, r4
  406984:	2100      	movs	r1, #0
  406986:	4658      	mov	r0, fp
  406988:	9301      	str	r3, [sp, #4]
  40698a:	f002 f8f1 	bl	408b70 <memchr>
  40698e:	9b01      	ldr	r3, [sp, #4]
  406990:	2800      	cmp	r0, #0
  406992:	f000 82e5 	beq.w	406f60 <_vfiprintf_r+0xc28>
  406996:	eba0 020b 	sub.w	r2, r0, fp
  40699a:	9205      	str	r2, [sp, #20]
  40699c:	9607      	str	r6, [sp, #28]
  40699e:	9302      	str	r3, [sp, #8]
  4069a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069a4:	2400      	movs	r4, #0
  4069a6:	e619      	b.n	4065dc <_vfiprintf_r+0x2a4>
  4069a8:	f898 2000 	ldrb.w	r2, [r8]
  4069ac:	2a2a      	cmp	r2, #42	; 0x2a
  4069ae:	f108 0701 	add.w	r7, r8, #1
  4069b2:	f000 82e9 	beq.w	406f88 <_vfiprintf_r+0xc50>
  4069b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4069ba:	2909      	cmp	r1, #9
  4069bc:	46b8      	mov	r8, r7
  4069be:	f04f 0400 	mov.w	r4, #0
  4069c2:	f63f ad2d 	bhi.w	406420 <_vfiprintf_r+0xe8>
  4069c6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4069ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4069ce:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4069d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4069d6:	2909      	cmp	r1, #9
  4069d8:	d9f5      	bls.n	4069c6 <_vfiprintf_r+0x68e>
  4069da:	e521      	b.n	406420 <_vfiprintf_r+0xe8>
  4069dc:	f043 0320 	orr.w	r3, r3, #32
  4069e0:	f898 2000 	ldrb.w	r2, [r8]
  4069e4:	e51a      	b.n	40641c <_vfiprintf_r+0xe4>
  4069e6:	9608      	str	r6, [sp, #32]
  4069e8:	2800      	cmp	r0, #0
  4069ea:	f040 82db 	bne.w	406fa4 <_vfiprintf_r+0xc6c>
  4069ee:	2a00      	cmp	r2, #0
  4069f0:	f000 80e7 	beq.w	406bc2 <_vfiprintf_r+0x88a>
  4069f4:	2101      	movs	r1, #1
  4069f6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4069fa:	f04f 0200 	mov.w	r2, #0
  4069fe:	9101      	str	r1, [sp, #4]
  406a00:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406a04:	9105      	str	r1, [sp, #20]
  406a06:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406a0a:	e77b      	b.n	406904 <_vfiprintf_r+0x5cc>
  406a0c:	9a07      	ldr	r2, [sp, #28]
  406a0e:	6813      	ldr	r3, [r2, #0]
  406a10:	3204      	adds	r2, #4
  406a12:	9207      	str	r2, [sp, #28]
  406a14:	9a03      	ldr	r2, [sp, #12]
  406a16:	601a      	str	r2, [r3, #0]
  406a18:	e4cb      	b.n	4063b2 <_vfiprintf_r+0x7a>
  406a1a:	aa0f      	add	r2, sp, #60	; 0x3c
  406a1c:	9904      	ldr	r1, [sp, #16]
  406a1e:	4620      	mov	r0, r4
  406a20:	f7ff fc4a 	bl	4062b8 <__sprint_r.part.0>
  406a24:	2800      	cmp	r0, #0
  406a26:	f040 8139 	bne.w	406c9c <_vfiprintf_r+0x964>
  406a2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a2e:	f101 0c01 	add.w	ip, r1, #1
  406a32:	46ce      	mov	lr, r9
  406a34:	e5ff      	b.n	406636 <_vfiprintf_r+0x2fe>
  406a36:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a3a:	1c48      	adds	r0, r1, #1
  406a3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406a40:	2d00      	cmp	r5, #0
  406a42:	f43f ae22 	beq.w	40668a <_vfiprintf_r+0x352>
  406a46:	3201      	adds	r2, #1
  406a48:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406a4c:	2101      	movs	r1, #1
  406a4e:	2807      	cmp	r0, #7
  406a50:	9211      	str	r2, [sp, #68]	; 0x44
  406a52:	9010      	str	r0, [sp, #64]	; 0x40
  406a54:	f8ca 5000 	str.w	r5, [sl]
  406a58:	f8ca 1004 	str.w	r1, [sl, #4]
  406a5c:	f340 8108 	ble.w	406c70 <_vfiprintf_r+0x938>
  406a60:	2a00      	cmp	r2, #0
  406a62:	f040 81bc 	bne.w	406dde <_vfiprintf_r+0xaa6>
  406a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a68:	2b00      	cmp	r3, #0
  406a6a:	f43f ae1f 	beq.w	4066ac <_vfiprintf_r+0x374>
  406a6e:	ab0e      	add	r3, sp, #56	; 0x38
  406a70:	2202      	movs	r2, #2
  406a72:	4608      	mov	r0, r1
  406a74:	931c      	str	r3, [sp, #112]	; 0x70
  406a76:	921d      	str	r2, [sp, #116]	; 0x74
  406a78:	46ca      	mov	sl, r9
  406a7a:	4601      	mov	r1, r0
  406a7c:	f10a 0a08 	add.w	sl, sl, #8
  406a80:	3001      	adds	r0, #1
  406a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a84:	2b80      	cmp	r3, #128	; 0x80
  406a86:	f43f ae19 	beq.w	4066bc <_vfiprintf_r+0x384>
  406a8a:	9b05      	ldr	r3, [sp, #20]
  406a8c:	1ae4      	subs	r4, r4, r3
  406a8e:	2c00      	cmp	r4, #0
  406a90:	dd2e      	ble.n	406af0 <_vfiprintf_r+0x7b8>
  406a92:	2c10      	cmp	r4, #16
  406a94:	4db3      	ldr	r5, [pc, #716]	; (406d64 <_vfiprintf_r+0xa2c>)
  406a96:	dd1e      	ble.n	406ad6 <_vfiprintf_r+0x79e>
  406a98:	46d6      	mov	lr, sl
  406a9a:	2610      	movs	r6, #16
  406a9c:	9f06      	ldr	r7, [sp, #24]
  406a9e:	f8dd a010 	ldr.w	sl, [sp, #16]
  406aa2:	e006      	b.n	406ab2 <_vfiprintf_r+0x77a>
  406aa4:	1c88      	adds	r0, r1, #2
  406aa6:	f10e 0e08 	add.w	lr, lr, #8
  406aaa:	4619      	mov	r1, r3
  406aac:	3c10      	subs	r4, #16
  406aae:	2c10      	cmp	r4, #16
  406ab0:	dd10      	ble.n	406ad4 <_vfiprintf_r+0x79c>
  406ab2:	1c4b      	adds	r3, r1, #1
  406ab4:	3210      	adds	r2, #16
  406ab6:	2b07      	cmp	r3, #7
  406ab8:	9211      	str	r2, [sp, #68]	; 0x44
  406aba:	e88e 0060 	stmia.w	lr, {r5, r6}
  406abe:	9310      	str	r3, [sp, #64]	; 0x40
  406ac0:	ddf0      	ble.n	406aa4 <_vfiprintf_r+0x76c>
  406ac2:	2a00      	cmp	r2, #0
  406ac4:	d165      	bne.n	406b92 <_vfiprintf_r+0x85a>
  406ac6:	3c10      	subs	r4, #16
  406ac8:	2c10      	cmp	r4, #16
  406aca:	f04f 0001 	mov.w	r0, #1
  406ace:	4611      	mov	r1, r2
  406ad0:	46ce      	mov	lr, r9
  406ad2:	dcee      	bgt.n	406ab2 <_vfiprintf_r+0x77a>
  406ad4:	46f2      	mov	sl, lr
  406ad6:	4422      	add	r2, r4
  406ad8:	2807      	cmp	r0, #7
  406ada:	9211      	str	r2, [sp, #68]	; 0x44
  406adc:	f8ca 5000 	str.w	r5, [sl]
  406ae0:	f8ca 4004 	str.w	r4, [sl, #4]
  406ae4:	9010      	str	r0, [sp, #64]	; 0x40
  406ae6:	f300 8085 	bgt.w	406bf4 <_vfiprintf_r+0x8bc>
  406aea:	f10a 0a08 	add.w	sl, sl, #8
  406aee:	3001      	adds	r0, #1
  406af0:	9905      	ldr	r1, [sp, #20]
  406af2:	f8ca b000 	str.w	fp, [sl]
  406af6:	440a      	add	r2, r1
  406af8:	2807      	cmp	r0, #7
  406afa:	9211      	str	r2, [sp, #68]	; 0x44
  406afc:	f8ca 1004 	str.w	r1, [sl, #4]
  406b00:	9010      	str	r0, [sp, #64]	; 0x40
  406b02:	f340 8082 	ble.w	406c0a <_vfiprintf_r+0x8d2>
  406b06:	2a00      	cmp	r2, #0
  406b08:	f040 8118 	bne.w	406d3c <_vfiprintf_r+0xa04>
  406b0c:	9b02      	ldr	r3, [sp, #8]
  406b0e:	9210      	str	r2, [sp, #64]	; 0x40
  406b10:	0758      	lsls	r0, r3, #29
  406b12:	d535      	bpl.n	406b80 <_vfiprintf_r+0x848>
  406b14:	9b08      	ldr	r3, [sp, #32]
  406b16:	9901      	ldr	r1, [sp, #4]
  406b18:	1a5c      	subs	r4, r3, r1
  406b1a:	2c00      	cmp	r4, #0
  406b1c:	f340 80e7 	ble.w	406cee <_vfiprintf_r+0x9b6>
  406b20:	46ca      	mov	sl, r9
  406b22:	2c10      	cmp	r4, #16
  406b24:	f340 8218 	ble.w	406f58 <_vfiprintf_r+0xc20>
  406b28:	9910      	ldr	r1, [sp, #64]	; 0x40
  406b2a:	4e8f      	ldr	r6, [pc, #572]	; (406d68 <_vfiprintf_r+0xa30>)
  406b2c:	9f06      	ldr	r7, [sp, #24]
  406b2e:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b32:	2510      	movs	r5, #16
  406b34:	e006      	b.n	406b44 <_vfiprintf_r+0x80c>
  406b36:	1c88      	adds	r0, r1, #2
  406b38:	f10a 0a08 	add.w	sl, sl, #8
  406b3c:	4619      	mov	r1, r3
  406b3e:	3c10      	subs	r4, #16
  406b40:	2c10      	cmp	r4, #16
  406b42:	dd11      	ble.n	406b68 <_vfiprintf_r+0x830>
  406b44:	1c4b      	adds	r3, r1, #1
  406b46:	3210      	adds	r2, #16
  406b48:	2b07      	cmp	r3, #7
  406b4a:	9211      	str	r2, [sp, #68]	; 0x44
  406b4c:	f8ca 6000 	str.w	r6, [sl]
  406b50:	f8ca 5004 	str.w	r5, [sl, #4]
  406b54:	9310      	str	r3, [sp, #64]	; 0x40
  406b56:	ddee      	ble.n	406b36 <_vfiprintf_r+0x7fe>
  406b58:	bb42      	cbnz	r2, 406bac <_vfiprintf_r+0x874>
  406b5a:	3c10      	subs	r4, #16
  406b5c:	2c10      	cmp	r4, #16
  406b5e:	f04f 0001 	mov.w	r0, #1
  406b62:	4611      	mov	r1, r2
  406b64:	46ca      	mov	sl, r9
  406b66:	dced      	bgt.n	406b44 <_vfiprintf_r+0x80c>
  406b68:	4422      	add	r2, r4
  406b6a:	2807      	cmp	r0, #7
  406b6c:	9211      	str	r2, [sp, #68]	; 0x44
  406b6e:	f8ca 6000 	str.w	r6, [sl]
  406b72:	f8ca 4004 	str.w	r4, [sl, #4]
  406b76:	9010      	str	r0, [sp, #64]	; 0x40
  406b78:	dd51      	ble.n	406c1e <_vfiprintf_r+0x8e6>
  406b7a:	2a00      	cmp	r2, #0
  406b7c:	f040 819b 	bne.w	406eb6 <_vfiprintf_r+0xb7e>
  406b80:	9b03      	ldr	r3, [sp, #12]
  406b82:	9a08      	ldr	r2, [sp, #32]
  406b84:	9901      	ldr	r1, [sp, #4]
  406b86:	428a      	cmp	r2, r1
  406b88:	bfac      	ite	ge
  406b8a:	189b      	addge	r3, r3, r2
  406b8c:	185b      	addlt	r3, r3, r1
  406b8e:	9303      	str	r3, [sp, #12]
  406b90:	e04e      	b.n	406c30 <_vfiprintf_r+0x8f8>
  406b92:	aa0f      	add	r2, sp, #60	; 0x3c
  406b94:	4651      	mov	r1, sl
  406b96:	4638      	mov	r0, r7
  406b98:	f7ff fb8e 	bl	4062b8 <__sprint_r.part.0>
  406b9c:	2800      	cmp	r0, #0
  406b9e:	f040 813f 	bne.w	406e20 <_vfiprintf_r+0xae8>
  406ba2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ba4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ba6:	1c48      	adds	r0, r1, #1
  406ba8:	46ce      	mov	lr, r9
  406baa:	e77f      	b.n	406aac <_vfiprintf_r+0x774>
  406bac:	aa0f      	add	r2, sp, #60	; 0x3c
  406bae:	4659      	mov	r1, fp
  406bb0:	4638      	mov	r0, r7
  406bb2:	f7ff fb81 	bl	4062b8 <__sprint_r.part.0>
  406bb6:	b960      	cbnz	r0, 406bd2 <_vfiprintf_r+0x89a>
  406bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bbc:	1c48      	adds	r0, r1, #1
  406bbe:	46ca      	mov	sl, r9
  406bc0:	e7bd      	b.n	406b3e <_vfiprintf_r+0x806>
  406bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bc4:	f8dd b010 	ldr.w	fp, [sp, #16]
  406bc8:	2b00      	cmp	r3, #0
  406bca:	f040 81d4 	bne.w	406f76 <_vfiprintf_r+0xc3e>
  406bce:	2300      	movs	r3, #0
  406bd0:	9310      	str	r3, [sp, #64]	; 0x40
  406bd2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406bd6:	f013 0f01 	tst.w	r3, #1
  406bda:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406bde:	d102      	bne.n	406be6 <_vfiprintf_r+0x8ae>
  406be0:	059a      	lsls	r2, r3, #22
  406be2:	f140 80de 	bpl.w	406da2 <_vfiprintf_r+0xa6a>
  406be6:	065b      	lsls	r3, r3, #25
  406be8:	f53f acb2 	bmi.w	406550 <_vfiprintf_r+0x218>
  406bec:	9803      	ldr	r0, [sp, #12]
  406bee:	b02d      	add	sp, #180	; 0xb4
  406bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bf4:	2a00      	cmp	r2, #0
  406bf6:	f040 8106 	bne.w	406e06 <_vfiprintf_r+0xace>
  406bfa:	9a05      	ldr	r2, [sp, #20]
  406bfc:	921d      	str	r2, [sp, #116]	; 0x74
  406bfe:	2301      	movs	r3, #1
  406c00:	9211      	str	r2, [sp, #68]	; 0x44
  406c02:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406c06:	9310      	str	r3, [sp, #64]	; 0x40
  406c08:	46ca      	mov	sl, r9
  406c0a:	f10a 0a08 	add.w	sl, sl, #8
  406c0e:	9b02      	ldr	r3, [sp, #8]
  406c10:	0759      	lsls	r1, r3, #29
  406c12:	d504      	bpl.n	406c1e <_vfiprintf_r+0x8e6>
  406c14:	9b08      	ldr	r3, [sp, #32]
  406c16:	9901      	ldr	r1, [sp, #4]
  406c18:	1a5c      	subs	r4, r3, r1
  406c1a:	2c00      	cmp	r4, #0
  406c1c:	dc81      	bgt.n	406b22 <_vfiprintf_r+0x7ea>
  406c1e:	9b03      	ldr	r3, [sp, #12]
  406c20:	9908      	ldr	r1, [sp, #32]
  406c22:	9801      	ldr	r0, [sp, #4]
  406c24:	4281      	cmp	r1, r0
  406c26:	bfac      	ite	ge
  406c28:	185b      	addge	r3, r3, r1
  406c2a:	181b      	addlt	r3, r3, r0
  406c2c:	9303      	str	r3, [sp, #12]
  406c2e:	bb72      	cbnz	r2, 406c8e <_vfiprintf_r+0x956>
  406c30:	2300      	movs	r3, #0
  406c32:	9310      	str	r3, [sp, #64]	; 0x40
  406c34:	46ca      	mov	sl, r9
  406c36:	f7ff bbbc 	b.w	4063b2 <_vfiprintf_r+0x7a>
  406c3a:	aa0f      	add	r2, sp, #60	; 0x3c
  406c3c:	9904      	ldr	r1, [sp, #16]
  406c3e:	4620      	mov	r0, r4
  406c40:	f7ff fb3a 	bl	4062b8 <__sprint_r.part.0>
  406c44:	bb50      	cbnz	r0, 406c9c <_vfiprintf_r+0x964>
  406c46:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c4a:	f101 0e01 	add.w	lr, r1, #1
  406c4e:	46cc      	mov	ip, r9
  406c50:	e548      	b.n	4066e4 <_vfiprintf_r+0x3ac>
  406c52:	2a00      	cmp	r2, #0
  406c54:	f040 8140 	bne.w	406ed8 <_vfiprintf_r+0xba0>
  406c58:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406c5c:	2900      	cmp	r1, #0
  406c5e:	f000 811b 	beq.w	406e98 <_vfiprintf_r+0xb60>
  406c62:	2201      	movs	r2, #1
  406c64:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406c68:	4610      	mov	r0, r2
  406c6a:	921d      	str	r2, [sp, #116]	; 0x74
  406c6c:	911c      	str	r1, [sp, #112]	; 0x70
  406c6e:	46ca      	mov	sl, r9
  406c70:	4601      	mov	r1, r0
  406c72:	f10a 0a08 	add.w	sl, sl, #8
  406c76:	3001      	adds	r0, #1
  406c78:	e507      	b.n	40668a <_vfiprintf_r+0x352>
  406c7a:	9b02      	ldr	r3, [sp, #8]
  406c7c:	2a01      	cmp	r2, #1
  406c7e:	f000 8098 	beq.w	406db2 <_vfiprintf_r+0xa7a>
  406c82:	2a02      	cmp	r2, #2
  406c84:	d10d      	bne.n	406ca2 <_vfiprintf_r+0x96a>
  406c86:	9302      	str	r3, [sp, #8]
  406c88:	2600      	movs	r6, #0
  406c8a:	2700      	movs	r7, #0
  406c8c:	e5b0      	b.n	4067f0 <_vfiprintf_r+0x4b8>
  406c8e:	aa0f      	add	r2, sp, #60	; 0x3c
  406c90:	9904      	ldr	r1, [sp, #16]
  406c92:	9806      	ldr	r0, [sp, #24]
  406c94:	f7ff fb10 	bl	4062b8 <__sprint_r.part.0>
  406c98:	2800      	cmp	r0, #0
  406c9a:	d0c9      	beq.n	406c30 <_vfiprintf_r+0x8f8>
  406c9c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406ca0:	e797      	b.n	406bd2 <_vfiprintf_r+0x89a>
  406ca2:	9302      	str	r3, [sp, #8]
  406ca4:	2600      	movs	r6, #0
  406ca6:	2700      	movs	r7, #0
  406ca8:	4649      	mov	r1, r9
  406caa:	e000      	b.n	406cae <_vfiprintf_r+0x976>
  406cac:	4659      	mov	r1, fp
  406cae:	08f2      	lsrs	r2, r6, #3
  406cb0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406cb4:	08f8      	lsrs	r0, r7, #3
  406cb6:	f006 0307 	and.w	r3, r6, #7
  406cba:	4607      	mov	r7, r0
  406cbc:	4616      	mov	r6, r2
  406cbe:	3330      	adds	r3, #48	; 0x30
  406cc0:	ea56 0207 	orrs.w	r2, r6, r7
  406cc4:	f801 3c01 	strb.w	r3, [r1, #-1]
  406cc8:	f101 3bff 	add.w	fp, r1, #4294967295
  406ccc:	d1ee      	bne.n	406cac <_vfiprintf_r+0x974>
  406cce:	9a02      	ldr	r2, [sp, #8]
  406cd0:	07d6      	lsls	r6, r2, #31
  406cd2:	f57f ad9d 	bpl.w	406810 <_vfiprintf_r+0x4d8>
  406cd6:	2b30      	cmp	r3, #48	; 0x30
  406cd8:	f43f ad9a 	beq.w	406810 <_vfiprintf_r+0x4d8>
  406cdc:	3902      	subs	r1, #2
  406cde:	2330      	movs	r3, #48	; 0x30
  406ce0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406ce4:	eba9 0301 	sub.w	r3, r9, r1
  406ce8:	9305      	str	r3, [sp, #20]
  406cea:	468b      	mov	fp, r1
  406cec:	e476      	b.n	4065dc <_vfiprintf_r+0x2a4>
  406cee:	9b03      	ldr	r3, [sp, #12]
  406cf0:	9a08      	ldr	r2, [sp, #32]
  406cf2:	428a      	cmp	r2, r1
  406cf4:	bfac      	ite	ge
  406cf6:	189b      	addge	r3, r3, r2
  406cf8:	185b      	addlt	r3, r3, r1
  406cfa:	9303      	str	r3, [sp, #12]
  406cfc:	e798      	b.n	406c30 <_vfiprintf_r+0x8f8>
  406cfe:	2202      	movs	r2, #2
  406d00:	e44d      	b.n	40659e <_vfiprintf_r+0x266>
  406d02:	2f00      	cmp	r7, #0
  406d04:	bf08      	it	eq
  406d06:	2e0a      	cmpeq	r6, #10
  406d08:	d352      	bcc.n	406db0 <_vfiprintf_r+0xa78>
  406d0a:	46cb      	mov	fp, r9
  406d0c:	4630      	mov	r0, r6
  406d0e:	4639      	mov	r1, r7
  406d10:	220a      	movs	r2, #10
  406d12:	2300      	movs	r3, #0
  406d14:	f002 ffde 	bl	409cd4 <__aeabi_uldivmod>
  406d18:	3230      	adds	r2, #48	; 0x30
  406d1a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406d1e:	4630      	mov	r0, r6
  406d20:	4639      	mov	r1, r7
  406d22:	2300      	movs	r3, #0
  406d24:	220a      	movs	r2, #10
  406d26:	f002 ffd5 	bl	409cd4 <__aeabi_uldivmod>
  406d2a:	4606      	mov	r6, r0
  406d2c:	460f      	mov	r7, r1
  406d2e:	ea56 0307 	orrs.w	r3, r6, r7
  406d32:	d1eb      	bne.n	406d0c <_vfiprintf_r+0x9d4>
  406d34:	e56c      	b.n	406810 <_vfiprintf_r+0x4d8>
  406d36:	9405      	str	r4, [sp, #20]
  406d38:	46cb      	mov	fp, r9
  406d3a:	e44f      	b.n	4065dc <_vfiprintf_r+0x2a4>
  406d3c:	aa0f      	add	r2, sp, #60	; 0x3c
  406d3e:	9904      	ldr	r1, [sp, #16]
  406d40:	9806      	ldr	r0, [sp, #24]
  406d42:	f7ff fab9 	bl	4062b8 <__sprint_r.part.0>
  406d46:	2800      	cmp	r0, #0
  406d48:	d1a8      	bne.n	406c9c <_vfiprintf_r+0x964>
  406d4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d4c:	46ca      	mov	sl, r9
  406d4e:	e75e      	b.n	406c0e <_vfiprintf_r+0x8d6>
  406d50:	aa0f      	add	r2, sp, #60	; 0x3c
  406d52:	9904      	ldr	r1, [sp, #16]
  406d54:	9806      	ldr	r0, [sp, #24]
  406d56:	f7ff faaf 	bl	4062b8 <__sprint_r.part.0>
  406d5a:	2800      	cmp	r0, #0
  406d5c:	d19e      	bne.n	406c9c <_vfiprintf_r+0x964>
  406d5e:	46ca      	mov	sl, r9
  406d60:	f7ff bbc0 	b.w	4064e4 <_vfiprintf_r+0x1ac>
  406d64:	0040a14c 	.word	0x0040a14c
  406d68:	0040a13c 	.word	0x0040a13c
  406d6c:	3104      	adds	r1, #4
  406d6e:	6816      	ldr	r6, [r2, #0]
  406d70:	9107      	str	r1, [sp, #28]
  406d72:	2201      	movs	r2, #1
  406d74:	2700      	movs	r7, #0
  406d76:	e412      	b.n	40659e <_vfiprintf_r+0x266>
  406d78:	9807      	ldr	r0, [sp, #28]
  406d7a:	4601      	mov	r1, r0
  406d7c:	3104      	adds	r1, #4
  406d7e:	6806      	ldr	r6, [r0, #0]
  406d80:	9107      	str	r1, [sp, #28]
  406d82:	2700      	movs	r7, #0
  406d84:	e40b      	b.n	40659e <_vfiprintf_r+0x266>
  406d86:	680e      	ldr	r6, [r1, #0]
  406d88:	3104      	adds	r1, #4
  406d8a:	9107      	str	r1, [sp, #28]
  406d8c:	2700      	movs	r7, #0
  406d8e:	e591      	b.n	4068b4 <_vfiprintf_r+0x57c>
  406d90:	9907      	ldr	r1, [sp, #28]
  406d92:	680e      	ldr	r6, [r1, #0]
  406d94:	460a      	mov	r2, r1
  406d96:	17f7      	asrs	r7, r6, #31
  406d98:	3204      	adds	r2, #4
  406d9a:	9207      	str	r2, [sp, #28]
  406d9c:	4630      	mov	r0, r6
  406d9e:	4639      	mov	r1, r7
  406da0:	e50f      	b.n	4067c2 <_vfiprintf_r+0x48a>
  406da2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406da6:	f001 fe4d 	bl	408a44 <__retarget_lock_release_recursive>
  406daa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406dae:	e71a      	b.n	406be6 <_vfiprintf_r+0x8ae>
  406db0:	9b02      	ldr	r3, [sp, #8]
  406db2:	9302      	str	r3, [sp, #8]
  406db4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406db8:	3630      	adds	r6, #48	; 0x30
  406dba:	2301      	movs	r3, #1
  406dbc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406dc0:	9305      	str	r3, [sp, #20]
  406dc2:	e40b      	b.n	4065dc <_vfiprintf_r+0x2a4>
  406dc4:	aa0f      	add	r2, sp, #60	; 0x3c
  406dc6:	9904      	ldr	r1, [sp, #16]
  406dc8:	9806      	ldr	r0, [sp, #24]
  406dca:	f7ff fa75 	bl	4062b8 <__sprint_r.part.0>
  406dce:	2800      	cmp	r0, #0
  406dd0:	f47f af64 	bne.w	406c9c <_vfiprintf_r+0x964>
  406dd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  406dd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dd8:	1c48      	adds	r0, r1, #1
  406dda:	46ca      	mov	sl, r9
  406ddc:	e651      	b.n	406a82 <_vfiprintf_r+0x74a>
  406dde:	aa0f      	add	r2, sp, #60	; 0x3c
  406de0:	9904      	ldr	r1, [sp, #16]
  406de2:	9806      	ldr	r0, [sp, #24]
  406de4:	f7ff fa68 	bl	4062b8 <__sprint_r.part.0>
  406de8:	2800      	cmp	r0, #0
  406dea:	f47f af57 	bne.w	406c9c <_vfiprintf_r+0x964>
  406dee:	9910      	ldr	r1, [sp, #64]	; 0x40
  406df0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406df2:	1c48      	adds	r0, r1, #1
  406df4:	46ca      	mov	sl, r9
  406df6:	e448      	b.n	40668a <_vfiprintf_r+0x352>
  406df8:	2a00      	cmp	r2, #0
  406dfa:	f040 8091 	bne.w	406f20 <_vfiprintf_r+0xbe8>
  406dfe:	2001      	movs	r0, #1
  406e00:	4611      	mov	r1, r2
  406e02:	46ca      	mov	sl, r9
  406e04:	e641      	b.n	406a8a <_vfiprintf_r+0x752>
  406e06:	aa0f      	add	r2, sp, #60	; 0x3c
  406e08:	9904      	ldr	r1, [sp, #16]
  406e0a:	9806      	ldr	r0, [sp, #24]
  406e0c:	f7ff fa54 	bl	4062b8 <__sprint_r.part.0>
  406e10:	2800      	cmp	r0, #0
  406e12:	f47f af43 	bne.w	406c9c <_vfiprintf_r+0x964>
  406e16:	9810      	ldr	r0, [sp, #64]	; 0x40
  406e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e1a:	3001      	adds	r0, #1
  406e1c:	46ca      	mov	sl, r9
  406e1e:	e667      	b.n	406af0 <_vfiprintf_r+0x7b8>
  406e20:	46d3      	mov	fp, sl
  406e22:	e6d6      	b.n	406bd2 <_vfiprintf_r+0x89a>
  406e24:	9e07      	ldr	r6, [sp, #28]
  406e26:	3607      	adds	r6, #7
  406e28:	f026 0207 	bic.w	r2, r6, #7
  406e2c:	f102 0108 	add.w	r1, r2, #8
  406e30:	e9d2 6700 	ldrd	r6, r7, [r2]
  406e34:	9107      	str	r1, [sp, #28]
  406e36:	2201      	movs	r2, #1
  406e38:	f7ff bbb1 	b.w	40659e <_vfiprintf_r+0x266>
  406e3c:	9e07      	ldr	r6, [sp, #28]
  406e3e:	3607      	adds	r6, #7
  406e40:	f026 0607 	bic.w	r6, r6, #7
  406e44:	e9d6 0100 	ldrd	r0, r1, [r6]
  406e48:	f106 0208 	add.w	r2, r6, #8
  406e4c:	9207      	str	r2, [sp, #28]
  406e4e:	4606      	mov	r6, r0
  406e50:	460f      	mov	r7, r1
  406e52:	e4b6      	b.n	4067c2 <_vfiprintf_r+0x48a>
  406e54:	9e07      	ldr	r6, [sp, #28]
  406e56:	3607      	adds	r6, #7
  406e58:	f026 0207 	bic.w	r2, r6, #7
  406e5c:	f102 0108 	add.w	r1, r2, #8
  406e60:	e9d2 6700 	ldrd	r6, r7, [r2]
  406e64:	9107      	str	r1, [sp, #28]
  406e66:	2200      	movs	r2, #0
  406e68:	f7ff bb99 	b.w	40659e <_vfiprintf_r+0x266>
  406e6c:	9e07      	ldr	r6, [sp, #28]
  406e6e:	3607      	adds	r6, #7
  406e70:	f026 0107 	bic.w	r1, r6, #7
  406e74:	f101 0008 	add.w	r0, r1, #8
  406e78:	9007      	str	r0, [sp, #28]
  406e7a:	e9d1 6700 	ldrd	r6, r7, [r1]
  406e7e:	e519      	b.n	4068b4 <_vfiprintf_r+0x57c>
  406e80:	46cb      	mov	fp, r9
  406e82:	f7ff bbab 	b.w	4065dc <_vfiprintf_r+0x2a4>
  406e86:	252d      	movs	r5, #45	; 0x2d
  406e88:	4276      	negs	r6, r6
  406e8a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e92:	2201      	movs	r2, #1
  406e94:	f7ff bb88 	b.w	4065a8 <_vfiprintf_r+0x270>
  406e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406e9a:	b9b3      	cbnz	r3, 406eca <_vfiprintf_r+0xb92>
  406e9c:	4611      	mov	r1, r2
  406e9e:	2001      	movs	r0, #1
  406ea0:	46ca      	mov	sl, r9
  406ea2:	e5f2      	b.n	406a8a <_vfiprintf_r+0x752>
  406ea4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406ea8:	f001 fdcc 	bl	408a44 <__retarget_lock_release_recursive>
  406eac:	f04f 33ff 	mov.w	r3, #4294967295
  406eb0:	9303      	str	r3, [sp, #12]
  406eb2:	f7ff bb50 	b.w	406556 <_vfiprintf_r+0x21e>
  406eb6:	aa0f      	add	r2, sp, #60	; 0x3c
  406eb8:	9904      	ldr	r1, [sp, #16]
  406eba:	9806      	ldr	r0, [sp, #24]
  406ebc:	f7ff f9fc 	bl	4062b8 <__sprint_r.part.0>
  406ec0:	2800      	cmp	r0, #0
  406ec2:	f47f aeeb 	bne.w	406c9c <_vfiprintf_r+0x964>
  406ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ec8:	e6a9      	b.n	406c1e <_vfiprintf_r+0x8e6>
  406eca:	ab0e      	add	r3, sp, #56	; 0x38
  406ecc:	2202      	movs	r2, #2
  406ece:	931c      	str	r3, [sp, #112]	; 0x70
  406ed0:	921d      	str	r2, [sp, #116]	; 0x74
  406ed2:	2001      	movs	r0, #1
  406ed4:	46ca      	mov	sl, r9
  406ed6:	e5d0      	b.n	406a7a <_vfiprintf_r+0x742>
  406ed8:	aa0f      	add	r2, sp, #60	; 0x3c
  406eda:	9904      	ldr	r1, [sp, #16]
  406edc:	9806      	ldr	r0, [sp, #24]
  406ede:	f7ff f9eb 	bl	4062b8 <__sprint_r.part.0>
  406ee2:	2800      	cmp	r0, #0
  406ee4:	f47f aeda 	bne.w	406c9c <_vfiprintf_r+0x964>
  406ee8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406eec:	1c48      	adds	r0, r1, #1
  406eee:	46ca      	mov	sl, r9
  406ef0:	e5a4      	b.n	406a3c <_vfiprintf_r+0x704>
  406ef2:	9a07      	ldr	r2, [sp, #28]
  406ef4:	9903      	ldr	r1, [sp, #12]
  406ef6:	6813      	ldr	r3, [r2, #0]
  406ef8:	17cd      	asrs	r5, r1, #31
  406efa:	4608      	mov	r0, r1
  406efc:	3204      	adds	r2, #4
  406efe:	4629      	mov	r1, r5
  406f00:	9207      	str	r2, [sp, #28]
  406f02:	e9c3 0100 	strd	r0, r1, [r3]
  406f06:	f7ff ba54 	b.w	4063b2 <_vfiprintf_r+0x7a>
  406f0a:	4658      	mov	r0, fp
  406f0c:	9607      	str	r6, [sp, #28]
  406f0e:	9302      	str	r3, [sp, #8]
  406f10:	f7fd ff36 	bl	404d80 <strlen>
  406f14:	2400      	movs	r4, #0
  406f16:	9005      	str	r0, [sp, #20]
  406f18:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f1c:	f7ff bb5e 	b.w	4065dc <_vfiprintf_r+0x2a4>
  406f20:	aa0f      	add	r2, sp, #60	; 0x3c
  406f22:	9904      	ldr	r1, [sp, #16]
  406f24:	9806      	ldr	r0, [sp, #24]
  406f26:	f7ff f9c7 	bl	4062b8 <__sprint_r.part.0>
  406f2a:	2800      	cmp	r0, #0
  406f2c:	f47f aeb6 	bne.w	406c9c <_vfiprintf_r+0x964>
  406f30:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f34:	1c48      	adds	r0, r1, #1
  406f36:	46ca      	mov	sl, r9
  406f38:	e5a7      	b.n	406a8a <_vfiprintf_r+0x752>
  406f3a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f3e:	4e20      	ldr	r6, [pc, #128]	; (406fc0 <_vfiprintf_r+0xc88>)
  406f40:	3101      	adds	r1, #1
  406f42:	f7ff bb90 	b.w	406666 <_vfiprintf_r+0x32e>
  406f46:	2c06      	cmp	r4, #6
  406f48:	bf28      	it	cs
  406f4a:	2406      	movcs	r4, #6
  406f4c:	9405      	str	r4, [sp, #20]
  406f4e:	9607      	str	r6, [sp, #28]
  406f50:	9401      	str	r4, [sp, #4]
  406f52:	f8df b070 	ldr.w	fp, [pc, #112]	; 406fc4 <_vfiprintf_r+0xc8c>
  406f56:	e4d5      	b.n	406904 <_vfiprintf_r+0x5cc>
  406f58:	9810      	ldr	r0, [sp, #64]	; 0x40
  406f5a:	4e19      	ldr	r6, [pc, #100]	; (406fc0 <_vfiprintf_r+0xc88>)
  406f5c:	3001      	adds	r0, #1
  406f5e:	e603      	b.n	406b68 <_vfiprintf_r+0x830>
  406f60:	9405      	str	r4, [sp, #20]
  406f62:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f66:	9607      	str	r6, [sp, #28]
  406f68:	9302      	str	r3, [sp, #8]
  406f6a:	4604      	mov	r4, r0
  406f6c:	f7ff bb36 	b.w	4065dc <_vfiprintf_r+0x2a4>
  406f70:	4686      	mov	lr, r0
  406f72:	f7ff bbce 	b.w	406712 <_vfiprintf_r+0x3da>
  406f76:	9806      	ldr	r0, [sp, #24]
  406f78:	aa0f      	add	r2, sp, #60	; 0x3c
  406f7a:	4659      	mov	r1, fp
  406f7c:	f7ff f99c 	bl	4062b8 <__sprint_r.part.0>
  406f80:	2800      	cmp	r0, #0
  406f82:	f43f ae24 	beq.w	406bce <_vfiprintf_r+0x896>
  406f86:	e624      	b.n	406bd2 <_vfiprintf_r+0x89a>
  406f88:	9907      	ldr	r1, [sp, #28]
  406f8a:	f898 2001 	ldrb.w	r2, [r8, #1]
  406f8e:	680c      	ldr	r4, [r1, #0]
  406f90:	3104      	adds	r1, #4
  406f92:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406f96:	46b8      	mov	r8, r7
  406f98:	9107      	str	r1, [sp, #28]
  406f9a:	f7ff ba3f 	b.w	40641c <_vfiprintf_r+0xe4>
  406f9e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fa2:	e43c      	b.n	40681e <_vfiprintf_r+0x4e6>
  406fa4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fa8:	e521      	b.n	4069ee <_vfiprintf_r+0x6b6>
  406faa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fae:	f7ff bbf4 	b.w	40679a <_vfiprintf_r+0x462>
  406fb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fb6:	e491      	b.n	4068dc <_vfiprintf_r+0x5a4>
  406fb8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fbc:	e469      	b.n	406892 <_vfiprintf_r+0x55a>
  406fbe:	bf00      	nop
  406fc0:	0040a13c 	.word	0x0040a13c
  406fc4:	0040a110 	.word	0x0040a110

00406fc8 <__sbprintf>:
  406fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fcc:	460c      	mov	r4, r1
  406fce:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406fd2:	8989      	ldrh	r1, [r1, #12]
  406fd4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406fd6:	89e5      	ldrh	r5, [r4, #14]
  406fd8:	9619      	str	r6, [sp, #100]	; 0x64
  406fda:	f021 0102 	bic.w	r1, r1, #2
  406fde:	4606      	mov	r6, r0
  406fe0:	69e0      	ldr	r0, [r4, #28]
  406fe2:	f8ad 100c 	strh.w	r1, [sp, #12]
  406fe6:	4617      	mov	r7, r2
  406fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406fec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406fee:	f8ad 500e 	strh.w	r5, [sp, #14]
  406ff2:	4698      	mov	r8, r3
  406ff4:	ad1a      	add	r5, sp, #104	; 0x68
  406ff6:	2300      	movs	r3, #0
  406ff8:	9007      	str	r0, [sp, #28]
  406ffa:	a816      	add	r0, sp, #88	; 0x58
  406ffc:	9209      	str	r2, [sp, #36]	; 0x24
  406ffe:	9306      	str	r3, [sp, #24]
  407000:	9500      	str	r5, [sp, #0]
  407002:	9504      	str	r5, [sp, #16]
  407004:	9102      	str	r1, [sp, #8]
  407006:	9105      	str	r1, [sp, #20]
  407008:	f001 fd16 	bl	408a38 <__retarget_lock_init_recursive>
  40700c:	4643      	mov	r3, r8
  40700e:	463a      	mov	r2, r7
  407010:	4669      	mov	r1, sp
  407012:	4630      	mov	r0, r6
  407014:	f7ff f990 	bl	406338 <_vfiprintf_r>
  407018:	1e05      	subs	r5, r0, #0
  40701a:	db07      	blt.n	40702c <__sbprintf+0x64>
  40701c:	4630      	mov	r0, r6
  40701e:	4669      	mov	r1, sp
  407020:	f001 f8e8 	bl	4081f4 <_fflush_r>
  407024:	2800      	cmp	r0, #0
  407026:	bf18      	it	ne
  407028:	f04f 35ff 	movne.w	r5, #4294967295
  40702c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407030:	065b      	lsls	r3, r3, #25
  407032:	d503      	bpl.n	40703c <__sbprintf+0x74>
  407034:	89a3      	ldrh	r3, [r4, #12]
  407036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40703a:	81a3      	strh	r3, [r4, #12]
  40703c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40703e:	f001 fcfd 	bl	408a3c <__retarget_lock_close_recursive>
  407042:	4628      	mov	r0, r5
  407044:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040704c <__swsetup_r>:
  40704c:	b538      	push	{r3, r4, r5, lr}
  40704e:	4b30      	ldr	r3, [pc, #192]	; (407110 <__swsetup_r+0xc4>)
  407050:	681b      	ldr	r3, [r3, #0]
  407052:	4605      	mov	r5, r0
  407054:	460c      	mov	r4, r1
  407056:	b113      	cbz	r3, 40705e <__swsetup_r+0x12>
  407058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40705a:	2a00      	cmp	r2, #0
  40705c:	d038      	beq.n	4070d0 <__swsetup_r+0x84>
  40705e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407062:	b293      	uxth	r3, r2
  407064:	0718      	lsls	r0, r3, #28
  407066:	d50c      	bpl.n	407082 <__swsetup_r+0x36>
  407068:	6920      	ldr	r0, [r4, #16]
  40706a:	b1a8      	cbz	r0, 407098 <__swsetup_r+0x4c>
  40706c:	f013 0201 	ands.w	r2, r3, #1
  407070:	d01e      	beq.n	4070b0 <__swsetup_r+0x64>
  407072:	6963      	ldr	r3, [r4, #20]
  407074:	2200      	movs	r2, #0
  407076:	425b      	negs	r3, r3
  407078:	61a3      	str	r3, [r4, #24]
  40707a:	60a2      	str	r2, [r4, #8]
  40707c:	b1f0      	cbz	r0, 4070bc <__swsetup_r+0x70>
  40707e:	2000      	movs	r0, #0
  407080:	bd38      	pop	{r3, r4, r5, pc}
  407082:	06d9      	lsls	r1, r3, #27
  407084:	d53c      	bpl.n	407100 <__swsetup_r+0xb4>
  407086:	0758      	lsls	r0, r3, #29
  407088:	d426      	bmi.n	4070d8 <__swsetup_r+0x8c>
  40708a:	6920      	ldr	r0, [r4, #16]
  40708c:	f042 0308 	orr.w	r3, r2, #8
  407090:	81a3      	strh	r3, [r4, #12]
  407092:	b29b      	uxth	r3, r3
  407094:	2800      	cmp	r0, #0
  407096:	d1e9      	bne.n	40706c <__swsetup_r+0x20>
  407098:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40709c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4070a0:	d0e4      	beq.n	40706c <__swsetup_r+0x20>
  4070a2:	4628      	mov	r0, r5
  4070a4:	4621      	mov	r1, r4
  4070a6:	f001 fcfd 	bl	408aa4 <__smakebuf_r>
  4070aa:	89a3      	ldrh	r3, [r4, #12]
  4070ac:	6920      	ldr	r0, [r4, #16]
  4070ae:	e7dd      	b.n	40706c <__swsetup_r+0x20>
  4070b0:	0799      	lsls	r1, r3, #30
  4070b2:	bf58      	it	pl
  4070b4:	6962      	ldrpl	r2, [r4, #20]
  4070b6:	60a2      	str	r2, [r4, #8]
  4070b8:	2800      	cmp	r0, #0
  4070ba:	d1e0      	bne.n	40707e <__swsetup_r+0x32>
  4070bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070c0:	061a      	lsls	r2, r3, #24
  4070c2:	d5dd      	bpl.n	407080 <__swsetup_r+0x34>
  4070c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070c8:	81a3      	strh	r3, [r4, #12]
  4070ca:	f04f 30ff 	mov.w	r0, #4294967295
  4070ce:	bd38      	pop	{r3, r4, r5, pc}
  4070d0:	4618      	mov	r0, r3
  4070d2:	f001 f8e7 	bl	4082a4 <__sinit>
  4070d6:	e7c2      	b.n	40705e <__swsetup_r+0x12>
  4070d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4070da:	b151      	cbz	r1, 4070f2 <__swsetup_r+0xa6>
  4070dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4070e0:	4299      	cmp	r1, r3
  4070e2:	d004      	beq.n	4070ee <__swsetup_r+0xa2>
  4070e4:	4628      	mov	r0, r5
  4070e6:	f001 fa03 	bl	4084f0 <_free_r>
  4070ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070ee:	2300      	movs	r3, #0
  4070f0:	6323      	str	r3, [r4, #48]	; 0x30
  4070f2:	2300      	movs	r3, #0
  4070f4:	6920      	ldr	r0, [r4, #16]
  4070f6:	6063      	str	r3, [r4, #4]
  4070f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4070fc:	6020      	str	r0, [r4, #0]
  4070fe:	e7c5      	b.n	40708c <__swsetup_r+0x40>
  407100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407104:	2309      	movs	r3, #9
  407106:	602b      	str	r3, [r5, #0]
  407108:	f04f 30ff 	mov.w	r0, #4294967295
  40710c:	81a2      	strh	r2, [r4, #12]
  40710e:	bd38      	pop	{r3, r4, r5, pc}
  407110:	20400014 	.word	0x20400014

00407114 <register_fini>:
  407114:	4b02      	ldr	r3, [pc, #8]	; (407120 <register_fini+0xc>)
  407116:	b113      	cbz	r3, 40711e <register_fini+0xa>
  407118:	4802      	ldr	r0, [pc, #8]	; (407124 <register_fini+0x10>)
  40711a:	f000 b805 	b.w	407128 <atexit>
  40711e:	4770      	bx	lr
  407120:	00000000 	.word	0x00000000
  407124:	00408315 	.word	0x00408315

00407128 <atexit>:
  407128:	2300      	movs	r3, #0
  40712a:	4601      	mov	r1, r0
  40712c:	461a      	mov	r2, r3
  40712e:	4618      	mov	r0, r3
  407130:	f002 bbda 	b.w	4098e8 <__register_exitproc>

00407134 <quorem>:
  407134:	6902      	ldr	r2, [r0, #16]
  407136:	690b      	ldr	r3, [r1, #16]
  407138:	4293      	cmp	r3, r2
  40713a:	f300 808d 	bgt.w	407258 <quorem+0x124>
  40713e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407142:	f103 38ff 	add.w	r8, r3, #4294967295
  407146:	f101 0714 	add.w	r7, r1, #20
  40714a:	f100 0b14 	add.w	fp, r0, #20
  40714e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407152:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407156:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40715a:	b083      	sub	sp, #12
  40715c:	3201      	adds	r2, #1
  40715e:	fbb3 f9f2 	udiv	r9, r3, r2
  407162:	eb0b 0304 	add.w	r3, fp, r4
  407166:	9400      	str	r4, [sp, #0]
  407168:	eb07 0a04 	add.w	sl, r7, r4
  40716c:	9301      	str	r3, [sp, #4]
  40716e:	f1b9 0f00 	cmp.w	r9, #0
  407172:	d039      	beq.n	4071e8 <quorem+0xb4>
  407174:	2500      	movs	r5, #0
  407176:	462e      	mov	r6, r5
  407178:	46bc      	mov	ip, r7
  40717a:	46de      	mov	lr, fp
  40717c:	f85c 4b04 	ldr.w	r4, [ip], #4
  407180:	f8de 3000 	ldr.w	r3, [lr]
  407184:	b2a2      	uxth	r2, r4
  407186:	fb09 5502 	mla	r5, r9, r2, r5
  40718a:	0c22      	lsrs	r2, r4, #16
  40718c:	0c2c      	lsrs	r4, r5, #16
  40718e:	fb09 4202 	mla	r2, r9, r2, r4
  407192:	b2ad      	uxth	r5, r5
  407194:	1b75      	subs	r5, r6, r5
  407196:	b296      	uxth	r6, r2
  407198:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40719c:	fa15 f383 	uxtah	r3, r5, r3
  4071a0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4071a4:	b29b      	uxth	r3, r3
  4071a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4071aa:	45e2      	cmp	sl, ip
  4071ac:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4071b0:	f84e 3b04 	str.w	r3, [lr], #4
  4071b4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4071b8:	d2e0      	bcs.n	40717c <quorem+0x48>
  4071ba:	9b00      	ldr	r3, [sp, #0]
  4071bc:	f85b 3003 	ldr.w	r3, [fp, r3]
  4071c0:	b993      	cbnz	r3, 4071e8 <quorem+0xb4>
  4071c2:	9c01      	ldr	r4, [sp, #4]
  4071c4:	1f23      	subs	r3, r4, #4
  4071c6:	459b      	cmp	fp, r3
  4071c8:	d20c      	bcs.n	4071e4 <quorem+0xb0>
  4071ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4071ce:	b94b      	cbnz	r3, 4071e4 <quorem+0xb0>
  4071d0:	f1a4 0308 	sub.w	r3, r4, #8
  4071d4:	e002      	b.n	4071dc <quorem+0xa8>
  4071d6:	681a      	ldr	r2, [r3, #0]
  4071d8:	3b04      	subs	r3, #4
  4071da:	b91a      	cbnz	r2, 4071e4 <quorem+0xb0>
  4071dc:	459b      	cmp	fp, r3
  4071de:	f108 38ff 	add.w	r8, r8, #4294967295
  4071e2:	d3f8      	bcc.n	4071d6 <quorem+0xa2>
  4071e4:	f8c0 8010 	str.w	r8, [r0, #16]
  4071e8:	4604      	mov	r4, r0
  4071ea:	f001 ff73 	bl	4090d4 <__mcmp>
  4071ee:	2800      	cmp	r0, #0
  4071f0:	db2e      	blt.n	407250 <quorem+0x11c>
  4071f2:	f109 0901 	add.w	r9, r9, #1
  4071f6:	465d      	mov	r5, fp
  4071f8:	2300      	movs	r3, #0
  4071fa:	f857 1b04 	ldr.w	r1, [r7], #4
  4071fe:	6828      	ldr	r0, [r5, #0]
  407200:	b28a      	uxth	r2, r1
  407202:	1a9a      	subs	r2, r3, r2
  407204:	0c0b      	lsrs	r3, r1, #16
  407206:	fa12 f280 	uxtah	r2, r2, r0
  40720a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40720e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407212:	b292      	uxth	r2, r2
  407214:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407218:	45ba      	cmp	sl, r7
  40721a:	f845 2b04 	str.w	r2, [r5], #4
  40721e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407222:	d2ea      	bcs.n	4071fa <quorem+0xc6>
  407224:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407228:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40722c:	b982      	cbnz	r2, 407250 <quorem+0x11c>
  40722e:	1f1a      	subs	r2, r3, #4
  407230:	4593      	cmp	fp, r2
  407232:	d20b      	bcs.n	40724c <quorem+0x118>
  407234:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407238:	b942      	cbnz	r2, 40724c <quorem+0x118>
  40723a:	3b08      	subs	r3, #8
  40723c:	e002      	b.n	407244 <quorem+0x110>
  40723e:	681a      	ldr	r2, [r3, #0]
  407240:	3b04      	subs	r3, #4
  407242:	b91a      	cbnz	r2, 40724c <quorem+0x118>
  407244:	459b      	cmp	fp, r3
  407246:	f108 38ff 	add.w	r8, r8, #4294967295
  40724a:	d3f8      	bcc.n	40723e <quorem+0x10a>
  40724c:	f8c4 8010 	str.w	r8, [r4, #16]
  407250:	4648      	mov	r0, r9
  407252:	b003      	add	sp, #12
  407254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407258:	2000      	movs	r0, #0
  40725a:	4770      	bx	lr
  40725c:	0000      	movs	r0, r0
	...

00407260 <_dtoa_r>:
  407260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407264:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407266:	b09b      	sub	sp, #108	; 0x6c
  407268:	4604      	mov	r4, r0
  40726a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40726c:	4692      	mov	sl, r2
  40726e:	469b      	mov	fp, r3
  407270:	b141      	cbz	r1, 407284 <_dtoa_r+0x24>
  407272:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407274:	604a      	str	r2, [r1, #4]
  407276:	2301      	movs	r3, #1
  407278:	4093      	lsls	r3, r2
  40727a:	608b      	str	r3, [r1, #8]
  40727c:	f001 fd52 	bl	408d24 <_Bfree>
  407280:	2300      	movs	r3, #0
  407282:	6423      	str	r3, [r4, #64]	; 0x40
  407284:	f1bb 0f00 	cmp.w	fp, #0
  407288:	465d      	mov	r5, fp
  40728a:	db35      	blt.n	4072f8 <_dtoa_r+0x98>
  40728c:	2300      	movs	r3, #0
  40728e:	6033      	str	r3, [r6, #0]
  407290:	4b9d      	ldr	r3, [pc, #628]	; (407508 <_dtoa_r+0x2a8>)
  407292:	43ab      	bics	r3, r5
  407294:	d015      	beq.n	4072c2 <_dtoa_r+0x62>
  407296:	4650      	mov	r0, sl
  407298:	4659      	mov	r1, fp
  40729a:	2200      	movs	r2, #0
  40729c:	2300      	movs	r3, #0
  40729e:	f002 fcd1 	bl	409c44 <__aeabi_dcmpeq>
  4072a2:	4680      	mov	r8, r0
  4072a4:	2800      	cmp	r0, #0
  4072a6:	d02d      	beq.n	407304 <_dtoa_r+0xa4>
  4072a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4072aa:	2301      	movs	r3, #1
  4072ac:	6013      	str	r3, [r2, #0]
  4072ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4072b0:	2b00      	cmp	r3, #0
  4072b2:	f000 80bd 	beq.w	407430 <_dtoa_r+0x1d0>
  4072b6:	4895      	ldr	r0, [pc, #596]	; (40750c <_dtoa_r+0x2ac>)
  4072b8:	6018      	str	r0, [r3, #0]
  4072ba:	3801      	subs	r0, #1
  4072bc:	b01b      	add	sp, #108	; 0x6c
  4072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4072c4:	f242 730f 	movw	r3, #9999	; 0x270f
  4072c8:	6013      	str	r3, [r2, #0]
  4072ca:	f1ba 0f00 	cmp.w	sl, #0
  4072ce:	d10d      	bne.n	4072ec <_dtoa_r+0x8c>
  4072d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4072d4:	b955      	cbnz	r5, 4072ec <_dtoa_r+0x8c>
  4072d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4072d8:	488d      	ldr	r0, [pc, #564]	; (407510 <_dtoa_r+0x2b0>)
  4072da:	2b00      	cmp	r3, #0
  4072dc:	d0ee      	beq.n	4072bc <_dtoa_r+0x5c>
  4072de:	f100 0308 	add.w	r3, r0, #8
  4072e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4072e4:	6013      	str	r3, [r2, #0]
  4072e6:	b01b      	add	sp, #108	; 0x6c
  4072e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4072ee:	4889      	ldr	r0, [pc, #548]	; (407514 <_dtoa_r+0x2b4>)
  4072f0:	2b00      	cmp	r3, #0
  4072f2:	d0e3      	beq.n	4072bc <_dtoa_r+0x5c>
  4072f4:	1cc3      	adds	r3, r0, #3
  4072f6:	e7f4      	b.n	4072e2 <_dtoa_r+0x82>
  4072f8:	2301      	movs	r3, #1
  4072fa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4072fe:	6033      	str	r3, [r6, #0]
  407300:	46ab      	mov	fp, r5
  407302:	e7c5      	b.n	407290 <_dtoa_r+0x30>
  407304:	aa18      	add	r2, sp, #96	; 0x60
  407306:	ab19      	add	r3, sp, #100	; 0x64
  407308:	9201      	str	r2, [sp, #4]
  40730a:	9300      	str	r3, [sp, #0]
  40730c:	4652      	mov	r2, sl
  40730e:	465b      	mov	r3, fp
  407310:	4620      	mov	r0, r4
  407312:	f001 ff7f 	bl	409214 <__d2b>
  407316:	0d2b      	lsrs	r3, r5, #20
  407318:	4681      	mov	r9, r0
  40731a:	d071      	beq.n	407400 <_dtoa_r+0x1a0>
  40731c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407320:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407324:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407326:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40732a:	4650      	mov	r0, sl
  40732c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407330:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407334:	2200      	movs	r2, #0
  407336:	4b78      	ldr	r3, [pc, #480]	; (407518 <_dtoa_r+0x2b8>)
  407338:	f7fc fb8a 	bl	403a50 <__aeabi_dsub>
  40733c:	a36c      	add	r3, pc, #432	; (adr r3, 4074f0 <_dtoa_r+0x290>)
  40733e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407342:	f7fc fd39 	bl	403db8 <__aeabi_dmul>
  407346:	a36c      	add	r3, pc, #432	; (adr r3, 4074f8 <_dtoa_r+0x298>)
  407348:	e9d3 2300 	ldrd	r2, r3, [r3]
  40734c:	f7fc fb82 	bl	403a54 <__adddf3>
  407350:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407354:	4630      	mov	r0, r6
  407356:	f7fc fcc9 	bl	403cec <__aeabi_i2d>
  40735a:	a369      	add	r3, pc, #420	; (adr r3, 407500 <_dtoa_r+0x2a0>)
  40735c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407360:	f7fc fd2a 	bl	403db8 <__aeabi_dmul>
  407364:	4602      	mov	r2, r0
  407366:	460b      	mov	r3, r1
  407368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40736c:	f7fc fb72 	bl	403a54 <__adddf3>
  407370:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407374:	f7fc ff32 	bl	4041dc <__aeabi_d2iz>
  407378:	2200      	movs	r2, #0
  40737a:	9002      	str	r0, [sp, #8]
  40737c:	2300      	movs	r3, #0
  40737e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407382:	f002 fc69 	bl	409c58 <__aeabi_dcmplt>
  407386:	2800      	cmp	r0, #0
  407388:	f040 8173 	bne.w	407672 <_dtoa_r+0x412>
  40738c:	9d02      	ldr	r5, [sp, #8]
  40738e:	2d16      	cmp	r5, #22
  407390:	f200 815d 	bhi.w	40764e <_dtoa_r+0x3ee>
  407394:	4b61      	ldr	r3, [pc, #388]	; (40751c <_dtoa_r+0x2bc>)
  407396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40739a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40739e:	4652      	mov	r2, sl
  4073a0:	465b      	mov	r3, fp
  4073a2:	f002 fc77 	bl	409c94 <__aeabi_dcmpgt>
  4073a6:	2800      	cmp	r0, #0
  4073a8:	f000 81c5 	beq.w	407736 <_dtoa_r+0x4d6>
  4073ac:	1e6b      	subs	r3, r5, #1
  4073ae:	9302      	str	r3, [sp, #8]
  4073b0:	2300      	movs	r3, #0
  4073b2:	930e      	str	r3, [sp, #56]	; 0x38
  4073b4:	1bbf      	subs	r7, r7, r6
  4073b6:	1e7b      	subs	r3, r7, #1
  4073b8:	9306      	str	r3, [sp, #24]
  4073ba:	f100 8154 	bmi.w	407666 <_dtoa_r+0x406>
  4073be:	2300      	movs	r3, #0
  4073c0:	9308      	str	r3, [sp, #32]
  4073c2:	9b02      	ldr	r3, [sp, #8]
  4073c4:	2b00      	cmp	r3, #0
  4073c6:	f2c0 8145 	blt.w	407654 <_dtoa_r+0x3f4>
  4073ca:	9a06      	ldr	r2, [sp, #24]
  4073cc:	930d      	str	r3, [sp, #52]	; 0x34
  4073ce:	4611      	mov	r1, r2
  4073d0:	4419      	add	r1, r3
  4073d2:	2300      	movs	r3, #0
  4073d4:	9106      	str	r1, [sp, #24]
  4073d6:	930c      	str	r3, [sp, #48]	; 0x30
  4073d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073da:	2b09      	cmp	r3, #9
  4073dc:	d82a      	bhi.n	407434 <_dtoa_r+0x1d4>
  4073de:	2b05      	cmp	r3, #5
  4073e0:	f340 865b 	ble.w	40809a <_dtoa_r+0xe3a>
  4073e4:	3b04      	subs	r3, #4
  4073e6:	9324      	str	r3, [sp, #144]	; 0x90
  4073e8:	2500      	movs	r5, #0
  4073ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4073ec:	3b02      	subs	r3, #2
  4073ee:	2b03      	cmp	r3, #3
  4073f0:	f200 8642 	bhi.w	408078 <_dtoa_r+0xe18>
  4073f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4073f8:	02c903d4 	.word	0x02c903d4
  4073fc:	046103df 	.word	0x046103df
  407400:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407402:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407404:	443e      	add	r6, r7
  407406:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40740a:	2b20      	cmp	r3, #32
  40740c:	f340 818e 	ble.w	40772c <_dtoa_r+0x4cc>
  407410:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407414:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407418:	409d      	lsls	r5, r3
  40741a:	fa2a f000 	lsr.w	r0, sl, r0
  40741e:	4328      	orrs	r0, r5
  407420:	f7fc fc54 	bl	403ccc <__aeabi_ui2d>
  407424:	2301      	movs	r3, #1
  407426:	3e01      	subs	r6, #1
  407428:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40742c:	9314      	str	r3, [sp, #80]	; 0x50
  40742e:	e781      	b.n	407334 <_dtoa_r+0xd4>
  407430:	483b      	ldr	r0, [pc, #236]	; (407520 <_dtoa_r+0x2c0>)
  407432:	e743      	b.n	4072bc <_dtoa_r+0x5c>
  407434:	2100      	movs	r1, #0
  407436:	6461      	str	r1, [r4, #68]	; 0x44
  407438:	4620      	mov	r0, r4
  40743a:	9125      	str	r1, [sp, #148]	; 0x94
  40743c:	f001 fc4c 	bl	408cd8 <_Balloc>
  407440:	f04f 33ff 	mov.w	r3, #4294967295
  407444:	930a      	str	r3, [sp, #40]	; 0x28
  407446:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407448:	930f      	str	r3, [sp, #60]	; 0x3c
  40744a:	2301      	movs	r3, #1
  40744c:	9004      	str	r0, [sp, #16]
  40744e:	6420      	str	r0, [r4, #64]	; 0x40
  407450:	9224      	str	r2, [sp, #144]	; 0x90
  407452:	930b      	str	r3, [sp, #44]	; 0x2c
  407454:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407456:	2b00      	cmp	r3, #0
  407458:	f2c0 80d9 	blt.w	40760e <_dtoa_r+0x3ae>
  40745c:	9a02      	ldr	r2, [sp, #8]
  40745e:	2a0e      	cmp	r2, #14
  407460:	f300 80d5 	bgt.w	40760e <_dtoa_r+0x3ae>
  407464:	4b2d      	ldr	r3, [pc, #180]	; (40751c <_dtoa_r+0x2bc>)
  407466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40746a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40746e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407472:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407474:	2b00      	cmp	r3, #0
  407476:	f2c0 83ba 	blt.w	407bee <_dtoa_r+0x98e>
  40747a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40747e:	4650      	mov	r0, sl
  407480:	462a      	mov	r2, r5
  407482:	4633      	mov	r3, r6
  407484:	4659      	mov	r1, fp
  407486:	f7fc fdc1 	bl	40400c <__aeabi_ddiv>
  40748a:	f7fc fea7 	bl	4041dc <__aeabi_d2iz>
  40748e:	4680      	mov	r8, r0
  407490:	f7fc fc2c 	bl	403cec <__aeabi_i2d>
  407494:	462a      	mov	r2, r5
  407496:	4633      	mov	r3, r6
  407498:	f7fc fc8e 	bl	403db8 <__aeabi_dmul>
  40749c:	460b      	mov	r3, r1
  40749e:	4602      	mov	r2, r0
  4074a0:	4659      	mov	r1, fp
  4074a2:	4650      	mov	r0, sl
  4074a4:	f7fc fad4 	bl	403a50 <__aeabi_dsub>
  4074a8:	9d04      	ldr	r5, [sp, #16]
  4074aa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4074ae:	702b      	strb	r3, [r5, #0]
  4074b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074b2:	2b01      	cmp	r3, #1
  4074b4:	4606      	mov	r6, r0
  4074b6:	460f      	mov	r7, r1
  4074b8:	f105 0501 	add.w	r5, r5, #1
  4074bc:	d068      	beq.n	407590 <_dtoa_r+0x330>
  4074be:	2200      	movs	r2, #0
  4074c0:	4b18      	ldr	r3, [pc, #96]	; (407524 <_dtoa_r+0x2c4>)
  4074c2:	f7fc fc79 	bl	403db8 <__aeabi_dmul>
  4074c6:	2200      	movs	r2, #0
  4074c8:	2300      	movs	r3, #0
  4074ca:	4606      	mov	r6, r0
  4074cc:	460f      	mov	r7, r1
  4074ce:	f002 fbb9 	bl	409c44 <__aeabi_dcmpeq>
  4074d2:	2800      	cmp	r0, #0
  4074d4:	f040 8088 	bne.w	4075e8 <_dtoa_r+0x388>
  4074d8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4074dc:	f04f 0a00 	mov.w	sl, #0
  4074e0:	f8df b040 	ldr.w	fp, [pc, #64]	; 407524 <_dtoa_r+0x2c4>
  4074e4:	940c      	str	r4, [sp, #48]	; 0x30
  4074e6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4074ea:	e028      	b.n	40753e <_dtoa_r+0x2de>
  4074ec:	f3af 8000 	nop.w
  4074f0:	636f4361 	.word	0x636f4361
  4074f4:	3fd287a7 	.word	0x3fd287a7
  4074f8:	8b60c8b3 	.word	0x8b60c8b3
  4074fc:	3fc68a28 	.word	0x3fc68a28
  407500:	509f79fb 	.word	0x509f79fb
  407504:	3fd34413 	.word	0x3fd34413
  407508:	7ff00000 	.word	0x7ff00000
  40750c:	0040a119 	.word	0x0040a119
  407510:	0040a15c 	.word	0x0040a15c
  407514:	0040a168 	.word	0x0040a168
  407518:	3ff80000 	.word	0x3ff80000
  40751c:	0040a1a8 	.word	0x0040a1a8
  407520:	0040a118 	.word	0x0040a118
  407524:	40240000 	.word	0x40240000
  407528:	f7fc fc46 	bl	403db8 <__aeabi_dmul>
  40752c:	2200      	movs	r2, #0
  40752e:	2300      	movs	r3, #0
  407530:	4606      	mov	r6, r0
  407532:	460f      	mov	r7, r1
  407534:	f002 fb86 	bl	409c44 <__aeabi_dcmpeq>
  407538:	2800      	cmp	r0, #0
  40753a:	f040 83c1 	bne.w	407cc0 <_dtoa_r+0xa60>
  40753e:	4642      	mov	r2, r8
  407540:	464b      	mov	r3, r9
  407542:	4630      	mov	r0, r6
  407544:	4639      	mov	r1, r7
  407546:	f7fc fd61 	bl	40400c <__aeabi_ddiv>
  40754a:	f7fc fe47 	bl	4041dc <__aeabi_d2iz>
  40754e:	4604      	mov	r4, r0
  407550:	f7fc fbcc 	bl	403cec <__aeabi_i2d>
  407554:	4642      	mov	r2, r8
  407556:	464b      	mov	r3, r9
  407558:	f7fc fc2e 	bl	403db8 <__aeabi_dmul>
  40755c:	4602      	mov	r2, r0
  40755e:	460b      	mov	r3, r1
  407560:	4630      	mov	r0, r6
  407562:	4639      	mov	r1, r7
  407564:	f7fc fa74 	bl	403a50 <__aeabi_dsub>
  407568:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40756c:	9e04      	ldr	r6, [sp, #16]
  40756e:	f805 eb01 	strb.w	lr, [r5], #1
  407572:	eba5 0e06 	sub.w	lr, r5, r6
  407576:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407578:	45b6      	cmp	lr, r6
  40757a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40757e:	4652      	mov	r2, sl
  407580:	465b      	mov	r3, fp
  407582:	d1d1      	bne.n	407528 <_dtoa_r+0x2c8>
  407584:	46a0      	mov	r8, r4
  407586:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40758a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40758c:	4606      	mov	r6, r0
  40758e:	460f      	mov	r7, r1
  407590:	4632      	mov	r2, r6
  407592:	463b      	mov	r3, r7
  407594:	4630      	mov	r0, r6
  407596:	4639      	mov	r1, r7
  407598:	f7fc fa5c 	bl	403a54 <__adddf3>
  40759c:	4606      	mov	r6, r0
  40759e:	460f      	mov	r7, r1
  4075a0:	4602      	mov	r2, r0
  4075a2:	460b      	mov	r3, r1
  4075a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4075a8:	f002 fb56 	bl	409c58 <__aeabi_dcmplt>
  4075ac:	b948      	cbnz	r0, 4075c2 <_dtoa_r+0x362>
  4075ae:	4632      	mov	r2, r6
  4075b0:	463b      	mov	r3, r7
  4075b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4075b6:	f002 fb45 	bl	409c44 <__aeabi_dcmpeq>
  4075ba:	b1a8      	cbz	r0, 4075e8 <_dtoa_r+0x388>
  4075bc:	f018 0f01 	tst.w	r8, #1
  4075c0:	d012      	beq.n	4075e8 <_dtoa_r+0x388>
  4075c2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4075c6:	9a04      	ldr	r2, [sp, #16]
  4075c8:	1e6b      	subs	r3, r5, #1
  4075ca:	e004      	b.n	4075d6 <_dtoa_r+0x376>
  4075cc:	429a      	cmp	r2, r3
  4075ce:	f000 8401 	beq.w	407dd4 <_dtoa_r+0xb74>
  4075d2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4075d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4075da:	f103 0501 	add.w	r5, r3, #1
  4075de:	d0f5      	beq.n	4075cc <_dtoa_r+0x36c>
  4075e0:	f108 0801 	add.w	r8, r8, #1
  4075e4:	f883 8000 	strb.w	r8, [r3]
  4075e8:	4649      	mov	r1, r9
  4075ea:	4620      	mov	r0, r4
  4075ec:	f001 fb9a 	bl	408d24 <_Bfree>
  4075f0:	2200      	movs	r2, #0
  4075f2:	9b02      	ldr	r3, [sp, #8]
  4075f4:	702a      	strb	r2, [r5, #0]
  4075f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4075f8:	3301      	adds	r3, #1
  4075fa:	6013      	str	r3, [r2, #0]
  4075fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4075fe:	2b00      	cmp	r3, #0
  407600:	f000 839e 	beq.w	407d40 <_dtoa_r+0xae0>
  407604:	9804      	ldr	r0, [sp, #16]
  407606:	601d      	str	r5, [r3, #0]
  407608:	b01b      	add	sp, #108	; 0x6c
  40760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40760e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407610:	2a00      	cmp	r2, #0
  407612:	d03e      	beq.n	407692 <_dtoa_r+0x432>
  407614:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407616:	2a01      	cmp	r2, #1
  407618:	f340 8311 	ble.w	407c3e <_dtoa_r+0x9de>
  40761c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40761e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407620:	1e5f      	subs	r7, r3, #1
  407622:	42ba      	cmp	r2, r7
  407624:	f2c0 838f 	blt.w	407d46 <_dtoa_r+0xae6>
  407628:	1bd7      	subs	r7, r2, r7
  40762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40762c:	2b00      	cmp	r3, #0
  40762e:	f2c0 848b 	blt.w	407f48 <_dtoa_r+0xce8>
  407632:	9d08      	ldr	r5, [sp, #32]
  407634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407636:	9a08      	ldr	r2, [sp, #32]
  407638:	441a      	add	r2, r3
  40763a:	9208      	str	r2, [sp, #32]
  40763c:	9a06      	ldr	r2, [sp, #24]
  40763e:	2101      	movs	r1, #1
  407640:	441a      	add	r2, r3
  407642:	4620      	mov	r0, r4
  407644:	9206      	str	r2, [sp, #24]
  407646:	f001 fc07 	bl	408e58 <__i2b>
  40764a:	4606      	mov	r6, r0
  40764c:	e024      	b.n	407698 <_dtoa_r+0x438>
  40764e:	2301      	movs	r3, #1
  407650:	930e      	str	r3, [sp, #56]	; 0x38
  407652:	e6af      	b.n	4073b4 <_dtoa_r+0x154>
  407654:	9a08      	ldr	r2, [sp, #32]
  407656:	9b02      	ldr	r3, [sp, #8]
  407658:	1ad2      	subs	r2, r2, r3
  40765a:	425b      	negs	r3, r3
  40765c:	930c      	str	r3, [sp, #48]	; 0x30
  40765e:	2300      	movs	r3, #0
  407660:	9208      	str	r2, [sp, #32]
  407662:	930d      	str	r3, [sp, #52]	; 0x34
  407664:	e6b8      	b.n	4073d8 <_dtoa_r+0x178>
  407666:	f1c7 0301 	rsb	r3, r7, #1
  40766a:	9308      	str	r3, [sp, #32]
  40766c:	2300      	movs	r3, #0
  40766e:	9306      	str	r3, [sp, #24]
  407670:	e6a7      	b.n	4073c2 <_dtoa_r+0x162>
  407672:	9d02      	ldr	r5, [sp, #8]
  407674:	4628      	mov	r0, r5
  407676:	f7fc fb39 	bl	403cec <__aeabi_i2d>
  40767a:	4602      	mov	r2, r0
  40767c:	460b      	mov	r3, r1
  40767e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407682:	f002 fadf 	bl	409c44 <__aeabi_dcmpeq>
  407686:	2800      	cmp	r0, #0
  407688:	f47f ae80 	bne.w	40738c <_dtoa_r+0x12c>
  40768c:	1e6b      	subs	r3, r5, #1
  40768e:	9302      	str	r3, [sp, #8]
  407690:	e67c      	b.n	40738c <_dtoa_r+0x12c>
  407692:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407694:	9d08      	ldr	r5, [sp, #32]
  407696:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407698:	2d00      	cmp	r5, #0
  40769a:	dd0c      	ble.n	4076b6 <_dtoa_r+0x456>
  40769c:	9906      	ldr	r1, [sp, #24]
  40769e:	2900      	cmp	r1, #0
  4076a0:	460b      	mov	r3, r1
  4076a2:	dd08      	ble.n	4076b6 <_dtoa_r+0x456>
  4076a4:	42a9      	cmp	r1, r5
  4076a6:	9a08      	ldr	r2, [sp, #32]
  4076a8:	bfa8      	it	ge
  4076aa:	462b      	movge	r3, r5
  4076ac:	1ad2      	subs	r2, r2, r3
  4076ae:	1aed      	subs	r5, r5, r3
  4076b0:	1acb      	subs	r3, r1, r3
  4076b2:	9208      	str	r2, [sp, #32]
  4076b4:	9306      	str	r3, [sp, #24]
  4076b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4076b8:	b1d3      	cbz	r3, 4076f0 <_dtoa_r+0x490>
  4076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4076bc:	2b00      	cmp	r3, #0
  4076be:	f000 82b7 	beq.w	407c30 <_dtoa_r+0x9d0>
  4076c2:	2f00      	cmp	r7, #0
  4076c4:	dd10      	ble.n	4076e8 <_dtoa_r+0x488>
  4076c6:	4631      	mov	r1, r6
  4076c8:	463a      	mov	r2, r7
  4076ca:	4620      	mov	r0, r4
  4076cc:	f001 fc60 	bl	408f90 <__pow5mult>
  4076d0:	464a      	mov	r2, r9
  4076d2:	4601      	mov	r1, r0
  4076d4:	4606      	mov	r6, r0
  4076d6:	4620      	mov	r0, r4
  4076d8:	f001 fbc8 	bl	408e6c <__multiply>
  4076dc:	4649      	mov	r1, r9
  4076de:	4680      	mov	r8, r0
  4076e0:	4620      	mov	r0, r4
  4076e2:	f001 fb1f 	bl	408d24 <_Bfree>
  4076e6:	46c1      	mov	r9, r8
  4076e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4076ea:	1bda      	subs	r2, r3, r7
  4076ec:	f040 82a1 	bne.w	407c32 <_dtoa_r+0x9d2>
  4076f0:	2101      	movs	r1, #1
  4076f2:	4620      	mov	r0, r4
  4076f4:	f001 fbb0 	bl	408e58 <__i2b>
  4076f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4076fa:	2b00      	cmp	r3, #0
  4076fc:	4680      	mov	r8, r0
  4076fe:	dd1c      	ble.n	40773a <_dtoa_r+0x4da>
  407700:	4601      	mov	r1, r0
  407702:	461a      	mov	r2, r3
  407704:	4620      	mov	r0, r4
  407706:	f001 fc43 	bl	408f90 <__pow5mult>
  40770a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40770c:	2b01      	cmp	r3, #1
  40770e:	4680      	mov	r8, r0
  407710:	f340 8254 	ble.w	407bbc <_dtoa_r+0x95c>
  407714:	2300      	movs	r3, #0
  407716:	930c      	str	r3, [sp, #48]	; 0x30
  407718:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40771c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  407720:	6918      	ldr	r0, [r3, #16]
  407722:	f001 fb49 	bl	408db8 <__hi0bits>
  407726:	f1c0 0020 	rsb	r0, r0, #32
  40772a:	e010      	b.n	40774e <_dtoa_r+0x4ee>
  40772c:	f1c3 0520 	rsb	r5, r3, #32
  407730:	fa0a f005 	lsl.w	r0, sl, r5
  407734:	e674      	b.n	407420 <_dtoa_r+0x1c0>
  407736:	900e      	str	r0, [sp, #56]	; 0x38
  407738:	e63c      	b.n	4073b4 <_dtoa_r+0x154>
  40773a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40773c:	2b01      	cmp	r3, #1
  40773e:	f340 8287 	ble.w	407c50 <_dtoa_r+0x9f0>
  407742:	2300      	movs	r3, #0
  407744:	930c      	str	r3, [sp, #48]	; 0x30
  407746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407748:	2001      	movs	r0, #1
  40774a:	2b00      	cmp	r3, #0
  40774c:	d1e4      	bne.n	407718 <_dtoa_r+0x4b8>
  40774e:	9a06      	ldr	r2, [sp, #24]
  407750:	4410      	add	r0, r2
  407752:	f010 001f 	ands.w	r0, r0, #31
  407756:	f000 80a1 	beq.w	40789c <_dtoa_r+0x63c>
  40775a:	f1c0 0320 	rsb	r3, r0, #32
  40775e:	2b04      	cmp	r3, #4
  407760:	f340 849e 	ble.w	4080a0 <_dtoa_r+0xe40>
  407764:	9b08      	ldr	r3, [sp, #32]
  407766:	f1c0 001c 	rsb	r0, r0, #28
  40776a:	4403      	add	r3, r0
  40776c:	9308      	str	r3, [sp, #32]
  40776e:	4613      	mov	r3, r2
  407770:	4403      	add	r3, r0
  407772:	4405      	add	r5, r0
  407774:	9306      	str	r3, [sp, #24]
  407776:	9b08      	ldr	r3, [sp, #32]
  407778:	2b00      	cmp	r3, #0
  40777a:	dd05      	ble.n	407788 <_dtoa_r+0x528>
  40777c:	4649      	mov	r1, r9
  40777e:	461a      	mov	r2, r3
  407780:	4620      	mov	r0, r4
  407782:	f001 fc55 	bl	409030 <__lshift>
  407786:	4681      	mov	r9, r0
  407788:	9b06      	ldr	r3, [sp, #24]
  40778a:	2b00      	cmp	r3, #0
  40778c:	dd05      	ble.n	40779a <_dtoa_r+0x53a>
  40778e:	4641      	mov	r1, r8
  407790:	461a      	mov	r2, r3
  407792:	4620      	mov	r0, r4
  407794:	f001 fc4c 	bl	409030 <__lshift>
  407798:	4680      	mov	r8, r0
  40779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40779c:	2b00      	cmp	r3, #0
  40779e:	f040 8086 	bne.w	4078ae <_dtoa_r+0x64e>
  4077a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077a4:	2b00      	cmp	r3, #0
  4077a6:	f340 8266 	ble.w	407c76 <_dtoa_r+0xa16>
  4077aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4077ac:	2b00      	cmp	r3, #0
  4077ae:	f000 8098 	beq.w	4078e2 <_dtoa_r+0x682>
  4077b2:	2d00      	cmp	r5, #0
  4077b4:	dd05      	ble.n	4077c2 <_dtoa_r+0x562>
  4077b6:	4631      	mov	r1, r6
  4077b8:	462a      	mov	r2, r5
  4077ba:	4620      	mov	r0, r4
  4077bc:	f001 fc38 	bl	409030 <__lshift>
  4077c0:	4606      	mov	r6, r0
  4077c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4077c4:	2b00      	cmp	r3, #0
  4077c6:	f040 8337 	bne.w	407e38 <_dtoa_r+0xbd8>
  4077ca:	9606      	str	r6, [sp, #24]
  4077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077ce:	9a04      	ldr	r2, [sp, #16]
  4077d0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4077d4:	3b01      	subs	r3, #1
  4077d6:	18d3      	adds	r3, r2, r3
  4077d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4077da:	f00a 0301 	and.w	r3, sl, #1
  4077de:	930c      	str	r3, [sp, #48]	; 0x30
  4077e0:	4617      	mov	r7, r2
  4077e2:	46c2      	mov	sl, r8
  4077e4:	4651      	mov	r1, sl
  4077e6:	4648      	mov	r0, r9
  4077e8:	f7ff fca4 	bl	407134 <quorem>
  4077ec:	4631      	mov	r1, r6
  4077ee:	4605      	mov	r5, r0
  4077f0:	4648      	mov	r0, r9
  4077f2:	f001 fc6f 	bl	4090d4 <__mcmp>
  4077f6:	465a      	mov	r2, fp
  4077f8:	900a      	str	r0, [sp, #40]	; 0x28
  4077fa:	4651      	mov	r1, sl
  4077fc:	4620      	mov	r0, r4
  4077fe:	f001 fc85 	bl	40910c <__mdiff>
  407802:	68c2      	ldr	r2, [r0, #12]
  407804:	4680      	mov	r8, r0
  407806:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40780a:	2a00      	cmp	r2, #0
  40780c:	f040 822b 	bne.w	407c66 <_dtoa_r+0xa06>
  407810:	4601      	mov	r1, r0
  407812:	4648      	mov	r0, r9
  407814:	9308      	str	r3, [sp, #32]
  407816:	f001 fc5d 	bl	4090d4 <__mcmp>
  40781a:	4641      	mov	r1, r8
  40781c:	9006      	str	r0, [sp, #24]
  40781e:	4620      	mov	r0, r4
  407820:	f001 fa80 	bl	408d24 <_Bfree>
  407824:	9a06      	ldr	r2, [sp, #24]
  407826:	9b08      	ldr	r3, [sp, #32]
  407828:	b932      	cbnz	r2, 407838 <_dtoa_r+0x5d8>
  40782a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40782c:	b921      	cbnz	r1, 407838 <_dtoa_r+0x5d8>
  40782e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407830:	2a00      	cmp	r2, #0
  407832:	f000 83ef 	beq.w	408014 <_dtoa_r+0xdb4>
  407836:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407838:	990a      	ldr	r1, [sp, #40]	; 0x28
  40783a:	2900      	cmp	r1, #0
  40783c:	f2c0 829f 	blt.w	407d7e <_dtoa_r+0xb1e>
  407840:	d105      	bne.n	40784e <_dtoa_r+0x5ee>
  407842:	9924      	ldr	r1, [sp, #144]	; 0x90
  407844:	b919      	cbnz	r1, 40784e <_dtoa_r+0x5ee>
  407846:	990c      	ldr	r1, [sp, #48]	; 0x30
  407848:	2900      	cmp	r1, #0
  40784a:	f000 8298 	beq.w	407d7e <_dtoa_r+0xb1e>
  40784e:	2a00      	cmp	r2, #0
  407850:	f300 8306 	bgt.w	407e60 <_dtoa_r+0xc00>
  407854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407856:	703b      	strb	r3, [r7, #0]
  407858:	f107 0801 	add.w	r8, r7, #1
  40785c:	4297      	cmp	r7, r2
  40785e:	4645      	mov	r5, r8
  407860:	f000 830c 	beq.w	407e7c <_dtoa_r+0xc1c>
  407864:	4649      	mov	r1, r9
  407866:	2300      	movs	r3, #0
  407868:	220a      	movs	r2, #10
  40786a:	4620      	mov	r0, r4
  40786c:	f001 fa64 	bl	408d38 <__multadd>
  407870:	455e      	cmp	r6, fp
  407872:	4681      	mov	r9, r0
  407874:	4631      	mov	r1, r6
  407876:	f04f 0300 	mov.w	r3, #0
  40787a:	f04f 020a 	mov.w	r2, #10
  40787e:	4620      	mov	r0, r4
  407880:	f000 81eb 	beq.w	407c5a <_dtoa_r+0x9fa>
  407884:	f001 fa58 	bl	408d38 <__multadd>
  407888:	4659      	mov	r1, fp
  40788a:	4606      	mov	r6, r0
  40788c:	2300      	movs	r3, #0
  40788e:	220a      	movs	r2, #10
  407890:	4620      	mov	r0, r4
  407892:	f001 fa51 	bl	408d38 <__multadd>
  407896:	4647      	mov	r7, r8
  407898:	4683      	mov	fp, r0
  40789a:	e7a3      	b.n	4077e4 <_dtoa_r+0x584>
  40789c:	201c      	movs	r0, #28
  40789e:	9b08      	ldr	r3, [sp, #32]
  4078a0:	4403      	add	r3, r0
  4078a2:	9308      	str	r3, [sp, #32]
  4078a4:	9b06      	ldr	r3, [sp, #24]
  4078a6:	4403      	add	r3, r0
  4078a8:	4405      	add	r5, r0
  4078aa:	9306      	str	r3, [sp, #24]
  4078ac:	e763      	b.n	407776 <_dtoa_r+0x516>
  4078ae:	4641      	mov	r1, r8
  4078b0:	4648      	mov	r0, r9
  4078b2:	f001 fc0f 	bl	4090d4 <__mcmp>
  4078b6:	2800      	cmp	r0, #0
  4078b8:	f6bf af73 	bge.w	4077a2 <_dtoa_r+0x542>
  4078bc:	9f02      	ldr	r7, [sp, #8]
  4078be:	4649      	mov	r1, r9
  4078c0:	2300      	movs	r3, #0
  4078c2:	220a      	movs	r2, #10
  4078c4:	4620      	mov	r0, r4
  4078c6:	3f01      	subs	r7, #1
  4078c8:	9702      	str	r7, [sp, #8]
  4078ca:	f001 fa35 	bl	408d38 <__multadd>
  4078ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4078d0:	4681      	mov	r9, r0
  4078d2:	2b00      	cmp	r3, #0
  4078d4:	f040 83b6 	bne.w	408044 <_dtoa_r+0xde4>
  4078d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4078da:	2b00      	cmp	r3, #0
  4078dc:	f340 83bf 	ble.w	40805e <_dtoa_r+0xdfe>
  4078e0:	930a      	str	r3, [sp, #40]	; 0x28
  4078e2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4078e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4078e8:	465d      	mov	r5, fp
  4078ea:	e002      	b.n	4078f2 <_dtoa_r+0x692>
  4078ec:	f001 fa24 	bl	408d38 <__multadd>
  4078f0:	4681      	mov	r9, r0
  4078f2:	4641      	mov	r1, r8
  4078f4:	4648      	mov	r0, r9
  4078f6:	f7ff fc1d 	bl	407134 <quorem>
  4078fa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4078fe:	f805 ab01 	strb.w	sl, [r5], #1
  407902:	eba5 030b 	sub.w	r3, r5, fp
  407906:	42bb      	cmp	r3, r7
  407908:	f04f 020a 	mov.w	r2, #10
  40790c:	f04f 0300 	mov.w	r3, #0
  407910:	4649      	mov	r1, r9
  407912:	4620      	mov	r0, r4
  407914:	dbea      	blt.n	4078ec <_dtoa_r+0x68c>
  407916:	9b04      	ldr	r3, [sp, #16]
  407918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40791a:	2a01      	cmp	r2, #1
  40791c:	bfac      	ite	ge
  40791e:	189b      	addge	r3, r3, r2
  407920:	3301      	addlt	r3, #1
  407922:	461d      	mov	r5, r3
  407924:	f04f 0b00 	mov.w	fp, #0
  407928:	4649      	mov	r1, r9
  40792a:	2201      	movs	r2, #1
  40792c:	4620      	mov	r0, r4
  40792e:	f001 fb7f 	bl	409030 <__lshift>
  407932:	4641      	mov	r1, r8
  407934:	4681      	mov	r9, r0
  407936:	f001 fbcd 	bl	4090d4 <__mcmp>
  40793a:	2800      	cmp	r0, #0
  40793c:	f340 823d 	ble.w	407dba <_dtoa_r+0xb5a>
  407940:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  407944:	9904      	ldr	r1, [sp, #16]
  407946:	1e6b      	subs	r3, r5, #1
  407948:	e004      	b.n	407954 <_dtoa_r+0x6f4>
  40794a:	428b      	cmp	r3, r1
  40794c:	f000 81ae 	beq.w	407cac <_dtoa_r+0xa4c>
  407950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  407954:	2a39      	cmp	r2, #57	; 0x39
  407956:	f103 0501 	add.w	r5, r3, #1
  40795a:	d0f6      	beq.n	40794a <_dtoa_r+0x6ea>
  40795c:	3201      	adds	r2, #1
  40795e:	701a      	strb	r2, [r3, #0]
  407960:	4641      	mov	r1, r8
  407962:	4620      	mov	r0, r4
  407964:	f001 f9de 	bl	408d24 <_Bfree>
  407968:	2e00      	cmp	r6, #0
  40796a:	f43f ae3d 	beq.w	4075e8 <_dtoa_r+0x388>
  40796e:	f1bb 0f00 	cmp.w	fp, #0
  407972:	d005      	beq.n	407980 <_dtoa_r+0x720>
  407974:	45b3      	cmp	fp, r6
  407976:	d003      	beq.n	407980 <_dtoa_r+0x720>
  407978:	4659      	mov	r1, fp
  40797a:	4620      	mov	r0, r4
  40797c:	f001 f9d2 	bl	408d24 <_Bfree>
  407980:	4631      	mov	r1, r6
  407982:	4620      	mov	r0, r4
  407984:	f001 f9ce 	bl	408d24 <_Bfree>
  407988:	e62e      	b.n	4075e8 <_dtoa_r+0x388>
  40798a:	2300      	movs	r3, #0
  40798c:	930b      	str	r3, [sp, #44]	; 0x2c
  40798e:	9b02      	ldr	r3, [sp, #8]
  407990:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407992:	4413      	add	r3, r2
  407994:	930f      	str	r3, [sp, #60]	; 0x3c
  407996:	3301      	adds	r3, #1
  407998:	2b01      	cmp	r3, #1
  40799a:	461f      	mov	r7, r3
  40799c:	461e      	mov	r6, r3
  40799e:	930a      	str	r3, [sp, #40]	; 0x28
  4079a0:	bfb8      	it	lt
  4079a2:	2701      	movlt	r7, #1
  4079a4:	2100      	movs	r1, #0
  4079a6:	2f17      	cmp	r7, #23
  4079a8:	6461      	str	r1, [r4, #68]	; 0x44
  4079aa:	d90a      	bls.n	4079c2 <_dtoa_r+0x762>
  4079ac:	2201      	movs	r2, #1
  4079ae:	2304      	movs	r3, #4
  4079b0:	005b      	lsls	r3, r3, #1
  4079b2:	f103 0014 	add.w	r0, r3, #20
  4079b6:	4287      	cmp	r7, r0
  4079b8:	4611      	mov	r1, r2
  4079ba:	f102 0201 	add.w	r2, r2, #1
  4079be:	d2f7      	bcs.n	4079b0 <_dtoa_r+0x750>
  4079c0:	6461      	str	r1, [r4, #68]	; 0x44
  4079c2:	4620      	mov	r0, r4
  4079c4:	f001 f988 	bl	408cd8 <_Balloc>
  4079c8:	2e0e      	cmp	r6, #14
  4079ca:	9004      	str	r0, [sp, #16]
  4079cc:	6420      	str	r0, [r4, #64]	; 0x40
  4079ce:	f63f ad41 	bhi.w	407454 <_dtoa_r+0x1f4>
  4079d2:	2d00      	cmp	r5, #0
  4079d4:	f43f ad3e 	beq.w	407454 <_dtoa_r+0x1f4>
  4079d8:	9902      	ldr	r1, [sp, #8]
  4079da:	2900      	cmp	r1, #0
  4079dc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4079e0:	f340 8202 	ble.w	407de8 <_dtoa_r+0xb88>
  4079e4:	4bb8      	ldr	r3, [pc, #736]	; (407cc8 <_dtoa_r+0xa68>)
  4079e6:	f001 020f 	and.w	r2, r1, #15
  4079ea:	110d      	asrs	r5, r1, #4
  4079ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4079f0:	06e9      	lsls	r1, r5, #27
  4079f2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4079f6:	f140 81ae 	bpl.w	407d56 <_dtoa_r+0xaf6>
  4079fa:	4bb4      	ldr	r3, [pc, #720]	; (407ccc <_dtoa_r+0xa6c>)
  4079fc:	4650      	mov	r0, sl
  4079fe:	4659      	mov	r1, fp
  407a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407a04:	f7fc fb02 	bl	40400c <__aeabi_ddiv>
  407a08:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407a0c:	f005 050f 	and.w	r5, r5, #15
  407a10:	f04f 0a03 	mov.w	sl, #3
  407a14:	b18d      	cbz	r5, 407a3a <_dtoa_r+0x7da>
  407a16:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407ccc <_dtoa_r+0xa6c>
  407a1a:	07ea      	lsls	r2, r5, #31
  407a1c:	d509      	bpl.n	407a32 <_dtoa_r+0x7d2>
  407a1e:	4630      	mov	r0, r6
  407a20:	4639      	mov	r1, r7
  407a22:	e9d8 2300 	ldrd	r2, r3, [r8]
  407a26:	f7fc f9c7 	bl	403db8 <__aeabi_dmul>
  407a2a:	f10a 0a01 	add.w	sl, sl, #1
  407a2e:	4606      	mov	r6, r0
  407a30:	460f      	mov	r7, r1
  407a32:	106d      	asrs	r5, r5, #1
  407a34:	f108 0808 	add.w	r8, r8, #8
  407a38:	d1ef      	bne.n	407a1a <_dtoa_r+0x7ba>
  407a3a:	463b      	mov	r3, r7
  407a3c:	4632      	mov	r2, r6
  407a3e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  407a42:	f7fc fae3 	bl	40400c <__aeabi_ddiv>
  407a46:	4607      	mov	r7, r0
  407a48:	4688      	mov	r8, r1
  407a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a4c:	b143      	cbz	r3, 407a60 <_dtoa_r+0x800>
  407a4e:	2200      	movs	r2, #0
  407a50:	4b9f      	ldr	r3, [pc, #636]	; (407cd0 <_dtoa_r+0xa70>)
  407a52:	4638      	mov	r0, r7
  407a54:	4641      	mov	r1, r8
  407a56:	f002 f8ff 	bl	409c58 <__aeabi_dcmplt>
  407a5a:	2800      	cmp	r0, #0
  407a5c:	f040 8286 	bne.w	407f6c <_dtoa_r+0xd0c>
  407a60:	4650      	mov	r0, sl
  407a62:	f7fc f943 	bl	403cec <__aeabi_i2d>
  407a66:	463a      	mov	r2, r7
  407a68:	4643      	mov	r3, r8
  407a6a:	f7fc f9a5 	bl	403db8 <__aeabi_dmul>
  407a6e:	4b99      	ldr	r3, [pc, #612]	; (407cd4 <_dtoa_r+0xa74>)
  407a70:	2200      	movs	r2, #0
  407a72:	f7fb ffef 	bl	403a54 <__adddf3>
  407a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a78:	4605      	mov	r5, r0
  407a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407a7e:	2b00      	cmp	r3, #0
  407a80:	f000 813e 	beq.w	407d00 <_dtoa_r+0xaa0>
  407a84:	9b02      	ldr	r3, [sp, #8]
  407a86:	9315      	str	r3, [sp, #84]	; 0x54
  407a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a8a:	9312      	str	r3, [sp, #72]	; 0x48
  407a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a8e:	2b00      	cmp	r3, #0
  407a90:	f000 81fa 	beq.w	407e88 <_dtoa_r+0xc28>
  407a94:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407a96:	4b8c      	ldr	r3, [pc, #560]	; (407cc8 <_dtoa_r+0xa68>)
  407a98:	498f      	ldr	r1, [pc, #572]	; (407cd8 <_dtoa_r+0xa78>)
  407a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407a9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407aa2:	2000      	movs	r0, #0
  407aa4:	f7fc fab2 	bl	40400c <__aeabi_ddiv>
  407aa8:	462a      	mov	r2, r5
  407aaa:	4633      	mov	r3, r6
  407aac:	f7fb ffd0 	bl	403a50 <__aeabi_dsub>
  407ab0:	4682      	mov	sl, r0
  407ab2:	468b      	mov	fp, r1
  407ab4:	4638      	mov	r0, r7
  407ab6:	4641      	mov	r1, r8
  407ab8:	f7fc fb90 	bl	4041dc <__aeabi_d2iz>
  407abc:	4605      	mov	r5, r0
  407abe:	f7fc f915 	bl	403cec <__aeabi_i2d>
  407ac2:	4602      	mov	r2, r0
  407ac4:	460b      	mov	r3, r1
  407ac6:	4638      	mov	r0, r7
  407ac8:	4641      	mov	r1, r8
  407aca:	f7fb ffc1 	bl	403a50 <__aeabi_dsub>
  407ace:	3530      	adds	r5, #48	; 0x30
  407ad0:	fa5f f885 	uxtb.w	r8, r5
  407ad4:	9d04      	ldr	r5, [sp, #16]
  407ad6:	4606      	mov	r6, r0
  407ad8:	460f      	mov	r7, r1
  407ada:	f885 8000 	strb.w	r8, [r5]
  407ade:	4602      	mov	r2, r0
  407ae0:	460b      	mov	r3, r1
  407ae2:	4650      	mov	r0, sl
  407ae4:	4659      	mov	r1, fp
  407ae6:	3501      	adds	r5, #1
  407ae8:	f002 f8d4 	bl	409c94 <__aeabi_dcmpgt>
  407aec:	2800      	cmp	r0, #0
  407aee:	d154      	bne.n	407b9a <_dtoa_r+0x93a>
  407af0:	4632      	mov	r2, r6
  407af2:	463b      	mov	r3, r7
  407af4:	2000      	movs	r0, #0
  407af6:	4976      	ldr	r1, [pc, #472]	; (407cd0 <_dtoa_r+0xa70>)
  407af8:	f7fb ffaa 	bl	403a50 <__aeabi_dsub>
  407afc:	4602      	mov	r2, r0
  407afe:	460b      	mov	r3, r1
  407b00:	4650      	mov	r0, sl
  407b02:	4659      	mov	r1, fp
  407b04:	f002 f8c6 	bl	409c94 <__aeabi_dcmpgt>
  407b08:	2800      	cmp	r0, #0
  407b0a:	f040 8270 	bne.w	407fee <_dtoa_r+0xd8e>
  407b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407b10:	2a01      	cmp	r2, #1
  407b12:	f000 8111 	beq.w	407d38 <_dtoa_r+0xad8>
  407b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407b18:	9a04      	ldr	r2, [sp, #16]
  407b1a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407b1e:	4413      	add	r3, r2
  407b20:	4699      	mov	r9, r3
  407b22:	e00d      	b.n	407b40 <_dtoa_r+0x8e0>
  407b24:	2000      	movs	r0, #0
  407b26:	496a      	ldr	r1, [pc, #424]	; (407cd0 <_dtoa_r+0xa70>)
  407b28:	f7fb ff92 	bl	403a50 <__aeabi_dsub>
  407b2c:	4652      	mov	r2, sl
  407b2e:	465b      	mov	r3, fp
  407b30:	f002 f892 	bl	409c58 <__aeabi_dcmplt>
  407b34:	2800      	cmp	r0, #0
  407b36:	f040 8258 	bne.w	407fea <_dtoa_r+0xd8a>
  407b3a:	454d      	cmp	r5, r9
  407b3c:	f000 80fa 	beq.w	407d34 <_dtoa_r+0xad4>
  407b40:	4650      	mov	r0, sl
  407b42:	4659      	mov	r1, fp
  407b44:	2200      	movs	r2, #0
  407b46:	4b65      	ldr	r3, [pc, #404]	; (407cdc <_dtoa_r+0xa7c>)
  407b48:	f7fc f936 	bl	403db8 <__aeabi_dmul>
  407b4c:	2200      	movs	r2, #0
  407b4e:	4b63      	ldr	r3, [pc, #396]	; (407cdc <_dtoa_r+0xa7c>)
  407b50:	4682      	mov	sl, r0
  407b52:	468b      	mov	fp, r1
  407b54:	4630      	mov	r0, r6
  407b56:	4639      	mov	r1, r7
  407b58:	f7fc f92e 	bl	403db8 <__aeabi_dmul>
  407b5c:	460f      	mov	r7, r1
  407b5e:	4606      	mov	r6, r0
  407b60:	f7fc fb3c 	bl	4041dc <__aeabi_d2iz>
  407b64:	4680      	mov	r8, r0
  407b66:	f7fc f8c1 	bl	403cec <__aeabi_i2d>
  407b6a:	4602      	mov	r2, r0
  407b6c:	460b      	mov	r3, r1
  407b6e:	4630      	mov	r0, r6
  407b70:	4639      	mov	r1, r7
  407b72:	f7fb ff6d 	bl	403a50 <__aeabi_dsub>
  407b76:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407b7a:	fa5f f888 	uxtb.w	r8, r8
  407b7e:	4652      	mov	r2, sl
  407b80:	465b      	mov	r3, fp
  407b82:	f805 8b01 	strb.w	r8, [r5], #1
  407b86:	4606      	mov	r6, r0
  407b88:	460f      	mov	r7, r1
  407b8a:	f002 f865 	bl	409c58 <__aeabi_dcmplt>
  407b8e:	4632      	mov	r2, r6
  407b90:	463b      	mov	r3, r7
  407b92:	2800      	cmp	r0, #0
  407b94:	d0c6      	beq.n	407b24 <_dtoa_r+0x8c4>
  407b96:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407b9c:	9302      	str	r3, [sp, #8]
  407b9e:	e523      	b.n	4075e8 <_dtoa_r+0x388>
  407ba0:	2300      	movs	r3, #0
  407ba2:	930b      	str	r3, [sp, #44]	; 0x2c
  407ba4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407ba6:	2b00      	cmp	r3, #0
  407ba8:	f340 80dc 	ble.w	407d64 <_dtoa_r+0xb04>
  407bac:	461f      	mov	r7, r3
  407bae:	461e      	mov	r6, r3
  407bb0:	930f      	str	r3, [sp, #60]	; 0x3c
  407bb2:	930a      	str	r3, [sp, #40]	; 0x28
  407bb4:	e6f6      	b.n	4079a4 <_dtoa_r+0x744>
  407bb6:	2301      	movs	r3, #1
  407bb8:	930b      	str	r3, [sp, #44]	; 0x2c
  407bba:	e7f3      	b.n	407ba4 <_dtoa_r+0x944>
  407bbc:	f1ba 0f00 	cmp.w	sl, #0
  407bc0:	f47f ada8 	bne.w	407714 <_dtoa_r+0x4b4>
  407bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407bc8:	2b00      	cmp	r3, #0
  407bca:	f47f adba 	bne.w	407742 <_dtoa_r+0x4e2>
  407bce:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407bd2:	0d3f      	lsrs	r7, r7, #20
  407bd4:	053f      	lsls	r7, r7, #20
  407bd6:	2f00      	cmp	r7, #0
  407bd8:	f000 820d 	beq.w	407ff6 <_dtoa_r+0xd96>
  407bdc:	9b08      	ldr	r3, [sp, #32]
  407bde:	3301      	adds	r3, #1
  407be0:	9308      	str	r3, [sp, #32]
  407be2:	9b06      	ldr	r3, [sp, #24]
  407be4:	3301      	adds	r3, #1
  407be6:	9306      	str	r3, [sp, #24]
  407be8:	2301      	movs	r3, #1
  407bea:	930c      	str	r3, [sp, #48]	; 0x30
  407bec:	e5ab      	b.n	407746 <_dtoa_r+0x4e6>
  407bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407bf0:	2b00      	cmp	r3, #0
  407bf2:	f73f ac42 	bgt.w	40747a <_dtoa_r+0x21a>
  407bf6:	f040 8221 	bne.w	40803c <_dtoa_r+0xddc>
  407bfa:	2200      	movs	r2, #0
  407bfc:	4b38      	ldr	r3, [pc, #224]	; (407ce0 <_dtoa_r+0xa80>)
  407bfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407c02:	f7fc f8d9 	bl	403db8 <__aeabi_dmul>
  407c06:	4652      	mov	r2, sl
  407c08:	465b      	mov	r3, fp
  407c0a:	f002 f839 	bl	409c80 <__aeabi_dcmpge>
  407c0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407c12:	4646      	mov	r6, r8
  407c14:	2800      	cmp	r0, #0
  407c16:	d041      	beq.n	407c9c <_dtoa_r+0xa3c>
  407c18:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c1a:	9d04      	ldr	r5, [sp, #16]
  407c1c:	43db      	mvns	r3, r3
  407c1e:	9302      	str	r3, [sp, #8]
  407c20:	4641      	mov	r1, r8
  407c22:	4620      	mov	r0, r4
  407c24:	f001 f87e 	bl	408d24 <_Bfree>
  407c28:	2e00      	cmp	r6, #0
  407c2a:	f43f acdd 	beq.w	4075e8 <_dtoa_r+0x388>
  407c2e:	e6a7      	b.n	407980 <_dtoa_r+0x720>
  407c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407c32:	4649      	mov	r1, r9
  407c34:	4620      	mov	r0, r4
  407c36:	f001 f9ab 	bl	408f90 <__pow5mult>
  407c3a:	4681      	mov	r9, r0
  407c3c:	e558      	b.n	4076f0 <_dtoa_r+0x490>
  407c3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407c40:	2a00      	cmp	r2, #0
  407c42:	f000 8187 	beq.w	407f54 <_dtoa_r+0xcf4>
  407c46:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407c4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407c4c:	9d08      	ldr	r5, [sp, #32]
  407c4e:	e4f2      	b.n	407636 <_dtoa_r+0x3d6>
  407c50:	f1ba 0f00 	cmp.w	sl, #0
  407c54:	f47f ad75 	bne.w	407742 <_dtoa_r+0x4e2>
  407c58:	e7b4      	b.n	407bc4 <_dtoa_r+0x964>
  407c5a:	f001 f86d 	bl	408d38 <__multadd>
  407c5e:	4647      	mov	r7, r8
  407c60:	4606      	mov	r6, r0
  407c62:	4683      	mov	fp, r0
  407c64:	e5be      	b.n	4077e4 <_dtoa_r+0x584>
  407c66:	4601      	mov	r1, r0
  407c68:	4620      	mov	r0, r4
  407c6a:	9306      	str	r3, [sp, #24]
  407c6c:	f001 f85a 	bl	408d24 <_Bfree>
  407c70:	2201      	movs	r2, #1
  407c72:	9b06      	ldr	r3, [sp, #24]
  407c74:	e5e0      	b.n	407838 <_dtoa_r+0x5d8>
  407c76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407c78:	2b02      	cmp	r3, #2
  407c7a:	f77f ad96 	ble.w	4077aa <_dtoa_r+0x54a>
  407c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c80:	2b00      	cmp	r3, #0
  407c82:	d1c9      	bne.n	407c18 <_dtoa_r+0x9b8>
  407c84:	4641      	mov	r1, r8
  407c86:	2205      	movs	r2, #5
  407c88:	4620      	mov	r0, r4
  407c8a:	f001 f855 	bl	408d38 <__multadd>
  407c8e:	4601      	mov	r1, r0
  407c90:	4680      	mov	r8, r0
  407c92:	4648      	mov	r0, r9
  407c94:	f001 fa1e 	bl	4090d4 <__mcmp>
  407c98:	2800      	cmp	r0, #0
  407c9a:	ddbd      	ble.n	407c18 <_dtoa_r+0x9b8>
  407c9c:	9a02      	ldr	r2, [sp, #8]
  407c9e:	9904      	ldr	r1, [sp, #16]
  407ca0:	2331      	movs	r3, #49	; 0x31
  407ca2:	3201      	adds	r2, #1
  407ca4:	9202      	str	r2, [sp, #8]
  407ca6:	700b      	strb	r3, [r1, #0]
  407ca8:	1c4d      	adds	r5, r1, #1
  407caa:	e7b9      	b.n	407c20 <_dtoa_r+0x9c0>
  407cac:	9a02      	ldr	r2, [sp, #8]
  407cae:	3201      	adds	r2, #1
  407cb0:	9202      	str	r2, [sp, #8]
  407cb2:	9a04      	ldr	r2, [sp, #16]
  407cb4:	2331      	movs	r3, #49	; 0x31
  407cb6:	7013      	strb	r3, [r2, #0]
  407cb8:	e652      	b.n	407960 <_dtoa_r+0x700>
  407cba:	2301      	movs	r3, #1
  407cbc:	930b      	str	r3, [sp, #44]	; 0x2c
  407cbe:	e666      	b.n	40798e <_dtoa_r+0x72e>
  407cc0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407cc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407cc6:	e48f      	b.n	4075e8 <_dtoa_r+0x388>
  407cc8:	0040a1a8 	.word	0x0040a1a8
  407ccc:	0040a180 	.word	0x0040a180
  407cd0:	3ff00000 	.word	0x3ff00000
  407cd4:	401c0000 	.word	0x401c0000
  407cd8:	3fe00000 	.word	0x3fe00000
  407cdc:	40240000 	.word	0x40240000
  407ce0:	40140000 	.word	0x40140000
  407ce4:	4650      	mov	r0, sl
  407ce6:	f7fc f801 	bl	403cec <__aeabi_i2d>
  407cea:	463a      	mov	r2, r7
  407cec:	4643      	mov	r3, r8
  407cee:	f7fc f863 	bl	403db8 <__aeabi_dmul>
  407cf2:	2200      	movs	r2, #0
  407cf4:	4bc1      	ldr	r3, [pc, #772]	; (407ffc <_dtoa_r+0xd9c>)
  407cf6:	f7fb fead 	bl	403a54 <__adddf3>
  407cfa:	4605      	mov	r5, r0
  407cfc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407d00:	4641      	mov	r1, r8
  407d02:	2200      	movs	r2, #0
  407d04:	4bbe      	ldr	r3, [pc, #760]	; (408000 <_dtoa_r+0xda0>)
  407d06:	4638      	mov	r0, r7
  407d08:	f7fb fea2 	bl	403a50 <__aeabi_dsub>
  407d0c:	462a      	mov	r2, r5
  407d0e:	4633      	mov	r3, r6
  407d10:	4682      	mov	sl, r0
  407d12:	468b      	mov	fp, r1
  407d14:	f001 ffbe 	bl	409c94 <__aeabi_dcmpgt>
  407d18:	4680      	mov	r8, r0
  407d1a:	2800      	cmp	r0, #0
  407d1c:	f040 8110 	bne.w	407f40 <_dtoa_r+0xce0>
  407d20:	462a      	mov	r2, r5
  407d22:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407d26:	4650      	mov	r0, sl
  407d28:	4659      	mov	r1, fp
  407d2a:	f001 ff95 	bl	409c58 <__aeabi_dcmplt>
  407d2e:	b118      	cbz	r0, 407d38 <_dtoa_r+0xad8>
  407d30:	4646      	mov	r6, r8
  407d32:	e771      	b.n	407c18 <_dtoa_r+0x9b8>
  407d34:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407d38:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  407d3c:	f7ff bb8a 	b.w	407454 <_dtoa_r+0x1f4>
  407d40:	9804      	ldr	r0, [sp, #16]
  407d42:	f7ff babb 	b.w	4072bc <_dtoa_r+0x5c>
  407d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407d48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407d4a:	970c      	str	r7, [sp, #48]	; 0x30
  407d4c:	1afb      	subs	r3, r7, r3
  407d4e:	441a      	add	r2, r3
  407d50:	920d      	str	r2, [sp, #52]	; 0x34
  407d52:	2700      	movs	r7, #0
  407d54:	e469      	b.n	40762a <_dtoa_r+0x3ca>
  407d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407d5a:	f04f 0a02 	mov.w	sl, #2
  407d5e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407d62:	e657      	b.n	407a14 <_dtoa_r+0x7b4>
  407d64:	2100      	movs	r1, #0
  407d66:	2301      	movs	r3, #1
  407d68:	6461      	str	r1, [r4, #68]	; 0x44
  407d6a:	4620      	mov	r0, r4
  407d6c:	9325      	str	r3, [sp, #148]	; 0x94
  407d6e:	f000 ffb3 	bl	408cd8 <_Balloc>
  407d72:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407d74:	9004      	str	r0, [sp, #16]
  407d76:	6420      	str	r0, [r4, #64]	; 0x40
  407d78:	930a      	str	r3, [sp, #40]	; 0x28
  407d7a:	930f      	str	r3, [sp, #60]	; 0x3c
  407d7c:	e629      	b.n	4079d2 <_dtoa_r+0x772>
  407d7e:	2a00      	cmp	r2, #0
  407d80:	46d0      	mov	r8, sl
  407d82:	f8cd b018 	str.w	fp, [sp, #24]
  407d86:	469a      	mov	sl, r3
  407d88:	dd11      	ble.n	407dae <_dtoa_r+0xb4e>
  407d8a:	4649      	mov	r1, r9
  407d8c:	2201      	movs	r2, #1
  407d8e:	4620      	mov	r0, r4
  407d90:	f001 f94e 	bl	409030 <__lshift>
  407d94:	4641      	mov	r1, r8
  407d96:	4681      	mov	r9, r0
  407d98:	f001 f99c 	bl	4090d4 <__mcmp>
  407d9c:	2800      	cmp	r0, #0
  407d9e:	f340 8146 	ble.w	40802e <_dtoa_r+0xdce>
  407da2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407da6:	f000 8106 	beq.w	407fb6 <_dtoa_r+0xd56>
  407daa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407dae:	46b3      	mov	fp, r6
  407db0:	f887 a000 	strb.w	sl, [r7]
  407db4:	1c7d      	adds	r5, r7, #1
  407db6:	9e06      	ldr	r6, [sp, #24]
  407db8:	e5d2      	b.n	407960 <_dtoa_r+0x700>
  407dba:	d104      	bne.n	407dc6 <_dtoa_r+0xb66>
  407dbc:	f01a 0f01 	tst.w	sl, #1
  407dc0:	d001      	beq.n	407dc6 <_dtoa_r+0xb66>
  407dc2:	e5bd      	b.n	407940 <_dtoa_r+0x6e0>
  407dc4:	4615      	mov	r5, r2
  407dc6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407dca:	2b30      	cmp	r3, #48	; 0x30
  407dcc:	f105 32ff 	add.w	r2, r5, #4294967295
  407dd0:	d0f8      	beq.n	407dc4 <_dtoa_r+0xb64>
  407dd2:	e5c5      	b.n	407960 <_dtoa_r+0x700>
  407dd4:	9904      	ldr	r1, [sp, #16]
  407dd6:	2230      	movs	r2, #48	; 0x30
  407dd8:	700a      	strb	r2, [r1, #0]
  407dda:	9a02      	ldr	r2, [sp, #8]
  407ddc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407de0:	3201      	adds	r2, #1
  407de2:	9202      	str	r2, [sp, #8]
  407de4:	f7ff bbfc 	b.w	4075e0 <_dtoa_r+0x380>
  407de8:	f000 80bb 	beq.w	407f62 <_dtoa_r+0xd02>
  407dec:	9b02      	ldr	r3, [sp, #8]
  407dee:	425d      	negs	r5, r3
  407df0:	4b84      	ldr	r3, [pc, #528]	; (408004 <_dtoa_r+0xda4>)
  407df2:	f005 020f 	and.w	r2, r5, #15
  407df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  407dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407e02:	f7fb ffd9 	bl	403db8 <__aeabi_dmul>
  407e06:	112d      	asrs	r5, r5, #4
  407e08:	4607      	mov	r7, r0
  407e0a:	4688      	mov	r8, r1
  407e0c:	f000 812c 	beq.w	408068 <_dtoa_r+0xe08>
  407e10:	4e7d      	ldr	r6, [pc, #500]	; (408008 <_dtoa_r+0xda8>)
  407e12:	f04f 0a02 	mov.w	sl, #2
  407e16:	07eb      	lsls	r3, r5, #31
  407e18:	d509      	bpl.n	407e2e <_dtoa_r+0xbce>
  407e1a:	4638      	mov	r0, r7
  407e1c:	4641      	mov	r1, r8
  407e1e:	e9d6 2300 	ldrd	r2, r3, [r6]
  407e22:	f7fb ffc9 	bl	403db8 <__aeabi_dmul>
  407e26:	f10a 0a01 	add.w	sl, sl, #1
  407e2a:	4607      	mov	r7, r0
  407e2c:	4688      	mov	r8, r1
  407e2e:	106d      	asrs	r5, r5, #1
  407e30:	f106 0608 	add.w	r6, r6, #8
  407e34:	d1ef      	bne.n	407e16 <_dtoa_r+0xbb6>
  407e36:	e608      	b.n	407a4a <_dtoa_r+0x7ea>
  407e38:	6871      	ldr	r1, [r6, #4]
  407e3a:	4620      	mov	r0, r4
  407e3c:	f000 ff4c 	bl	408cd8 <_Balloc>
  407e40:	6933      	ldr	r3, [r6, #16]
  407e42:	3302      	adds	r3, #2
  407e44:	009a      	lsls	r2, r3, #2
  407e46:	4605      	mov	r5, r0
  407e48:	f106 010c 	add.w	r1, r6, #12
  407e4c:	300c      	adds	r0, #12
  407e4e:	f7fc fd39 	bl	4048c4 <memcpy>
  407e52:	4629      	mov	r1, r5
  407e54:	2201      	movs	r2, #1
  407e56:	4620      	mov	r0, r4
  407e58:	f001 f8ea 	bl	409030 <__lshift>
  407e5c:	9006      	str	r0, [sp, #24]
  407e5e:	e4b5      	b.n	4077cc <_dtoa_r+0x56c>
  407e60:	2b39      	cmp	r3, #57	; 0x39
  407e62:	f8cd b018 	str.w	fp, [sp, #24]
  407e66:	46d0      	mov	r8, sl
  407e68:	f000 80a5 	beq.w	407fb6 <_dtoa_r+0xd56>
  407e6c:	f103 0a01 	add.w	sl, r3, #1
  407e70:	46b3      	mov	fp, r6
  407e72:	f887 a000 	strb.w	sl, [r7]
  407e76:	1c7d      	adds	r5, r7, #1
  407e78:	9e06      	ldr	r6, [sp, #24]
  407e7a:	e571      	b.n	407960 <_dtoa_r+0x700>
  407e7c:	465a      	mov	r2, fp
  407e7e:	46d0      	mov	r8, sl
  407e80:	46b3      	mov	fp, r6
  407e82:	469a      	mov	sl, r3
  407e84:	4616      	mov	r6, r2
  407e86:	e54f      	b.n	407928 <_dtoa_r+0x6c8>
  407e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407e8a:	495e      	ldr	r1, [pc, #376]	; (408004 <_dtoa_r+0xda4>)
  407e8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407e90:	462a      	mov	r2, r5
  407e92:	4633      	mov	r3, r6
  407e94:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407e98:	f7fb ff8e 	bl	403db8 <__aeabi_dmul>
  407e9c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407ea0:	4638      	mov	r0, r7
  407ea2:	4641      	mov	r1, r8
  407ea4:	f7fc f99a 	bl	4041dc <__aeabi_d2iz>
  407ea8:	4605      	mov	r5, r0
  407eaa:	f7fb ff1f 	bl	403cec <__aeabi_i2d>
  407eae:	460b      	mov	r3, r1
  407eb0:	4602      	mov	r2, r0
  407eb2:	4641      	mov	r1, r8
  407eb4:	4638      	mov	r0, r7
  407eb6:	f7fb fdcb 	bl	403a50 <__aeabi_dsub>
  407eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ebc:	460f      	mov	r7, r1
  407ebe:	9904      	ldr	r1, [sp, #16]
  407ec0:	3530      	adds	r5, #48	; 0x30
  407ec2:	2b01      	cmp	r3, #1
  407ec4:	700d      	strb	r5, [r1, #0]
  407ec6:	4606      	mov	r6, r0
  407ec8:	f101 0501 	add.w	r5, r1, #1
  407ecc:	d026      	beq.n	407f1c <_dtoa_r+0xcbc>
  407ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ed0:	9a04      	ldr	r2, [sp, #16]
  407ed2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408010 <_dtoa_r+0xdb0>
  407ed6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407eda:	4413      	add	r3, r2
  407edc:	f04f 0a00 	mov.w	sl, #0
  407ee0:	4699      	mov	r9, r3
  407ee2:	4652      	mov	r2, sl
  407ee4:	465b      	mov	r3, fp
  407ee6:	4630      	mov	r0, r6
  407ee8:	4639      	mov	r1, r7
  407eea:	f7fb ff65 	bl	403db8 <__aeabi_dmul>
  407eee:	460f      	mov	r7, r1
  407ef0:	4606      	mov	r6, r0
  407ef2:	f7fc f973 	bl	4041dc <__aeabi_d2iz>
  407ef6:	4680      	mov	r8, r0
  407ef8:	f7fb fef8 	bl	403cec <__aeabi_i2d>
  407efc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407f00:	4602      	mov	r2, r0
  407f02:	460b      	mov	r3, r1
  407f04:	4630      	mov	r0, r6
  407f06:	4639      	mov	r1, r7
  407f08:	f7fb fda2 	bl	403a50 <__aeabi_dsub>
  407f0c:	f805 8b01 	strb.w	r8, [r5], #1
  407f10:	454d      	cmp	r5, r9
  407f12:	4606      	mov	r6, r0
  407f14:	460f      	mov	r7, r1
  407f16:	d1e4      	bne.n	407ee2 <_dtoa_r+0xc82>
  407f18:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407f1c:	4b3b      	ldr	r3, [pc, #236]	; (40800c <_dtoa_r+0xdac>)
  407f1e:	2200      	movs	r2, #0
  407f20:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  407f24:	f7fb fd96 	bl	403a54 <__adddf3>
  407f28:	4632      	mov	r2, r6
  407f2a:	463b      	mov	r3, r7
  407f2c:	f001 fe94 	bl	409c58 <__aeabi_dcmplt>
  407f30:	2800      	cmp	r0, #0
  407f32:	d046      	beq.n	407fc2 <_dtoa_r+0xd62>
  407f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407f36:	9302      	str	r3, [sp, #8]
  407f38:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407f3c:	f7ff bb43 	b.w	4075c6 <_dtoa_r+0x366>
  407f40:	f04f 0800 	mov.w	r8, #0
  407f44:	4646      	mov	r6, r8
  407f46:	e6a9      	b.n	407c9c <_dtoa_r+0xa3c>
  407f48:	9b08      	ldr	r3, [sp, #32]
  407f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407f4c:	1a9d      	subs	r5, r3, r2
  407f4e:	2300      	movs	r3, #0
  407f50:	f7ff bb71 	b.w	407636 <_dtoa_r+0x3d6>
  407f54:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407f56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407f58:	9d08      	ldr	r5, [sp, #32]
  407f5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407f5e:	f7ff bb6a 	b.w	407636 <_dtoa_r+0x3d6>
  407f62:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407f66:	f04f 0a02 	mov.w	sl, #2
  407f6a:	e56e      	b.n	407a4a <_dtoa_r+0x7ea>
  407f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f6e:	2b00      	cmp	r3, #0
  407f70:	f43f aeb8 	beq.w	407ce4 <_dtoa_r+0xa84>
  407f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407f76:	2b00      	cmp	r3, #0
  407f78:	f77f aede 	ble.w	407d38 <_dtoa_r+0xad8>
  407f7c:	2200      	movs	r2, #0
  407f7e:	4b24      	ldr	r3, [pc, #144]	; (408010 <_dtoa_r+0xdb0>)
  407f80:	4638      	mov	r0, r7
  407f82:	4641      	mov	r1, r8
  407f84:	f7fb ff18 	bl	403db8 <__aeabi_dmul>
  407f88:	4607      	mov	r7, r0
  407f8a:	4688      	mov	r8, r1
  407f8c:	f10a 0001 	add.w	r0, sl, #1
  407f90:	f7fb feac 	bl	403cec <__aeabi_i2d>
  407f94:	463a      	mov	r2, r7
  407f96:	4643      	mov	r3, r8
  407f98:	f7fb ff0e 	bl	403db8 <__aeabi_dmul>
  407f9c:	2200      	movs	r2, #0
  407f9e:	4b17      	ldr	r3, [pc, #92]	; (407ffc <_dtoa_r+0xd9c>)
  407fa0:	f7fb fd58 	bl	403a54 <__adddf3>
  407fa4:	9a02      	ldr	r2, [sp, #8]
  407fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407fa8:	9312      	str	r3, [sp, #72]	; 0x48
  407faa:	3a01      	subs	r2, #1
  407fac:	4605      	mov	r5, r0
  407fae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407fb2:	9215      	str	r2, [sp, #84]	; 0x54
  407fb4:	e56a      	b.n	407a8c <_dtoa_r+0x82c>
  407fb6:	2239      	movs	r2, #57	; 0x39
  407fb8:	46b3      	mov	fp, r6
  407fba:	703a      	strb	r2, [r7, #0]
  407fbc:	9e06      	ldr	r6, [sp, #24]
  407fbe:	1c7d      	adds	r5, r7, #1
  407fc0:	e4c0      	b.n	407944 <_dtoa_r+0x6e4>
  407fc2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407fc6:	2000      	movs	r0, #0
  407fc8:	4910      	ldr	r1, [pc, #64]	; (40800c <_dtoa_r+0xdac>)
  407fca:	f7fb fd41 	bl	403a50 <__aeabi_dsub>
  407fce:	4632      	mov	r2, r6
  407fd0:	463b      	mov	r3, r7
  407fd2:	f001 fe5f 	bl	409c94 <__aeabi_dcmpgt>
  407fd6:	b908      	cbnz	r0, 407fdc <_dtoa_r+0xd7c>
  407fd8:	e6ae      	b.n	407d38 <_dtoa_r+0xad8>
  407fda:	4615      	mov	r5, r2
  407fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407fe0:	2b30      	cmp	r3, #48	; 0x30
  407fe2:	f105 32ff 	add.w	r2, r5, #4294967295
  407fe6:	d0f8      	beq.n	407fda <_dtoa_r+0xd7a>
  407fe8:	e5d7      	b.n	407b9a <_dtoa_r+0x93a>
  407fea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407fee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407ff0:	9302      	str	r3, [sp, #8]
  407ff2:	f7ff bae8 	b.w	4075c6 <_dtoa_r+0x366>
  407ff6:	970c      	str	r7, [sp, #48]	; 0x30
  407ff8:	f7ff bba5 	b.w	407746 <_dtoa_r+0x4e6>
  407ffc:	401c0000 	.word	0x401c0000
  408000:	40140000 	.word	0x40140000
  408004:	0040a1a8 	.word	0x0040a1a8
  408008:	0040a180 	.word	0x0040a180
  40800c:	3fe00000 	.word	0x3fe00000
  408010:	40240000 	.word	0x40240000
  408014:	2b39      	cmp	r3, #57	; 0x39
  408016:	f8cd b018 	str.w	fp, [sp, #24]
  40801a:	46d0      	mov	r8, sl
  40801c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408020:	469a      	mov	sl, r3
  408022:	d0c8      	beq.n	407fb6 <_dtoa_r+0xd56>
  408024:	f1bb 0f00 	cmp.w	fp, #0
  408028:	f73f aebf 	bgt.w	407daa <_dtoa_r+0xb4a>
  40802c:	e6bf      	b.n	407dae <_dtoa_r+0xb4e>
  40802e:	f47f aebe 	bne.w	407dae <_dtoa_r+0xb4e>
  408032:	f01a 0f01 	tst.w	sl, #1
  408036:	f43f aeba 	beq.w	407dae <_dtoa_r+0xb4e>
  40803a:	e6b2      	b.n	407da2 <_dtoa_r+0xb42>
  40803c:	f04f 0800 	mov.w	r8, #0
  408040:	4646      	mov	r6, r8
  408042:	e5e9      	b.n	407c18 <_dtoa_r+0x9b8>
  408044:	4631      	mov	r1, r6
  408046:	2300      	movs	r3, #0
  408048:	220a      	movs	r2, #10
  40804a:	4620      	mov	r0, r4
  40804c:	f000 fe74 	bl	408d38 <__multadd>
  408050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408052:	2b00      	cmp	r3, #0
  408054:	4606      	mov	r6, r0
  408056:	dd0a      	ble.n	40806e <_dtoa_r+0xe0e>
  408058:	930a      	str	r3, [sp, #40]	; 0x28
  40805a:	f7ff bbaa 	b.w	4077b2 <_dtoa_r+0x552>
  40805e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408060:	2b02      	cmp	r3, #2
  408062:	dc23      	bgt.n	4080ac <_dtoa_r+0xe4c>
  408064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408066:	e43b      	b.n	4078e0 <_dtoa_r+0x680>
  408068:	f04f 0a02 	mov.w	sl, #2
  40806c:	e4ed      	b.n	407a4a <_dtoa_r+0x7ea>
  40806e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408070:	2b02      	cmp	r3, #2
  408072:	dc1b      	bgt.n	4080ac <_dtoa_r+0xe4c>
  408074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408076:	e7ef      	b.n	408058 <_dtoa_r+0xdf8>
  408078:	2500      	movs	r5, #0
  40807a:	6465      	str	r5, [r4, #68]	; 0x44
  40807c:	4629      	mov	r1, r5
  40807e:	4620      	mov	r0, r4
  408080:	f000 fe2a 	bl	408cd8 <_Balloc>
  408084:	f04f 33ff 	mov.w	r3, #4294967295
  408088:	930a      	str	r3, [sp, #40]	; 0x28
  40808a:	930f      	str	r3, [sp, #60]	; 0x3c
  40808c:	2301      	movs	r3, #1
  40808e:	9004      	str	r0, [sp, #16]
  408090:	9525      	str	r5, [sp, #148]	; 0x94
  408092:	6420      	str	r0, [r4, #64]	; 0x40
  408094:	930b      	str	r3, [sp, #44]	; 0x2c
  408096:	f7ff b9dd 	b.w	407454 <_dtoa_r+0x1f4>
  40809a:	2501      	movs	r5, #1
  40809c:	f7ff b9a5 	b.w	4073ea <_dtoa_r+0x18a>
  4080a0:	f43f ab69 	beq.w	407776 <_dtoa_r+0x516>
  4080a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4080a8:	f7ff bbf9 	b.w	40789e <_dtoa_r+0x63e>
  4080ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4080ae:	930a      	str	r3, [sp, #40]	; 0x28
  4080b0:	e5e5      	b.n	407c7e <_dtoa_r+0xa1e>
  4080b2:	bf00      	nop

004080b4 <__sflush_r>:
  4080b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4080b8:	b29a      	uxth	r2, r3
  4080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080be:	460d      	mov	r5, r1
  4080c0:	0711      	lsls	r1, r2, #28
  4080c2:	4680      	mov	r8, r0
  4080c4:	d43a      	bmi.n	40813c <__sflush_r+0x88>
  4080c6:	686a      	ldr	r2, [r5, #4]
  4080c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4080cc:	2a00      	cmp	r2, #0
  4080ce:	81ab      	strh	r3, [r5, #12]
  4080d0:	dd6f      	ble.n	4081b2 <__sflush_r+0xfe>
  4080d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4080d4:	2c00      	cmp	r4, #0
  4080d6:	d049      	beq.n	40816c <__sflush_r+0xb8>
  4080d8:	2200      	movs	r2, #0
  4080da:	b29b      	uxth	r3, r3
  4080dc:	f8d8 6000 	ldr.w	r6, [r8]
  4080e0:	f8c8 2000 	str.w	r2, [r8]
  4080e4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4080e8:	d067      	beq.n	4081ba <__sflush_r+0x106>
  4080ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4080ec:	075f      	lsls	r7, r3, #29
  4080ee:	d505      	bpl.n	4080fc <__sflush_r+0x48>
  4080f0:	6869      	ldr	r1, [r5, #4]
  4080f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4080f4:	1a52      	subs	r2, r2, r1
  4080f6:	b10b      	cbz	r3, 4080fc <__sflush_r+0x48>
  4080f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4080fa:	1ad2      	subs	r2, r2, r3
  4080fc:	2300      	movs	r3, #0
  4080fe:	69e9      	ldr	r1, [r5, #28]
  408100:	4640      	mov	r0, r8
  408102:	47a0      	blx	r4
  408104:	1c44      	adds	r4, r0, #1
  408106:	d03c      	beq.n	408182 <__sflush_r+0xce>
  408108:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40810c:	692a      	ldr	r2, [r5, #16]
  40810e:	602a      	str	r2, [r5, #0]
  408110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  408114:	2200      	movs	r2, #0
  408116:	81ab      	strh	r3, [r5, #12]
  408118:	04db      	lsls	r3, r3, #19
  40811a:	606a      	str	r2, [r5, #4]
  40811c:	d447      	bmi.n	4081ae <__sflush_r+0xfa>
  40811e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408120:	f8c8 6000 	str.w	r6, [r8]
  408124:	b311      	cbz	r1, 40816c <__sflush_r+0xb8>
  408126:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40812a:	4299      	cmp	r1, r3
  40812c:	d002      	beq.n	408134 <__sflush_r+0x80>
  40812e:	4640      	mov	r0, r8
  408130:	f000 f9de 	bl	4084f0 <_free_r>
  408134:	2000      	movs	r0, #0
  408136:	6328      	str	r0, [r5, #48]	; 0x30
  408138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40813c:	692e      	ldr	r6, [r5, #16]
  40813e:	b1ae      	cbz	r6, 40816c <__sflush_r+0xb8>
  408140:	682c      	ldr	r4, [r5, #0]
  408142:	602e      	str	r6, [r5, #0]
  408144:	0791      	lsls	r1, r2, #30
  408146:	bf0c      	ite	eq
  408148:	696b      	ldreq	r3, [r5, #20]
  40814a:	2300      	movne	r3, #0
  40814c:	1ba4      	subs	r4, r4, r6
  40814e:	60ab      	str	r3, [r5, #8]
  408150:	e00a      	b.n	408168 <__sflush_r+0xb4>
  408152:	4623      	mov	r3, r4
  408154:	4632      	mov	r2, r6
  408156:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  408158:	69e9      	ldr	r1, [r5, #28]
  40815a:	4640      	mov	r0, r8
  40815c:	47b8      	blx	r7
  40815e:	2800      	cmp	r0, #0
  408160:	eba4 0400 	sub.w	r4, r4, r0
  408164:	4406      	add	r6, r0
  408166:	dd04      	ble.n	408172 <__sflush_r+0xbe>
  408168:	2c00      	cmp	r4, #0
  40816a:	dcf2      	bgt.n	408152 <__sflush_r+0x9e>
  40816c:	2000      	movs	r0, #0
  40816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408172:	89ab      	ldrh	r3, [r5, #12]
  408174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408178:	81ab      	strh	r3, [r5, #12]
  40817a:	f04f 30ff 	mov.w	r0, #4294967295
  40817e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408182:	f8d8 4000 	ldr.w	r4, [r8]
  408186:	2c1d      	cmp	r4, #29
  408188:	d8f3      	bhi.n	408172 <__sflush_r+0xbe>
  40818a:	4b19      	ldr	r3, [pc, #100]	; (4081f0 <__sflush_r+0x13c>)
  40818c:	40e3      	lsrs	r3, r4
  40818e:	43db      	mvns	r3, r3
  408190:	f013 0301 	ands.w	r3, r3, #1
  408194:	d1ed      	bne.n	408172 <__sflush_r+0xbe>
  408196:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40819a:	606b      	str	r3, [r5, #4]
  40819c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4081a0:	6929      	ldr	r1, [r5, #16]
  4081a2:	81ab      	strh	r3, [r5, #12]
  4081a4:	04da      	lsls	r2, r3, #19
  4081a6:	6029      	str	r1, [r5, #0]
  4081a8:	d5b9      	bpl.n	40811e <__sflush_r+0x6a>
  4081aa:	2c00      	cmp	r4, #0
  4081ac:	d1b7      	bne.n	40811e <__sflush_r+0x6a>
  4081ae:	6528      	str	r0, [r5, #80]	; 0x50
  4081b0:	e7b5      	b.n	40811e <__sflush_r+0x6a>
  4081b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4081b4:	2a00      	cmp	r2, #0
  4081b6:	dc8c      	bgt.n	4080d2 <__sflush_r+0x1e>
  4081b8:	e7d8      	b.n	40816c <__sflush_r+0xb8>
  4081ba:	2301      	movs	r3, #1
  4081bc:	69e9      	ldr	r1, [r5, #28]
  4081be:	4640      	mov	r0, r8
  4081c0:	47a0      	blx	r4
  4081c2:	1c43      	adds	r3, r0, #1
  4081c4:	4602      	mov	r2, r0
  4081c6:	d002      	beq.n	4081ce <__sflush_r+0x11a>
  4081c8:	89ab      	ldrh	r3, [r5, #12]
  4081ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4081cc:	e78e      	b.n	4080ec <__sflush_r+0x38>
  4081ce:	f8d8 3000 	ldr.w	r3, [r8]
  4081d2:	2b00      	cmp	r3, #0
  4081d4:	d0f8      	beq.n	4081c8 <__sflush_r+0x114>
  4081d6:	2b1d      	cmp	r3, #29
  4081d8:	d001      	beq.n	4081de <__sflush_r+0x12a>
  4081da:	2b16      	cmp	r3, #22
  4081dc:	d102      	bne.n	4081e4 <__sflush_r+0x130>
  4081de:	f8c8 6000 	str.w	r6, [r8]
  4081e2:	e7c3      	b.n	40816c <__sflush_r+0xb8>
  4081e4:	89ab      	ldrh	r3, [r5, #12]
  4081e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4081ea:	81ab      	strh	r3, [r5, #12]
  4081ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4081f0:	20400001 	.word	0x20400001

004081f4 <_fflush_r>:
  4081f4:	b538      	push	{r3, r4, r5, lr}
  4081f6:	460d      	mov	r5, r1
  4081f8:	4604      	mov	r4, r0
  4081fa:	b108      	cbz	r0, 408200 <_fflush_r+0xc>
  4081fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4081fe:	b1bb      	cbz	r3, 408230 <_fflush_r+0x3c>
  408200:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  408204:	b188      	cbz	r0, 40822a <_fflush_r+0x36>
  408206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  408208:	07db      	lsls	r3, r3, #31
  40820a:	d401      	bmi.n	408210 <_fflush_r+0x1c>
  40820c:	0581      	lsls	r1, r0, #22
  40820e:	d517      	bpl.n	408240 <_fflush_r+0x4c>
  408210:	4620      	mov	r0, r4
  408212:	4629      	mov	r1, r5
  408214:	f7ff ff4e 	bl	4080b4 <__sflush_r>
  408218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40821a:	07da      	lsls	r2, r3, #31
  40821c:	4604      	mov	r4, r0
  40821e:	d402      	bmi.n	408226 <_fflush_r+0x32>
  408220:	89ab      	ldrh	r3, [r5, #12]
  408222:	059b      	lsls	r3, r3, #22
  408224:	d507      	bpl.n	408236 <_fflush_r+0x42>
  408226:	4620      	mov	r0, r4
  408228:	bd38      	pop	{r3, r4, r5, pc}
  40822a:	4604      	mov	r4, r0
  40822c:	4620      	mov	r0, r4
  40822e:	bd38      	pop	{r3, r4, r5, pc}
  408230:	f000 f838 	bl	4082a4 <__sinit>
  408234:	e7e4      	b.n	408200 <_fflush_r+0xc>
  408236:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408238:	f000 fc04 	bl	408a44 <__retarget_lock_release_recursive>
  40823c:	4620      	mov	r0, r4
  40823e:	bd38      	pop	{r3, r4, r5, pc}
  408240:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408242:	f000 fbfd 	bl	408a40 <__retarget_lock_acquire_recursive>
  408246:	e7e3      	b.n	408210 <_fflush_r+0x1c>

00408248 <_cleanup_r>:
  408248:	4901      	ldr	r1, [pc, #4]	; (408250 <_cleanup_r+0x8>)
  40824a:	f000 bbaf 	b.w	4089ac <_fwalk_reent>
  40824e:	bf00      	nop
  408250:	00409a31 	.word	0x00409a31

00408254 <std.isra.0>:
  408254:	b510      	push	{r4, lr}
  408256:	2300      	movs	r3, #0
  408258:	4604      	mov	r4, r0
  40825a:	8181      	strh	r1, [r0, #12]
  40825c:	81c2      	strh	r2, [r0, #14]
  40825e:	6003      	str	r3, [r0, #0]
  408260:	6043      	str	r3, [r0, #4]
  408262:	6083      	str	r3, [r0, #8]
  408264:	6643      	str	r3, [r0, #100]	; 0x64
  408266:	6103      	str	r3, [r0, #16]
  408268:	6143      	str	r3, [r0, #20]
  40826a:	6183      	str	r3, [r0, #24]
  40826c:	4619      	mov	r1, r3
  40826e:	2208      	movs	r2, #8
  408270:	305c      	adds	r0, #92	; 0x5c
  408272:	f7fc fbc1 	bl	4049f8 <memset>
  408276:	4807      	ldr	r0, [pc, #28]	; (408294 <std.isra.0+0x40>)
  408278:	4907      	ldr	r1, [pc, #28]	; (408298 <std.isra.0+0x44>)
  40827a:	4a08      	ldr	r2, [pc, #32]	; (40829c <std.isra.0+0x48>)
  40827c:	4b08      	ldr	r3, [pc, #32]	; (4082a0 <std.isra.0+0x4c>)
  40827e:	6220      	str	r0, [r4, #32]
  408280:	61e4      	str	r4, [r4, #28]
  408282:	6261      	str	r1, [r4, #36]	; 0x24
  408284:	62a2      	str	r2, [r4, #40]	; 0x28
  408286:	62e3      	str	r3, [r4, #44]	; 0x2c
  408288:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408290:	f000 bbd2 	b.w	408a38 <__retarget_lock_init_recursive>
  408294:	00409619 	.word	0x00409619
  408298:	0040963d 	.word	0x0040963d
  40829c:	00409679 	.word	0x00409679
  4082a0:	00409699 	.word	0x00409699

004082a4 <__sinit>:
  4082a4:	b510      	push	{r4, lr}
  4082a6:	4604      	mov	r4, r0
  4082a8:	4812      	ldr	r0, [pc, #72]	; (4082f4 <__sinit+0x50>)
  4082aa:	f000 fbc9 	bl	408a40 <__retarget_lock_acquire_recursive>
  4082ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4082b0:	b9d2      	cbnz	r2, 4082e8 <__sinit+0x44>
  4082b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4082b6:	4810      	ldr	r0, [pc, #64]	; (4082f8 <__sinit+0x54>)
  4082b8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4082bc:	2103      	movs	r1, #3
  4082be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4082c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4082c4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4082c8:	6860      	ldr	r0, [r4, #4]
  4082ca:	2104      	movs	r1, #4
  4082cc:	f7ff ffc2 	bl	408254 <std.isra.0>
  4082d0:	2201      	movs	r2, #1
  4082d2:	2109      	movs	r1, #9
  4082d4:	68a0      	ldr	r0, [r4, #8]
  4082d6:	f7ff ffbd 	bl	408254 <std.isra.0>
  4082da:	2202      	movs	r2, #2
  4082dc:	2112      	movs	r1, #18
  4082de:	68e0      	ldr	r0, [r4, #12]
  4082e0:	f7ff ffb8 	bl	408254 <std.isra.0>
  4082e4:	2301      	movs	r3, #1
  4082e6:	63a3      	str	r3, [r4, #56]	; 0x38
  4082e8:	4802      	ldr	r0, [pc, #8]	; (4082f4 <__sinit+0x50>)
  4082ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4082ee:	f000 bba9 	b.w	408a44 <__retarget_lock_release_recursive>
  4082f2:	bf00      	nop
  4082f4:	20400cf8 	.word	0x20400cf8
  4082f8:	00408249 	.word	0x00408249

004082fc <__sfp_lock_acquire>:
  4082fc:	4801      	ldr	r0, [pc, #4]	; (408304 <__sfp_lock_acquire+0x8>)
  4082fe:	f000 bb9f 	b.w	408a40 <__retarget_lock_acquire_recursive>
  408302:	bf00      	nop
  408304:	20400d0c 	.word	0x20400d0c

00408308 <__sfp_lock_release>:
  408308:	4801      	ldr	r0, [pc, #4]	; (408310 <__sfp_lock_release+0x8>)
  40830a:	f000 bb9b 	b.w	408a44 <__retarget_lock_release_recursive>
  40830e:	bf00      	nop
  408310:	20400d0c 	.word	0x20400d0c

00408314 <__libc_fini_array>:
  408314:	b538      	push	{r3, r4, r5, lr}
  408316:	4c0a      	ldr	r4, [pc, #40]	; (408340 <__libc_fini_array+0x2c>)
  408318:	4d0a      	ldr	r5, [pc, #40]	; (408344 <__libc_fini_array+0x30>)
  40831a:	1b64      	subs	r4, r4, r5
  40831c:	10a4      	asrs	r4, r4, #2
  40831e:	d00a      	beq.n	408336 <__libc_fini_array+0x22>
  408320:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408324:	3b01      	subs	r3, #1
  408326:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40832a:	3c01      	subs	r4, #1
  40832c:	f855 3904 	ldr.w	r3, [r5], #-4
  408330:	4798      	blx	r3
  408332:	2c00      	cmp	r4, #0
  408334:	d1f9      	bne.n	40832a <__libc_fini_array+0x16>
  408336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40833a:	f002 b82b 	b.w	40a394 <_fini>
  40833e:	bf00      	nop
  408340:	0040a3a4 	.word	0x0040a3a4
  408344:	0040a3a0 	.word	0x0040a3a0

00408348 <__fputwc>:
  408348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40834c:	b082      	sub	sp, #8
  40834e:	4680      	mov	r8, r0
  408350:	4689      	mov	r9, r1
  408352:	4614      	mov	r4, r2
  408354:	f000 fb54 	bl	408a00 <__locale_mb_cur_max>
  408358:	2801      	cmp	r0, #1
  40835a:	d036      	beq.n	4083ca <__fputwc+0x82>
  40835c:	464a      	mov	r2, r9
  40835e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408362:	a901      	add	r1, sp, #4
  408364:	4640      	mov	r0, r8
  408366:	f001 fa71 	bl	40984c <_wcrtomb_r>
  40836a:	1c42      	adds	r2, r0, #1
  40836c:	4606      	mov	r6, r0
  40836e:	d025      	beq.n	4083bc <__fputwc+0x74>
  408370:	b3a8      	cbz	r0, 4083de <__fputwc+0x96>
  408372:	f89d e004 	ldrb.w	lr, [sp, #4]
  408376:	2500      	movs	r5, #0
  408378:	f10d 0a04 	add.w	sl, sp, #4
  40837c:	e009      	b.n	408392 <__fputwc+0x4a>
  40837e:	6823      	ldr	r3, [r4, #0]
  408380:	1c5a      	adds	r2, r3, #1
  408382:	6022      	str	r2, [r4, #0]
  408384:	f883 e000 	strb.w	lr, [r3]
  408388:	3501      	adds	r5, #1
  40838a:	42b5      	cmp	r5, r6
  40838c:	d227      	bcs.n	4083de <__fputwc+0x96>
  40838e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408392:	68a3      	ldr	r3, [r4, #8]
  408394:	3b01      	subs	r3, #1
  408396:	2b00      	cmp	r3, #0
  408398:	60a3      	str	r3, [r4, #8]
  40839a:	daf0      	bge.n	40837e <__fputwc+0x36>
  40839c:	69a7      	ldr	r7, [r4, #24]
  40839e:	42bb      	cmp	r3, r7
  4083a0:	4671      	mov	r1, lr
  4083a2:	4622      	mov	r2, r4
  4083a4:	4640      	mov	r0, r8
  4083a6:	db02      	blt.n	4083ae <__fputwc+0x66>
  4083a8:	f1be 0f0a 	cmp.w	lr, #10
  4083ac:	d1e7      	bne.n	40837e <__fputwc+0x36>
  4083ae:	f001 f9f5 	bl	40979c <__swbuf_r>
  4083b2:	1c43      	adds	r3, r0, #1
  4083b4:	d1e8      	bne.n	408388 <__fputwc+0x40>
  4083b6:	b002      	add	sp, #8
  4083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4083bc:	89a3      	ldrh	r3, [r4, #12]
  4083be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4083c2:	81a3      	strh	r3, [r4, #12]
  4083c4:	b002      	add	sp, #8
  4083c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4083ca:	f109 33ff 	add.w	r3, r9, #4294967295
  4083ce:	2bfe      	cmp	r3, #254	; 0xfe
  4083d0:	d8c4      	bhi.n	40835c <__fputwc+0x14>
  4083d2:	fa5f fe89 	uxtb.w	lr, r9
  4083d6:	4606      	mov	r6, r0
  4083d8:	f88d e004 	strb.w	lr, [sp, #4]
  4083dc:	e7cb      	b.n	408376 <__fputwc+0x2e>
  4083de:	4648      	mov	r0, r9
  4083e0:	b002      	add	sp, #8
  4083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4083e6:	bf00      	nop

004083e8 <_fputwc_r>:
  4083e8:	b530      	push	{r4, r5, lr}
  4083ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4083ec:	f013 0f01 	tst.w	r3, #1
  4083f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4083f4:	4614      	mov	r4, r2
  4083f6:	b083      	sub	sp, #12
  4083f8:	4605      	mov	r5, r0
  4083fa:	b29a      	uxth	r2, r3
  4083fc:	d101      	bne.n	408402 <_fputwc_r+0x1a>
  4083fe:	0590      	lsls	r0, r2, #22
  408400:	d51c      	bpl.n	40843c <_fputwc_r+0x54>
  408402:	0490      	lsls	r0, r2, #18
  408404:	d406      	bmi.n	408414 <_fputwc_r+0x2c>
  408406:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40840c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408410:	81a3      	strh	r3, [r4, #12]
  408412:	6662      	str	r2, [r4, #100]	; 0x64
  408414:	4628      	mov	r0, r5
  408416:	4622      	mov	r2, r4
  408418:	f7ff ff96 	bl	408348 <__fputwc>
  40841c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40841e:	07da      	lsls	r2, r3, #31
  408420:	4605      	mov	r5, r0
  408422:	d402      	bmi.n	40842a <_fputwc_r+0x42>
  408424:	89a3      	ldrh	r3, [r4, #12]
  408426:	059b      	lsls	r3, r3, #22
  408428:	d502      	bpl.n	408430 <_fputwc_r+0x48>
  40842a:	4628      	mov	r0, r5
  40842c:	b003      	add	sp, #12
  40842e:	bd30      	pop	{r4, r5, pc}
  408430:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408432:	f000 fb07 	bl	408a44 <__retarget_lock_release_recursive>
  408436:	4628      	mov	r0, r5
  408438:	b003      	add	sp, #12
  40843a:	bd30      	pop	{r4, r5, pc}
  40843c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40843e:	9101      	str	r1, [sp, #4]
  408440:	f000 fafe 	bl	408a40 <__retarget_lock_acquire_recursive>
  408444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408448:	9901      	ldr	r1, [sp, #4]
  40844a:	b29a      	uxth	r2, r3
  40844c:	e7d9      	b.n	408402 <_fputwc_r+0x1a>
  40844e:	bf00      	nop

00408450 <_malloc_trim_r>:
  408450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408452:	4f24      	ldr	r7, [pc, #144]	; (4084e4 <_malloc_trim_r+0x94>)
  408454:	460c      	mov	r4, r1
  408456:	4606      	mov	r6, r0
  408458:	f7fc fb1c 	bl	404a94 <__malloc_lock>
  40845c:	68bb      	ldr	r3, [r7, #8]
  40845e:	685d      	ldr	r5, [r3, #4]
  408460:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408464:	310f      	adds	r1, #15
  408466:	f025 0503 	bic.w	r5, r5, #3
  40846a:	4429      	add	r1, r5
  40846c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408470:	f021 010f 	bic.w	r1, r1, #15
  408474:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408478:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40847c:	db07      	blt.n	40848e <_malloc_trim_r+0x3e>
  40847e:	2100      	movs	r1, #0
  408480:	4630      	mov	r0, r6
  408482:	f7fc fb13 	bl	404aac <_sbrk_r>
  408486:	68bb      	ldr	r3, [r7, #8]
  408488:	442b      	add	r3, r5
  40848a:	4298      	cmp	r0, r3
  40848c:	d004      	beq.n	408498 <_malloc_trim_r+0x48>
  40848e:	4630      	mov	r0, r6
  408490:	f7fc fb06 	bl	404aa0 <__malloc_unlock>
  408494:	2000      	movs	r0, #0
  408496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408498:	4261      	negs	r1, r4
  40849a:	4630      	mov	r0, r6
  40849c:	f7fc fb06 	bl	404aac <_sbrk_r>
  4084a0:	3001      	adds	r0, #1
  4084a2:	d00d      	beq.n	4084c0 <_malloc_trim_r+0x70>
  4084a4:	4b10      	ldr	r3, [pc, #64]	; (4084e8 <_malloc_trim_r+0x98>)
  4084a6:	68ba      	ldr	r2, [r7, #8]
  4084a8:	6819      	ldr	r1, [r3, #0]
  4084aa:	1b2d      	subs	r5, r5, r4
  4084ac:	f045 0501 	orr.w	r5, r5, #1
  4084b0:	4630      	mov	r0, r6
  4084b2:	1b09      	subs	r1, r1, r4
  4084b4:	6055      	str	r5, [r2, #4]
  4084b6:	6019      	str	r1, [r3, #0]
  4084b8:	f7fc faf2 	bl	404aa0 <__malloc_unlock>
  4084bc:	2001      	movs	r0, #1
  4084be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4084c0:	2100      	movs	r1, #0
  4084c2:	4630      	mov	r0, r6
  4084c4:	f7fc faf2 	bl	404aac <_sbrk_r>
  4084c8:	68ba      	ldr	r2, [r7, #8]
  4084ca:	1a83      	subs	r3, r0, r2
  4084cc:	2b0f      	cmp	r3, #15
  4084ce:	ddde      	ble.n	40848e <_malloc_trim_r+0x3e>
  4084d0:	4c06      	ldr	r4, [pc, #24]	; (4084ec <_malloc_trim_r+0x9c>)
  4084d2:	4905      	ldr	r1, [pc, #20]	; (4084e8 <_malloc_trim_r+0x98>)
  4084d4:	6824      	ldr	r4, [r4, #0]
  4084d6:	f043 0301 	orr.w	r3, r3, #1
  4084da:	1b00      	subs	r0, r0, r4
  4084dc:	6053      	str	r3, [r2, #4]
  4084de:	6008      	str	r0, [r1, #0]
  4084e0:	e7d5      	b.n	40848e <_malloc_trim_r+0x3e>
  4084e2:	bf00      	nop
  4084e4:	20400440 	.word	0x20400440
  4084e8:	20400ba0 	.word	0x20400ba0
  4084ec:	20400848 	.word	0x20400848

004084f0 <_free_r>:
  4084f0:	2900      	cmp	r1, #0
  4084f2:	d044      	beq.n	40857e <_free_r+0x8e>
  4084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4084f8:	460d      	mov	r5, r1
  4084fa:	4680      	mov	r8, r0
  4084fc:	f7fc faca 	bl	404a94 <__malloc_lock>
  408500:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408504:	4969      	ldr	r1, [pc, #420]	; (4086ac <_free_r+0x1bc>)
  408506:	f027 0301 	bic.w	r3, r7, #1
  40850a:	f1a5 0408 	sub.w	r4, r5, #8
  40850e:	18e2      	adds	r2, r4, r3
  408510:	688e      	ldr	r6, [r1, #8]
  408512:	6850      	ldr	r0, [r2, #4]
  408514:	42b2      	cmp	r2, r6
  408516:	f020 0003 	bic.w	r0, r0, #3
  40851a:	d05e      	beq.n	4085da <_free_r+0xea>
  40851c:	07fe      	lsls	r6, r7, #31
  40851e:	6050      	str	r0, [r2, #4]
  408520:	d40b      	bmi.n	40853a <_free_r+0x4a>
  408522:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408526:	1be4      	subs	r4, r4, r7
  408528:	f101 0e08 	add.w	lr, r1, #8
  40852c:	68a5      	ldr	r5, [r4, #8]
  40852e:	4575      	cmp	r5, lr
  408530:	443b      	add	r3, r7
  408532:	d06d      	beq.n	408610 <_free_r+0x120>
  408534:	68e7      	ldr	r7, [r4, #12]
  408536:	60ef      	str	r7, [r5, #12]
  408538:	60bd      	str	r5, [r7, #8]
  40853a:	1815      	adds	r5, r2, r0
  40853c:	686d      	ldr	r5, [r5, #4]
  40853e:	07ed      	lsls	r5, r5, #31
  408540:	d53e      	bpl.n	4085c0 <_free_r+0xd0>
  408542:	f043 0201 	orr.w	r2, r3, #1
  408546:	6062      	str	r2, [r4, #4]
  408548:	50e3      	str	r3, [r4, r3]
  40854a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40854e:	d217      	bcs.n	408580 <_free_r+0x90>
  408550:	08db      	lsrs	r3, r3, #3
  408552:	1c58      	adds	r0, r3, #1
  408554:	109a      	asrs	r2, r3, #2
  408556:	684d      	ldr	r5, [r1, #4]
  408558:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40855c:	60a7      	str	r7, [r4, #8]
  40855e:	2301      	movs	r3, #1
  408560:	4093      	lsls	r3, r2
  408562:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408566:	432b      	orrs	r3, r5
  408568:	3a08      	subs	r2, #8
  40856a:	60e2      	str	r2, [r4, #12]
  40856c:	604b      	str	r3, [r1, #4]
  40856e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408572:	60fc      	str	r4, [r7, #12]
  408574:	4640      	mov	r0, r8
  408576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40857a:	f7fc ba91 	b.w	404aa0 <__malloc_unlock>
  40857e:	4770      	bx	lr
  408580:	0a5a      	lsrs	r2, r3, #9
  408582:	2a04      	cmp	r2, #4
  408584:	d852      	bhi.n	40862c <_free_r+0x13c>
  408586:	099a      	lsrs	r2, r3, #6
  408588:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40858c:	00ff      	lsls	r7, r7, #3
  40858e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408592:	19c8      	adds	r0, r1, r7
  408594:	59ca      	ldr	r2, [r1, r7]
  408596:	3808      	subs	r0, #8
  408598:	4290      	cmp	r0, r2
  40859a:	d04f      	beq.n	40863c <_free_r+0x14c>
  40859c:	6851      	ldr	r1, [r2, #4]
  40859e:	f021 0103 	bic.w	r1, r1, #3
  4085a2:	428b      	cmp	r3, r1
  4085a4:	d232      	bcs.n	40860c <_free_r+0x11c>
  4085a6:	6892      	ldr	r2, [r2, #8]
  4085a8:	4290      	cmp	r0, r2
  4085aa:	d1f7      	bne.n	40859c <_free_r+0xac>
  4085ac:	68c3      	ldr	r3, [r0, #12]
  4085ae:	60a0      	str	r0, [r4, #8]
  4085b0:	60e3      	str	r3, [r4, #12]
  4085b2:	609c      	str	r4, [r3, #8]
  4085b4:	60c4      	str	r4, [r0, #12]
  4085b6:	4640      	mov	r0, r8
  4085b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4085bc:	f7fc ba70 	b.w	404aa0 <__malloc_unlock>
  4085c0:	6895      	ldr	r5, [r2, #8]
  4085c2:	4f3b      	ldr	r7, [pc, #236]	; (4086b0 <_free_r+0x1c0>)
  4085c4:	42bd      	cmp	r5, r7
  4085c6:	4403      	add	r3, r0
  4085c8:	d040      	beq.n	40864c <_free_r+0x15c>
  4085ca:	68d0      	ldr	r0, [r2, #12]
  4085cc:	60e8      	str	r0, [r5, #12]
  4085ce:	f043 0201 	orr.w	r2, r3, #1
  4085d2:	6085      	str	r5, [r0, #8]
  4085d4:	6062      	str	r2, [r4, #4]
  4085d6:	50e3      	str	r3, [r4, r3]
  4085d8:	e7b7      	b.n	40854a <_free_r+0x5a>
  4085da:	07ff      	lsls	r7, r7, #31
  4085dc:	4403      	add	r3, r0
  4085de:	d407      	bmi.n	4085f0 <_free_r+0x100>
  4085e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4085e4:	1aa4      	subs	r4, r4, r2
  4085e6:	4413      	add	r3, r2
  4085e8:	68a0      	ldr	r0, [r4, #8]
  4085ea:	68e2      	ldr	r2, [r4, #12]
  4085ec:	60c2      	str	r2, [r0, #12]
  4085ee:	6090      	str	r0, [r2, #8]
  4085f0:	4a30      	ldr	r2, [pc, #192]	; (4086b4 <_free_r+0x1c4>)
  4085f2:	6812      	ldr	r2, [r2, #0]
  4085f4:	f043 0001 	orr.w	r0, r3, #1
  4085f8:	4293      	cmp	r3, r2
  4085fa:	6060      	str	r0, [r4, #4]
  4085fc:	608c      	str	r4, [r1, #8]
  4085fe:	d3b9      	bcc.n	408574 <_free_r+0x84>
  408600:	4b2d      	ldr	r3, [pc, #180]	; (4086b8 <_free_r+0x1c8>)
  408602:	4640      	mov	r0, r8
  408604:	6819      	ldr	r1, [r3, #0]
  408606:	f7ff ff23 	bl	408450 <_malloc_trim_r>
  40860a:	e7b3      	b.n	408574 <_free_r+0x84>
  40860c:	4610      	mov	r0, r2
  40860e:	e7cd      	b.n	4085ac <_free_r+0xbc>
  408610:	1811      	adds	r1, r2, r0
  408612:	6849      	ldr	r1, [r1, #4]
  408614:	07c9      	lsls	r1, r1, #31
  408616:	d444      	bmi.n	4086a2 <_free_r+0x1b2>
  408618:	6891      	ldr	r1, [r2, #8]
  40861a:	68d2      	ldr	r2, [r2, #12]
  40861c:	60ca      	str	r2, [r1, #12]
  40861e:	4403      	add	r3, r0
  408620:	f043 0001 	orr.w	r0, r3, #1
  408624:	6091      	str	r1, [r2, #8]
  408626:	6060      	str	r0, [r4, #4]
  408628:	50e3      	str	r3, [r4, r3]
  40862a:	e7a3      	b.n	408574 <_free_r+0x84>
  40862c:	2a14      	cmp	r2, #20
  40862e:	d816      	bhi.n	40865e <_free_r+0x16e>
  408630:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408634:	00ff      	lsls	r7, r7, #3
  408636:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40863a:	e7aa      	b.n	408592 <_free_r+0xa2>
  40863c:	10aa      	asrs	r2, r5, #2
  40863e:	2301      	movs	r3, #1
  408640:	684d      	ldr	r5, [r1, #4]
  408642:	4093      	lsls	r3, r2
  408644:	432b      	orrs	r3, r5
  408646:	604b      	str	r3, [r1, #4]
  408648:	4603      	mov	r3, r0
  40864a:	e7b0      	b.n	4085ae <_free_r+0xbe>
  40864c:	f043 0201 	orr.w	r2, r3, #1
  408650:	614c      	str	r4, [r1, #20]
  408652:	610c      	str	r4, [r1, #16]
  408654:	60e5      	str	r5, [r4, #12]
  408656:	60a5      	str	r5, [r4, #8]
  408658:	6062      	str	r2, [r4, #4]
  40865a:	50e3      	str	r3, [r4, r3]
  40865c:	e78a      	b.n	408574 <_free_r+0x84>
  40865e:	2a54      	cmp	r2, #84	; 0x54
  408660:	d806      	bhi.n	408670 <_free_r+0x180>
  408662:	0b1a      	lsrs	r2, r3, #12
  408664:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408668:	00ff      	lsls	r7, r7, #3
  40866a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40866e:	e790      	b.n	408592 <_free_r+0xa2>
  408670:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408674:	d806      	bhi.n	408684 <_free_r+0x194>
  408676:	0bda      	lsrs	r2, r3, #15
  408678:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40867c:	00ff      	lsls	r7, r7, #3
  40867e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408682:	e786      	b.n	408592 <_free_r+0xa2>
  408684:	f240 5054 	movw	r0, #1364	; 0x554
  408688:	4282      	cmp	r2, r0
  40868a:	d806      	bhi.n	40869a <_free_r+0x1aa>
  40868c:	0c9a      	lsrs	r2, r3, #18
  40868e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408692:	00ff      	lsls	r7, r7, #3
  408694:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408698:	e77b      	b.n	408592 <_free_r+0xa2>
  40869a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40869e:	257e      	movs	r5, #126	; 0x7e
  4086a0:	e777      	b.n	408592 <_free_r+0xa2>
  4086a2:	f043 0101 	orr.w	r1, r3, #1
  4086a6:	6061      	str	r1, [r4, #4]
  4086a8:	6013      	str	r3, [r2, #0]
  4086aa:	e763      	b.n	408574 <_free_r+0x84>
  4086ac:	20400440 	.word	0x20400440
  4086b0:	20400448 	.word	0x20400448
  4086b4:	2040084c 	.word	0x2040084c
  4086b8:	20400bd0 	.word	0x20400bd0

004086bc <__sfvwrite_r>:
  4086bc:	6893      	ldr	r3, [r2, #8]
  4086be:	2b00      	cmp	r3, #0
  4086c0:	d073      	beq.n	4087aa <__sfvwrite_r+0xee>
  4086c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086c6:	898b      	ldrh	r3, [r1, #12]
  4086c8:	b083      	sub	sp, #12
  4086ca:	460c      	mov	r4, r1
  4086cc:	0719      	lsls	r1, r3, #28
  4086ce:	9000      	str	r0, [sp, #0]
  4086d0:	4616      	mov	r6, r2
  4086d2:	d526      	bpl.n	408722 <__sfvwrite_r+0x66>
  4086d4:	6922      	ldr	r2, [r4, #16]
  4086d6:	b322      	cbz	r2, 408722 <__sfvwrite_r+0x66>
  4086d8:	f013 0002 	ands.w	r0, r3, #2
  4086dc:	6835      	ldr	r5, [r6, #0]
  4086de:	d02c      	beq.n	40873a <__sfvwrite_r+0x7e>
  4086e0:	f04f 0900 	mov.w	r9, #0
  4086e4:	4fb0      	ldr	r7, [pc, #704]	; (4089a8 <__sfvwrite_r+0x2ec>)
  4086e6:	46c8      	mov	r8, r9
  4086e8:	46b2      	mov	sl, r6
  4086ea:	45b8      	cmp	r8, r7
  4086ec:	4643      	mov	r3, r8
  4086ee:	464a      	mov	r2, r9
  4086f0:	bf28      	it	cs
  4086f2:	463b      	movcs	r3, r7
  4086f4:	9800      	ldr	r0, [sp, #0]
  4086f6:	f1b8 0f00 	cmp.w	r8, #0
  4086fa:	d050      	beq.n	40879e <__sfvwrite_r+0xe2>
  4086fc:	69e1      	ldr	r1, [r4, #28]
  4086fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408700:	47b0      	blx	r6
  408702:	2800      	cmp	r0, #0
  408704:	dd58      	ble.n	4087b8 <__sfvwrite_r+0xfc>
  408706:	f8da 3008 	ldr.w	r3, [sl, #8]
  40870a:	1a1b      	subs	r3, r3, r0
  40870c:	4481      	add	r9, r0
  40870e:	eba8 0800 	sub.w	r8, r8, r0
  408712:	f8ca 3008 	str.w	r3, [sl, #8]
  408716:	2b00      	cmp	r3, #0
  408718:	d1e7      	bne.n	4086ea <__sfvwrite_r+0x2e>
  40871a:	2000      	movs	r0, #0
  40871c:	b003      	add	sp, #12
  40871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408722:	4621      	mov	r1, r4
  408724:	9800      	ldr	r0, [sp, #0]
  408726:	f7fe fc91 	bl	40704c <__swsetup_r>
  40872a:	2800      	cmp	r0, #0
  40872c:	f040 8133 	bne.w	408996 <__sfvwrite_r+0x2da>
  408730:	89a3      	ldrh	r3, [r4, #12]
  408732:	6835      	ldr	r5, [r6, #0]
  408734:	f013 0002 	ands.w	r0, r3, #2
  408738:	d1d2      	bne.n	4086e0 <__sfvwrite_r+0x24>
  40873a:	f013 0901 	ands.w	r9, r3, #1
  40873e:	d145      	bne.n	4087cc <__sfvwrite_r+0x110>
  408740:	464f      	mov	r7, r9
  408742:	9601      	str	r6, [sp, #4]
  408744:	b337      	cbz	r7, 408794 <__sfvwrite_r+0xd8>
  408746:	059a      	lsls	r2, r3, #22
  408748:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40874c:	f140 8083 	bpl.w	408856 <__sfvwrite_r+0x19a>
  408750:	4547      	cmp	r7, r8
  408752:	46c3      	mov	fp, r8
  408754:	f0c0 80ab 	bcc.w	4088ae <__sfvwrite_r+0x1f2>
  408758:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40875c:	f040 80ac 	bne.w	4088b8 <__sfvwrite_r+0x1fc>
  408760:	6820      	ldr	r0, [r4, #0]
  408762:	46ba      	mov	sl, r7
  408764:	465a      	mov	r2, fp
  408766:	4649      	mov	r1, r9
  408768:	f000 fa52 	bl	408c10 <memmove>
  40876c:	68a2      	ldr	r2, [r4, #8]
  40876e:	6823      	ldr	r3, [r4, #0]
  408770:	eba2 0208 	sub.w	r2, r2, r8
  408774:	445b      	add	r3, fp
  408776:	60a2      	str	r2, [r4, #8]
  408778:	6023      	str	r3, [r4, #0]
  40877a:	9a01      	ldr	r2, [sp, #4]
  40877c:	6893      	ldr	r3, [r2, #8]
  40877e:	eba3 030a 	sub.w	r3, r3, sl
  408782:	44d1      	add	r9, sl
  408784:	eba7 070a 	sub.w	r7, r7, sl
  408788:	6093      	str	r3, [r2, #8]
  40878a:	2b00      	cmp	r3, #0
  40878c:	d0c5      	beq.n	40871a <__sfvwrite_r+0x5e>
  40878e:	89a3      	ldrh	r3, [r4, #12]
  408790:	2f00      	cmp	r7, #0
  408792:	d1d8      	bne.n	408746 <__sfvwrite_r+0x8a>
  408794:	f8d5 9000 	ldr.w	r9, [r5]
  408798:	686f      	ldr	r7, [r5, #4]
  40879a:	3508      	adds	r5, #8
  40879c:	e7d2      	b.n	408744 <__sfvwrite_r+0x88>
  40879e:	f8d5 9000 	ldr.w	r9, [r5]
  4087a2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4087a6:	3508      	adds	r5, #8
  4087a8:	e79f      	b.n	4086ea <__sfvwrite_r+0x2e>
  4087aa:	2000      	movs	r0, #0
  4087ac:	4770      	bx	lr
  4087ae:	4621      	mov	r1, r4
  4087b0:	9800      	ldr	r0, [sp, #0]
  4087b2:	f7ff fd1f 	bl	4081f4 <_fflush_r>
  4087b6:	b370      	cbz	r0, 408816 <__sfvwrite_r+0x15a>
  4087b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4087c0:	f04f 30ff 	mov.w	r0, #4294967295
  4087c4:	81a3      	strh	r3, [r4, #12]
  4087c6:	b003      	add	sp, #12
  4087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087cc:	4681      	mov	r9, r0
  4087ce:	4633      	mov	r3, r6
  4087d0:	464e      	mov	r6, r9
  4087d2:	46a8      	mov	r8, r5
  4087d4:	469a      	mov	sl, r3
  4087d6:	464d      	mov	r5, r9
  4087d8:	b34e      	cbz	r6, 40882e <__sfvwrite_r+0x172>
  4087da:	b380      	cbz	r0, 40883e <__sfvwrite_r+0x182>
  4087dc:	6820      	ldr	r0, [r4, #0]
  4087de:	6923      	ldr	r3, [r4, #16]
  4087e0:	6962      	ldr	r2, [r4, #20]
  4087e2:	45b1      	cmp	r9, r6
  4087e4:	46cb      	mov	fp, r9
  4087e6:	bf28      	it	cs
  4087e8:	46b3      	movcs	fp, r6
  4087ea:	4298      	cmp	r0, r3
  4087ec:	465f      	mov	r7, fp
  4087ee:	d904      	bls.n	4087fa <__sfvwrite_r+0x13e>
  4087f0:	68a3      	ldr	r3, [r4, #8]
  4087f2:	4413      	add	r3, r2
  4087f4:	459b      	cmp	fp, r3
  4087f6:	f300 80a6 	bgt.w	408946 <__sfvwrite_r+0x28a>
  4087fa:	4593      	cmp	fp, r2
  4087fc:	db4b      	blt.n	408896 <__sfvwrite_r+0x1da>
  4087fe:	4613      	mov	r3, r2
  408800:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408802:	69e1      	ldr	r1, [r4, #28]
  408804:	9800      	ldr	r0, [sp, #0]
  408806:	462a      	mov	r2, r5
  408808:	47b8      	blx	r7
  40880a:	1e07      	subs	r7, r0, #0
  40880c:	ddd4      	ble.n	4087b8 <__sfvwrite_r+0xfc>
  40880e:	ebb9 0907 	subs.w	r9, r9, r7
  408812:	d0cc      	beq.n	4087ae <__sfvwrite_r+0xf2>
  408814:	2001      	movs	r0, #1
  408816:	f8da 3008 	ldr.w	r3, [sl, #8]
  40881a:	1bdb      	subs	r3, r3, r7
  40881c:	443d      	add	r5, r7
  40881e:	1bf6      	subs	r6, r6, r7
  408820:	f8ca 3008 	str.w	r3, [sl, #8]
  408824:	2b00      	cmp	r3, #0
  408826:	f43f af78 	beq.w	40871a <__sfvwrite_r+0x5e>
  40882a:	2e00      	cmp	r6, #0
  40882c:	d1d5      	bne.n	4087da <__sfvwrite_r+0x11e>
  40882e:	f108 0308 	add.w	r3, r8, #8
  408832:	e913 0060 	ldmdb	r3, {r5, r6}
  408836:	4698      	mov	r8, r3
  408838:	3308      	adds	r3, #8
  40883a:	2e00      	cmp	r6, #0
  40883c:	d0f9      	beq.n	408832 <__sfvwrite_r+0x176>
  40883e:	4632      	mov	r2, r6
  408840:	210a      	movs	r1, #10
  408842:	4628      	mov	r0, r5
  408844:	f000 f994 	bl	408b70 <memchr>
  408848:	2800      	cmp	r0, #0
  40884a:	f000 80a1 	beq.w	408990 <__sfvwrite_r+0x2d4>
  40884e:	3001      	adds	r0, #1
  408850:	eba0 0905 	sub.w	r9, r0, r5
  408854:	e7c2      	b.n	4087dc <__sfvwrite_r+0x120>
  408856:	6820      	ldr	r0, [r4, #0]
  408858:	6923      	ldr	r3, [r4, #16]
  40885a:	4298      	cmp	r0, r3
  40885c:	d802      	bhi.n	408864 <__sfvwrite_r+0x1a8>
  40885e:	6963      	ldr	r3, [r4, #20]
  408860:	429f      	cmp	r7, r3
  408862:	d25d      	bcs.n	408920 <__sfvwrite_r+0x264>
  408864:	45b8      	cmp	r8, r7
  408866:	bf28      	it	cs
  408868:	46b8      	movcs	r8, r7
  40886a:	4642      	mov	r2, r8
  40886c:	4649      	mov	r1, r9
  40886e:	f000 f9cf 	bl	408c10 <memmove>
  408872:	68a3      	ldr	r3, [r4, #8]
  408874:	6822      	ldr	r2, [r4, #0]
  408876:	eba3 0308 	sub.w	r3, r3, r8
  40887a:	4442      	add	r2, r8
  40887c:	60a3      	str	r3, [r4, #8]
  40887e:	6022      	str	r2, [r4, #0]
  408880:	b10b      	cbz	r3, 408886 <__sfvwrite_r+0x1ca>
  408882:	46c2      	mov	sl, r8
  408884:	e779      	b.n	40877a <__sfvwrite_r+0xbe>
  408886:	4621      	mov	r1, r4
  408888:	9800      	ldr	r0, [sp, #0]
  40888a:	f7ff fcb3 	bl	4081f4 <_fflush_r>
  40888e:	2800      	cmp	r0, #0
  408890:	d192      	bne.n	4087b8 <__sfvwrite_r+0xfc>
  408892:	46c2      	mov	sl, r8
  408894:	e771      	b.n	40877a <__sfvwrite_r+0xbe>
  408896:	465a      	mov	r2, fp
  408898:	4629      	mov	r1, r5
  40889a:	f000 f9b9 	bl	408c10 <memmove>
  40889e:	68a2      	ldr	r2, [r4, #8]
  4088a0:	6823      	ldr	r3, [r4, #0]
  4088a2:	eba2 020b 	sub.w	r2, r2, fp
  4088a6:	445b      	add	r3, fp
  4088a8:	60a2      	str	r2, [r4, #8]
  4088aa:	6023      	str	r3, [r4, #0]
  4088ac:	e7af      	b.n	40880e <__sfvwrite_r+0x152>
  4088ae:	6820      	ldr	r0, [r4, #0]
  4088b0:	46b8      	mov	r8, r7
  4088b2:	46ba      	mov	sl, r7
  4088b4:	46bb      	mov	fp, r7
  4088b6:	e755      	b.n	408764 <__sfvwrite_r+0xa8>
  4088b8:	6962      	ldr	r2, [r4, #20]
  4088ba:	6820      	ldr	r0, [r4, #0]
  4088bc:	6921      	ldr	r1, [r4, #16]
  4088be:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4088c2:	eba0 0a01 	sub.w	sl, r0, r1
  4088c6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4088ca:	f10a 0001 	add.w	r0, sl, #1
  4088ce:	ea4f 0868 	mov.w	r8, r8, asr #1
  4088d2:	4438      	add	r0, r7
  4088d4:	4540      	cmp	r0, r8
  4088d6:	4642      	mov	r2, r8
  4088d8:	bf84      	itt	hi
  4088da:	4680      	movhi	r8, r0
  4088dc:	4642      	movhi	r2, r8
  4088de:	055b      	lsls	r3, r3, #21
  4088e0:	d544      	bpl.n	40896c <__sfvwrite_r+0x2b0>
  4088e2:	4611      	mov	r1, r2
  4088e4:	9800      	ldr	r0, [sp, #0]
  4088e6:	f7fb fd3d 	bl	404364 <_malloc_r>
  4088ea:	4683      	mov	fp, r0
  4088ec:	2800      	cmp	r0, #0
  4088ee:	d055      	beq.n	40899c <__sfvwrite_r+0x2e0>
  4088f0:	4652      	mov	r2, sl
  4088f2:	6921      	ldr	r1, [r4, #16]
  4088f4:	f7fb ffe6 	bl	4048c4 <memcpy>
  4088f8:	89a3      	ldrh	r3, [r4, #12]
  4088fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4088fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408902:	81a3      	strh	r3, [r4, #12]
  408904:	eb0b 000a 	add.w	r0, fp, sl
  408908:	eba8 030a 	sub.w	r3, r8, sl
  40890c:	f8c4 b010 	str.w	fp, [r4, #16]
  408910:	f8c4 8014 	str.w	r8, [r4, #20]
  408914:	6020      	str	r0, [r4, #0]
  408916:	60a3      	str	r3, [r4, #8]
  408918:	46b8      	mov	r8, r7
  40891a:	46ba      	mov	sl, r7
  40891c:	46bb      	mov	fp, r7
  40891e:	e721      	b.n	408764 <__sfvwrite_r+0xa8>
  408920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408924:	42b9      	cmp	r1, r7
  408926:	bf28      	it	cs
  408928:	4639      	movcs	r1, r7
  40892a:	464a      	mov	r2, r9
  40892c:	fb91 f1f3 	sdiv	r1, r1, r3
  408930:	9800      	ldr	r0, [sp, #0]
  408932:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408934:	fb03 f301 	mul.w	r3, r3, r1
  408938:	69e1      	ldr	r1, [r4, #28]
  40893a:	47b0      	blx	r6
  40893c:	f1b0 0a00 	subs.w	sl, r0, #0
  408940:	f73f af1b 	bgt.w	40877a <__sfvwrite_r+0xbe>
  408944:	e738      	b.n	4087b8 <__sfvwrite_r+0xfc>
  408946:	461a      	mov	r2, r3
  408948:	4629      	mov	r1, r5
  40894a:	9301      	str	r3, [sp, #4]
  40894c:	f000 f960 	bl	408c10 <memmove>
  408950:	6822      	ldr	r2, [r4, #0]
  408952:	9b01      	ldr	r3, [sp, #4]
  408954:	9800      	ldr	r0, [sp, #0]
  408956:	441a      	add	r2, r3
  408958:	6022      	str	r2, [r4, #0]
  40895a:	4621      	mov	r1, r4
  40895c:	f7ff fc4a 	bl	4081f4 <_fflush_r>
  408960:	9b01      	ldr	r3, [sp, #4]
  408962:	2800      	cmp	r0, #0
  408964:	f47f af28 	bne.w	4087b8 <__sfvwrite_r+0xfc>
  408968:	461f      	mov	r7, r3
  40896a:	e750      	b.n	40880e <__sfvwrite_r+0x152>
  40896c:	9800      	ldr	r0, [sp, #0]
  40896e:	f000 fcad 	bl	4092cc <_realloc_r>
  408972:	4683      	mov	fp, r0
  408974:	2800      	cmp	r0, #0
  408976:	d1c5      	bne.n	408904 <__sfvwrite_r+0x248>
  408978:	9d00      	ldr	r5, [sp, #0]
  40897a:	6921      	ldr	r1, [r4, #16]
  40897c:	4628      	mov	r0, r5
  40897e:	f7ff fdb7 	bl	4084f0 <_free_r>
  408982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408986:	220c      	movs	r2, #12
  408988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40898c:	602a      	str	r2, [r5, #0]
  40898e:	e715      	b.n	4087bc <__sfvwrite_r+0x100>
  408990:	f106 0901 	add.w	r9, r6, #1
  408994:	e722      	b.n	4087dc <__sfvwrite_r+0x120>
  408996:	f04f 30ff 	mov.w	r0, #4294967295
  40899a:	e6bf      	b.n	40871c <__sfvwrite_r+0x60>
  40899c:	9a00      	ldr	r2, [sp, #0]
  40899e:	230c      	movs	r3, #12
  4089a0:	6013      	str	r3, [r2, #0]
  4089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089a6:	e709      	b.n	4087bc <__sfvwrite_r+0x100>
  4089a8:	7ffffc00 	.word	0x7ffffc00

004089ac <_fwalk_reent>:
  4089ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4089b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4089b4:	d01f      	beq.n	4089f6 <_fwalk_reent+0x4a>
  4089b6:	4688      	mov	r8, r1
  4089b8:	4606      	mov	r6, r0
  4089ba:	f04f 0900 	mov.w	r9, #0
  4089be:	687d      	ldr	r5, [r7, #4]
  4089c0:	68bc      	ldr	r4, [r7, #8]
  4089c2:	3d01      	subs	r5, #1
  4089c4:	d411      	bmi.n	4089ea <_fwalk_reent+0x3e>
  4089c6:	89a3      	ldrh	r3, [r4, #12]
  4089c8:	2b01      	cmp	r3, #1
  4089ca:	f105 35ff 	add.w	r5, r5, #4294967295
  4089ce:	d908      	bls.n	4089e2 <_fwalk_reent+0x36>
  4089d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4089d4:	3301      	adds	r3, #1
  4089d6:	4621      	mov	r1, r4
  4089d8:	4630      	mov	r0, r6
  4089da:	d002      	beq.n	4089e2 <_fwalk_reent+0x36>
  4089dc:	47c0      	blx	r8
  4089de:	ea49 0900 	orr.w	r9, r9, r0
  4089e2:	1c6b      	adds	r3, r5, #1
  4089e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4089e8:	d1ed      	bne.n	4089c6 <_fwalk_reent+0x1a>
  4089ea:	683f      	ldr	r7, [r7, #0]
  4089ec:	2f00      	cmp	r7, #0
  4089ee:	d1e6      	bne.n	4089be <_fwalk_reent+0x12>
  4089f0:	4648      	mov	r0, r9
  4089f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4089f6:	46b9      	mov	r9, r7
  4089f8:	4648      	mov	r0, r9
  4089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4089fe:	bf00      	nop

00408a00 <__locale_mb_cur_max>:
  408a00:	4b04      	ldr	r3, [pc, #16]	; (408a14 <__locale_mb_cur_max+0x14>)
  408a02:	4a05      	ldr	r2, [pc, #20]	; (408a18 <__locale_mb_cur_max+0x18>)
  408a04:	681b      	ldr	r3, [r3, #0]
  408a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408a08:	2b00      	cmp	r3, #0
  408a0a:	bf08      	it	eq
  408a0c:	4613      	moveq	r3, r2
  408a0e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408a12:	4770      	bx	lr
  408a14:	20400014 	.word	0x20400014
  408a18:	20400854 	.word	0x20400854

00408a1c <_localeconv_r>:
  408a1c:	4a04      	ldr	r2, [pc, #16]	; (408a30 <_localeconv_r+0x14>)
  408a1e:	4b05      	ldr	r3, [pc, #20]	; (408a34 <_localeconv_r+0x18>)
  408a20:	6812      	ldr	r2, [r2, #0]
  408a22:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408a24:	2800      	cmp	r0, #0
  408a26:	bf08      	it	eq
  408a28:	4618      	moveq	r0, r3
  408a2a:	30f0      	adds	r0, #240	; 0xf0
  408a2c:	4770      	bx	lr
  408a2e:	bf00      	nop
  408a30:	20400014 	.word	0x20400014
  408a34:	20400854 	.word	0x20400854

00408a38 <__retarget_lock_init_recursive>:
  408a38:	4770      	bx	lr
  408a3a:	bf00      	nop

00408a3c <__retarget_lock_close_recursive>:
  408a3c:	4770      	bx	lr
  408a3e:	bf00      	nop

00408a40 <__retarget_lock_acquire_recursive>:
  408a40:	4770      	bx	lr
  408a42:	bf00      	nop

00408a44 <__retarget_lock_release_recursive>:
  408a44:	4770      	bx	lr
  408a46:	bf00      	nop

00408a48 <__swhatbuf_r>:
  408a48:	b570      	push	{r4, r5, r6, lr}
  408a4a:	460c      	mov	r4, r1
  408a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408a50:	2900      	cmp	r1, #0
  408a52:	b090      	sub	sp, #64	; 0x40
  408a54:	4615      	mov	r5, r2
  408a56:	461e      	mov	r6, r3
  408a58:	db14      	blt.n	408a84 <__swhatbuf_r+0x3c>
  408a5a:	aa01      	add	r2, sp, #4
  408a5c:	f001 f84a 	bl	409af4 <_fstat_r>
  408a60:	2800      	cmp	r0, #0
  408a62:	db0f      	blt.n	408a84 <__swhatbuf_r+0x3c>
  408a64:	9a02      	ldr	r2, [sp, #8]
  408a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408a6a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408a6e:	fab2 f282 	clz	r2, r2
  408a72:	0952      	lsrs	r2, r2, #5
  408a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408a78:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408a7c:	6032      	str	r2, [r6, #0]
  408a7e:	602b      	str	r3, [r5, #0]
  408a80:	b010      	add	sp, #64	; 0x40
  408a82:	bd70      	pop	{r4, r5, r6, pc}
  408a84:	89a2      	ldrh	r2, [r4, #12]
  408a86:	2300      	movs	r3, #0
  408a88:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408a8c:	6033      	str	r3, [r6, #0]
  408a8e:	d004      	beq.n	408a9a <__swhatbuf_r+0x52>
  408a90:	2240      	movs	r2, #64	; 0x40
  408a92:	4618      	mov	r0, r3
  408a94:	602a      	str	r2, [r5, #0]
  408a96:	b010      	add	sp, #64	; 0x40
  408a98:	bd70      	pop	{r4, r5, r6, pc}
  408a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408a9e:	602b      	str	r3, [r5, #0]
  408aa0:	b010      	add	sp, #64	; 0x40
  408aa2:	bd70      	pop	{r4, r5, r6, pc}

00408aa4 <__smakebuf_r>:
  408aa4:	898a      	ldrh	r2, [r1, #12]
  408aa6:	0792      	lsls	r2, r2, #30
  408aa8:	460b      	mov	r3, r1
  408aaa:	d506      	bpl.n	408aba <__smakebuf_r+0x16>
  408aac:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408ab0:	2101      	movs	r1, #1
  408ab2:	601a      	str	r2, [r3, #0]
  408ab4:	611a      	str	r2, [r3, #16]
  408ab6:	6159      	str	r1, [r3, #20]
  408ab8:	4770      	bx	lr
  408aba:	b5f0      	push	{r4, r5, r6, r7, lr}
  408abc:	b083      	sub	sp, #12
  408abe:	ab01      	add	r3, sp, #4
  408ac0:	466a      	mov	r2, sp
  408ac2:	460c      	mov	r4, r1
  408ac4:	4606      	mov	r6, r0
  408ac6:	f7ff ffbf 	bl	408a48 <__swhatbuf_r>
  408aca:	9900      	ldr	r1, [sp, #0]
  408acc:	4605      	mov	r5, r0
  408ace:	4630      	mov	r0, r6
  408ad0:	f7fb fc48 	bl	404364 <_malloc_r>
  408ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ad8:	b1d8      	cbz	r0, 408b12 <__smakebuf_r+0x6e>
  408ada:	9a01      	ldr	r2, [sp, #4]
  408adc:	4f15      	ldr	r7, [pc, #84]	; (408b34 <__smakebuf_r+0x90>)
  408ade:	9900      	ldr	r1, [sp, #0]
  408ae0:	63f7      	str	r7, [r6, #60]	; 0x3c
  408ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408ae6:	81a3      	strh	r3, [r4, #12]
  408ae8:	6020      	str	r0, [r4, #0]
  408aea:	6120      	str	r0, [r4, #16]
  408aec:	6161      	str	r1, [r4, #20]
  408aee:	b91a      	cbnz	r2, 408af8 <__smakebuf_r+0x54>
  408af0:	432b      	orrs	r3, r5
  408af2:	81a3      	strh	r3, [r4, #12]
  408af4:	b003      	add	sp, #12
  408af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408af8:	4630      	mov	r0, r6
  408afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408afe:	f001 f80d 	bl	409b1c <_isatty_r>
  408b02:	b1a0      	cbz	r0, 408b2e <__smakebuf_r+0x8a>
  408b04:	89a3      	ldrh	r3, [r4, #12]
  408b06:	f023 0303 	bic.w	r3, r3, #3
  408b0a:	f043 0301 	orr.w	r3, r3, #1
  408b0e:	b21b      	sxth	r3, r3
  408b10:	e7ee      	b.n	408af0 <__smakebuf_r+0x4c>
  408b12:	059a      	lsls	r2, r3, #22
  408b14:	d4ee      	bmi.n	408af4 <__smakebuf_r+0x50>
  408b16:	f023 0303 	bic.w	r3, r3, #3
  408b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408b1e:	f043 0302 	orr.w	r3, r3, #2
  408b22:	2101      	movs	r1, #1
  408b24:	81a3      	strh	r3, [r4, #12]
  408b26:	6022      	str	r2, [r4, #0]
  408b28:	6122      	str	r2, [r4, #16]
  408b2a:	6161      	str	r1, [r4, #20]
  408b2c:	e7e2      	b.n	408af4 <__smakebuf_r+0x50>
  408b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b32:	e7dd      	b.n	408af0 <__smakebuf_r+0x4c>
  408b34:	00408249 	.word	0x00408249

00408b38 <__ascii_mbtowc>:
  408b38:	b082      	sub	sp, #8
  408b3a:	b149      	cbz	r1, 408b50 <__ascii_mbtowc+0x18>
  408b3c:	b15a      	cbz	r2, 408b56 <__ascii_mbtowc+0x1e>
  408b3e:	b16b      	cbz	r3, 408b5c <__ascii_mbtowc+0x24>
  408b40:	7813      	ldrb	r3, [r2, #0]
  408b42:	600b      	str	r3, [r1, #0]
  408b44:	7812      	ldrb	r2, [r2, #0]
  408b46:	1c10      	adds	r0, r2, #0
  408b48:	bf18      	it	ne
  408b4a:	2001      	movne	r0, #1
  408b4c:	b002      	add	sp, #8
  408b4e:	4770      	bx	lr
  408b50:	a901      	add	r1, sp, #4
  408b52:	2a00      	cmp	r2, #0
  408b54:	d1f3      	bne.n	408b3e <__ascii_mbtowc+0x6>
  408b56:	4610      	mov	r0, r2
  408b58:	b002      	add	sp, #8
  408b5a:	4770      	bx	lr
  408b5c:	f06f 0001 	mvn.w	r0, #1
  408b60:	e7f4      	b.n	408b4c <__ascii_mbtowc+0x14>
  408b62:	bf00      	nop
	...

00408b70 <memchr>:
  408b70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408b74:	2a10      	cmp	r2, #16
  408b76:	db2b      	blt.n	408bd0 <memchr+0x60>
  408b78:	f010 0f07 	tst.w	r0, #7
  408b7c:	d008      	beq.n	408b90 <memchr+0x20>
  408b7e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408b82:	3a01      	subs	r2, #1
  408b84:	428b      	cmp	r3, r1
  408b86:	d02d      	beq.n	408be4 <memchr+0x74>
  408b88:	f010 0f07 	tst.w	r0, #7
  408b8c:	b342      	cbz	r2, 408be0 <memchr+0x70>
  408b8e:	d1f6      	bne.n	408b7e <memchr+0xe>
  408b90:	b4f0      	push	{r4, r5, r6, r7}
  408b92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408b96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408b9a:	f022 0407 	bic.w	r4, r2, #7
  408b9e:	f07f 0700 	mvns.w	r7, #0
  408ba2:	2300      	movs	r3, #0
  408ba4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408ba8:	3c08      	subs	r4, #8
  408baa:	ea85 0501 	eor.w	r5, r5, r1
  408bae:	ea86 0601 	eor.w	r6, r6, r1
  408bb2:	fa85 f547 	uadd8	r5, r5, r7
  408bb6:	faa3 f587 	sel	r5, r3, r7
  408bba:	fa86 f647 	uadd8	r6, r6, r7
  408bbe:	faa5 f687 	sel	r6, r5, r7
  408bc2:	b98e      	cbnz	r6, 408be8 <memchr+0x78>
  408bc4:	d1ee      	bne.n	408ba4 <memchr+0x34>
  408bc6:	bcf0      	pop	{r4, r5, r6, r7}
  408bc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408bcc:	f002 0207 	and.w	r2, r2, #7
  408bd0:	b132      	cbz	r2, 408be0 <memchr+0x70>
  408bd2:	f810 3b01 	ldrb.w	r3, [r0], #1
  408bd6:	3a01      	subs	r2, #1
  408bd8:	ea83 0301 	eor.w	r3, r3, r1
  408bdc:	b113      	cbz	r3, 408be4 <memchr+0x74>
  408bde:	d1f8      	bne.n	408bd2 <memchr+0x62>
  408be0:	2000      	movs	r0, #0
  408be2:	4770      	bx	lr
  408be4:	3801      	subs	r0, #1
  408be6:	4770      	bx	lr
  408be8:	2d00      	cmp	r5, #0
  408bea:	bf06      	itte	eq
  408bec:	4635      	moveq	r5, r6
  408bee:	3803      	subeq	r0, #3
  408bf0:	3807      	subne	r0, #7
  408bf2:	f015 0f01 	tst.w	r5, #1
  408bf6:	d107      	bne.n	408c08 <memchr+0x98>
  408bf8:	3001      	adds	r0, #1
  408bfa:	f415 7f80 	tst.w	r5, #256	; 0x100
  408bfe:	bf02      	ittt	eq
  408c00:	3001      	addeq	r0, #1
  408c02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408c06:	3001      	addeq	r0, #1
  408c08:	bcf0      	pop	{r4, r5, r6, r7}
  408c0a:	3801      	subs	r0, #1
  408c0c:	4770      	bx	lr
  408c0e:	bf00      	nop

00408c10 <memmove>:
  408c10:	4288      	cmp	r0, r1
  408c12:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c14:	d90d      	bls.n	408c32 <memmove+0x22>
  408c16:	188b      	adds	r3, r1, r2
  408c18:	4298      	cmp	r0, r3
  408c1a:	d20a      	bcs.n	408c32 <memmove+0x22>
  408c1c:	1884      	adds	r4, r0, r2
  408c1e:	2a00      	cmp	r2, #0
  408c20:	d051      	beq.n	408cc6 <memmove+0xb6>
  408c22:	4622      	mov	r2, r4
  408c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408c28:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408c2c:	4299      	cmp	r1, r3
  408c2e:	d1f9      	bne.n	408c24 <memmove+0x14>
  408c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408c32:	2a0f      	cmp	r2, #15
  408c34:	d948      	bls.n	408cc8 <memmove+0xb8>
  408c36:	ea41 0300 	orr.w	r3, r1, r0
  408c3a:	079b      	lsls	r3, r3, #30
  408c3c:	d146      	bne.n	408ccc <memmove+0xbc>
  408c3e:	f100 0410 	add.w	r4, r0, #16
  408c42:	f101 0310 	add.w	r3, r1, #16
  408c46:	4615      	mov	r5, r2
  408c48:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408c4c:	f844 6c10 	str.w	r6, [r4, #-16]
  408c50:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408c54:	f844 6c0c 	str.w	r6, [r4, #-12]
  408c58:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408c5c:	f844 6c08 	str.w	r6, [r4, #-8]
  408c60:	3d10      	subs	r5, #16
  408c62:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408c66:	f844 6c04 	str.w	r6, [r4, #-4]
  408c6a:	2d0f      	cmp	r5, #15
  408c6c:	f103 0310 	add.w	r3, r3, #16
  408c70:	f104 0410 	add.w	r4, r4, #16
  408c74:	d8e8      	bhi.n	408c48 <memmove+0x38>
  408c76:	f1a2 0310 	sub.w	r3, r2, #16
  408c7a:	f023 030f 	bic.w	r3, r3, #15
  408c7e:	f002 0e0f 	and.w	lr, r2, #15
  408c82:	3310      	adds	r3, #16
  408c84:	f1be 0f03 	cmp.w	lr, #3
  408c88:	4419      	add	r1, r3
  408c8a:	4403      	add	r3, r0
  408c8c:	d921      	bls.n	408cd2 <memmove+0xc2>
  408c8e:	1f1e      	subs	r6, r3, #4
  408c90:	460d      	mov	r5, r1
  408c92:	4674      	mov	r4, lr
  408c94:	3c04      	subs	r4, #4
  408c96:	f855 7b04 	ldr.w	r7, [r5], #4
  408c9a:	f846 7f04 	str.w	r7, [r6, #4]!
  408c9e:	2c03      	cmp	r4, #3
  408ca0:	d8f8      	bhi.n	408c94 <memmove+0x84>
  408ca2:	f1ae 0404 	sub.w	r4, lr, #4
  408ca6:	f024 0403 	bic.w	r4, r4, #3
  408caa:	3404      	adds	r4, #4
  408cac:	4421      	add	r1, r4
  408cae:	4423      	add	r3, r4
  408cb0:	f002 0203 	and.w	r2, r2, #3
  408cb4:	b162      	cbz	r2, 408cd0 <memmove+0xc0>
  408cb6:	3b01      	subs	r3, #1
  408cb8:	440a      	add	r2, r1
  408cba:	f811 4b01 	ldrb.w	r4, [r1], #1
  408cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
  408cc2:	428a      	cmp	r2, r1
  408cc4:	d1f9      	bne.n	408cba <memmove+0xaa>
  408cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408cc8:	4603      	mov	r3, r0
  408cca:	e7f3      	b.n	408cb4 <memmove+0xa4>
  408ccc:	4603      	mov	r3, r0
  408cce:	e7f2      	b.n	408cb6 <memmove+0xa6>
  408cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408cd2:	4672      	mov	r2, lr
  408cd4:	e7ee      	b.n	408cb4 <memmove+0xa4>
  408cd6:	bf00      	nop

00408cd8 <_Balloc>:
  408cd8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408cda:	b570      	push	{r4, r5, r6, lr}
  408cdc:	4605      	mov	r5, r0
  408cde:	460c      	mov	r4, r1
  408ce0:	b14b      	cbz	r3, 408cf6 <_Balloc+0x1e>
  408ce2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408ce6:	b180      	cbz	r0, 408d0a <_Balloc+0x32>
  408ce8:	6802      	ldr	r2, [r0, #0]
  408cea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  408cee:	2300      	movs	r3, #0
  408cf0:	6103      	str	r3, [r0, #16]
  408cf2:	60c3      	str	r3, [r0, #12]
  408cf4:	bd70      	pop	{r4, r5, r6, pc}
  408cf6:	2221      	movs	r2, #33	; 0x21
  408cf8:	2104      	movs	r1, #4
  408cfa:	f000 fe57 	bl	4099ac <_calloc_r>
  408cfe:	64e8      	str	r0, [r5, #76]	; 0x4c
  408d00:	4603      	mov	r3, r0
  408d02:	2800      	cmp	r0, #0
  408d04:	d1ed      	bne.n	408ce2 <_Balloc+0xa>
  408d06:	2000      	movs	r0, #0
  408d08:	bd70      	pop	{r4, r5, r6, pc}
  408d0a:	2101      	movs	r1, #1
  408d0c:	fa01 f604 	lsl.w	r6, r1, r4
  408d10:	1d72      	adds	r2, r6, #5
  408d12:	4628      	mov	r0, r5
  408d14:	0092      	lsls	r2, r2, #2
  408d16:	f000 fe49 	bl	4099ac <_calloc_r>
  408d1a:	2800      	cmp	r0, #0
  408d1c:	d0f3      	beq.n	408d06 <_Balloc+0x2e>
  408d1e:	6044      	str	r4, [r0, #4]
  408d20:	6086      	str	r6, [r0, #8]
  408d22:	e7e4      	b.n	408cee <_Balloc+0x16>

00408d24 <_Bfree>:
  408d24:	b131      	cbz	r1, 408d34 <_Bfree+0x10>
  408d26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408d28:	684a      	ldr	r2, [r1, #4]
  408d2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408d2e:	6008      	str	r0, [r1, #0]
  408d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408d34:	4770      	bx	lr
  408d36:	bf00      	nop

00408d38 <__multadd>:
  408d38:	b5f0      	push	{r4, r5, r6, r7, lr}
  408d3a:	690c      	ldr	r4, [r1, #16]
  408d3c:	b083      	sub	sp, #12
  408d3e:	460d      	mov	r5, r1
  408d40:	4606      	mov	r6, r0
  408d42:	f101 0e14 	add.w	lr, r1, #20
  408d46:	2700      	movs	r7, #0
  408d48:	f8de 0000 	ldr.w	r0, [lr]
  408d4c:	b281      	uxth	r1, r0
  408d4e:	fb02 3301 	mla	r3, r2, r1, r3
  408d52:	0c01      	lsrs	r1, r0, #16
  408d54:	0c18      	lsrs	r0, r3, #16
  408d56:	fb02 0101 	mla	r1, r2, r1, r0
  408d5a:	b29b      	uxth	r3, r3
  408d5c:	3701      	adds	r7, #1
  408d5e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  408d62:	42bc      	cmp	r4, r7
  408d64:	f84e 3b04 	str.w	r3, [lr], #4
  408d68:	ea4f 4311 	mov.w	r3, r1, lsr #16
  408d6c:	dcec      	bgt.n	408d48 <__multadd+0x10>
  408d6e:	b13b      	cbz	r3, 408d80 <__multadd+0x48>
  408d70:	68aa      	ldr	r2, [r5, #8]
  408d72:	4294      	cmp	r4, r2
  408d74:	da07      	bge.n	408d86 <__multadd+0x4e>
  408d76:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  408d7a:	3401      	adds	r4, #1
  408d7c:	6153      	str	r3, [r2, #20]
  408d7e:	612c      	str	r4, [r5, #16]
  408d80:	4628      	mov	r0, r5
  408d82:	b003      	add	sp, #12
  408d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d86:	6869      	ldr	r1, [r5, #4]
  408d88:	9301      	str	r3, [sp, #4]
  408d8a:	3101      	adds	r1, #1
  408d8c:	4630      	mov	r0, r6
  408d8e:	f7ff ffa3 	bl	408cd8 <_Balloc>
  408d92:	692a      	ldr	r2, [r5, #16]
  408d94:	3202      	adds	r2, #2
  408d96:	f105 010c 	add.w	r1, r5, #12
  408d9a:	4607      	mov	r7, r0
  408d9c:	0092      	lsls	r2, r2, #2
  408d9e:	300c      	adds	r0, #12
  408da0:	f7fb fd90 	bl	4048c4 <memcpy>
  408da4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408da6:	6869      	ldr	r1, [r5, #4]
  408da8:	9b01      	ldr	r3, [sp, #4]
  408daa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408dae:	6028      	str	r0, [r5, #0]
  408db0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408db4:	463d      	mov	r5, r7
  408db6:	e7de      	b.n	408d76 <__multadd+0x3e>

00408db8 <__hi0bits>:
  408db8:	0c02      	lsrs	r2, r0, #16
  408dba:	0412      	lsls	r2, r2, #16
  408dbc:	4603      	mov	r3, r0
  408dbe:	b9b2      	cbnz	r2, 408dee <__hi0bits+0x36>
  408dc0:	0403      	lsls	r3, r0, #16
  408dc2:	2010      	movs	r0, #16
  408dc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408dc8:	bf04      	itt	eq
  408dca:	021b      	lsleq	r3, r3, #8
  408dcc:	3008      	addeq	r0, #8
  408dce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408dd2:	bf04      	itt	eq
  408dd4:	011b      	lsleq	r3, r3, #4
  408dd6:	3004      	addeq	r0, #4
  408dd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  408ddc:	bf04      	itt	eq
  408dde:	009b      	lsleq	r3, r3, #2
  408de0:	3002      	addeq	r0, #2
  408de2:	2b00      	cmp	r3, #0
  408de4:	db02      	blt.n	408dec <__hi0bits+0x34>
  408de6:	005b      	lsls	r3, r3, #1
  408de8:	d403      	bmi.n	408df2 <__hi0bits+0x3a>
  408dea:	2020      	movs	r0, #32
  408dec:	4770      	bx	lr
  408dee:	2000      	movs	r0, #0
  408df0:	e7e8      	b.n	408dc4 <__hi0bits+0xc>
  408df2:	3001      	adds	r0, #1
  408df4:	4770      	bx	lr
  408df6:	bf00      	nop

00408df8 <__lo0bits>:
  408df8:	6803      	ldr	r3, [r0, #0]
  408dfa:	f013 0207 	ands.w	r2, r3, #7
  408dfe:	4601      	mov	r1, r0
  408e00:	d007      	beq.n	408e12 <__lo0bits+0x1a>
  408e02:	07da      	lsls	r2, r3, #31
  408e04:	d421      	bmi.n	408e4a <__lo0bits+0x52>
  408e06:	0798      	lsls	r0, r3, #30
  408e08:	d421      	bmi.n	408e4e <__lo0bits+0x56>
  408e0a:	089b      	lsrs	r3, r3, #2
  408e0c:	600b      	str	r3, [r1, #0]
  408e0e:	2002      	movs	r0, #2
  408e10:	4770      	bx	lr
  408e12:	b298      	uxth	r0, r3
  408e14:	b198      	cbz	r0, 408e3e <__lo0bits+0x46>
  408e16:	4610      	mov	r0, r2
  408e18:	f013 0fff 	tst.w	r3, #255	; 0xff
  408e1c:	bf04      	itt	eq
  408e1e:	0a1b      	lsreq	r3, r3, #8
  408e20:	3008      	addeq	r0, #8
  408e22:	071a      	lsls	r2, r3, #28
  408e24:	bf04      	itt	eq
  408e26:	091b      	lsreq	r3, r3, #4
  408e28:	3004      	addeq	r0, #4
  408e2a:	079a      	lsls	r2, r3, #30
  408e2c:	bf04      	itt	eq
  408e2e:	089b      	lsreq	r3, r3, #2
  408e30:	3002      	addeq	r0, #2
  408e32:	07da      	lsls	r2, r3, #31
  408e34:	d407      	bmi.n	408e46 <__lo0bits+0x4e>
  408e36:	085b      	lsrs	r3, r3, #1
  408e38:	d104      	bne.n	408e44 <__lo0bits+0x4c>
  408e3a:	2020      	movs	r0, #32
  408e3c:	4770      	bx	lr
  408e3e:	0c1b      	lsrs	r3, r3, #16
  408e40:	2010      	movs	r0, #16
  408e42:	e7e9      	b.n	408e18 <__lo0bits+0x20>
  408e44:	3001      	adds	r0, #1
  408e46:	600b      	str	r3, [r1, #0]
  408e48:	4770      	bx	lr
  408e4a:	2000      	movs	r0, #0
  408e4c:	4770      	bx	lr
  408e4e:	085b      	lsrs	r3, r3, #1
  408e50:	600b      	str	r3, [r1, #0]
  408e52:	2001      	movs	r0, #1
  408e54:	4770      	bx	lr
  408e56:	bf00      	nop

00408e58 <__i2b>:
  408e58:	b510      	push	{r4, lr}
  408e5a:	460c      	mov	r4, r1
  408e5c:	2101      	movs	r1, #1
  408e5e:	f7ff ff3b 	bl	408cd8 <_Balloc>
  408e62:	2201      	movs	r2, #1
  408e64:	6144      	str	r4, [r0, #20]
  408e66:	6102      	str	r2, [r0, #16]
  408e68:	bd10      	pop	{r4, pc}
  408e6a:	bf00      	nop

00408e6c <__multiply>:
  408e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e70:	690c      	ldr	r4, [r1, #16]
  408e72:	6915      	ldr	r5, [r2, #16]
  408e74:	42ac      	cmp	r4, r5
  408e76:	b083      	sub	sp, #12
  408e78:	468b      	mov	fp, r1
  408e7a:	4616      	mov	r6, r2
  408e7c:	da04      	bge.n	408e88 <__multiply+0x1c>
  408e7e:	4622      	mov	r2, r4
  408e80:	46b3      	mov	fp, r6
  408e82:	462c      	mov	r4, r5
  408e84:	460e      	mov	r6, r1
  408e86:	4615      	mov	r5, r2
  408e88:	f8db 3008 	ldr.w	r3, [fp, #8]
  408e8c:	f8db 1004 	ldr.w	r1, [fp, #4]
  408e90:	eb04 0805 	add.w	r8, r4, r5
  408e94:	4598      	cmp	r8, r3
  408e96:	bfc8      	it	gt
  408e98:	3101      	addgt	r1, #1
  408e9a:	f7ff ff1d 	bl	408cd8 <_Balloc>
  408e9e:	f100 0914 	add.w	r9, r0, #20
  408ea2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408ea6:	45d1      	cmp	r9, sl
  408ea8:	9000      	str	r0, [sp, #0]
  408eaa:	d205      	bcs.n	408eb8 <__multiply+0x4c>
  408eac:	464b      	mov	r3, r9
  408eae:	2100      	movs	r1, #0
  408eb0:	f843 1b04 	str.w	r1, [r3], #4
  408eb4:	459a      	cmp	sl, r3
  408eb6:	d8fb      	bhi.n	408eb0 <__multiply+0x44>
  408eb8:	f106 0c14 	add.w	ip, r6, #20
  408ebc:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408ec0:	f10b 0b14 	add.w	fp, fp, #20
  408ec4:	459c      	cmp	ip, r3
  408ec6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  408eca:	d24c      	bcs.n	408f66 <__multiply+0xfa>
  408ecc:	f8cd a004 	str.w	sl, [sp, #4]
  408ed0:	469a      	mov	sl, r3
  408ed2:	f8dc 5000 	ldr.w	r5, [ip]
  408ed6:	b2af      	uxth	r7, r5
  408ed8:	b1ef      	cbz	r7, 408f16 <__multiply+0xaa>
  408eda:	2100      	movs	r1, #0
  408edc:	464d      	mov	r5, r9
  408ede:	465e      	mov	r6, fp
  408ee0:	460c      	mov	r4, r1
  408ee2:	f856 2b04 	ldr.w	r2, [r6], #4
  408ee6:	6828      	ldr	r0, [r5, #0]
  408ee8:	b293      	uxth	r3, r2
  408eea:	b281      	uxth	r1, r0
  408eec:	fb07 1303 	mla	r3, r7, r3, r1
  408ef0:	0c12      	lsrs	r2, r2, #16
  408ef2:	0c01      	lsrs	r1, r0, #16
  408ef4:	4423      	add	r3, r4
  408ef6:	fb07 1102 	mla	r1, r7, r2, r1
  408efa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  408efe:	b29b      	uxth	r3, r3
  408f00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408f04:	45b6      	cmp	lr, r6
  408f06:	f845 3b04 	str.w	r3, [r5], #4
  408f0a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  408f0e:	d8e8      	bhi.n	408ee2 <__multiply+0x76>
  408f10:	602c      	str	r4, [r5, #0]
  408f12:	f8dc 5000 	ldr.w	r5, [ip]
  408f16:	0c2d      	lsrs	r5, r5, #16
  408f18:	d01d      	beq.n	408f56 <__multiply+0xea>
  408f1a:	f8d9 3000 	ldr.w	r3, [r9]
  408f1e:	4648      	mov	r0, r9
  408f20:	461c      	mov	r4, r3
  408f22:	4659      	mov	r1, fp
  408f24:	2200      	movs	r2, #0
  408f26:	880e      	ldrh	r6, [r1, #0]
  408f28:	0c24      	lsrs	r4, r4, #16
  408f2a:	fb05 4406 	mla	r4, r5, r6, r4
  408f2e:	4422      	add	r2, r4
  408f30:	b29b      	uxth	r3, r3
  408f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408f36:	f840 3b04 	str.w	r3, [r0], #4
  408f3a:	f851 3b04 	ldr.w	r3, [r1], #4
  408f3e:	6804      	ldr	r4, [r0, #0]
  408f40:	0c1b      	lsrs	r3, r3, #16
  408f42:	b2a6      	uxth	r6, r4
  408f44:	fb05 6303 	mla	r3, r5, r3, r6
  408f48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  408f4c:	458e      	cmp	lr, r1
  408f4e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408f52:	d8e8      	bhi.n	408f26 <__multiply+0xba>
  408f54:	6003      	str	r3, [r0, #0]
  408f56:	f10c 0c04 	add.w	ip, ip, #4
  408f5a:	45e2      	cmp	sl, ip
  408f5c:	f109 0904 	add.w	r9, r9, #4
  408f60:	d8b7      	bhi.n	408ed2 <__multiply+0x66>
  408f62:	f8dd a004 	ldr.w	sl, [sp, #4]
  408f66:	f1b8 0f00 	cmp.w	r8, #0
  408f6a:	dd0b      	ble.n	408f84 <__multiply+0x118>
  408f6c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408f70:	f1aa 0a04 	sub.w	sl, sl, #4
  408f74:	b11b      	cbz	r3, 408f7e <__multiply+0x112>
  408f76:	e005      	b.n	408f84 <__multiply+0x118>
  408f78:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  408f7c:	b913      	cbnz	r3, 408f84 <__multiply+0x118>
  408f7e:	f1b8 0801 	subs.w	r8, r8, #1
  408f82:	d1f9      	bne.n	408f78 <__multiply+0x10c>
  408f84:	9800      	ldr	r0, [sp, #0]
  408f86:	f8c0 8010 	str.w	r8, [r0, #16]
  408f8a:	b003      	add	sp, #12
  408f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408f90 <__pow5mult>:
  408f90:	f012 0303 	ands.w	r3, r2, #3
  408f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408f98:	4614      	mov	r4, r2
  408f9a:	4607      	mov	r7, r0
  408f9c:	d12e      	bne.n	408ffc <__pow5mult+0x6c>
  408f9e:	460d      	mov	r5, r1
  408fa0:	10a4      	asrs	r4, r4, #2
  408fa2:	d01c      	beq.n	408fde <__pow5mult+0x4e>
  408fa4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408fa6:	b396      	cbz	r6, 40900e <__pow5mult+0x7e>
  408fa8:	07e3      	lsls	r3, r4, #31
  408faa:	f04f 0800 	mov.w	r8, #0
  408fae:	d406      	bmi.n	408fbe <__pow5mult+0x2e>
  408fb0:	1064      	asrs	r4, r4, #1
  408fb2:	d014      	beq.n	408fde <__pow5mult+0x4e>
  408fb4:	6830      	ldr	r0, [r6, #0]
  408fb6:	b1a8      	cbz	r0, 408fe4 <__pow5mult+0x54>
  408fb8:	4606      	mov	r6, r0
  408fba:	07e3      	lsls	r3, r4, #31
  408fbc:	d5f8      	bpl.n	408fb0 <__pow5mult+0x20>
  408fbe:	4632      	mov	r2, r6
  408fc0:	4629      	mov	r1, r5
  408fc2:	4638      	mov	r0, r7
  408fc4:	f7ff ff52 	bl	408e6c <__multiply>
  408fc8:	b1b5      	cbz	r5, 408ff8 <__pow5mult+0x68>
  408fca:	686a      	ldr	r2, [r5, #4]
  408fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408fce:	1064      	asrs	r4, r4, #1
  408fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408fd4:	6029      	str	r1, [r5, #0]
  408fd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408fda:	4605      	mov	r5, r0
  408fdc:	d1ea      	bne.n	408fb4 <__pow5mult+0x24>
  408fde:	4628      	mov	r0, r5
  408fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408fe4:	4632      	mov	r2, r6
  408fe6:	4631      	mov	r1, r6
  408fe8:	4638      	mov	r0, r7
  408fea:	f7ff ff3f 	bl	408e6c <__multiply>
  408fee:	6030      	str	r0, [r6, #0]
  408ff0:	f8c0 8000 	str.w	r8, [r0]
  408ff4:	4606      	mov	r6, r0
  408ff6:	e7e0      	b.n	408fba <__pow5mult+0x2a>
  408ff8:	4605      	mov	r5, r0
  408ffa:	e7d9      	b.n	408fb0 <__pow5mult+0x20>
  408ffc:	1e5a      	subs	r2, r3, #1
  408ffe:	4d0b      	ldr	r5, [pc, #44]	; (40902c <__pow5mult+0x9c>)
  409000:	2300      	movs	r3, #0
  409002:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409006:	f7ff fe97 	bl	408d38 <__multadd>
  40900a:	4605      	mov	r5, r0
  40900c:	e7c8      	b.n	408fa0 <__pow5mult+0x10>
  40900e:	2101      	movs	r1, #1
  409010:	4638      	mov	r0, r7
  409012:	f7ff fe61 	bl	408cd8 <_Balloc>
  409016:	f240 2171 	movw	r1, #625	; 0x271
  40901a:	2201      	movs	r2, #1
  40901c:	2300      	movs	r3, #0
  40901e:	6141      	str	r1, [r0, #20]
  409020:	6102      	str	r2, [r0, #16]
  409022:	4606      	mov	r6, r0
  409024:	64b8      	str	r0, [r7, #72]	; 0x48
  409026:	6003      	str	r3, [r0, #0]
  409028:	e7be      	b.n	408fa8 <__pow5mult+0x18>
  40902a:	bf00      	nop
  40902c:	0040a270 	.word	0x0040a270

00409030 <__lshift>:
  409030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409034:	4691      	mov	r9, r2
  409036:	690a      	ldr	r2, [r1, #16]
  409038:	688b      	ldr	r3, [r1, #8]
  40903a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40903e:	eb04 0802 	add.w	r8, r4, r2
  409042:	f108 0501 	add.w	r5, r8, #1
  409046:	429d      	cmp	r5, r3
  409048:	460e      	mov	r6, r1
  40904a:	4607      	mov	r7, r0
  40904c:	6849      	ldr	r1, [r1, #4]
  40904e:	dd04      	ble.n	40905a <__lshift+0x2a>
  409050:	005b      	lsls	r3, r3, #1
  409052:	429d      	cmp	r5, r3
  409054:	f101 0101 	add.w	r1, r1, #1
  409058:	dcfa      	bgt.n	409050 <__lshift+0x20>
  40905a:	4638      	mov	r0, r7
  40905c:	f7ff fe3c 	bl	408cd8 <_Balloc>
  409060:	2c00      	cmp	r4, #0
  409062:	f100 0314 	add.w	r3, r0, #20
  409066:	dd06      	ble.n	409076 <__lshift+0x46>
  409068:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40906c:	2100      	movs	r1, #0
  40906e:	f843 1b04 	str.w	r1, [r3], #4
  409072:	429a      	cmp	r2, r3
  409074:	d1fb      	bne.n	40906e <__lshift+0x3e>
  409076:	6934      	ldr	r4, [r6, #16]
  409078:	f106 0114 	add.w	r1, r6, #20
  40907c:	f019 091f 	ands.w	r9, r9, #31
  409080:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409084:	d01d      	beq.n	4090c2 <__lshift+0x92>
  409086:	f1c9 0c20 	rsb	ip, r9, #32
  40908a:	2200      	movs	r2, #0
  40908c:	680c      	ldr	r4, [r1, #0]
  40908e:	fa04 f409 	lsl.w	r4, r4, r9
  409092:	4314      	orrs	r4, r2
  409094:	f843 4b04 	str.w	r4, [r3], #4
  409098:	f851 2b04 	ldr.w	r2, [r1], #4
  40909c:	458e      	cmp	lr, r1
  40909e:	fa22 f20c 	lsr.w	r2, r2, ip
  4090a2:	d8f3      	bhi.n	40908c <__lshift+0x5c>
  4090a4:	601a      	str	r2, [r3, #0]
  4090a6:	b10a      	cbz	r2, 4090ac <__lshift+0x7c>
  4090a8:	f108 0502 	add.w	r5, r8, #2
  4090ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4090ae:	6872      	ldr	r2, [r6, #4]
  4090b0:	3d01      	subs	r5, #1
  4090b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4090b6:	6105      	str	r5, [r0, #16]
  4090b8:	6031      	str	r1, [r6, #0]
  4090ba:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4090be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4090c2:	3b04      	subs	r3, #4
  4090c4:	f851 2b04 	ldr.w	r2, [r1], #4
  4090c8:	f843 2f04 	str.w	r2, [r3, #4]!
  4090cc:	458e      	cmp	lr, r1
  4090ce:	d8f9      	bhi.n	4090c4 <__lshift+0x94>
  4090d0:	e7ec      	b.n	4090ac <__lshift+0x7c>
  4090d2:	bf00      	nop

004090d4 <__mcmp>:
  4090d4:	b430      	push	{r4, r5}
  4090d6:	690b      	ldr	r3, [r1, #16]
  4090d8:	4605      	mov	r5, r0
  4090da:	6900      	ldr	r0, [r0, #16]
  4090dc:	1ac0      	subs	r0, r0, r3
  4090de:	d10f      	bne.n	409100 <__mcmp+0x2c>
  4090e0:	009b      	lsls	r3, r3, #2
  4090e2:	3514      	adds	r5, #20
  4090e4:	3114      	adds	r1, #20
  4090e6:	4419      	add	r1, r3
  4090e8:	442b      	add	r3, r5
  4090ea:	e001      	b.n	4090f0 <__mcmp+0x1c>
  4090ec:	429d      	cmp	r5, r3
  4090ee:	d207      	bcs.n	409100 <__mcmp+0x2c>
  4090f0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4090f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4090f8:	4294      	cmp	r4, r2
  4090fa:	d0f7      	beq.n	4090ec <__mcmp+0x18>
  4090fc:	d302      	bcc.n	409104 <__mcmp+0x30>
  4090fe:	2001      	movs	r0, #1
  409100:	bc30      	pop	{r4, r5}
  409102:	4770      	bx	lr
  409104:	f04f 30ff 	mov.w	r0, #4294967295
  409108:	e7fa      	b.n	409100 <__mcmp+0x2c>
  40910a:	bf00      	nop

0040910c <__mdiff>:
  40910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409110:	690f      	ldr	r7, [r1, #16]
  409112:	460e      	mov	r6, r1
  409114:	6911      	ldr	r1, [r2, #16]
  409116:	1a7f      	subs	r7, r7, r1
  409118:	2f00      	cmp	r7, #0
  40911a:	4690      	mov	r8, r2
  40911c:	d117      	bne.n	40914e <__mdiff+0x42>
  40911e:	0089      	lsls	r1, r1, #2
  409120:	f106 0514 	add.w	r5, r6, #20
  409124:	f102 0e14 	add.w	lr, r2, #20
  409128:	186b      	adds	r3, r5, r1
  40912a:	4471      	add	r1, lr
  40912c:	e001      	b.n	409132 <__mdiff+0x26>
  40912e:	429d      	cmp	r5, r3
  409130:	d25c      	bcs.n	4091ec <__mdiff+0xe0>
  409132:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409136:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40913a:	42a2      	cmp	r2, r4
  40913c:	d0f7      	beq.n	40912e <__mdiff+0x22>
  40913e:	d25e      	bcs.n	4091fe <__mdiff+0xf2>
  409140:	4633      	mov	r3, r6
  409142:	462c      	mov	r4, r5
  409144:	4646      	mov	r6, r8
  409146:	4675      	mov	r5, lr
  409148:	4698      	mov	r8, r3
  40914a:	2701      	movs	r7, #1
  40914c:	e005      	b.n	40915a <__mdiff+0x4e>
  40914e:	db58      	blt.n	409202 <__mdiff+0xf6>
  409150:	f106 0514 	add.w	r5, r6, #20
  409154:	f108 0414 	add.w	r4, r8, #20
  409158:	2700      	movs	r7, #0
  40915a:	6871      	ldr	r1, [r6, #4]
  40915c:	f7ff fdbc 	bl	408cd8 <_Balloc>
  409160:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409164:	6936      	ldr	r6, [r6, #16]
  409166:	60c7      	str	r7, [r0, #12]
  409168:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40916c:	46a6      	mov	lr, r4
  40916e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409172:	f100 0414 	add.w	r4, r0, #20
  409176:	2300      	movs	r3, #0
  409178:	f85e 1b04 	ldr.w	r1, [lr], #4
  40917c:	f855 8b04 	ldr.w	r8, [r5], #4
  409180:	b28a      	uxth	r2, r1
  409182:	fa13 f388 	uxtah	r3, r3, r8
  409186:	0c09      	lsrs	r1, r1, #16
  409188:	1a9a      	subs	r2, r3, r2
  40918a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40918e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409192:	b292      	uxth	r2, r2
  409194:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409198:	45f4      	cmp	ip, lr
  40919a:	f844 2b04 	str.w	r2, [r4], #4
  40919e:	ea4f 4323 	mov.w	r3, r3, asr #16
  4091a2:	d8e9      	bhi.n	409178 <__mdiff+0x6c>
  4091a4:	42af      	cmp	r7, r5
  4091a6:	d917      	bls.n	4091d8 <__mdiff+0xcc>
  4091a8:	46a4      	mov	ip, r4
  4091aa:	46ae      	mov	lr, r5
  4091ac:	f85e 2b04 	ldr.w	r2, [lr], #4
  4091b0:	fa13 f382 	uxtah	r3, r3, r2
  4091b4:	1419      	asrs	r1, r3, #16
  4091b6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4091ba:	b29b      	uxth	r3, r3
  4091bc:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4091c0:	4577      	cmp	r7, lr
  4091c2:	f84c 2b04 	str.w	r2, [ip], #4
  4091c6:	ea4f 4321 	mov.w	r3, r1, asr #16
  4091ca:	d8ef      	bhi.n	4091ac <__mdiff+0xa0>
  4091cc:	43ed      	mvns	r5, r5
  4091ce:	442f      	add	r7, r5
  4091d0:	f027 0703 	bic.w	r7, r7, #3
  4091d4:	3704      	adds	r7, #4
  4091d6:	443c      	add	r4, r7
  4091d8:	3c04      	subs	r4, #4
  4091da:	b922      	cbnz	r2, 4091e6 <__mdiff+0xda>
  4091dc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4091e0:	3e01      	subs	r6, #1
  4091e2:	2b00      	cmp	r3, #0
  4091e4:	d0fa      	beq.n	4091dc <__mdiff+0xd0>
  4091e6:	6106      	str	r6, [r0, #16]
  4091e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4091ec:	2100      	movs	r1, #0
  4091ee:	f7ff fd73 	bl	408cd8 <_Balloc>
  4091f2:	2201      	movs	r2, #1
  4091f4:	2300      	movs	r3, #0
  4091f6:	6102      	str	r2, [r0, #16]
  4091f8:	6143      	str	r3, [r0, #20]
  4091fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4091fe:	4674      	mov	r4, lr
  409200:	e7ab      	b.n	40915a <__mdiff+0x4e>
  409202:	4633      	mov	r3, r6
  409204:	f106 0414 	add.w	r4, r6, #20
  409208:	f102 0514 	add.w	r5, r2, #20
  40920c:	4616      	mov	r6, r2
  40920e:	2701      	movs	r7, #1
  409210:	4698      	mov	r8, r3
  409212:	e7a2      	b.n	40915a <__mdiff+0x4e>

00409214 <__d2b>:
  409214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409218:	b082      	sub	sp, #8
  40921a:	2101      	movs	r1, #1
  40921c:	461c      	mov	r4, r3
  40921e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409222:	4615      	mov	r5, r2
  409224:	9e08      	ldr	r6, [sp, #32]
  409226:	f7ff fd57 	bl	408cd8 <_Balloc>
  40922a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40922e:	4680      	mov	r8, r0
  409230:	b10f      	cbz	r7, 409236 <__d2b+0x22>
  409232:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409236:	9401      	str	r4, [sp, #4]
  409238:	b31d      	cbz	r5, 409282 <__d2b+0x6e>
  40923a:	a802      	add	r0, sp, #8
  40923c:	f840 5d08 	str.w	r5, [r0, #-8]!
  409240:	f7ff fdda 	bl	408df8 <__lo0bits>
  409244:	2800      	cmp	r0, #0
  409246:	d134      	bne.n	4092b2 <__d2b+0x9e>
  409248:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40924c:	f8c8 2014 	str.w	r2, [r8, #20]
  409250:	2b00      	cmp	r3, #0
  409252:	bf0c      	ite	eq
  409254:	2101      	moveq	r1, #1
  409256:	2102      	movne	r1, #2
  409258:	f8c8 3018 	str.w	r3, [r8, #24]
  40925c:	f8c8 1010 	str.w	r1, [r8, #16]
  409260:	b9df      	cbnz	r7, 40929a <__d2b+0x86>
  409262:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409266:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40926a:	6030      	str	r0, [r6, #0]
  40926c:	6918      	ldr	r0, [r3, #16]
  40926e:	f7ff fda3 	bl	408db8 <__hi0bits>
  409272:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409274:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409278:	6018      	str	r0, [r3, #0]
  40927a:	4640      	mov	r0, r8
  40927c:	b002      	add	sp, #8
  40927e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409282:	a801      	add	r0, sp, #4
  409284:	f7ff fdb8 	bl	408df8 <__lo0bits>
  409288:	9b01      	ldr	r3, [sp, #4]
  40928a:	f8c8 3014 	str.w	r3, [r8, #20]
  40928e:	2101      	movs	r1, #1
  409290:	3020      	adds	r0, #32
  409292:	f8c8 1010 	str.w	r1, [r8, #16]
  409296:	2f00      	cmp	r7, #0
  409298:	d0e3      	beq.n	409262 <__d2b+0x4e>
  40929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40929c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4092a0:	4407      	add	r7, r0
  4092a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4092a6:	6037      	str	r7, [r6, #0]
  4092a8:	6018      	str	r0, [r3, #0]
  4092aa:	4640      	mov	r0, r8
  4092ac:	b002      	add	sp, #8
  4092ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4092b2:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4092b6:	f1c0 0220 	rsb	r2, r0, #32
  4092ba:	fa03 f202 	lsl.w	r2, r3, r2
  4092be:	430a      	orrs	r2, r1
  4092c0:	40c3      	lsrs	r3, r0
  4092c2:	9301      	str	r3, [sp, #4]
  4092c4:	f8c8 2014 	str.w	r2, [r8, #20]
  4092c8:	e7c2      	b.n	409250 <__d2b+0x3c>
  4092ca:	bf00      	nop

004092cc <_realloc_r>:
  4092cc:	2900      	cmp	r1, #0
  4092ce:	f000 8095 	beq.w	4093fc <_realloc_r+0x130>
  4092d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4092d6:	460d      	mov	r5, r1
  4092d8:	4616      	mov	r6, r2
  4092da:	b083      	sub	sp, #12
  4092dc:	4680      	mov	r8, r0
  4092de:	f106 070b 	add.w	r7, r6, #11
  4092e2:	f7fb fbd7 	bl	404a94 <__malloc_lock>
  4092e6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4092ea:	2f16      	cmp	r7, #22
  4092ec:	f02e 0403 	bic.w	r4, lr, #3
  4092f0:	f1a5 0908 	sub.w	r9, r5, #8
  4092f4:	d83c      	bhi.n	409370 <_realloc_r+0xa4>
  4092f6:	2210      	movs	r2, #16
  4092f8:	4617      	mov	r7, r2
  4092fa:	42be      	cmp	r6, r7
  4092fc:	d83d      	bhi.n	40937a <_realloc_r+0xae>
  4092fe:	4294      	cmp	r4, r2
  409300:	da43      	bge.n	40938a <_realloc_r+0xbe>
  409302:	4bc4      	ldr	r3, [pc, #784]	; (409614 <_realloc_r+0x348>)
  409304:	6899      	ldr	r1, [r3, #8]
  409306:	eb09 0004 	add.w	r0, r9, r4
  40930a:	4288      	cmp	r0, r1
  40930c:	f000 80b4 	beq.w	409478 <_realloc_r+0x1ac>
  409310:	6843      	ldr	r3, [r0, #4]
  409312:	f023 0101 	bic.w	r1, r3, #1
  409316:	4401      	add	r1, r0
  409318:	6849      	ldr	r1, [r1, #4]
  40931a:	07c9      	lsls	r1, r1, #31
  40931c:	d54c      	bpl.n	4093b8 <_realloc_r+0xec>
  40931e:	f01e 0f01 	tst.w	lr, #1
  409322:	f000 809b 	beq.w	40945c <_realloc_r+0x190>
  409326:	4631      	mov	r1, r6
  409328:	4640      	mov	r0, r8
  40932a:	f7fb f81b 	bl	404364 <_malloc_r>
  40932e:	4606      	mov	r6, r0
  409330:	2800      	cmp	r0, #0
  409332:	d03a      	beq.n	4093aa <_realloc_r+0xde>
  409334:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409338:	f023 0301 	bic.w	r3, r3, #1
  40933c:	444b      	add	r3, r9
  40933e:	f1a0 0208 	sub.w	r2, r0, #8
  409342:	429a      	cmp	r2, r3
  409344:	f000 8121 	beq.w	40958a <_realloc_r+0x2be>
  409348:	1f22      	subs	r2, r4, #4
  40934a:	2a24      	cmp	r2, #36	; 0x24
  40934c:	f200 8107 	bhi.w	40955e <_realloc_r+0x292>
  409350:	2a13      	cmp	r2, #19
  409352:	f200 80db 	bhi.w	40950c <_realloc_r+0x240>
  409356:	4603      	mov	r3, r0
  409358:	462a      	mov	r2, r5
  40935a:	6811      	ldr	r1, [r2, #0]
  40935c:	6019      	str	r1, [r3, #0]
  40935e:	6851      	ldr	r1, [r2, #4]
  409360:	6059      	str	r1, [r3, #4]
  409362:	6892      	ldr	r2, [r2, #8]
  409364:	609a      	str	r2, [r3, #8]
  409366:	4629      	mov	r1, r5
  409368:	4640      	mov	r0, r8
  40936a:	f7ff f8c1 	bl	4084f0 <_free_r>
  40936e:	e01c      	b.n	4093aa <_realloc_r+0xde>
  409370:	f027 0707 	bic.w	r7, r7, #7
  409374:	2f00      	cmp	r7, #0
  409376:	463a      	mov	r2, r7
  409378:	dabf      	bge.n	4092fa <_realloc_r+0x2e>
  40937a:	2600      	movs	r6, #0
  40937c:	230c      	movs	r3, #12
  40937e:	4630      	mov	r0, r6
  409380:	f8c8 3000 	str.w	r3, [r8]
  409384:	b003      	add	sp, #12
  409386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40938a:	462e      	mov	r6, r5
  40938c:	1be3      	subs	r3, r4, r7
  40938e:	2b0f      	cmp	r3, #15
  409390:	d81e      	bhi.n	4093d0 <_realloc_r+0x104>
  409392:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409396:	f003 0301 	and.w	r3, r3, #1
  40939a:	4323      	orrs	r3, r4
  40939c:	444c      	add	r4, r9
  40939e:	f8c9 3004 	str.w	r3, [r9, #4]
  4093a2:	6863      	ldr	r3, [r4, #4]
  4093a4:	f043 0301 	orr.w	r3, r3, #1
  4093a8:	6063      	str	r3, [r4, #4]
  4093aa:	4640      	mov	r0, r8
  4093ac:	f7fb fb78 	bl	404aa0 <__malloc_unlock>
  4093b0:	4630      	mov	r0, r6
  4093b2:	b003      	add	sp, #12
  4093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4093b8:	f023 0303 	bic.w	r3, r3, #3
  4093bc:	18e1      	adds	r1, r4, r3
  4093be:	4291      	cmp	r1, r2
  4093c0:	db1f      	blt.n	409402 <_realloc_r+0x136>
  4093c2:	68c3      	ldr	r3, [r0, #12]
  4093c4:	6882      	ldr	r2, [r0, #8]
  4093c6:	462e      	mov	r6, r5
  4093c8:	60d3      	str	r3, [r2, #12]
  4093ca:	460c      	mov	r4, r1
  4093cc:	609a      	str	r2, [r3, #8]
  4093ce:	e7dd      	b.n	40938c <_realloc_r+0xc0>
  4093d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4093d4:	eb09 0107 	add.w	r1, r9, r7
  4093d8:	f002 0201 	and.w	r2, r2, #1
  4093dc:	444c      	add	r4, r9
  4093de:	f043 0301 	orr.w	r3, r3, #1
  4093e2:	4317      	orrs	r7, r2
  4093e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4093e8:	604b      	str	r3, [r1, #4]
  4093ea:	6863      	ldr	r3, [r4, #4]
  4093ec:	f043 0301 	orr.w	r3, r3, #1
  4093f0:	3108      	adds	r1, #8
  4093f2:	6063      	str	r3, [r4, #4]
  4093f4:	4640      	mov	r0, r8
  4093f6:	f7ff f87b 	bl	4084f0 <_free_r>
  4093fa:	e7d6      	b.n	4093aa <_realloc_r+0xde>
  4093fc:	4611      	mov	r1, r2
  4093fe:	f7fa bfb1 	b.w	404364 <_malloc_r>
  409402:	f01e 0f01 	tst.w	lr, #1
  409406:	d18e      	bne.n	409326 <_realloc_r+0x5a>
  409408:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40940c:	eba9 0a01 	sub.w	sl, r9, r1
  409410:	f8da 1004 	ldr.w	r1, [sl, #4]
  409414:	f021 0103 	bic.w	r1, r1, #3
  409418:	440b      	add	r3, r1
  40941a:	4423      	add	r3, r4
  40941c:	4293      	cmp	r3, r2
  40941e:	db25      	blt.n	40946c <_realloc_r+0x1a0>
  409420:	68c2      	ldr	r2, [r0, #12]
  409422:	6881      	ldr	r1, [r0, #8]
  409424:	4656      	mov	r6, sl
  409426:	60ca      	str	r2, [r1, #12]
  409428:	6091      	str	r1, [r2, #8]
  40942a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40942e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409432:	1f22      	subs	r2, r4, #4
  409434:	2a24      	cmp	r2, #36	; 0x24
  409436:	60c1      	str	r1, [r0, #12]
  409438:	6088      	str	r0, [r1, #8]
  40943a:	f200 8094 	bhi.w	409566 <_realloc_r+0x29a>
  40943e:	2a13      	cmp	r2, #19
  409440:	d96f      	bls.n	409522 <_realloc_r+0x256>
  409442:	6829      	ldr	r1, [r5, #0]
  409444:	f8ca 1008 	str.w	r1, [sl, #8]
  409448:	6869      	ldr	r1, [r5, #4]
  40944a:	f8ca 100c 	str.w	r1, [sl, #12]
  40944e:	2a1b      	cmp	r2, #27
  409450:	f200 80a2 	bhi.w	409598 <_realloc_r+0x2cc>
  409454:	3508      	adds	r5, #8
  409456:	f10a 0210 	add.w	r2, sl, #16
  40945a:	e063      	b.n	409524 <_realloc_r+0x258>
  40945c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409460:	eba9 0a03 	sub.w	sl, r9, r3
  409464:	f8da 1004 	ldr.w	r1, [sl, #4]
  409468:	f021 0103 	bic.w	r1, r1, #3
  40946c:	1863      	adds	r3, r4, r1
  40946e:	4293      	cmp	r3, r2
  409470:	f6ff af59 	blt.w	409326 <_realloc_r+0x5a>
  409474:	4656      	mov	r6, sl
  409476:	e7d8      	b.n	40942a <_realloc_r+0x15e>
  409478:	6841      	ldr	r1, [r0, #4]
  40947a:	f021 0b03 	bic.w	fp, r1, #3
  40947e:	44a3      	add	fp, r4
  409480:	f107 0010 	add.w	r0, r7, #16
  409484:	4583      	cmp	fp, r0
  409486:	da56      	bge.n	409536 <_realloc_r+0x26a>
  409488:	f01e 0f01 	tst.w	lr, #1
  40948c:	f47f af4b 	bne.w	409326 <_realloc_r+0x5a>
  409490:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409494:	eba9 0a01 	sub.w	sl, r9, r1
  409498:	f8da 1004 	ldr.w	r1, [sl, #4]
  40949c:	f021 0103 	bic.w	r1, r1, #3
  4094a0:	448b      	add	fp, r1
  4094a2:	4558      	cmp	r0, fp
  4094a4:	dce2      	bgt.n	40946c <_realloc_r+0x1a0>
  4094a6:	4656      	mov	r6, sl
  4094a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4094ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4094b0:	1f22      	subs	r2, r4, #4
  4094b2:	2a24      	cmp	r2, #36	; 0x24
  4094b4:	60c1      	str	r1, [r0, #12]
  4094b6:	6088      	str	r0, [r1, #8]
  4094b8:	f200 808f 	bhi.w	4095da <_realloc_r+0x30e>
  4094bc:	2a13      	cmp	r2, #19
  4094be:	f240 808a 	bls.w	4095d6 <_realloc_r+0x30a>
  4094c2:	6829      	ldr	r1, [r5, #0]
  4094c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4094c8:	6869      	ldr	r1, [r5, #4]
  4094ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4094ce:	2a1b      	cmp	r2, #27
  4094d0:	f200 808a 	bhi.w	4095e8 <_realloc_r+0x31c>
  4094d4:	3508      	adds	r5, #8
  4094d6:	f10a 0210 	add.w	r2, sl, #16
  4094da:	6829      	ldr	r1, [r5, #0]
  4094dc:	6011      	str	r1, [r2, #0]
  4094de:	6869      	ldr	r1, [r5, #4]
  4094e0:	6051      	str	r1, [r2, #4]
  4094e2:	68a9      	ldr	r1, [r5, #8]
  4094e4:	6091      	str	r1, [r2, #8]
  4094e6:	eb0a 0107 	add.w	r1, sl, r7
  4094ea:	ebab 0207 	sub.w	r2, fp, r7
  4094ee:	f042 0201 	orr.w	r2, r2, #1
  4094f2:	6099      	str	r1, [r3, #8]
  4094f4:	604a      	str	r2, [r1, #4]
  4094f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4094fa:	f003 0301 	and.w	r3, r3, #1
  4094fe:	431f      	orrs	r7, r3
  409500:	4640      	mov	r0, r8
  409502:	f8ca 7004 	str.w	r7, [sl, #4]
  409506:	f7fb facb 	bl	404aa0 <__malloc_unlock>
  40950a:	e751      	b.n	4093b0 <_realloc_r+0xe4>
  40950c:	682b      	ldr	r3, [r5, #0]
  40950e:	6003      	str	r3, [r0, #0]
  409510:	686b      	ldr	r3, [r5, #4]
  409512:	6043      	str	r3, [r0, #4]
  409514:	2a1b      	cmp	r2, #27
  409516:	d82d      	bhi.n	409574 <_realloc_r+0x2a8>
  409518:	f100 0308 	add.w	r3, r0, #8
  40951c:	f105 0208 	add.w	r2, r5, #8
  409520:	e71b      	b.n	40935a <_realloc_r+0x8e>
  409522:	4632      	mov	r2, r6
  409524:	6829      	ldr	r1, [r5, #0]
  409526:	6011      	str	r1, [r2, #0]
  409528:	6869      	ldr	r1, [r5, #4]
  40952a:	6051      	str	r1, [r2, #4]
  40952c:	68a9      	ldr	r1, [r5, #8]
  40952e:	6091      	str	r1, [r2, #8]
  409530:	461c      	mov	r4, r3
  409532:	46d1      	mov	r9, sl
  409534:	e72a      	b.n	40938c <_realloc_r+0xc0>
  409536:	eb09 0107 	add.w	r1, r9, r7
  40953a:	ebab 0b07 	sub.w	fp, fp, r7
  40953e:	f04b 0201 	orr.w	r2, fp, #1
  409542:	6099      	str	r1, [r3, #8]
  409544:	604a      	str	r2, [r1, #4]
  409546:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40954a:	f003 0301 	and.w	r3, r3, #1
  40954e:	431f      	orrs	r7, r3
  409550:	4640      	mov	r0, r8
  409552:	f845 7c04 	str.w	r7, [r5, #-4]
  409556:	f7fb faa3 	bl	404aa0 <__malloc_unlock>
  40955a:	462e      	mov	r6, r5
  40955c:	e728      	b.n	4093b0 <_realloc_r+0xe4>
  40955e:	4629      	mov	r1, r5
  409560:	f7ff fb56 	bl	408c10 <memmove>
  409564:	e6ff      	b.n	409366 <_realloc_r+0x9a>
  409566:	4629      	mov	r1, r5
  409568:	4630      	mov	r0, r6
  40956a:	461c      	mov	r4, r3
  40956c:	46d1      	mov	r9, sl
  40956e:	f7ff fb4f 	bl	408c10 <memmove>
  409572:	e70b      	b.n	40938c <_realloc_r+0xc0>
  409574:	68ab      	ldr	r3, [r5, #8]
  409576:	6083      	str	r3, [r0, #8]
  409578:	68eb      	ldr	r3, [r5, #12]
  40957a:	60c3      	str	r3, [r0, #12]
  40957c:	2a24      	cmp	r2, #36	; 0x24
  40957e:	d017      	beq.n	4095b0 <_realloc_r+0x2e4>
  409580:	f100 0310 	add.w	r3, r0, #16
  409584:	f105 0210 	add.w	r2, r5, #16
  409588:	e6e7      	b.n	40935a <_realloc_r+0x8e>
  40958a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40958e:	f023 0303 	bic.w	r3, r3, #3
  409592:	441c      	add	r4, r3
  409594:	462e      	mov	r6, r5
  409596:	e6f9      	b.n	40938c <_realloc_r+0xc0>
  409598:	68a9      	ldr	r1, [r5, #8]
  40959a:	f8ca 1010 	str.w	r1, [sl, #16]
  40959e:	68e9      	ldr	r1, [r5, #12]
  4095a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4095a4:	2a24      	cmp	r2, #36	; 0x24
  4095a6:	d00c      	beq.n	4095c2 <_realloc_r+0x2f6>
  4095a8:	3510      	adds	r5, #16
  4095aa:	f10a 0218 	add.w	r2, sl, #24
  4095ae:	e7b9      	b.n	409524 <_realloc_r+0x258>
  4095b0:	692b      	ldr	r3, [r5, #16]
  4095b2:	6103      	str	r3, [r0, #16]
  4095b4:	696b      	ldr	r3, [r5, #20]
  4095b6:	6143      	str	r3, [r0, #20]
  4095b8:	f105 0218 	add.w	r2, r5, #24
  4095bc:	f100 0318 	add.w	r3, r0, #24
  4095c0:	e6cb      	b.n	40935a <_realloc_r+0x8e>
  4095c2:	692a      	ldr	r2, [r5, #16]
  4095c4:	f8ca 2018 	str.w	r2, [sl, #24]
  4095c8:	696a      	ldr	r2, [r5, #20]
  4095ca:	f8ca 201c 	str.w	r2, [sl, #28]
  4095ce:	3518      	adds	r5, #24
  4095d0:	f10a 0220 	add.w	r2, sl, #32
  4095d4:	e7a6      	b.n	409524 <_realloc_r+0x258>
  4095d6:	4632      	mov	r2, r6
  4095d8:	e77f      	b.n	4094da <_realloc_r+0x20e>
  4095da:	4629      	mov	r1, r5
  4095dc:	4630      	mov	r0, r6
  4095de:	9301      	str	r3, [sp, #4]
  4095e0:	f7ff fb16 	bl	408c10 <memmove>
  4095e4:	9b01      	ldr	r3, [sp, #4]
  4095e6:	e77e      	b.n	4094e6 <_realloc_r+0x21a>
  4095e8:	68a9      	ldr	r1, [r5, #8]
  4095ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4095ee:	68e9      	ldr	r1, [r5, #12]
  4095f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4095f4:	2a24      	cmp	r2, #36	; 0x24
  4095f6:	d003      	beq.n	409600 <_realloc_r+0x334>
  4095f8:	3510      	adds	r5, #16
  4095fa:	f10a 0218 	add.w	r2, sl, #24
  4095fe:	e76c      	b.n	4094da <_realloc_r+0x20e>
  409600:	692a      	ldr	r2, [r5, #16]
  409602:	f8ca 2018 	str.w	r2, [sl, #24]
  409606:	696a      	ldr	r2, [r5, #20]
  409608:	f8ca 201c 	str.w	r2, [sl, #28]
  40960c:	3518      	adds	r5, #24
  40960e:	f10a 0220 	add.w	r2, sl, #32
  409612:	e762      	b.n	4094da <_realloc_r+0x20e>
  409614:	20400440 	.word	0x20400440

00409618 <__sread>:
  409618:	b510      	push	{r4, lr}
  40961a:	460c      	mov	r4, r1
  40961c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409620:	f000 faa4 	bl	409b6c <_read_r>
  409624:	2800      	cmp	r0, #0
  409626:	db03      	blt.n	409630 <__sread+0x18>
  409628:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40962a:	4403      	add	r3, r0
  40962c:	6523      	str	r3, [r4, #80]	; 0x50
  40962e:	bd10      	pop	{r4, pc}
  409630:	89a3      	ldrh	r3, [r4, #12]
  409632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409636:	81a3      	strh	r3, [r4, #12]
  409638:	bd10      	pop	{r4, pc}
  40963a:	bf00      	nop

0040963c <__swrite>:
  40963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409640:	4616      	mov	r6, r2
  409642:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409646:	461f      	mov	r7, r3
  409648:	05d3      	lsls	r3, r2, #23
  40964a:	460c      	mov	r4, r1
  40964c:	4605      	mov	r5, r0
  40964e:	d507      	bpl.n	409660 <__swrite+0x24>
  409650:	2200      	movs	r2, #0
  409652:	2302      	movs	r3, #2
  409654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409658:	f000 fa72 	bl	409b40 <_lseek_r>
  40965c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409668:	81a2      	strh	r2, [r4, #12]
  40966a:	463b      	mov	r3, r7
  40966c:	4632      	mov	r2, r6
  40966e:	4628      	mov	r0, r5
  409670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409674:	f000 b922 	b.w	4098bc <_write_r>

00409678 <__sseek>:
  409678:	b510      	push	{r4, lr}
  40967a:	460c      	mov	r4, r1
  40967c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409680:	f000 fa5e 	bl	409b40 <_lseek_r>
  409684:	89a3      	ldrh	r3, [r4, #12]
  409686:	1c42      	adds	r2, r0, #1
  409688:	bf0e      	itee	eq
  40968a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40968e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  409692:	6520      	strne	r0, [r4, #80]	; 0x50
  409694:	81a3      	strh	r3, [r4, #12]
  409696:	bd10      	pop	{r4, pc}

00409698 <__sclose>:
  409698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40969c:	f000 b9b6 	b.w	409a0c <_close_r>

004096a0 <__ssprint_r>:
  4096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096a4:	6893      	ldr	r3, [r2, #8]
  4096a6:	b083      	sub	sp, #12
  4096a8:	4690      	mov	r8, r2
  4096aa:	2b00      	cmp	r3, #0
  4096ac:	d070      	beq.n	409790 <__ssprint_r+0xf0>
  4096ae:	4682      	mov	sl, r0
  4096b0:	460c      	mov	r4, r1
  4096b2:	6817      	ldr	r7, [r2, #0]
  4096b4:	688d      	ldr	r5, [r1, #8]
  4096b6:	6808      	ldr	r0, [r1, #0]
  4096b8:	e042      	b.n	409740 <__ssprint_r+0xa0>
  4096ba:	89a3      	ldrh	r3, [r4, #12]
  4096bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4096c0:	d02e      	beq.n	409720 <__ssprint_r+0x80>
  4096c2:	6965      	ldr	r5, [r4, #20]
  4096c4:	6921      	ldr	r1, [r4, #16]
  4096c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4096ca:	eba0 0b01 	sub.w	fp, r0, r1
  4096ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4096d2:	f10b 0001 	add.w	r0, fp, #1
  4096d6:	106d      	asrs	r5, r5, #1
  4096d8:	4430      	add	r0, r6
  4096da:	42a8      	cmp	r0, r5
  4096dc:	462a      	mov	r2, r5
  4096de:	bf84      	itt	hi
  4096e0:	4605      	movhi	r5, r0
  4096e2:	462a      	movhi	r2, r5
  4096e4:	055b      	lsls	r3, r3, #21
  4096e6:	d538      	bpl.n	40975a <__ssprint_r+0xba>
  4096e8:	4611      	mov	r1, r2
  4096ea:	4650      	mov	r0, sl
  4096ec:	f7fa fe3a 	bl	404364 <_malloc_r>
  4096f0:	2800      	cmp	r0, #0
  4096f2:	d03c      	beq.n	40976e <__ssprint_r+0xce>
  4096f4:	465a      	mov	r2, fp
  4096f6:	6921      	ldr	r1, [r4, #16]
  4096f8:	9001      	str	r0, [sp, #4]
  4096fa:	f7fb f8e3 	bl	4048c4 <memcpy>
  4096fe:	89a2      	ldrh	r2, [r4, #12]
  409700:	9b01      	ldr	r3, [sp, #4]
  409702:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409706:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40970a:	81a2      	strh	r2, [r4, #12]
  40970c:	eba5 020b 	sub.w	r2, r5, fp
  409710:	eb03 000b 	add.w	r0, r3, fp
  409714:	6165      	str	r5, [r4, #20]
  409716:	6123      	str	r3, [r4, #16]
  409718:	6020      	str	r0, [r4, #0]
  40971a:	60a2      	str	r2, [r4, #8]
  40971c:	4635      	mov	r5, r6
  40971e:	46b3      	mov	fp, r6
  409720:	465a      	mov	r2, fp
  409722:	4649      	mov	r1, r9
  409724:	f7ff fa74 	bl	408c10 <memmove>
  409728:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40972c:	68a2      	ldr	r2, [r4, #8]
  40972e:	6820      	ldr	r0, [r4, #0]
  409730:	1b55      	subs	r5, r2, r5
  409732:	4458      	add	r0, fp
  409734:	1b9e      	subs	r6, r3, r6
  409736:	60a5      	str	r5, [r4, #8]
  409738:	6020      	str	r0, [r4, #0]
  40973a:	f8c8 6008 	str.w	r6, [r8, #8]
  40973e:	b33e      	cbz	r6, 409790 <__ssprint_r+0xf0>
  409740:	687e      	ldr	r6, [r7, #4]
  409742:	463b      	mov	r3, r7
  409744:	3708      	adds	r7, #8
  409746:	2e00      	cmp	r6, #0
  409748:	d0fa      	beq.n	409740 <__ssprint_r+0xa0>
  40974a:	42ae      	cmp	r6, r5
  40974c:	f8d3 9000 	ldr.w	r9, [r3]
  409750:	46ab      	mov	fp, r5
  409752:	d2b2      	bcs.n	4096ba <__ssprint_r+0x1a>
  409754:	4635      	mov	r5, r6
  409756:	46b3      	mov	fp, r6
  409758:	e7e2      	b.n	409720 <__ssprint_r+0x80>
  40975a:	4650      	mov	r0, sl
  40975c:	f7ff fdb6 	bl	4092cc <_realloc_r>
  409760:	4603      	mov	r3, r0
  409762:	2800      	cmp	r0, #0
  409764:	d1d2      	bne.n	40970c <__ssprint_r+0x6c>
  409766:	6921      	ldr	r1, [r4, #16]
  409768:	4650      	mov	r0, sl
  40976a:	f7fe fec1 	bl	4084f0 <_free_r>
  40976e:	230c      	movs	r3, #12
  409770:	f8ca 3000 	str.w	r3, [sl]
  409774:	89a3      	ldrh	r3, [r4, #12]
  409776:	2200      	movs	r2, #0
  409778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40977c:	f04f 30ff 	mov.w	r0, #4294967295
  409780:	81a3      	strh	r3, [r4, #12]
  409782:	f8c8 2008 	str.w	r2, [r8, #8]
  409786:	f8c8 2004 	str.w	r2, [r8, #4]
  40978a:	b003      	add	sp, #12
  40978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409790:	2000      	movs	r0, #0
  409792:	f8c8 0004 	str.w	r0, [r8, #4]
  409796:	b003      	add	sp, #12
  409798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040979c <__swbuf_r>:
  40979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40979e:	460d      	mov	r5, r1
  4097a0:	4614      	mov	r4, r2
  4097a2:	4606      	mov	r6, r0
  4097a4:	b110      	cbz	r0, 4097ac <__swbuf_r+0x10>
  4097a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4097a8:	2b00      	cmp	r3, #0
  4097aa:	d04b      	beq.n	409844 <__swbuf_r+0xa8>
  4097ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4097b0:	69a3      	ldr	r3, [r4, #24]
  4097b2:	60a3      	str	r3, [r4, #8]
  4097b4:	b291      	uxth	r1, r2
  4097b6:	0708      	lsls	r0, r1, #28
  4097b8:	d539      	bpl.n	40982e <__swbuf_r+0x92>
  4097ba:	6923      	ldr	r3, [r4, #16]
  4097bc:	2b00      	cmp	r3, #0
  4097be:	d036      	beq.n	40982e <__swbuf_r+0x92>
  4097c0:	b2ed      	uxtb	r5, r5
  4097c2:	0489      	lsls	r1, r1, #18
  4097c4:	462f      	mov	r7, r5
  4097c6:	d515      	bpl.n	4097f4 <__swbuf_r+0x58>
  4097c8:	6822      	ldr	r2, [r4, #0]
  4097ca:	6961      	ldr	r1, [r4, #20]
  4097cc:	1ad3      	subs	r3, r2, r3
  4097ce:	428b      	cmp	r3, r1
  4097d0:	da1c      	bge.n	40980c <__swbuf_r+0x70>
  4097d2:	3301      	adds	r3, #1
  4097d4:	68a1      	ldr	r1, [r4, #8]
  4097d6:	1c50      	adds	r0, r2, #1
  4097d8:	3901      	subs	r1, #1
  4097da:	60a1      	str	r1, [r4, #8]
  4097dc:	6020      	str	r0, [r4, #0]
  4097de:	7015      	strb	r5, [r2, #0]
  4097e0:	6962      	ldr	r2, [r4, #20]
  4097e2:	429a      	cmp	r2, r3
  4097e4:	d01a      	beq.n	40981c <__swbuf_r+0x80>
  4097e6:	89a3      	ldrh	r3, [r4, #12]
  4097e8:	07db      	lsls	r3, r3, #31
  4097ea:	d501      	bpl.n	4097f0 <__swbuf_r+0x54>
  4097ec:	2d0a      	cmp	r5, #10
  4097ee:	d015      	beq.n	40981c <__swbuf_r+0x80>
  4097f0:	4638      	mov	r0, r7
  4097f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4097f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4097f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4097fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4097fe:	81a2      	strh	r2, [r4, #12]
  409800:	6822      	ldr	r2, [r4, #0]
  409802:	6661      	str	r1, [r4, #100]	; 0x64
  409804:	6961      	ldr	r1, [r4, #20]
  409806:	1ad3      	subs	r3, r2, r3
  409808:	428b      	cmp	r3, r1
  40980a:	dbe2      	blt.n	4097d2 <__swbuf_r+0x36>
  40980c:	4621      	mov	r1, r4
  40980e:	4630      	mov	r0, r6
  409810:	f7fe fcf0 	bl	4081f4 <_fflush_r>
  409814:	b940      	cbnz	r0, 409828 <__swbuf_r+0x8c>
  409816:	6822      	ldr	r2, [r4, #0]
  409818:	2301      	movs	r3, #1
  40981a:	e7db      	b.n	4097d4 <__swbuf_r+0x38>
  40981c:	4621      	mov	r1, r4
  40981e:	4630      	mov	r0, r6
  409820:	f7fe fce8 	bl	4081f4 <_fflush_r>
  409824:	2800      	cmp	r0, #0
  409826:	d0e3      	beq.n	4097f0 <__swbuf_r+0x54>
  409828:	f04f 37ff 	mov.w	r7, #4294967295
  40982c:	e7e0      	b.n	4097f0 <__swbuf_r+0x54>
  40982e:	4621      	mov	r1, r4
  409830:	4630      	mov	r0, r6
  409832:	f7fd fc0b 	bl	40704c <__swsetup_r>
  409836:	2800      	cmp	r0, #0
  409838:	d1f6      	bne.n	409828 <__swbuf_r+0x8c>
  40983a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40983e:	6923      	ldr	r3, [r4, #16]
  409840:	b291      	uxth	r1, r2
  409842:	e7bd      	b.n	4097c0 <__swbuf_r+0x24>
  409844:	f7fe fd2e 	bl	4082a4 <__sinit>
  409848:	e7b0      	b.n	4097ac <__swbuf_r+0x10>
  40984a:	bf00      	nop

0040984c <_wcrtomb_r>:
  40984c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40984e:	4606      	mov	r6, r0
  409850:	b085      	sub	sp, #20
  409852:	461f      	mov	r7, r3
  409854:	b189      	cbz	r1, 40987a <_wcrtomb_r+0x2e>
  409856:	4c10      	ldr	r4, [pc, #64]	; (409898 <_wcrtomb_r+0x4c>)
  409858:	4d10      	ldr	r5, [pc, #64]	; (40989c <_wcrtomb_r+0x50>)
  40985a:	6824      	ldr	r4, [r4, #0]
  40985c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40985e:	2c00      	cmp	r4, #0
  409860:	bf08      	it	eq
  409862:	462c      	moveq	r4, r5
  409864:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409868:	47a0      	blx	r4
  40986a:	1c43      	adds	r3, r0, #1
  40986c:	d103      	bne.n	409876 <_wcrtomb_r+0x2a>
  40986e:	2200      	movs	r2, #0
  409870:	238a      	movs	r3, #138	; 0x8a
  409872:	603a      	str	r2, [r7, #0]
  409874:	6033      	str	r3, [r6, #0]
  409876:	b005      	add	sp, #20
  409878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40987a:	460c      	mov	r4, r1
  40987c:	4906      	ldr	r1, [pc, #24]	; (409898 <_wcrtomb_r+0x4c>)
  40987e:	4a07      	ldr	r2, [pc, #28]	; (40989c <_wcrtomb_r+0x50>)
  409880:	6809      	ldr	r1, [r1, #0]
  409882:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409884:	2900      	cmp	r1, #0
  409886:	bf08      	it	eq
  409888:	4611      	moveq	r1, r2
  40988a:	4622      	mov	r2, r4
  40988c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409890:	a901      	add	r1, sp, #4
  409892:	47a0      	blx	r4
  409894:	e7e9      	b.n	40986a <_wcrtomb_r+0x1e>
  409896:	bf00      	nop
  409898:	20400014 	.word	0x20400014
  40989c:	20400854 	.word	0x20400854

004098a0 <__ascii_wctomb>:
  4098a0:	b121      	cbz	r1, 4098ac <__ascii_wctomb+0xc>
  4098a2:	2aff      	cmp	r2, #255	; 0xff
  4098a4:	d804      	bhi.n	4098b0 <__ascii_wctomb+0x10>
  4098a6:	700a      	strb	r2, [r1, #0]
  4098a8:	2001      	movs	r0, #1
  4098aa:	4770      	bx	lr
  4098ac:	4608      	mov	r0, r1
  4098ae:	4770      	bx	lr
  4098b0:	238a      	movs	r3, #138	; 0x8a
  4098b2:	6003      	str	r3, [r0, #0]
  4098b4:	f04f 30ff 	mov.w	r0, #4294967295
  4098b8:	4770      	bx	lr
  4098ba:	bf00      	nop

004098bc <_write_r>:
  4098bc:	b570      	push	{r4, r5, r6, lr}
  4098be:	460d      	mov	r5, r1
  4098c0:	4c08      	ldr	r4, [pc, #32]	; (4098e4 <_write_r+0x28>)
  4098c2:	4611      	mov	r1, r2
  4098c4:	4606      	mov	r6, r0
  4098c6:	461a      	mov	r2, r3
  4098c8:	4628      	mov	r0, r5
  4098ca:	2300      	movs	r3, #0
  4098cc:	6023      	str	r3, [r4, #0]
  4098ce:	f7f6 fcc3 	bl	400258 <_write>
  4098d2:	1c43      	adds	r3, r0, #1
  4098d4:	d000      	beq.n	4098d8 <_write_r+0x1c>
  4098d6:	bd70      	pop	{r4, r5, r6, pc}
  4098d8:	6823      	ldr	r3, [r4, #0]
  4098da:	2b00      	cmp	r3, #0
  4098dc:	d0fb      	beq.n	4098d6 <_write_r+0x1a>
  4098de:	6033      	str	r3, [r6, #0]
  4098e0:	bd70      	pop	{r4, r5, r6, pc}
  4098e2:	bf00      	nop
  4098e4:	20400d10 	.word	0x20400d10

004098e8 <__register_exitproc>:
  4098e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4098ec:	4d2c      	ldr	r5, [pc, #176]	; (4099a0 <__register_exitproc+0xb8>)
  4098ee:	4606      	mov	r6, r0
  4098f0:	6828      	ldr	r0, [r5, #0]
  4098f2:	4698      	mov	r8, r3
  4098f4:	460f      	mov	r7, r1
  4098f6:	4691      	mov	r9, r2
  4098f8:	f7ff f8a2 	bl	408a40 <__retarget_lock_acquire_recursive>
  4098fc:	4b29      	ldr	r3, [pc, #164]	; (4099a4 <__register_exitproc+0xbc>)
  4098fe:	681c      	ldr	r4, [r3, #0]
  409900:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409904:	2b00      	cmp	r3, #0
  409906:	d03e      	beq.n	409986 <__register_exitproc+0x9e>
  409908:	685a      	ldr	r2, [r3, #4]
  40990a:	2a1f      	cmp	r2, #31
  40990c:	dc1c      	bgt.n	409948 <__register_exitproc+0x60>
  40990e:	f102 0e01 	add.w	lr, r2, #1
  409912:	b176      	cbz	r6, 409932 <__register_exitproc+0x4a>
  409914:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409918:	2401      	movs	r4, #1
  40991a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40991e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409922:	4094      	lsls	r4, r2
  409924:	4320      	orrs	r0, r4
  409926:	2e02      	cmp	r6, #2
  409928:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40992c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409930:	d023      	beq.n	40997a <__register_exitproc+0x92>
  409932:	3202      	adds	r2, #2
  409934:	f8c3 e004 	str.w	lr, [r3, #4]
  409938:	6828      	ldr	r0, [r5, #0]
  40993a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40993e:	f7ff f881 	bl	408a44 <__retarget_lock_release_recursive>
  409942:	2000      	movs	r0, #0
  409944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409948:	4b17      	ldr	r3, [pc, #92]	; (4099a8 <__register_exitproc+0xc0>)
  40994a:	b30b      	cbz	r3, 409990 <__register_exitproc+0xa8>
  40994c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409950:	f7fa fcf8 	bl	404344 <malloc>
  409954:	4603      	mov	r3, r0
  409956:	b1d8      	cbz	r0, 409990 <__register_exitproc+0xa8>
  409958:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40995c:	6002      	str	r2, [r0, #0]
  40995e:	2100      	movs	r1, #0
  409960:	6041      	str	r1, [r0, #4]
  409962:	460a      	mov	r2, r1
  409964:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409968:	f04f 0e01 	mov.w	lr, #1
  40996c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409970:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409974:	2e00      	cmp	r6, #0
  409976:	d0dc      	beq.n	409932 <__register_exitproc+0x4a>
  409978:	e7cc      	b.n	409914 <__register_exitproc+0x2c>
  40997a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40997e:	430c      	orrs	r4, r1
  409980:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409984:	e7d5      	b.n	409932 <__register_exitproc+0x4a>
  409986:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40998a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40998e:	e7bb      	b.n	409908 <__register_exitproc+0x20>
  409990:	6828      	ldr	r0, [r5, #0]
  409992:	f7ff f857 	bl	408a44 <__retarget_lock_release_recursive>
  409996:	f04f 30ff 	mov.w	r0, #4294967295
  40999a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40999e:	bf00      	nop
  4099a0:	20400850 	.word	0x20400850
  4099a4:	0040a0d4 	.word	0x0040a0d4
  4099a8:	00404345 	.word	0x00404345

004099ac <_calloc_r>:
  4099ac:	b510      	push	{r4, lr}
  4099ae:	fb02 f101 	mul.w	r1, r2, r1
  4099b2:	f7fa fcd7 	bl	404364 <_malloc_r>
  4099b6:	4604      	mov	r4, r0
  4099b8:	b1d8      	cbz	r0, 4099f2 <_calloc_r+0x46>
  4099ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4099be:	f022 0203 	bic.w	r2, r2, #3
  4099c2:	3a04      	subs	r2, #4
  4099c4:	2a24      	cmp	r2, #36	; 0x24
  4099c6:	d818      	bhi.n	4099fa <_calloc_r+0x4e>
  4099c8:	2a13      	cmp	r2, #19
  4099ca:	d914      	bls.n	4099f6 <_calloc_r+0x4a>
  4099cc:	2300      	movs	r3, #0
  4099ce:	2a1b      	cmp	r2, #27
  4099d0:	6003      	str	r3, [r0, #0]
  4099d2:	6043      	str	r3, [r0, #4]
  4099d4:	d916      	bls.n	409a04 <_calloc_r+0x58>
  4099d6:	2a24      	cmp	r2, #36	; 0x24
  4099d8:	6083      	str	r3, [r0, #8]
  4099da:	60c3      	str	r3, [r0, #12]
  4099dc:	bf11      	iteee	ne
  4099de:	f100 0210 	addne.w	r2, r0, #16
  4099e2:	6103      	streq	r3, [r0, #16]
  4099e4:	6143      	streq	r3, [r0, #20]
  4099e6:	f100 0218 	addeq.w	r2, r0, #24
  4099ea:	2300      	movs	r3, #0
  4099ec:	6013      	str	r3, [r2, #0]
  4099ee:	6053      	str	r3, [r2, #4]
  4099f0:	6093      	str	r3, [r2, #8]
  4099f2:	4620      	mov	r0, r4
  4099f4:	bd10      	pop	{r4, pc}
  4099f6:	4602      	mov	r2, r0
  4099f8:	e7f7      	b.n	4099ea <_calloc_r+0x3e>
  4099fa:	2100      	movs	r1, #0
  4099fc:	f7fa fffc 	bl	4049f8 <memset>
  409a00:	4620      	mov	r0, r4
  409a02:	bd10      	pop	{r4, pc}
  409a04:	f100 0208 	add.w	r2, r0, #8
  409a08:	e7ef      	b.n	4099ea <_calloc_r+0x3e>
  409a0a:	bf00      	nop

00409a0c <_close_r>:
  409a0c:	b538      	push	{r3, r4, r5, lr}
  409a0e:	4c07      	ldr	r4, [pc, #28]	; (409a2c <_close_r+0x20>)
  409a10:	2300      	movs	r3, #0
  409a12:	4605      	mov	r5, r0
  409a14:	4608      	mov	r0, r1
  409a16:	6023      	str	r3, [r4, #0]
  409a18:	f7f7 fbf4 	bl	401204 <_close>
  409a1c:	1c43      	adds	r3, r0, #1
  409a1e:	d000      	beq.n	409a22 <_close_r+0x16>
  409a20:	bd38      	pop	{r3, r4, r5, pc}
  409a22:	6823      	ldr	r3, [r4, #0]
  409a24:	2b00      	cmp	r3, #0
  409a26:	d0fb      	beq.n	409a20 <_close_r+0x14>
  409a28:	602b      	str	r3, [r5, #0]
  409a2a:	bd38      	pop	{r3, r4, r5, pc}
  409a2c:	20400d10 	.word	0x20400d10

00409a30 <_fclose_r>:
  409a30:	b570      	push	{r4, r5, r6, lr}
  409a32:	b159      	cbz	r1, 409a4c <_fclose_r+0x1c>
  409a34:	4605      	mov	r5, r0
  409a36:	460c      	mov	r4, r1
  409a38:	b110      	cbz	r0, 409a40 <_fclose_r+0x10>
  409a3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409a3c:	2b00      	cmp	r3, #0
  409a3e:	d03c      	beq.n	409aba <_fclose_r+0x8a>
  409a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409a42:	07d8      	lsls	r0, r3, #31
  409a44:	d505      	bpl.n	409a52 <_fclose_r+0x22>
  409a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409a4a:	b92b      	cbnz	r3, 409a58 <_fclose_r+0x28>
  409a4c:	2600      	movs	r6, #0
  409a4e:	4630      	mov	r0, r6
  409a50:	bd70      	pop	{r4, r5, r6, pc}
  409a52:	89a3      	ldrh	r3, [r4, #12]
  409a54:	0599      	lsls	r1, r3, #22
  409a56:	d53c      	bpl.n	409ad2 <_fclose_r+0xa2>
  409a58:	4621      	mov	r1, r4
  409a5a:	4628      	mov	r0, r5
  409a5c:	f7fe fb2a 	bl	4080b4 <__sflush_r>
  409a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  409a62:	4606      	mov	r6, r0
  409a64:	b133      	cbz	r3, 409a74 <_fclose_r+0x44>
  409a66:	69e1      	ldr	r1, [r4, #28]
  409a68:	4628      	mov	r0, r5
  409a6a:	4798      	blx	r3
  409a6c:	2800      	cmp	r0, #0
  409a6e:	bfb8      	it	lt
  409a70:	f04f 36ff 	movlt.w	r6, #4294967295
  409a74:	89a3      	ldrh	r3, [r4, #12]
  409a76:	061a      	lsls	r2, r3, #24
  409a78:	d422      	bmi.n	409ac0 <_fclose_r+0x90>
  409a7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409a7c:	b141      	cbz	r1, 409a90 <_fclose_r+0x60>
  409a7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409a82:	4299      	cmp	r1, r3
  409a84:	d002      	beq.n	409a8c <_fclose_r+0x5c>
  409a86:	4628      	mov	r0, r5
  409a88:	f7fe fd32 	bl	4084f0 <_free_r>
  409a8c:	2300      	movs	r3, #0
  409a8e:	6323      	str	r3, [r4, #48]	; 0x30
  409a90:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409a92:	b121      	cbz	r1, 409a9e <_fclose_r+0x6e>
  409a94:	4628      	mov	r0, r5
  409a96:	f7fe fd2b 	bl	4084f0 <_free_r>
  409a9a:	2300      	movs	r3, #0
  409a9c:	6463      	str	r3, [r4, #68]	; 0x44
  409a9e:	f7fe fc2d 	bl	4082fc <__sfp_lock_acquire>
  409aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409aa4:	2200      	movs	r2, #0
  409aa6:	07db      	lsls	r3, r3, #31
  409aa8:	81a2      	strh	r2, [r4, #12]
  409aaa:	d50e      	bpl.n	409aca <_fclose_r+0x9a>
  409aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409aae:	f7fe ffc5 	bl	408a3c <__retarget_lock_close_recursive>
  409ab2:	f7fe fc29 	bl	408308 <__sfp_lock_release>
  409ab6:	4630      	mov	r0, r6
  409ab8:	bd70      	pop	{r4, r5, r6, pc}
  409aba:	f7fe fbf3 	bl	4082a4 <__sinit>
  409abe:	e7bf      	b.n	409a40 <_fclose_r+0x10>
  409ac0:	6921      	ldr	r1, [r4, #16]
  409ac2:	4628      	mov	r0, r5
  409ac4:	f7fe fd14 	bl	4084f0 <_free_r>
  409ac8:	e7d7      	b.n	409a7a <_fclose_r+0x4a>
  409aca:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409acc:	f7fe ffba 	bl	408a44 <__retarget_lock_release_recursive>
  409ad0:	e7ec      	b.n	409aac <_fclose_r+0x7c>
  409ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409ad4:	f7fe ffb4 	bl	408a40 <__retarget_lock_acquire_recursive>
  409ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409adc:	2b00      	cmp	r3, #0
  409ade:	d1bb      	bne.n	409a58 <_fclose_r+0x28>
  409ae0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409ae2:	f016 0601 	ands.w	r6, r6, #1
  409ae6:	d1b1      	bne.n	409a4c <_fclose_r+0x1c>
  409ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409aea:	f7fe ffab 	bl	408a44 <__retarget_lock_release_recursive>
  409aee:	4630      	mov	r0, r6
  409af0:	bd70      	pop	{r4, r5, r6, pc}
  409af2:	bf00      	nop

00409af4 <_fstat_r>:
  409af4:	b538      	push	{r3, r4, r5, lr}
  409af6:	460b      	mov	r3, r1
  409af8:	4c07      	ldr	r4, [pc, #28]	; (409b18 <_fstat_r+0x24>)
  409afa:	4605      	mov	r5, r0
  409afc:	4611      	mov	r1, r2
  409afe:	4618      	mov	r0, r3
  409b00:	2300      	movs	r3, #0
  409b02:	6023      	str	r3, [r4, #0]
  409b04:	f7f7 fb81 	bl	40120a <_fstat>
  409b08:	1c43      	adds	r3, r0, #1
  409b0a:	d000      	beq.n	409b0e <_fstat_r+0x1a>
  409b0c:	bd38      	pop	{r3, r4, r5, pc}
  409b0e:	6823      	ldr	r3, [r4, #0]
  409b10:	2b00      	cmp	r3, #0
  409b12:	d0fb      	beq.n	409b0c <_fstat_r+0x18>
  409b14:	602b      	str	r3, [r5, #0]
  409b16:	bd38      	pop	{r3, r4, r5, pc}
  409b18:	20400d10 	.word	0x20400d10

00409b1c <_isatty_r>:
  409b1c:	b538      	push	{r3, r4, r5, lr}
  409b1e:	4c07      	ldr	r4, [pc, #28]	; (409b3c <_isatty_r+0x20>)
  409b20:	2300      	movs	r3, #0
  409b22:	4605      	mov	r5, r0
  409b24:	4608      	mov	r0, r1
  409b26:	6023      	str	r3, [r4, #0]
  409b28:	f7f7 fb74 	bl	401214 <_isatty>
  409b2c:	1c43      	adds	r3, r0, #1
  409b2e:	d000      	beq.n	409b32 <_isatty_r+0x16>
  409b30:	bd38      	pop	{r3, r4, r5, pc}
  409b32:	6823      	ldr	r3, [r4, #0]
  409b34:	2b00      	cmp	r3, #0
  409b36:	d0fb      	beq.n	409b30 <_isatty_r+0x14>
  409b38:	602b      	str	r3, [r5, #0]
  409b3a:	bd38      	pop	{r3, r4, r5, pc}
  409b3c:	20400d10 	.word	0x20400d10

00409b40 <_lseek_r>:
  409b40:	b570      	push	{r4, r5, r6, lr}
  409b42:	460d      	mov	r5, r1
  409b44:	4c08      	ldr	r4, [pc, #32]	; (409b68 <_lseek_r+0x28>)
  409b46:	4611      	mov	r1, r2
  409b48:	4606      	mov	r6, r0
  409b4a:	461a      	mov	r2, r3
  409b4c:	4628      	mov	r0, r5
  409b4e:	2300      	movs	r3, #0
  409b50:	6023      	str	r3, [r4, #0]
  409b52:	f7f7 fb61 	bl	401218 <_lseek>
  409b56:	1c43      	adds	r3, r0, #1
  409b58:	d000      	beq.n	409b5c <_lseek_r+0x1c>
  409b5a:	bd70      	pop	{r4, r5, r6, pc}
  409b5c:	6823      	ldr	r3, [r4, #0]
  409b5e:	2b00      	cmp	r3, #0
  409b60:	d0fb      	beq.n	409b5a <_lseek_r+0x1a>
  409b62:	6033      	str	r3, [r6, #0]
  409b64:	bd70      	pop	{r4, r5, r6, pc}
  409b66:	bf00      	nop
  409b68:	20400d10 	.word	0x20400d10

00409b6c <_read_r>:
  409b6c:	b570      	push	{r4, r5, r6, lr}
  409b6e:	460d      	mov	r5, r1
  409b70:	4c08      	ldr	r4, [pc, #32]	; (409b94 <_read_r+0x28>)
  409b72:	4611      	mov	r1, r2
  409b74:	4606      	mov	r6, r0
  409b76:	461a      	mov	r2, r3
  409b78:	4628      	mov	r0, r5
  409b7a:	2300      	movs	r3, #0
  409b7c:	6023      	str	r3, [r4, #0]
  409b7e:	f7f6 fb4d 	bl	40021c <_read>
  409b82:	1c43      	adds	r3, r0, #1
  409b84:	d000      	beq.n	409b88 <_read_r+0x1c>
  409b86:	bd70      	pop	{r4, r5, r6, pc}
  409b88:	6823      	ldr	r3, [r4, #0]
  409b8a:	2b00      	cmp	r3, #0
  409b8c:	d0fb      	beq.n	409b86 <_read_r+0x1a>
  409b8e:	6033      	str	r3, [r6, #0]
  409b90:	bd70      	pop	{r4, r5, r6, pc}
  409b92:	bf00      	nop
  409b94:	20400d10 	.word	0x20400d10

00409b98 <__gedf2>:
  409b98:	f04f 3cff 	mov.w	ip, #4294967295
  409b9c:	e006      	b.n	409bac <__cmpdf2+0x4>
  409b9e:	bf00      	nop

00409ba0 <__ledf2>:
  409ba0:	f04f 0c01 	mov.w	ip, #1
  409ba4:	e002      	b.n	409bac <__cmpdf2+0x4>
  409ba6:	bf00      	nop

00409ba8 <__cmpdf2>:
  409ba8:	f04f 0c01 	mov.w	ip, #1
  409bac:	f84d cd04 	str.w	ip, [sp, #-4]!
  409bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409bbc:	bf18      	it	ne
  409bbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409bc2:	d01b      	beq.n	409bfc <__cmpdf2+0x54>
  409bc4:	b001      	add	sp, #4
  409bc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409bca:	bf0c      	ite	eq
  409bcc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409bd0:	ea91 0f03 	teqne	r1, r3
  409bd4:	bf02      	ittt	eq
  409bd6:	ea90 0f02 	teqeq	r0, r2
  409bda:	2000      	moveq	r0, #0
  409bdc:	4770      	bxeq	lr
  409bde:	f110 0f00 	cmn.w	r0, #0
  409be2:	ea91 0f03 	teq	r1, r3
  409be6:	bf58      	it	pl
  409be8:	4299      	cmppl	r1, r3
  409bea:	bf08      	it	eq
  409bec:	4290      	cmpeq	r0, r2
  409bee:	bf2c      	ite	cs
  409bf0:	17d8      	asrcs	r0, r3, #31
  409bf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409bf6:	f040 0001 	orr.w	r0, r0, #1
  409bfa:	4770      	bx	lr
  409bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409c04:	d102      	bne.n	409c0c <__cmpdf2+0x64>
  409c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409c0a:	d107      	bne.n	409c1c <__cmpdf2+0x74>
  409c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409c14:	d1d6      	bne.n	409bc4 <__cmpdf2+0x1c>
  409c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409c1a:	d0d3      	beq.n	409bc4 <__cmpdf2+0x1c>
  409c1c:	f85d 0b04 	ldr.w	r0, [sp], #4
  409c20:	4770      	bx	lr
  409c22:	bf00      	nop

00409c24 <__aeabi_cdrcmple>:
  409c24:	4684      	mov	ip, r0
  409c26:	4610      	mov	r0, r2
  409c28:	4662      	mov	r2, ip
  409c2a:	468c      	mov	ip, r1
  409c2c:	4619      	mov	r1, r3
  409c2e:	4663      	mov	r3, ip
  409c30:	e000      	b.n	409c34 <__aeabi_cdcmpeq>
  409c32:	bf00      	nop

00409c34 <__aeabi_cdcmpeq>:
  409c34:	b501      	push	{r0, lr}
  409c36:	f7ff ffb7 	bl	409ba8 <__cmpdf2>
  409c3a:	2800      	cmp	r0, #0
  409c3c:	bf48      	it	mi
  409c3e:	f110 0f00 	cmnmi.w	r0, #0
  409c42:	bd01      	pop	{r0, pc}

00409c44 <__aeabi_dcmpeq>:
  409c44:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c48:	f7ff fff4 	bl	409c34 <__aeabi_cdcmpeq>
  409c4c:	bf0c      	ite	eq
  409c4e:	2001      	moveq	r0, #1
  409c50:	2000      	movne	r0, #0
  409c52:	f85d fb08 	ldr.w	pc, [sp], #8
  409c56:	bf00      	nop

00409c58 <__aeabi_dcmplt>:
  409c58:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c5c:	f7ff ffea 	bl	409c34 <__aeabi_cdcmpeq>
  409c60:	bf34      	ite	cc
  409c62:	2001      	movcc	r0, #1
  409c64:	2000      	movcs	r0, #0
  409c66:	f85d fb08 	ldr.w	pc, [sp], #8
  409c6a:	bf00      	nop

00409c6c <__aeabi_dcmple>:
  409c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c70:	f7ff ffe0 	bl	409c34 <__aeabi_cdcmpeq>
  409c74:	bf94      	ite	ls
  409c76:	2001      	movls	r0, #1
  409c78:	2000      	movhi	r0, #0
  409c7a:	f85d fb08 	ldr.w	pc, [sp], #8
  409c7e:	bf00      	nop

00409c80 <__aeabi_dcmpge>:
  409c80:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c84:	f7ff ffce 	bl	409c24 <__aeabi_cdrcmple>
  409c88:	bf94      	ite	ls
  409c8a:	2001      	movls	r0, #1
  409c8c:	2000      	movhi	r0, #0
  409c8e:	f85d fb08 	ldr.w	pc, [sp], #8
  409c92:	bf00      	nop

00409c94 <__aeabi_dcmpgt>:
  409c94:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c98:	f7ff ffc4 	bl	409c24 <__aeabi_cdrcmple>
  409c9c:	bf34      	ite	cc
  409c9e:	2001      	movcc	r0, #1
  409ca0:	2000      	movcs	r0, #0
  409ca2:	f85d fb08 	ldr.w	pc, [sp], #8
  409ca6:	bf00      	nop

00409ca8 <__aeabi_dcmpun>:
  409ca8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409cac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409cb0:	d102      	bne.n	409cb8 <__aeabi_dcmpun+0x10>
  409cb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409cb6:	d10a      	bne.n	409cce <__aeabi_dcmpun+0x26>
  409cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409cc0:	d102      	bne.n	409cc8 <__aeabi_dcmpun+0x20>
  409cc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409cc6:	d102      	bne.n	409cce <__aeabi_dcmpun+0x26>
  409cc8:	f04f 0000 	mov.w	r0, #0
  409ccc:	4770      	bx	lr
  409cce:	f04f 0001 	mov.w	r0, #1
  409cd2:	4770      	bx	lr

00409cd4 <__aeabi_uldivmod>:
  409cd4:	b953      	cbnz	r3, 409cec <__aeabi_uldivmod+0x18>
  409cd6:	b94a      	cbnz	r2, 409cec <__aeabi_uldivmod+0x18>
  409cd8:	2900      	cmp	r1, #0
  409cda:	bf08      	it	eq
  409cdc:	2800      	cmpeq	r0, #0
  409cde:	bf1c      	itt	ne
  409ce0:	f04f 31ff 	movne.w	r1, #4294967295
  409ce4:	f04f 30ff 	movne.w	r0, #4294967295
  409ce8:	f000 b97a 	b.w	409fe0 <__aeabi_idiv0>
  409cec:	f1ad 0c08 	sub.w	ip, sp, #8
  409cf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409cf4:	f000 f806 	bl	409d04 <__udivmoddi4>
  409cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
  409cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409d00:	b004      	add	sp, #16
  409d02:	4770      	bx	lr

00409d04 <__udivmoddi4>:
  409d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409d08:	468c      	mov	ip, r1
  409d0a:	460d      	mov	r5, r1
  409d0c:	4604      	mov	r4, r0
  409d0e:	9e08      	ldr	r6, [sp, #32]
  409d10:	2b00      	cmp	r3, #0
  409d12:	d151      	bne.n	409db8 <__udivmoddi4+0xb4>
  409d14:	428a      	cmp	r2, r1
  409d16:	4617      	mov	r7, r2
  409d18:	d96d      	bls.n	409df6 <__udivmoddi4+0xf2>
  409d1a:	fab2 fe82 	clz	lr, r2
  409d1e:	f1be 0f00 	cmp.w	lr, #0
  409d22:	d00b      	beq.n	409d3c <__udivmoddi4+0x38>
  409d24:	f1ce 0c20 	rsb	ip, lr, #32
  409d28:	fa01 f50e 	lsl.w	r5, r1, lr
  409d2c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409d30:	fa02 f70e 	lsl.w	r7, r2, lr
  409d34:	ea4c 0c05 	orr.w	ip, ip, r5
  409d38:	fa00 f40e 	lsl.w	r4, r0, lr
  409d3c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409d40:	0c25      	lsrs	r5, r4, #16
  409d42:	fbbc f8fa 	udiv	r8, ip, sl
  409d46:	fa1f f987 	uxth.w	r9, r7
  409d4a:	fb0a cc18 	mls	ip, sl, r8, ip
  409d4e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409d52:	fb08 f309 	mul.w	r3, r8, r9
  409d56:	42ab      	cmp	r3, r5
  409d58:	d90a      	bls.n	409d70 <__udivmoddi4+0x6c>
  409d5a:	19ed      	adds	r5, r5, r7
  409d5c:	f108 32ff 	add.w	r2, r8, #4294967295
  409d60:	f080 8123 	bcs.w	409faa <__udivmoddi4+0x2a6>
  409d64:	42ab      	cmp	r3, r5
  409d66:	f240 8120 	bls.w	409faa <__udivmoddi4+0x2a6>
  409d6a:	f1a8 0802 	sub.w	r8, r8, #2
  409d6e:	443d      	add	r5, r7
  409d70:	1aed      	subs	r5, r5, r3
  409d72:	b2a4      	uxth	r4, r4
  409d74:	fbb5 f0fa 	udiv	r0, r5, sl
  409d78:	fb0a 5510 	mls	r5, sl, r0, r5
  409d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409d80:	fb00 f909 	mul.w	r9, r0, r9
  409d84:	45a1      	cmp	r9, r4
  409d86:	d909      	bls.n	409d9c <__udivmoddi4+0x98>
  409d88:	19e4      	adds	r4, r4, r7
  409d8a:	f100 33ff 	add.w	r3, r0, #4294967295
  409d8e:	f080 810a 	bcs.w	409fa6 <__udivmoddi4+0x2a2>
  409d92:	45a1      	cmp	r9, r4
  409d94:	f240 8107 	bls.w	409fa6 <__udivmoddi4+0x2a2>
  409d98:	3802      	subs	r0, #2
  409d9a:	443c      	add	r4, r7
  409d9c:	eba4 0409 	sub.w	r4, r4, r9
  409da0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409da4:	2100      	movs	r1, #0
  409da6:	2e00      	cmp	r6, #0
  409da8:	d061      	beq.n	409e6e <__udivmoddi4+0x16a>
  409daa:	fa24 f40e 	lsr.w	r4, r4, lr
  409dae:	2300      	movs	r3, #0
  409db0:	6034      	str	r4, [r6, #0]
  409db2:	6073      	str	r3, [r6, #4]
  409db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409db8:	428b      	cmp	r3, r1
  409dba:	d907      	bls.n	409dcc <__udivmoddi4+0xc8>
  409dbc:	2e00      	cmp	r6, #0
  409dbe:	d054      	beq.n	409e6a <__udivmoddi4+0x166>
  409dc0:	2100      	movs	r1, #0
  409dc2:	e886 0021 	stmia.w	r6, {r0, r5}
  409dc6:	4608      	mov	r0, r1
  409dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409dcc:	fab3 f183 	clz	r1, r3
  409dd0:	2900      	cmp	r1, #0
  409dd2:	f040 808e 	bne.w	409ef2 <__udivmoddi4+0x1ee>
  409dd6:	42ab      	cmp	r3, r5
  409dd8:	d302      	bcc.n	409de0 <__udivmoddi4+0xdc>
  409dda:	4282      	cmp	r2, r0
  409ddc:	f200 80fa 	bhi.w	409fd4 <__udivmoddi4+0x2d0>
  409de0:	1a84      	subs	r4, r0, r2
  409de2:	eb65 0503 	sbc.w	r5, r5, r3
  409de6:	2001      	movs	r0, #1
  409de8:	46ac      	mov	ip, r5
  409dea:	2e00      	cmp	r6, #0
  409dec:	d03f      	beq.n	409e6e <__udivmoddi4+0x16a>
  409dee:	e886 1010 	stmia.w	r6, {r4, ip}
  409df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409df6:	b912      	cbnz	r2, 409dfe <__udivmoddi4+0xfa>
  409df8:	2701      	movs	r7, #1
  409dfa:	fbb7 f7f2 	udiv	r7, r7, r2
  409dfe:	fab7 fe87 	clz	lr, r7
  409e02:	f1be 0f00 	cmp.w	lr, #0
  409e06:	d134      	bne.n	409e72 <__udivmoddi4+0x16e>
  409e08:	1beb      	subs	r3, r5, r7
  409e0a:	0c3a      	lsrs	r2, r7, #16
  409e0c:	fa1f fc87 	uxth.w	ip, r7
  409e10:	2101      	movs	r1, #1
  409e12:	fbb3 f8f2 	udiv	r8, r3, r2
  409e16:	0c25      	lsrs	r5, r4, #16
  409e18:	fb02 3318 	mls	r3, r2, r8, r3
  409e1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409e20:	fb0c f308 	mul.w	r3, ip, r8
  409e24:	42ab      	cmp	r3, r5
  409e26:	d907      	bls.n	409e38 <__udivmoddi4+0x134>
  409e28:	19ed      	adds	r5, r5, r7
  409e2a:	f108 30ff 	add.w	r0, r8, #4294967295
  409e2e:	d202      	bcs.n	409e36 <__udivmoddi4+0x132>
  409e30:	42ab      	cmp	r3, r5
  409e32:	f200 80d1 	bhi.w	409fd8 <__udivmoddi4+0x2d4>
  409e36:	4680      	mov	r8, r0
  409e38:	1aed      	subs	r5, r5, r3
  409e3a:	b2a3      	uxth	r3, r4
  409e3c:	fbb5 f0f2 	udiv	r0, r5, r2
  409e40:	fb02 5510 	mls	r5, r2, r0, r5
  409e44:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409e48:	fb0c fc00 	mul.w	ip, ip, r0
  409e4c:	45a4      	cmp	ip, r4
  409e4e:	d907      	bls.n	409e60 <__udivmoddi4+0x15c>
  409e50:	19e4      	adds	r4, r4, r7
  409e52:	f100 33ff 	add.w	r3, r0, #4294967295
  409e56:	d202      	bcs.n	409e5e <__udivmoddi4+0x15a>
  409e58:	45a4      	cmp	ip, r4
  409e5a:	f200 80b8 	bhi.w	409fce <__udivmoddi4+0x2ca>
  409e5e:	4618      	mov	r0, r3
  409e60:	eba4 040c 	sub.w	r4, r4, ip
  409e64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409e68:	e79d      	b.n	409da6 <__udivmoddi4+0xa2>
  409e6a:	4631      	mov	r1, r6
  409e6c:	4630      	mov	r0, r6
  409e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e72:	f1ce 0420 	rsb	r4, lr, #32
  409e76:	fa05 f30e 	lsl.w	r3, r5, lr
  409e7a:	fa07 f70e 	lsl.w	r7, r7, lr
  409e7e:	fa20 f804 	lsr.w	r8, r0, r4
  409e82:	0c3a      	lsrs	r2, r7, #16
  409e84:	fa25 f404 	lsr.w	r4, r5, r4
  409e88:	ea48 0803 	orr.w	r8, r8, r3
  409e8c:	fbb4 f1f2 	udiv	r1, r4, r2
  409e90:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409e94:	fb02 4411 	mls	r4, r2, r1, r4
  409e98:	fa1f fc87 	uxth.w	ip, r7
  409e9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409ea0:	fb01 f30c 	mul.w	r3, r1, ip
  409ea4:	42ab      	cmp	r3, r5
  409ea6:	fa00 f40e 	lsl.w	r4, r0, lr
  409eaa:	d909      	bls.n	409ec0 <__udivmoddi4+0x1bc>
  409eac:	19ed      	adds	r5, r5, r7
  409eae:	f101 30ff 	add.w	r0, r1, #4294967295
  409eb2:	f080 808a 	bcs.w	409fca <__udivmoddi4+0x2c6>
  409eb6:	42ab      	cmp	r3, r5
  409eb8:	f240 8087 	bls.w	409fca <__udivmoddi4+0x2c6>
  409ebc:	3902      	subs	r1, #2
  409ebe:	443d      	add	r5, r7
  409ec0:	1aeb      	subs	r3, r5, r3
  409ec2:	fa1f f588 	uxth.w	r5, r8
  409ec6:	fbb3 f0f2 	udiv	r0, r3, r2
  409eca:	fb02 3310 	mls	r3, r2, r0, r3
  409ece:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409ed2:	fb00 f30c 	mul.w	r3, r0, ip
  409ed6:	42ab      	cmp	r3, r5
  409ed8:	d907      	bls.n	409eea <__udivmoddi4+0x1e6>
  409eda:	19ed      	adds	r5, r5, r7
  409edc:	f100 38ff 	add.w	r8, r0, #4294967295
  409ee0:	d26f      	bcs.n	409fc2 <__udivmoddi4+0x2be>
  409ee2:	42ab      	cmp	r3, r5
  409ee4:	d96d      	bls.n	409fc2 <__udivmoddi4+0x2be>
  409ee6:	3802      	subs	r0, #2
  409ee8:	443d      	add	r5, r7
  409eea:	1aeb      	subs	r3, r5, r3
  409eec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409ef0:	e78f      	b.n	409e12 <__udivmoddi4+0x10e>
  409ef2:	f1c1 0720 	rsb	r7, r1, #32
  409ef6:	fa22 f807 	lsr.w	r8, r2, r7
  409efa:	408b      	lsls	r3, r1
  409efc:	fa05 f401 	lsl.w	r4, r5, r1
  409f00:	ea48 0303 	orr.w	r3, r8, r3
  409f04:	fa20 fe07 	lsr.w	lr, r0, r7
  409f08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409f0c:	40fd      	lsrs	r5, r7
  409f0e:	ea4e 0e04 	orr.w	lr, lr, r4
  409f12:	fbb5 f9fc 	udiv	r9, r5, ip
  409f16:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409f1a:	fb0c 5519 	mls	r5, ip, r9, r5
  409f1e:	fa1f f883 	uxth.w	r8, r3
  409f22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409f26:	fb09 f408 	mul.w	r4, r9, r8
  409f2a:	42ac      	cmp	r4, r5
  409f2c:	fa02 f201 	lsl.w	r2, r2, r1
  409f30:	fa00 fa01 	lsl.w	sl, r0, r1
  409f34:	d908      	bls.n	409f48 <__udivmoddi4+0x244>
  409f36:	18ed      	adds	r5, r5, r3
  409f38:	f109 30ff 	add.w	r0, r9, #4294967295
  409f3c:	d243      	bcs.n	409fc6 <__udivmoddi4+0x2c2>
  409f3e:	42ac      	cmp	r4, r5
  409f40:	d941      	bls.n	409fc6 <__udivmoddi4+0x2c2>
  409f42:	f1a9 0902 	sub.w	r9, r9, #2
  409f46:	441d      	add	r5, r3
  409f48:	1b2d      	subs	r5, r5, r4
  409f4a:	fa1f fe8e 	uxth.w	lr, lr
  409f4e:	fbb5 f0fc 	udiv	r0, r5, ip
  409f52:	fb0c 5510 	mls	r5, ip, r0, r5
  409f56:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409f5a:	fb00 f808 	mul.w	r8, r0, r8
  409f5e:	45a0      	cmp	r8, r4
  409f60:	d907      	bls.n	409f72 <__udivmoddi4+0x26e>
  409f62:	18e4      	adds	r4, r4, r3
  409f64:	f100 35ff 	add.w	r5, r0, #4294967295
  409f68:	d229      	bcs.n	409fbe <__udivmoddi4+0x2ba>
  409f6a:	45a0      	cmp	r8, r4
  409f6c:	d927      	bls.n	409fbe <__udivmoddi4+0x2ba>
  409f6e:	3802      	subs	r0, #2
  409f70:	441c      	add	r4, r3
  409f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409f76:	eba4 0408 	sub.w	r4, r4, r8
  409f7a:	fba0 8902 	umull	r8, r9, r0, r2
  409f7e:	454c      	cmp	r4, r9
  409f80:	46c6      	mov	lr, r8
  409f82:	464d      	mov	r5, r9
  409f84:	d315      	bcc.n	409fb2 <__udivmoddi4+0x2ae>
  409f86:	d012      	beq.n	409fae <__udivmoddi4+0x2aa>
  409f88:	b156      	cbz	r6, 409fa0 <__udivmoddi4+0x29c>
  409f8a:	ebba 030e 	subs.w	r3, sl, lr
  409f8e:	eb64 0405 	sbc.w	r4, r4, r5
  409f92:	fa04 f707 	lsl.w	r7, r4, r7
  409f96:	40cb      	lsrs	r3, r1
  409f98:	431f      	orrs	r7, r3
  409f9a:	40cc      	lsrs	r4, r1
  409f9c:	6037      	str	r7, [r6, #0]
  409f9e:	6074      	str	r4, [r6, #4]
  409fa0:	2100      	movs	r1, #0
  409fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fa6:	4618      	mov	r0, r3
  409fa8:	e6f8      	b.n	409d9c <__udivmoddi4+0x98>
  409faa:	4690      	mov	r8, r2
  409fac:	e6e0      	b.n	409d70 <__udivmoddi4+0x6c>
  409fae:	45c2      	cmp	sl, r8
  409fb0:	d2ea      	bcs.n	409f88 <__udivmoddi4+0x284>
  409fb2:	ebb8 0e02 	subs.w	lr, r8, r2
  409fb6:	eb69 0503 	sbc.w	r5, r9, r3
  409fba:	3801      	subs	r0, #1
  409fbc:	e7e4      	b.n	409f88 <__udivmoddi4+0x284>
  409fbe:	4628      	mov	r0, r5
  409fc0:	e7d7      	b.n	409f72 <__udivmoddi4+0x26e>
  409fc2:	4640      	mov	r0, r8
  409fc4:	e791      	b.n	409eea <__udivmoddi4+0x1e6>
  409fc6:	4681      	mov	r9, r0
  409fc8:	e7be      	b.n	409f48 <__udivmoddi4+0x244>
  409fca:	4601      	mov	r1, r0
  409fcc:	e778      	b.n	409ec0 <__udivmoddi4+0x1bc>
  409fce:	3802      	subs	r0, #2
  409fd0:	443c      	add	r4, r7
  409fd2:	e745      	b.n	409e60 <__udivmoddi4+0x15c>
  409fd4:	4608      	mov	r0, r1
  409fd6:	e708      	b.n	409dea <__udivmoddi4+0xe6>
  409fd8:	f1a8 0802 	sub.w	r8, r8, #2
  409fdc:	443d      	add	r5, r7
  409fde:	e72b      	b.n	409e38 <__udivmoddi4+0x134>

00409fe0 <__aeabi_idiv0>:
  409fe0:	4770      	bx	lr
  409fe2:	bf00      	nop
  409fe4:	454c4449 	.word	0x454c4449
  409fe8:	00000000 	.word	0x00000000
  409fec:	51726d54 	.word	0x51726d54
  409ff0:	00000000 	.word	0x00000000
  409ff4:	20726d54 	.word	0x20726d54
  409ff8:	00637653 	.word	0x00637653
  409ffc:	42424c41 	.word	0x42424c41
  40a000:	42424242 	.word	0x42424242
  40a004:	42424242 	.word	0x42424242
  40a008:	42424242 	.word	0x42424242
  40a00c:	00454d52 	.word	0x00454d52
  40a010:	252f6425 	.word	0x252f6425
  40a014:	64252f64 	.word	0x64252f64
  40a018:	25202d20 	.word	0x25202d20
  40a01c:	3a643230 	.word	0x3a643230
  40a020:	64323025 	.word	0x64323025
  40a024:	3230253a 	.word	0x3230253a
  40a028:	00000064 	.word	0x00000064
  40a02c:	34306368 	.word	0x34306368
  40a030:	0000415f 	.word	0x0000415f
  40a034:	6c696146 	.word	0x6c696146
  40a038:	74206465 	.word	0x74206465
  40a03c:	7263206f 	.word	0x7263206f
  40a040:	65746165 	.word	0x65746165
  40a044:	72615520 	.word	0x72615520
  40a048:	20785474 	.word	0x20785474
  40a04c:	6b736174 	.word	0x6b736174
  40a050:	00000a0d 	.word	0x00000a0d
  40a054:	6c636963 	.word	0x6c636963
  40a058:	00007365 	.word	0x00007365
  40a05c:	656d6974 	.word	0x656d6974
  40a060:	00000072 	.word	0x00000072
  40a064:	656d6974 	.word	0x656d6974
  40a068:	00003272 	.word	0x00003272
  40a06c:	63656661 	.word	0x63656661
  40a070:	00000000 	.word	0x00000000
  40a074:	61746164 	.word	0x61746164
  40a078:	00000000 	.word	0x00000000
  40a07c:	2d2d2d2d 	.word	0x2d2d2d2d
  40a080:	2d2d2d2d 	.word	0x2d2d2d2d
  40a084:	2d2d2d2d 	.word	0x2d2d2d2d
  40a088:	2d2d2d2d 	.word	0x2d2d2d2d
  40a08c:	2d2d2d2d 	.word	0x2d2d2d2d
  40a090:	2d2d2d2d 	.word	0x2d2d2d2d
  40a094:	002d2d2d 	.word	0x002d2d2d
  40a098:	3a44490a 	.word	0x3a44490a
  40a09c:	20642520 	.word	0x20642520
  40a0a0:	00000009 	.word	0x00000009
  40a0a4:	554c4156 	.word	0x554c4156
  40a0a8:	25203a45 	.word	0x25203a45
  40a0ac:	000a2064 	.word	0x000a2064
  40a0b0:	454d4954 	.word	0x454d4954
  40a0b4:	7325203a 	.word	0x7325203a
  40a0b8:	00000a20 	.word	0x00000a20
  40a0bc:	63617473 	.word	0x63617473
  40a0c0:	766f206b 	.word	0x766f206b
  40a0c4:	6c667265 	.word	0x6c667265
  40a0c8:	2520776f 	.word	0x2520776f
  40a0cc:	73252078 	.word	0x73252078
  40a0d0:	00000a0d 	.word	0x00000a0d

0040a0d4 <_global_impure_ptr>:
  40a0d4:	20400018 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40a0e4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a0f4:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a104:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a114:	0000296c 00000030                       l)..0...

0040a11c <blanks.7223>:
  40a11c:	20202020 20202020 20202020 20202020                     

0040a12c <zeroes.7224>:
  40a12c:	30303030 30303030 30303030 30303030     0000000000000000

0040a13c <blanks.7217>:
  40a13c:	20202020 20202020 20202020 20202020                     

0040a14c <zeroes.7218>:
  40a14c:	30303030 30303030 30303030 30303030     0000000000000000
  40a15c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a16c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40a17c:	00000000                                ....

0040a180 <__mprec_bigtens>:
  40a180:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a190:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a1a0:	7f73bf3c 75154fdd                       <.s..O.u

0040a1a8 <__mprec_tens>:
  40a1a8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a1b8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a1c8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a1d8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a1e8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a1f8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a208:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a218:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a228:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a238:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a248:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a258:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a268:	79d99db4 44ea7843                       ...yCx.D

0040a270 <p05.6055>:
  40a270:	00000005 00000019 0000007d              ........}...

0040a27c <_ctype_>:
  40a27c:	20202000 20202020 28282020 20282828     .         ((((( 
  40a28c:	20202020 20202020 20202020 20202020                     
  40a29c:	10108820 10101010 10101010 10101010      ...............
  40a2ac:	04040410 04040404 10040404 10101010     ................
  40a2bc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a2cc:	01010101 01010101 01010101 10101010     ................
  40a2dc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a2ec:	02020202 02020202 02020202 10101010     ................
  40a2fc:	00000020 00000000 00000000 00000000      ...............
	...

0040a380 <_init>:
  40a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a382:	bf00      	nop
  40a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a386:	bc08      	pop	{r3}
  40a388:	469e      	mov	lr, r3
  40a38a:	4770      	bx	lr

0040a38c <__init_array_start>:
  40a38c:	00407115 	.word	0x00407115

0040a390 <__frame_dummy_init_array_entry>:
  40a390:	00400165                                e.@.

0040a394 <_fini>:
  40a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a396:	bf00      	nop
  40a398:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a39a:	bc08      	pop	{r3}
  40a39c:	469e      	mov	lr, r3
  40a39e:	4770      	bx	lr

0040a3a0 <__fini_array_start>:
  40a3a0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0cec 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	98a1 0040 8b39 0040 0000 0000 a27c 0040     ..@.9.@.....|.@.
20400944:	a178 0040 9fe8 0040 9fe8 0040 9fe8 0040     x.@...@...@...@.
20400954:	9fe8 0040 9fe8 0040 9fe8 0040 9fe8 0040     ..@...@...@...@.
20400964:	9fe8 0040 9fe8 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
