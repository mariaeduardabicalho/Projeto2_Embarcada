
RTOS_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007090  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407090  00407090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00407098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000334  204009c0  00407a58  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400cf4  00407d8c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402cf8  00409d90  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00022e86  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000479c  00000000  00000000  000438cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009d4c  00000000  00000000  00048069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001008  00000000  00000000  00051db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011a8  00000000  00000000  00052dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022dbd  00000000  00000000  00053f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000126c2  00000000  00000000  00076d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094bf4  00000000  00000000  000893e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000342c  00000000  00000000  0011dfd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 2c 40 20 39 0d 40 00 37 0d 40 00 37 0d 40 00     .,@ 9.@.7.@.7.@.
  400010:	37 0d 40 00 37 0d 40 00 37 0d 40 00 00 00 00 00     7.@.7.@.7.@.....
	...
  40002c:	11 11 40 00 37 0d 40 00 00 00 00 00 b1 11 40 00     ..@.7.@.......@.
  40003c:	19 12 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     ..@.7.@.7.@.7.@.
  40004c:	37 0d 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     7.@.7.@.7.@.7.@.
  40005c:	37 0d 40 00 37 0d 40 00 00 00 00 00 e5 09 40 00     7.@.7.@.......@.
  40006c:	f9 09 40 00 0d 0a 40 00 37 0d 40 00 37 0d 40 00     ..@...@.7.@.7.@.
  40007c:	37 0d 40 00 21 0a 40 00 35 0a 40 00 37 0d 40 00     7.@.!.@.5.@.7.@.
  40008c:	37 0d 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     7.@.7.@.7.@.7.@.
  40009c:	61 31 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     a1@.7.@.7.@.7.@.
  4000ac:	37 0d 40 00 37 0d 40 00 b5 06 40 00 37 0d 40 00     7.@.7.@...@.7.@.
  4000bc:	37 0d 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     7.@.7.@.7.@.7.@.
  4000cc:	37 0d 40 00 00 00 00 00 37 0d 40 00 00 00 00 00     7.@.....7.@.....
  4000dc:	37 0d 40 00 c9 06 40 00 37 0d 40 00 37 0d 40 00     7.@...@.7.@.7.@.
  4000ec:	37 0d 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     7.@.7.@.7.@.7.@.
  4000fc:	37 0d 40 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     7.@.7.@.7.@.7.@.
  40010c:	37 0d 40 00 37 0d 40 00 00 00 00 00 00 00 00 00     7.@.7.@.........
  40011c:	00 00 00 00 37 0d 40 00 37 0d 40 00 37 0d 40 00     ....7.@.7.@.7.@.
  40012c:	37 0d 40 00 37 0d 40 00 00 00 00 00 37 0d 40 00     7.@.7.@.....7.@.
  40013c:	37 0d 40 00                                         7.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	00407098 	.word	0x00407098

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407098 	.word	0x00407098
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	00407098 	.word	0x00407098
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400f0d 	.word	0x00400f0d
  4001f8:	00400ae5 	.word	0x00400ae5
  4001fc:	00400b39 	.word	0x00400b39
  400200:	00400b49 	.word	0x00400b49
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400b59 	.word	0x00400b59
  400210:	00400a49 	.word	0x00400a49
  400214:	00400a81 	.word	0x00400a81
  400218:	00400e01 	.word	0x00400e01

0040021c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400220:	b980      	cbnz	r0, 400244 <_read+0x28>
  400222:	460c      	mov	r4, r1
  400224:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400226:	2a00      	cmp	r2, #0
  400228:	dd0f      	ble.n	40024a <_read+0x2e>
  40022a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40022c:	4e08      	ldr	r6, [pc, #32]	; (400250 <_read+0x34>)
  40022e:	4d09      	ldr	r5, [pc, #36]	; (400254 <_read+0x38>)
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	4621      	mov	r1, r4
  400234:	682b      	ldr	r3, [r5, #0]
  400236:	4798      	blx	r3
		ptr++;
  400238:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40023a:	42bc      	cmp	r4, r7
  40023c:	d1f8      	bne.n	400230 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40023e:	4640      	mov	r0, r8
  400240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400244:	f04f 38ff 	mov.w	r8, #4294967295
  400248:	e7f9      	b.n	40023e <_read+0x22>
	for (; len > 0; --len) {
  40024a:	4680      	mov	r8, r0
  40024c:	e7f7      	b.n	40023e <_read+0x22>
  40024e:	bf00      	nop
  400250:	20400be4 	.word	0x20400be4
  400254:	20400bdc 	.word	0x20400bdc

00400258 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400258:	3801      	subs	r0, #1
  40025a:	2802      	cmp	r0, #2
  40025c:	d815      	bhi.n	40028a <_write+0x32>
{
  40025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400262:	460e      	mov	r6, r1
  400264:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400266:	b19a      	cbz	r2, 400290 <_write+0x38>
  400268:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40026a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002a4 <_write+0x4c>
  40026e:	4f0c      	ldr	r7, [pc, #48]	; (4002a0 <_write+0x48>)
  400270:	f8d8 0000 	ldr.w	r0, [r8]
  400274:	f815 1b01 	ldrb.w	r1, [r5], #1
  400278:	683b      	ldr	r3, [r7, #0]
  40027a:	4798      	blx	r3
  40027c:	2800      	cmp	r0, #0
  40027e:	db0a      	blt.n	400296 <_write+0x3e>
  400280:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400282:	3c01      	subs	r4, #1
  400284:	d1f4      	bne.n	400270 <_write+0x18>
  400286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40028a:	f04f 30ff 	mov.w	r0, #4294967295
  40028e:	4770      	bx	lr
	for (; len != 0; --len) {
  400290:	4610      	mov	r0, r2
  400292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400296:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop
  4002a0:	20400be0 	.word	0x20400be0
  4002a4:	20400be4 	.word	0x20400be4

004002a8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002ae:	4b5c      	ldr	r3, [pc, #368]	; (400420 <board_init+0x178>)
  4002b0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002ba:	4b5a      	ldr	r3, [pc, #360]	; (400424 <board_init+0x17c>)
  4002bc:	2200      	movs	r2, #0
  4002be:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002c2:	695a      	ldr	r2, [r3, #20]
  4002c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002c8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002ce:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002d2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002d6:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002da:	f007 0007 	and.w	r0, r7, #7
  4002de:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002e0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002e4:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4002e8:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  4002f0:	f04f 34ff 	mov.w	r4, #4294967295
  4002f4:	fa04 fc00 	lsl.w	ip, r4, r0
  4002f8:	fa06 f000 	lsl.w	r0, r6, r0
  4002fc:	fa04 f40e 	lsl.w	r4, r4, lr
  400300:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400304:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400306:	463a      	mov	r2, r7
  400308:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40030a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40030e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400312:	3a01      	subs	r2, #1
  400314:	4423      	add	r3, r4
  400316:	f1b2 3fff 	cmp.w	r2, #4294967295
  40031a:	d1f6      	bne.n	40030a <board_init+0x62>
        } while(sets--);
  40031c:	3e01      	subs	r6, #1
  40031e:	4460      	add	r0, ip
  400320:	f1b6 3fff 	cmp.w	r6, #4294967295
  400324:	d1ef      	bne.n	400306 <board_init+0x5e>
  400326:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40032a:	4b3e      	ldr	r3, [pc, #248]	; (400424 <board_init+0x17c>)
  40032c:	695a      	ldr	r2, [r3, #20]
  40032e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400332:	615a      	str	r2, [r3, #20]
  400334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400338:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40033c:	4a3a      	ldr	r2, [pc, #232]	; (400428 <board_init+0x180>)
  40033e:	493b      	ldr	r1, [pc, #236]	; (40042c <board_init+0x184>)
  400340:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400342:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400346:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40034c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400350:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400354:	f022 0201 	bic.w	r2, r2, #1
  400358:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40035c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400360:	f022 0201 	bic.w	r2, r2, #1
  400364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40036c:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400370:	200a      	movs	r0, #10
  400372:	4c2f      	ldr	r4, [pc, #188]	; (400430 <board_init+0x188>)
  400374:	47a0      	blx	r4
  400376:	200b      	movs	r0, #11
  400378:	47a0      	blx	r4
  40037a:	200c      	movs	r0, #12
  40037c:	47a0      	blx	r4
  40037e:	2010      	movs	r0, #16
  400380:	47a0      	blx	r4
  400382:	2011      	movs	r0, #17
  400384:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400386:	4b2b      	ldr	r3, [pc, #172]	; (400434 <board_init+0x18c>)
  400388:	f44f 7280 	mov.w	r2, #256	; 0x100
  40038c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40038e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400392:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400394:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400398:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40039c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40039e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003a2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003aa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003ba:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003be:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003d0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003e0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003ec:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ee:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003f0:	4a11      	ldr	r2, [pc, #68]	; (400438 <board_init+0x190>)
  4003f2:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003f6:	f043 0310 	orr.w	r3, r3, #16
  4003fa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003fe:	4b0f      	ldr	r3, [pc, #60]	; (40043c <board_init+0x194>)
  400400:	2210      	movs	r2, #16
  400402:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400408:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40040a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40040c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400410:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400412:	4311      	orrs	r1, r2
  400414:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400416:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400418:	4311      	orrs	r1, r2
  40041a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041c:	605a      	str	r2, [r3, #4]
  40041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400420:	400e1850 	.word	0x400e1850
  400424:	e000ed00 	.word	0xe000ed00
  400428:	400e0c00 	.word	0x400e0c00
  40042c:	5a00080c 	.word	0x5a00080c
  400430:	00400b69 	.word	0x00400b69
  400434:	400e1200 	.word	0x400e1200
  400438:	40088000 	.word	0x40088000
  40043c:	400e1000 	.word	0x400e1000

00400440 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400440:	b570      	push	{r4, r5, r6, lr}
  400442:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400444:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400446:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400448:	4013      	ands	r3, r2
  40044a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40044c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40044e:	4e1c      	ldr	r6, [pc, #112]	; (4004c0 <afec_process_callback+0x80>)
  400450:	4d1c      	ldr	r5, [pc, #112]	; (4004c4 <afec_process_callback+0x84>)
  400452:	42a8      	cmp	r0, r5
  400454:	bf14      	ite	ne
  400456:	2000      	movne	r0, #0
  400458:	2001      	moveq	r0, #1
  40045a:	0105      	lsls	r5, r0, #4
  40045c:	e00b      	b.n	400476 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40045e:	2c0e      	cmp	r4, #14
  400460:	d81e      	bhi.n	4004a0 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400462:	9a01      	ldr	r2, [sp, #4]
  400464:	f104 010c 	add.w	r1, r4, #12
  400468:	2301      	movs	r3, #1
  40046a:	408b      	lsls	r3, r1
  40046c:	4213      	tst	r3, r2
  40046e:	d110      	bne.n	400492 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400470:	3401      	adds	r4, #1
  400472:	2c10      	cmp	r4, #16
  400474:	d022      	beq.n	4004bc <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400476:	2c0b      	cmp	r4, #11
  400478:	d8f1      	bhi.n	40045e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40047a:	9a01      	ldr	r2, [sp, #4]
  40047c:	2301      	movs	r3, #1
  40047e:	40a3      	lsls	r3, r4
  400480:	4213      	tst	r3, r2
  400482:	d0f5      	beq.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400484:	192b      	adds	r3, r5, r4
  400486:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40048a:	2b00      	cmp	r3, #0
  40048c:	d0f0      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40048e:	4798      	blx	r3
  400490:	e7ee      	b.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400492:	192b      	adds	r3, r5, r4
  400494:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400498:	2b00      	cmp	r3, #0
  40049a:	d0e9      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40049c:	4798      	blx	r3
  40049e:	e7e7      	b.n	400470 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4004a0:	9a01      	ldr	r2, [sp, #4]
  4004a2:	f104 010f 	add.w	r1, r4, #15
  4004a6:	2301      	movs	r3, #1
  4004a8:	408b      	lsls	r3, r1
  4004aa:	4213      	tst	r3, r2
  4004ac:	d0e0      	beq.n	400470 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4004ae:	192b      	adds	r3, r5, r4
  4004b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4004b4:	2b00      	cmp	r3, #0
  4004b6:	d0db      	beq.n	400470 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4004b8:	4798      	blx	r3
  4004ba:	e7d9      	b.n	400470 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4004bc:	b002      	add	sp, #8
  4004be:	bd70      	pop	{r4, r5, r6, pc}
  4004c0:	20400be8 	.word	0x20400be8
  4004c4:	40064000 	.word	0x40064000

004004c8 <afec_ch_set_config>:
{
  4004c8:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4004ca:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4004cc:	2301      	movs	r3, #1
  4004ce:	408b      	lsls	r3, r1
  4004d0:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4004d4:	7815      	ldrb	r5, [r2, #0]
  4004d6:	2d00      	cmp	r5, #0
  4004d8:	bf08      	it	eq
  4004da:	2300      	moveq	r3, #0
  4004dc:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4004de:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4004e0:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4004e2:	004b      	lsls	r3, r1, #1
  4004e4:	2103      	movs	r1, #3
  4004e6:	4099      	lsls	r1, r3
  4004e8:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4004ec:	7851      	ldrb	r1, [r2, #1]
  4004ee:	4099      	lsls	r1, r3
  4004f0:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4004f2:	6541      	str	r1, [r0, #84]	; 0x54
}
  4004f4:	bc30      	pop	{r4, r5}
  4004f6:	4770      	bx	lr

004004f8 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4004f8:	784b      	ldrb	r3, [r1, #1]
  4004fa:	780a      	ldrb	r2, [r1, #0]
  4004fc:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4004fe:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400500:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400502:	884b      	ldrh	r3, [r1, #2]
  400504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400508:	6743      	str	r3, [r0, #116]	; 0x74
  40050a:	4770      	bx	lr

0040050c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  40050c:	2200      	movs	r2, #0
  40050e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400510:	4b08      	ldr	r3, [pc, #32]	; (400534 <afec_get_config_defaults+0x28>)
  400512:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400514:	4b08      	ldr	r3, [pc, #32]	; (400538 <afec_get_config_defaults+0x2c>)
  400516:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40051c:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40051e:	2302      	movs	r3, #2
  400520:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  400522:	2301      	movs	r3, #1
  400524:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400526:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400528:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  40052a:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  40052c:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40052e:	7583      	strb	r3, [r0, #22]
  400530:	4770      	bx	lr
  400532:	bf00      	nop
  400534:	11e1a300 	.word	0x11e1a300
  400538:	005b8d80 	.word	0x005b8d80

0040053c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  40053c:	2300      	movs	r3, #0
  40053e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400540:	2301      	movs	r3, #1
  400542:	7043      	strb	r3, [r0, #1]
  400544:	4770      	bx	lr

00400546 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  400546:	2300      	movs	r3, #0
  400548:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  40054a:	2320      	movs	r3, #32
  40054c:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  40054e:	23ff      	movs	r3, #255	; 0xff
  400550:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400552:	f640 73ff 	movw	r3, #4095	; 0xfff
  400556:	8083      	strh	r3, [r0, #4]
  400558:	4770      	bx	lr
	...

0040055c <afec_init>:
	return afec->AFEC_ISR;
  40055c:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40055e:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  400562:	d001      	beq.n	400568 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400564:	2019      	movs	r0, #25
  400566:	4770      	bx	lr
{
  400568:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40056a:	2301      	movs	r3, #1
  40056c:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40056e:	7ccb      	ldrb	r3, [r1, #19]
  400570:	2b00      	cmp	r3, #0
  400572:	bf18      	it	ne
  400574:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400578:	684b      	ldr	r3, [r1, #4]
  40057a:	688c      	ldr	r4, [r1, #8]
  40057c:	fbb3 f3f4 	udiv	r3, r3, r4
  400580:	3b01      	subs	r3, #1
  400582:	021b      	lsls	r3, r3, #8
  400584:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400586:	68cc      	ldr	r4, [r1, #12]
  400588:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  40058c:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  40058e:	7c0c      	ldrb	r4, [r1, #16]
  400590:	0624      	lsls	r4, r4, #24
  400592:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400596:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400598:	7c4c      	ldrb	r4, [r1, #17]
  40059a:	0724      	lsls	r4, r4, #28
  40059c:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4005a0:	4323      	orrs	r3, r4
  4005a2:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  4005a4:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005a6:	7d0b      	ldrb	r3, [r1, #20]
  4005a8:	2b00      	cmp	r3, #0
  4005aa:	bf14      	ite	ne
  4005ac:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4005b0:	2300      	moveq	r3, #0
  4005b2:	680a      	ldr	r2, [r1, #0]
  4005b4:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4005b6:	7d4a      	ldrb	r2, [r1, #21]
  4005b8:	2a00      	cmp	r2, #0
  4005ba:	bf14      	ite	ne
  4005bc:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4005c0:	2200      	moveq	r2, #0
			(config->resolution) |
  4005c2:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4005c4:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4005c6:	7d8b      	ldrb	r3, [r1, #22]
  4005c8:	021b      	lsls	r3, r3, #8
  4005ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4005ce:	f043 030c 	orr.w	r3, r3, #12
  4005d2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4005d6:	4b0f      	ldr	r3, [pc, #60]	; (400614 <afec_init+0xb8>)
  4005d8:	4298      	cmp	r0, r3
  4005da:	d006      	beq.n	4005ea <afec_init+0x8e>
	if(afec == AFEC1) {
  4005dc:	4b0e      	ldr	r3, [pc, #56]	; (400618 <afec_init+0xbc>)
  4005de:	4298      	cmp	r0, r3
  4005e0:	d00d      	beq.n	4005fe <afec_init+0xa2>
	return STATUS_OK;
  4005e2:	2000      	movs	r0, #0
}
  4005e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005e8:	4770      	bx	lr
  4005ea:	4b0c      	ldr	r3, [pc, #48]	; (40061c <afec_init+0xc0>)
  4005ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4005f0:	2200      	movs	r2, #0
  4005f2:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4005f6:	428b      	cmp	r3, r1
  4005f8:	d1fb      	bne.n	4005f2 <afec_init+0x96>
	return STATUS_OK;
  4005fa:	2000      	movs	r0, #0
  4005fc:	e7f2      	b.n	4005e4 <afec_init+0x88>
  4005fe:	4b08      	ldr	r3, [pc, #32]	; (400620 <afec_init+0xc4>)
  400600:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400604:	2200      	movs	r2, #0
  400606:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40060a:	428b      	cmp	r3, r1
  40060c:	d1fb      	bne.n	400606 <afec_init+0xaa>
	return STATUS_OK;
  40060e:	2000      	movs	r0, #0
  400610:	e7e8      	b.n	4005e4 <afec_init+0x88>
  400612:	bf00      	nop
  400614:	4003c000 	.word	0x4003c000
  400618:	40064000 	.word	0x40064000
  40061c:	20400be4 	.word	0x20400be4
  400620:	20400c28 	.word	0x20400c28

00400624 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400624:	4b0c      	ldr	r3, [pc, #48]	; (400658 <afec_enable_interrupt+0x34>)
  400626:	4299      	cmp	r1, r3
  400628:	d007      	beq.n	40063a <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40062a:	290b      	cmp	r1, #11
  40062c:	d80b      	bhi.n	400646 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40062e:	d006      	beq.n	40063e <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400630:	2301      	movs	r3, #1
  400632:	fa03 f101 	lsl.w	r1, r3, r1
  400636:	6241      	str	r1, [r0, #36]	; 0x24
  400638:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  40063a:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  40063c:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40063e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400642:	6243      	str	r3, [r0, #36]	; 0x24
  400644:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  400646:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400648:	bf94      	ite	ls
  40064a:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  40064c:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  40064e:	2301      	movs	r3, #1
  400650:	fa03 f101 	lsl.w	r1, r3, r1
  400654:	6241      	str	r1, [r0, #36]	; 0x24
  400656:	4770      	bx	lr
  400658:	47000fff 	.word	0x47000fff

0040065c <afec_set_callback>:
{
  40065c:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  40065e:	4c11      	ldr	r4, [pc, #68]	; (4006a4 <afec_set_callback+0x48>)
  400660:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  400662:	bf0c      	ite	eq
  400664:	2410      	moveq	r4, #16
  400666:	2400      	movne	r4, #0
  400668:	440c      	add	r4, r1
  40066a:	4d0f      	ldr	r5, [pc, #60]	; (4006a8 <afec_set_callback+0x4c>)
  40066c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400670:	d10a      	bne.n	400688 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400672:	4a0e      	ldr	r2, [pc, #56]	; (4006ac <afec_set_callback+0x50>)
  400674:	f44f 7480 	mov.w	r4, #256	; 0x100
  400678:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40067c:	015b      	lsls	r3, r3, #5
  40067e:	b2db      	uxtb	r3, r3
  400680:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400684:	6054      	str	r4, [r2, #4]
  400686:	e009      	b.n	40069c <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400688:	4a08      	ldr	r2, [pc, #32]	; (4006ac <afec_set_callback+0x50>)
  40068a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  40068e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400692:	015b      	lsls	r3, r3, #5
  400694:	b2db      	uxtb	r3, r3
  400696:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40069a:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  40069c:	4b04      	ldr	r3, [pc, #16]	; (4006b0 <afec_set_callback+0x54>)
  40069e:	4798      	blx	r3
  4006a0:	bd38      	pop	{r3, r4, r5, pc}
  4006a2:	bf00      	nop
  4006a4:	40064000 	.word	0x40064000
  4006a8:	20400be8 	.word	0x20400be8
  4006ac:	e000e100 	.word	0xe000e100
  4006b0:	00400625 	.word	0x00400625

004006b4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4006b4:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4006b6:	4802      	ldr	r0, [pc, #8]	; (4006c0 <AFEC0_Handler+0xc>)
  4006b8:	4b02      	ldr	r3, [pc, #8]	; (4006c4 <AFEC0_Handler+0x10>)
  4006ba:	4798      	blx	r3
  4006bc:	bd08      	pop	{r3, pc}
  4006be:	bf00      	nop
  4006c0:	4003c000 	.word	0x4003c000
  4006c4:	00400441 	.word	0x00400441

004006c8 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006c8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4006ca:	4802      	ldr	r0, [pc, #8]	; (4006d4 <AFEC1_Handler+0xc>)
  4006cc:	4b02      	ldr	r3, [pc, #8]	; (4006d8 <AFEC1_Handler+0x10>)
  4006ce:	4798      	blx	r3
  4006d0:	bd08      	pop	{r3, pc}
  4006d2:	bf00      	nop
  4006d4:	40064000 	.word	0x40064000
  4006d8:	00400441 	.word	0x00400441

004006dc <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4006dc:	b500      	push	{lr}
  4006de:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4006e0:	4b13      	ldr	r3, [pc, #76]	; (400730 <afec_enable+0x54>)
  4006e2:	4298      	cmp	r0, r3
  4006e4:	bf0c      	ite	eq
  4006e6:	2028      	moveq	r0, #40	; 0x28
  4006e8:	201d      	movne	r0, #29
  4006ea:	4b12      	ldr	r3, [pc, #72]	; (400734 <afec_enable+0x58>)
  4006ec:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4006ee:	4b12      	ldr	r3, [pc, #72]	; (400738 <afec_enable+0x5c>)
  4006f0:	789b      	ldrb	r3, [r3, #2]
  4006f2:	2bff      	cmp	r3, #255	; 0xff
  4006f4:	d01a      	beq.n	40072c <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006fa:	fab3 f383 	clz	r3, r3
  4006fe:	095b      	lsrs	r3, r3, #5
  400700:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400702:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400704:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400708:	2200      	movs	r2, #0
  40070a:	4b0c      	ldr	r3, [pc, #48]	; (40073c <afec_enable+0x60>)
  40070c:	701a      	strb	r2, [r3, #0]
	return flags;
  40070e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400710:	4a09      	ldr	r2, [pc, #36]	; (400738 <afec_enable+0x5c>)
  400712:	7893      	ldrb	r3, [r2, #2]
  400714:	3301      	adds	r3, #1
  400716:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400718:	b129      	cbz	r1, 400726 <afec_enable+0x4a>
		cpu_irq_enable();
  40071a:	2201      	movs	r2, #1
  40071c:	4b07      	ldr	r3, [pc, #28]	; (40073c <afec_enable+0x60>)
  40071e:	701a      	strb	r2, [r3, #0]
  400720:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400724:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400726:	b003      	add	sp, #12
  400728:	f85d fb04 	ldr.w	pc, [sp], #4
  40072c:	e7fe      	b.n	40072c <afec_enable+0x50>
  40072e:	bf00      	nop
  400730:	40064000 	.word	0x40064000
  400734:	00400b69 	.word	0x00400b69
  400738:	20400bd4 	.word	0x20400bd4
  40073c:	2040000a 	.word	0x2040000a

00400740 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400740:	6301      	str	r1, [r0, #48]	; 0x30
  400742:	4770      	bx	lr

00400744 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400744:	6341      	str	r1, [r0, #52]	; 0x34
  400746:	4770      	bx	lr

00400748 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400748:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40074c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400750:	d105      	bne.n	40075e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400752:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400754:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400756:	bf14      	ite	ne
  400758:	2001      	movne	r0, #1
  40075a:	2000      	moveq	r0, #0
  40075c:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40075e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400760:	e7f8      	b.n	400754 <pio_get+0xc>

00400762 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400762:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400764:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400768:	d03a      	beq.n	4007e0 <pio_set_peripheral+0x7e>
  40076a:	d813      	bhi.n	400794 <pio_set_peripheral+0x32>
  40076c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400770:	d025      	beq.n	4007be <pio_set_peripheral+0x5c>
  400772:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400776:	d10a      	bne.n	40078e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400778:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40077a:	4313      	orrs	r3, r2
  40077c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40077e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400780:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400782:	400b      	ands	r3, r1
  400784:	ea23 0302 	bic.w	r3, r3, r2
  400788:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40078a:	6042      	str	r2, [r0, #4]
  40078c:	4770      	bx	lr
	switch (ul_type) {
  40078e:	2900      	cmp	r1, #0
  400790:	d1fb      	bne.n	40078a <pio_set_peripheral+0x28>
  400792:	4770      	bx	lr
  400794:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400798:	d021      	beq.n	4007de <pio_set_peripheral+0x7c>
  40079a:	d809      	bhi.n	4007b0 <pio_set_peripheral+0x4e>
  40079c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4007a0:	d1f3      	bne.n	40078a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4007a4:	4313      	orrs	r3, r2
  4007a6:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007aa:	4313      	orrs	r3, r2
  4007ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007ae:	e7ec      	b.n	40078a <pio_set_peripheral+0x28>
	switch (ul_type) {
  4007b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4007b4:	d013      	beq.n	4007de <pio_set_peripheral+0x7c>
  4007b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4007ba:	d010      	beq.n	4007de <pio_set_peripheral+0x7c>
  4007bc:	e7e5      	b.n	40078a <pio_set_peripheral+0x28>
{
  4007be:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007c0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007c2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4007c4:	43d3      	mvns	r3, r2
  4007c6:	4021      	ands	r1, r4
  4007c8:	461c      	mov	r4, r3
  4007ca:	4019      	ands	r1, r3
  4007cc:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4007d0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4007d2:	400b      	ands	r3, r1
  4007d4:	4023      	ands	r3, r4
  4007d6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4007d8:	6042      	str	r2, [r0, #4]
}
  4007da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007de:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007e2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4007e4:	400b      	ands	r3, r1
  4007e6:	ea23 0302 	bic.w	r3, r3, r2
  4007ea:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4007ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007ee:	4313      	orrs	r3, r2
  4007f0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4007f2:	e7ca      	b.n	40078a <pio_set_peripheral+0x28>

004007f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4007f4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4007f6:	f012 0f01 	tst.w	r2, #1
  4007fa:	d10d      	bne.n	400818 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4007fc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4007fe:	f012 0f0a 	tst.w	r2, #10
  400802:	d00b      	beq.n	40081c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400804:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400806:	f012 0f02 	tst.w	r2, #2
  40080a:	d109      	bne.n	400820 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40080c:	f012 0f08 	tst.w	r2, #8
  400810:	d008      	beq.n	400824 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400812:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400816:	e005      	b.n	400824 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400818:	6641      	str	r1, [r0, #100]	; 0x64
  40081a:	e7f0      	b.n	4007fe <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40081c:	6241      	str	r1, [r0, #36]	; 0x24
  40081e:	e7f2      	b.n	400806 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400820:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400824:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400826:	6001      	str	r1, [r0, #0]
  400828:	4770      	bx	lr

0040082a <pio_set_output>:
{
  40082a:	b410      	push	{r4}
  40082c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40082e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400830:	b94c      	cbnz	r4, 400846 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400832:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400834:	b14b      	cbz	r3, 40084a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400836:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400838:	b94a      	cbnz	r2, 40084e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40083a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40083c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40083e:	6001      	str	r1, [r0, #0]
}
  400840:	f85d 4b04 	ldr.w	r4, [sp], #4
  400844:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400846:	6641      	str	r1, [r0, #100]	; 0x64
  400848:	e7f4      	b.n	400834 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40084a:	6541      	str	r1, [r0, #84]	; 0x54
  40084c:	e7f4      	b.n	400838 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40084e:	6301      	str	r1, [r0, #48]	; 0x30
  400850:	e7f4      	b.n	40083c <pio_set_output+0x12>
	...

00400854 <pio_configure>:
{
  400854:	b570      	push	{r4, r5, r6, lr}
  400856:	b082      	sub	sp, #8
  400858:	4605      	mov	r5, r0
  40085a:	4616      	mov	r6, r2
  40085c:	461c      	mov	r4, r3
	switch (ul_type) {
  40085e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400862:	d014      	beq.n	40088e <pio_configure+0x3a>
  400864:	d90a      	bls.n	40087c <pio_configure+0x28>
  400866:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40086a:	d024      	beq.n	4008b6 <pio_configure+0x62>
  40086c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400870:	d021      	beq.n	4008b6 <pio_configure+0x62>
  400872:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400876:	d017      	beq.n	4008a8 <pio_configure+0x54>
		return 0;
  400878:	2000      	movs	r0, #0
  40087a:	e01a      	b.n	4008b2 <pio_configure+0x5e>
	switch (ul_type) {
  40087c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400880:	d005      	beq.n	40088e <pio_configure+0x3a>
  400882:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400886:	d002      	beq.n	40088e <pio_configure+0x3a>
  400888:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40088c:	d1f4      	bne.n	400878 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40088e:	4632      	mov	r2, r6
  400890:	4628      	mov	r0, r5
  400892:	4b11      	ldr	r3, [pc, #68]	; (4008d8 <pio_configure+0x84>)
  400894:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400896:	f014 0f01 	tst.w	r4, #1
  40089a:	d102      	bne.n	4008a2 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40089c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40089e:	2001      	movs	r0, #1
  4008a0:	e007      	b.n	4008b2 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4008a2:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4008a4:	2001      	movs	r0, #1
  4008a6:	e004      	b.n	4008b2 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4008a8:	461a      	mov	r2, r3
  4008aa:	4631      	mov	r1, r6
  4008ac:	4b0b      	ldr	r3, [pc, #44]	; (4008dc <pio_configure+0x88>)
  4008ae:	4798      	blx	r3
	return 1;
  4008b0:	2001      	movs	r0, #1
}
  4008b2:	b002      	add	sp, #8
  4008b4:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4008b6:	f004 0301 	and.w	r3, r4, #1
  4008ba:	9300      	str	r3, [sp, #0]
  4008bc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4008c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008c4:	bf14      	ite	ne
  4008c6:	2200      	movne	r2, #0
  4008c8:	2201      	moveq	r2, #1
  4008ca:	4631      	mov	r1, r6
  4008cc:	4628      	mov	r0, r5
  4008ce:	4c04      	ldr	r4, [pc, #16]	; (4008e0 <pio_configure+0x8c>)
  4008d0:	47a0      	blx	r4
	return 1;
  4008d2:	2001      	movs	r0, #1
		break;
  4008d4:	e7ed      	b.n	4008b2 <pio_configure+0x5e>
  4008d6:	bf00      	nop
  4008d8:	00400763 	.word	0x00400763
  4008dc:	004007f5 	.word	0x004007f5
  4008e0:	0040082b 	.word	0x0040082b

004008e4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4008e4:	f012 0f10 	tst.w	r2, #16
  4008e8:	d012      	beq.n	400910 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4008ea:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4008ee:	f012 0f20 	tst.w	r2, #32
  4008f2:	d007      	beq.n	400904 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4008f4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4008f8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4008fc:	d005      	beq.n	40090a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4008fe:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400902:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400904:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400908:	e7f6      	b.n	4008f8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40090a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40090e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400910:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400914:	4770      	bx	lr

00400916 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400916:	6401      	str	r1, [r0, #64]	; 0x40
  400918:	4770      	bx	lr

0040091a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40091a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40091c:	4770      	bx	lr

0040091e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40091e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400920:	4770      	bx	lr
	...

00400924 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400928:	4604      	mov	r4, r0
  40092a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40092c:	4b0e      	ldr	r3, [pc, #56]	; (400968 <pio_handler_process+0x44>)
  40092e:	4798      	blx	r3
  400930:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400932:	4620      	mov	r0, r4
  400934:	4b0d      	ldr	r3, [pc, #52]	; (40096c <pio_handler_process+0x48>)
  400936:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400938:	4005      	ands	r5, r0
  40093a:	d013      	beq.n	400964 <pio_handler_process+0x40>
  40093c:	4c0c      	ldr	r4, [pc, #48]	; (400970 <pio_handler_process+0x4c>)
  40093e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400942:	e003      	b.n	40094c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400944:	42b4      	cmp	r4, r6
  400946:	d00d      	beq.n	400964 <pio_handler_process+0x40>
  400948:	3410      	adds	r4, #16
		while (status != 0) {
  40094a:	b15d      	cbz	r5, 400964 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40094c:	6820      	ldr	r0, [r4, #0]
  40094e:	4540      	cmp	r0, r8
  400950:	d1f8      	bne.n	400944 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400952:	6861      	ldr	r1, [r4, #4]
  400954:	4229      	tst	r1, r5
  400956:	d0f5      	beq.n	400944 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400958:	68e3      	ldr	r3, [r4, #12]
  40095a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40095c:	6863      	ldr	r3, [r4, #4]
  40095e:	ea25 0503 	bic.w	r5, r5, r3
  400962:	e7ef      	b.n	400944 <pio_handler_process+0x20>
  400964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400968:	0040091b 	.word	0x0040091b
  40096c:	0040091f 	.word	0x0040091f
  400970:	204009dc 	.word	0x204009dc

00400974 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400976:	4c18      	ldr	r4, [pc, #96]	; (4009d8 <pio_handler_set+0x64>)
  400978:	6826      	ldr	r6, [r4, #0]
  40097a:	2e06      	cmp	r6, #6
  40097c:	d82a      	bhi.n	4009d4 <pio_handler_set+0x60>
  40097e:	f04f 0c00 	mov.w	ip, #0
  400982:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400984:	4f15      	ldr	r7, [pc, #84]	; (4009dc <pio_handler_set+0x68>)
  400986:	e004      	b.n	400992 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400988:	3401      	adds	r4, #1
  40098a:	b2e4      	uxtb	r4, r4
  40098c:	46a4      	mov	ip, r4
  40098e:	42a6      	cmp	r6, r4
  400990:	d309      	bcc.n	4009a6 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400992:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400994:	0125      	lsls	r5, r4, #4
  400996:	597d      	ldr	r5, [r7, r5]
  400998:	428d      	cmp	r5, r1
  40099a:	d1f5      	bne.n	400988 <pio_handler_set+0x14>
  40099c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4009a0:	686d      	ldr	r5, [r5, #4]
  4009a2:	4295      	cmp	r5, r2
  4009a4:	d1f0      	bne.n	400988 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4009a6:	4d0d      	ldr	r5, [pc, #52]	; (4009dc <pio_handler_set+0x68>)
  4009a8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4009ac:	eb05 040e 	add.w	r4, r5, lr
  4009b0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4009b4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4009b6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4009b8:	9906      	ldr	r1, [sp, #24]
  4009ba:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4009bc:	3601      	adds	r6, #1
  4009be:	4566      	cmp	r6, ip
  4009c0:	d005      	beq.n	4009ce <pio_handler_set+0x5a>
  4009c2:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009c4:	461a      	mov	r2, r3
  4009c6:	4b06      	ldr	r3, [pc, #24]	; (4009e0 <pio_handler_set+0x6c>)
  4009c8:	4798      	blx	r3

	return 0;
  4009ca:	2000      	movs	r0, #0
  4009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4009ce:	4902      	ldr	r1, [pc, #8]	; (4009d8 <pio_handler_set+0x64>)
  4009d0:	600e      	str	r6, [r1, #0]
  4009d2:	e7f6      	b.n	4009c2 <pio_handler_set+0x4e>
		return 1;
  4009d4:	2001      	movs	r0, #1
}
  4009d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009d8:	20400a4c 	.word	0x20400a4c
  4009dc:	204009dc 	.word	0x204009dc
  4009e0:	004008e5 	.word	0x004008e5

004009e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4009e6:	210a      	movs	r1, #10
  4009e8:	4801      	ldr	r0, [pc, #4]	; (4009f0 <PIOA_Handler+0xc>)
  4009ea:	4b02      	ldr	r3, [pc, #8]	; (4009f4 <PIOA_Handler+0x10>)
  4009ec:	4798      	blx	r3
  4009ee:	bd08      	pop	{r3, pc}
  4009f0:	400e0e00 	.word	0x400e0e00
  4009f4:	00400925 	.word	0x00400925

004009f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4009f8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4009fa:	210b      	movs	r1, #11
  4009fc:	4801      	ldr	r0, [pc, #4]	; (400a04 <PIOB_Handler+0xc>)
  4009fe:	4b02      	ldr	r3, [pc, #8]	; (400a08 <PIOB_Handler+0x10>)
  400a00:	4798      	blx	r3
  400a02:	bd08      	pop	{r3, pc}
  400a04:	400e1000 	.word	0x400e1000
  400a08:	00400925 	.word	0x00400925

00400a0c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a0e:	210c      	movs	r1, #12
  400a10:	4801      	ldr	r0, [pc, #4]	; (400a18 <PIOC_Handler+0xc>)
  400a12:	4b02      	ldr	r3, [pc, #8]	; (400a1c <PIOC_Handler+0x10>)
  400a14:	4798      	blx	r3
  400a16:	bd08      	pop	{r3, pc}
  400a18:	400e1200 	.word	0x400e1200
  400a1c:	00400925 	.word	0x00400925

00400a20 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a20:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a22:	2110      	movs	r1, #16
  400a24:	4801      	ldr	r0, [pc, #4]	; (400a2c <PIOD_Handler+0xc>)
  400a26:	4b02      	ldr	r3, [pc, #8]	; (400a30 <PIOD_Handler+0x10>)
  400a28:	4798      	blx	r3
  400a2a:	bd08      	pop	{r3, pc}
  400a2c:	400e1400 	.word	0x400e1400
  400a30:	00400925 	.word	0x00400925

00400a34 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a34:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a36:	2111      	movs	r1, #17
  400a38:	4801      	ldr	r0, [pc, #4]	; (400a40 <PIOE_Handler+0xc>)
  400a3a:	4b02      	ldr	r3, [pc, #8]	; (400a44 <PIOE_Handler+0x10>)
  400a3c:	4798      	blx	r3
  400a3e:	bd08      	pop	{r3, pc}
  400a40:	400e1600 	.word	0x400e1600
  400a44:	00400925 	.word	0x00400925

00400a48 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400a48:	2803      	cmp	r0, #3
  400a4a:	d011      	beq.n	400a70 <pmc_mck_set_division+0x28>
  400a4c:	2804      	cmp	r0, #4
  400a4e:	d012      	beq.n	400a76 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400a50:	2802      	cmp	r0, #2
  400a52:	bf0c      	ite	eq
  400a54:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400a58:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400a5a:	4a08      	ldr	r2, [pc, #32]	; (400a7c <pmc_mck_set_division+0x34>)
  400a5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400a62:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400a64:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a66:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a68:	f013 0f08 	tst.w	r3, #8
  400a6c:	d0fb      	beq.n	400a66 <pmc_mck_set_division+0x1e>
}
  400a6e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400a70:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400a74:	e7f1      	b.n	400a5a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400a76:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400a7a:	e7ee      	b.n	400a5a <pmc_mck_set_division+0x12>
  400a7c:	400e0600 	.word	0x400e0600

00400a80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a80:	4a17      	ldr	r2, [pc, #92]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400a82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400a88:	4318      	orrs	r0, r3
  400a8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a8e:	f013 0f08 	tst.w	r3, #8
  400a92:	d10a      	bne.n	400aaa <pmc_switch_mck_to_pllack+0x2a>
  400a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400a98:	4911      	ldr	r1, [pc, #68]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a9c:	f012 0f08 	tst.w	r2, #8
  400aa0:	d103      	bne.n	400aaa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400aa2:	3b01      	subs	r3, #1
  400aa4:	d1f9      	bne.n	400a9a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400aa6:	2001      	movs	r0, #1
  400aa8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400aaa:	4a0d      	ldr	r2, [pc, #52]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400aac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400aae:	f023 0303 	bic.w	r3, r3, #3
  400ab2:	f043 0302 	orr.w	r3, r3, #2
  400ab6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ab8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aba:	f013 0f08 	tst.w	r3, #8
  400abe:	d10a      	bne.n	400ad6 <pmc_switch_mck_to_pllack+0x56>
  400ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ac4:	4906      	ldr	r1, [pc, #24]	; (400ae0 <pmc_switch_mck_to_pllack+0x60>)
  400ac6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ac8:	f012 0f08 	tst.w	r2, #8
  400acc:	d105      	bne.n	400ada <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ace:	3b01      	subs	r3, #1
  400ad0:	d1f9      	bne.n	400ac6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400ad2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400ad4:	4770      	bx	lr
	return 0;
  400ad6:	2000      	movs	r0, #0
  400ad8:	4770      	bx	lr
  400ada:	2000      	movs	r0, #0
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop
  400ae0:	400e0600 	.word	0x400e0600

00400ae4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400ae4:	b9a0      	cbnz	r0, 400b10 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ae6:	480e      	ldr	r0, [pc, #56]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400ae8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400aea:	0209      	lsls	r1, r1, #8
  400aec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400aee:	4a0d      	ldr	r2, [pc, #52]	; (400b24 <pmc_switch_mainck_to_xtal+0x40>)
  400af0:	401a      	ands	r2, r3
  400af2:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <pmc_switch_mainck_to_xtal+0x44>)
  400af4:	4313      	orrs	r3, r2
  400af6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400af8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400afa:	4602      	mov	r2, r0
  400afc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400afe:	f013 0f01 	tst.w	r3, #1
  400b02:	d0fb      	beq.n	400afc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b04:	4a06      	ldr	r2, [pc, #24]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400b06:	6a11      	ldr	r1, [r2, #32]
  400b08:	4b08      	ldr	r3, [pc, #32]	; (400b2c <pmc_switch_mainck_to_xtal+0x48>)
  400b0a:	430b      	orrs	r3, r1
  400b0c:	6213      	str	r3, [r2, #32]
  400b0e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b10:	4903      	ldr	r1, [pc, #12]	; (400b20 <pmc_switch_mainck_to_xtal+0x3c>)
  400b12:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b14:	4a06      	ldr	r2, [pc, #24]	; (400b30 <pmc_switch_mainck_to_xtal+0x4c>)
  400b16:	401a      	ands	r2, r3
  400b18:	4b06      	ldr	r3, [pc, #24]	; (400b34 <pmc_switch_mainck_to_xtal+0x50>)
  400b1a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b1c:	620b      	str	r3, [r1, #32]
  400b1e:	4770      	bx	lr
  400b20:	400e0600 	.word	0x400e0600
  400b24:	ffc8fffc 	.word	0xffc8fffc
  400b28:	00370001 	.word	0x00370001
  400b2c:	01370000 	.word	0x01370000
  400b30:	fec8fffc 	.word	0xfec8fffc
  400b34:	01370002 	.word	0x01370002

00400b38 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b38:	4b02      	ldr	r3, [pc, #8]	; (400b44 <pmc_osc_is_ready_mainck+0xc>)
  400b3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b3c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	400e0600 	.word	0x400e0600

00400b48 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b4c:	4b01      	ldr	r3, [pc, #4]	; (400b54 <pmc_disable_pllack+0xc>)
  400b4e:	629a      	str	r2, [r3, #40]	; 0x28
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	400e0600 	.word	0x400e0600

00400b58 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <pmc_is_locked_pllack+0xc>)
  400b5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b5c:	f000 0002 	and.w	r0, r0, #2
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400b68:	283f      	cmp	r0, #63	; 0x3f
  400b6a:	d81e      	bhi.n	400baa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400b6c:	281f      	cmp	r0, #31
  400b6e:	d80c      	bhi.n	400b8a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b70:	4b11      	ldr	r3, [pc, #68]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b72:	699a      	ldr	r2, [r3, #24]
  400b74:	2301      	movs	r3, #1
  400b76:	4083      	lsls	r3, r0
  400b78:	4393      	bics	r3, r2
  400b7a:	d018      	beq.n	400bae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b7c:	2301      	movs	r3, #1
  400b7e:	fa03 f000 	lsl.w	r0, r3, r0
  400b82:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b84:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b86:	2000      	movs	r0, #0
  400b88:	4770      	bx	lr
		ul_id -= 32;
  400b8a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b8c:	4b0a      	ldr	r3, [pc, #40]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400b8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400b92:	2301      	movs	r3, #1
  400b94:	4083      	lsls	r3, r0
  400b96:	4393      	bics	r3, r2
  400b98:	d00b      	beq.n	400bb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b9a:	2301      	movs	r3, #1
  400b9c:	fa03 f000 	lsl.w	r0, r3, r0
  400ba0:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <pmc_enable_periph_clk+0x50>)
  400ba2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ba6:	2000      	movs	r0, #0
  400ba8:	4770      	bx	lr
		return 1;
  400baa:	2001      	movs	r0, #1
  400bac:	4770      	bx	lr
	return 0;
  400bae:	2000      	movs	r0, #0
  400bb0:	4770      	bx	lr
  400bb2:	2000      	movs	r0, #0
}
  400bb4:	4770      	bx	lr
  400bb6:	bf00      	nop
  400bb8:	400e0600 	.word	0x400e0600

00400bbc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bbc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bbe:	0189      	lsls	r1, r1, #6
  400bc0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bc2:	2402      	movs	r4, #2
  400bc4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bc6:	f04f 31ff 	mov.w	r1, #4294967295
  400bca:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400bcc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400bce:	605a      	str	r2, [r3, #4]
}
  400bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bd4:	4770      	bx	lr

00400bd6 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400bd6:	0189      	lsls	r1, r1, #6
  400bd8:	2305      	movs	r3, #5
  400bda:	5043      	str	r3, [r0, r1]
  400bdc:	4770      	bx	lr

00400bde <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  400bde:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400be2:	6908      	ldr	r0, [r1, #16]
}
  400be4:	4770      	bx	lr

00400be6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400be6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400bea:	61ca      	str	r2, [r1, #28]
  400bec:	4770      	bx	lr

00400bee <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bee:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400bf2:	624a      	str	r2, [r1, #36]	; 0x24
  400bf4:	4770      	bx	lr

00400bf6 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bf6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400bfa:	6a08      	ldr	r0, [r1, #32]
}
  400bfc:	4770      	bx	lr

00400bfe <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400bfe:	6943      	ldr	r3, [r0, #20]
  400c00:	f013 0f02 	tst.w	r3, #2
  400c04:	d002      	beq.n	400c0c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c06:	61c1      	str	r1, [r0, #28]
	return 0;
  400c08:	2000      	movs	r0, #0
  400c0a:	4770      	bx	lr
		return 1;
  400c0c:	2001      	movs	r0, #1
}
  400c0e:	4770      	bx	lr

00400c10 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400c10:	6943      	ldr	r3, [r0, #20]
  400c12:	f013 0f01 	tst.w	r3, #1
  400c16:	d003      	beq.n	400c20 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400c18:	6983      	ldr	r3, [r0, #24]
  400c1a:	700b      	strb	r3, [r1, #0]
	return 0;
  400c1c:	2000      	movs	r0, #0
  400c1e:	4770      	bx	lr
		return 1;
  400c20:	2001      	movs	r0, #1
}
  400c22:	4770      	bx	lr

00400c24 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400c24:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400c26:	010b      	lsls	r3, r1, #4
  400c28:	4293      	cmp	r3, r2
  400c2a:	d914      	bls.n	400c56 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c2c:	00c9      	lsls	r1, r1, #3
  400c2e:	084b      	lsrs	r3, r1, #1
  400c30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400c34:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400c38:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400c3a:	1e5c      	subs	r4, r3, #1
  400c3c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400c40:	428c      	cmp	r4, r1
  400c42:	d901      	bls.n	400c48 <usart_set_async_baudrate+0x24>
		return 1;
  400c44:	2001      	movs	r0, #1
  400c46:	e017      	b.n	400c78 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400c48:	6841      	ldr	r1, [r0, #4]
  400c4a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400c4e:	6041      	str	r1, [r0, #4]
  400c50:	e00c      	b.n	400c6c <usart_set_async_baudrate+0x48>
		return 1;
  400c52:	2001      	movs	r0, #1
  400c54:	e010      	b.n	400c78 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c56:	0859      	lsrs	r1, r3, #1
  400c58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400c5c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400c60:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400c62:	1e5c      	subs	r4, r3, #1
  400c64:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400c68:	428c      	cmp	r4, r1
  400c6a:	d8f2      	bhi.n	400c52 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400c6c:	0412      	lsls	r2, r2, #16
  400c6e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400c72:	431a      	orrs	r2, r3
  400c74:	6202      	str	r2, [r0, #32]

	return 0;
  400c76:	2000      	movs	r0, #0
}
  400c78:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c7c:	4770      	bx	lr
	...

00400c80 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400c80:	4b08      	ldr	r3, [pc, #32]	; (400ca4 <usart_reset+0x24>)
  400c82:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400c86:	2300      	movs	r3, #0
  400c88:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400c8a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400c8c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400c8e:	2388      	movs	r3, #136	; 0x88
  400c90:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c92:	2324      	movs	r3, #36	; 0x24
  400c94:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400c96:	f44f 7380 	mov.w	r3, #256	; 0x100
  400c9a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400c9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ca0:	6003      	str	r3, [r0, #0]
  400ca2:	4770      	bx	lr
  400ca4:	55534100 	.word	0x55534100

00400ca8 <usart_init_rs232>:
{
  400ca8:	b570      	push	{r4, r5, r6, lr}
  400caa:	4605      	mov	r5, r0
  400cac:	460c      	mov	r4, r1
  400cae:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400cb0:	4b0f      	ldr	r3, [pc, #60]	; (400cf0 <usart_init_rs232+0x48>)
  400cb2:	4798      	blx	r3
	ul_reg_val = 0;
  400cb4:	2200      	movs	r2, #0
  400cb6:	4b0f      	ldr	r3, [pc, #60]	; (400cf4 <usart_init_rs232+0x4c>)
  400cb8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400cba:	b1a4      	cbz	r4, 400ce6 <usart_init_rs232+0x3e>
  400cbc:	4632      	mov	r2, r6
  400cbe:	6821      	ldr	r1, [r4, #0]
  400cc0:	4628      	mov	r0, r5
  400cc2:	4b0d      	ldr	r3, [pc, #52]	; (400cf8 <usart_init_rs232+0x50>)
  400cc4:	4798      	blx	r3
  400cc6:	4602      	mov	r2, r0
  400cc8:	b978      	cbnz	r0, 400cea <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400cca:	6863      	ldr	r3, [r4, #4]
  400ccc:	68a1      	ldr	r1, [r4, #8]
  400cce:	430b      	orrs	r3, r1
  400cd0:	6921      	ldr	r1, [r4, #16]
  400cd2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400cd4:	68e1      	ldr	r1, [r4, #12]
  400cd6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400cd8:	4906      	ldr	r1, [pc, #24]	; (400cf4 <usart_init_rs232+0x4c>)
  400cda:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400cdc:	6869      	ldr	r1, [r5, #4]
  400cde:	430b      	orrs	r3, r1
  400ce0:	606b      	str	r3, [r5, #4]
}
  400ce2:	4610      	mov	r0, r2
  400ce4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400ce6:	2201      	movs	r2, #1
  400ce8:	e7fb      	b.n	400ce2 <usart_init_rs232+0x3a>
  400cea:	2201      	movs	r2, #1
  400cec:	e7f9      	b.n	400ce2 <usart_init_rs232+0x3a>
  400cee:	bf00      	nop
  400cf0:	00400c81 	.word	0x00400c81
  400cf4:	20400a50 	.word	0x20400a50
  400cf8:	00400c25 	.word	0x00400c25

00400cfc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400cfc:	2340      	movs	r3, #64	; 0x40
  400cfe:	6003      	str	r3, [r0, #0]
  400d00:	4770      	bx	lr

00400d02 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d02:	2310      	movs	r3, #16
  400d04:	6003      	str	r3, [r0, #0]
  400d06:	4770      	bx	lr

00400d08 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d08:	6943      	ldr	r3, [r0, #20]
  400d0a:	f013 0f02 	tst.w	r3, #2
  400d0e:	d004      	beq.n	400d1a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400d10:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400d14:	61c1      	str	r1, [r0, #28]
	return 0;
  400d16:	2000      	movs	r0, #0
  400d18:	4770      	bx	lr
		return 1;
  400d1a:	2001      	movs	r0, #1
}
  400d1c:	4770      	bx	lr

00400d1e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d1e:	6943      	ldr	r3, [r0, #20]
  400d20:	f013 0f01 	tst.w	r3, #1
  400d24:	d005      	beq.n	400d32 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d26:	6983      	ldr	r3, [r0, #24]
  400d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400d2c:	600b      	str	r3, [r1, #0]
	return 0;
  400d2e:	2000      	movs	r0, #0
  400d30:	4770      	bx	lr
		return 1;
  400d32:	2001      	movs	r0, #1
}
  400d34:	4770      	bx	lr

00400d36 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d36:	e7fe      	b.n	400d36 <Dummy_Handler>

00400d38 <Reset_Handler>:
{
  400d38:	b500      	push	{lr}
  400d3a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400d3c:	4b25      	ldr	r3, [pc, #148]	; (400dd4 <Reset_Handler+0x9c>)
  400d3e:	4a26      	ldr	r2, [pc, #152]	; (400dd8 <Reset_Handler+0xa0>)
  400d40:	429a      	cmp	r2, r3
  400d42:	d010      	beq.n	400d66 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400d44:	4b25      	ldr	r3, [pc, #148]	; (400ddc <Reset_Handler+0xa4>)
  400d46:	4a23      	ldr	r2, [pc, #140]	; (400dd4 <Reset_Handler+0x9c>)
  400d48:	429a      	cmp	r2, r3
  400d4a:	d20c      	bcs.n	400d66 <Reset_Handler+0x2e>
  400d4c:	3b01      	subs	r3, #1
  400d4e:	1a9b      	subs	r3, r3, r2
  400d50:	f023 0303 	bic.w	r3, r3, #3
  400d54:	3304      	adds	r3, #4
  400d56:	4413      	add	r3, r2
  400d58:	491f      	ldr	r1, [pc, #124]	; (400dd8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400d5a:	f851 0b04 	ldr.w	r0, [r1], #4
  400d5e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400d62:	429a      	cmp	r2, r3
  400d64:	d1f9      	bne.n	400d5a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400d66:	4b1e      	ldr	r3, [pc, #120]	; (400de0 <Reset_Handler+0xa8>)
  400d68:	4a1e      	ldr	r2, [pc, #120]	; (400de4 <Reset_Handler+0xac>)
  400d6a:	429a      	cmp	r2, r3
  400d6c:	d20a      	bcs.n	400d84 <Reset_Handler+0x4c>
  400d6e:	3b01      	subs	r3, #1
  400d70:	1a9b      	subs	r3, r3, r2
  400d72:	f023 0303 	bic.w	r3, r3, #3
  400d76:	3304      	adds	r3, #4
  400d78:	4413      	add	r3, r2
                *pDest++ = 0;
  400d7a:	2100      	movs	r1, #0
  400d7c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400d80:	4293      	cmp	r3, r2
  400d82:	d1fb      	bne.n	400d7c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400d84:	4a18      	ldr	r2, [pc, #96]	; (400de8 <Reset_Handler+0xb0>)
  400d86:	4b19      	ldr	r3, [pc, #100]	; (400dec <Reset_Handler+0xb4>)
  400d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400d8c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400d8e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d92:	fab3 f383 	clz	r3, r3
  400d96:	095b      	lsrs	r3, r3, #5
  400d98:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d9a:	b672      	cpsid	i
  400d9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400da0:	2200      	movs	r2, #0
  400da2:	4b13      	ldr	r3, [pc, #76]	; (400df0 <Reset_Handler+0xb8>)
  400da4:	701a      	strb	r2, [r3, #0]
	return flags;
  400da6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400da8:	4a12      	ldr	r2, [pc, #72]	; (400df4 <Reset_Handler+0xbc>)
  400daa:	6813      	ldr	r3, [r2, #0]
  400dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400db0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400db6:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400dba:	b129      	cbz	r1, 400dc8 <Reset_Handler+0x90>
		cpu_irq_enable();
  400dbc:	2201      	movs	r2, #1
  400dbe:	4b0c      	ldr	r3, [pc, #48]	; (400df0 <Reset_Handler+0xb8>)
  400dc0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400dc2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400dc6:	b662      	cpsie	i
        __libc_init_array();
  400dc8:	4b0b      	ldr	r3, [pc, #44]	; (400df8 <Reset_Handler+0xc0>)
  400dca:	4798      	blx	r3
        main();
  400dcc:	4b0b      	ldr	r3, [pc, #44]	; (400dfc <Reset_Handler+0xc4>)
  400dce:	4798      	blx	r3
  400dd0:	e7fe      	b.n	400dd0 <Reset_Handler+0x98>
  400dd2:	bf00      	nop
  400dd4:	20400000 	.word	0x20400000
  400dd8:	00407098 	.word	0x00407098
  400ddc:	204009c0 	.word	0x204009c0
  400de0:	20400cf4 	.word	0x20400cf4
  400de4:	204009c0 	.word	0x204009c0
  400de8:	e000ed00 	.word	0xe000ed00
  400dec:	00400000 	.word	0x00400000
  400df0:	2040000a 	.word	0x2040000a
  400df4:	e000ed88 	.word	0xe000ed88
  400df8:	00403eb1 	.word	0x00403eb1
  400dfc:	00403499 	.word	0x00403499

00400e00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e00:	4b3b      	ldr	r3, [pc, #236]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e04:	f003 0303 	and.w	r3, r3, #3
  400e08:	2b01      	cmp	r3, #1
  400e0a:	d01d      	beq.n	400e48 <SystemCoreClockUpdate+0x48>
  400e0c:	b183      	cbz	r3, 400e30 <SystemCoreClockUpdate+0x30>
  400e0e:	2b02      	cmp	r3, #2
  400e10:	d036      	beq.n	400e80 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400e12:	4b37      	ldr	r3, [pc, #220]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e1a:	2b70      	cmp	r3, #112	; 0x70
  400e1c:	d05f      	beq.n	400ede <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400e1e:	4b34      	ldr	r3, [pc, #208]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400e22:	4934      	ldr	r1, [pc, #208]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e24:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400e28:	680b      	ldr	r3, [r1, #0]
  400e2a:	40d3      	lsrs	r3, r2
  400e2c:	600b      	str	r3, [r1, #0]
  400e2e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400e30:	4b31      	ldr	r3, [pc, #196]	; (400ef8 <SystemCoreClockUpdate+0xf8>)
  400e32:	695b      	ldr	r3, [r3, #20]
  400e34:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400e38:	bf14      	ite	ne
  400e3a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400e3e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400e42:	4b2c      	ldr	r3, [pc, #176]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e44:	601a      	str	r2, [r3, #0]
  400e46:	e7e4      	b.n	400e12 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400e48:	4b29      	ldr	r3, [pc, #164]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e4a:	6a1b      	ldr	r3, [r3, #32]
  400e4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e50:	d003      	beq.n	400e5a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400e52:	4a2a      	ldr	r2, [pc, #168]	; (400efc <SystemCoreClockUpdate+0xfc>)
  400e54:	4b27      	ldr	r3, [pc, #156]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e56:	601a      	str	r2, [r3, #0]
  400e58:	e7db      	b.n	400e12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e5a:	4a29      	ldr	r2, [pc, #164]	; (400f00 <SystemCoreClockUpdate+0x100>)
  400e5c:	4b25      	ldr	r3, [pc, #148]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e5e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e60:	4b23      	ldr	r3, [pc, #140]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e62:	6a1b      	ldr	r3, [r3, #32]
  400e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e68:	2b10      	cmp	r3, #16
  400e6a:	d005      	beq.n	400e78 <SystemCoreClockUpdate+0x78>
  400e6c:	2b20      	cmp	r3, #32
  400e6e:	d1d0      	bne.n	400e12 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400e70:	4a22      	ldr	r2, [pc, #136]	; (400efc <SystemCoreClockUpdate+0xfc>)
  400e72:	4b20      	ldr	r3, [pc, #128]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e74:	601a      	str	r2, [r3, #0]
          break;
  400e76:	e7cc      	b.n	400e12 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400e78:	4a22      	ldr	r2, [pc, #136]	; (400f04 <SystemCoreClockUpdate+0x104>)
  400e7a:	4b1e      	ldr	r3, [pc, #120]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e7c:	601a      	str	r2, [r3, #0]
          break;
  400e7e:	e7c8      	b.n	400e12 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400e80:	4b1b      	ldr	r3, [pc, #108]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e82:	6a1b      	ldr	r3, [r3, #32]
  400e84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e88:	d016      	beq.n	400eb8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400e8a:	4a1c      	ldr	r2, [pc, #112]	; (400efc <SystemCoreClockUpdate+0xfc>)
  400e8c:	4b19      	ldr	r3, [pc, #100]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400e8e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400e90:	4b17      	ldr	r3, [pc, #92]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e94:	f003 0303 	and.w	r3, r3, #3
  400e98:	2b02      	cmp	r3, #2
  400e9a:	d1ba      	bne.n	400e12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e9c:	4a14      	ldr	r2, [pc, #80]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400e9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ea0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ea2:	4814      	ldr	r0, [pc, #80]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ea4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ea8:	6803      	ldr	r3, [r0, #0]
  400eaa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400eae:	b2d2      	uxtb	r2, r2
  400eb0:	fbb3 f3f2 	udiv	r3, r3, r2
  400eb4:	6003      	str	r3, [r0, #0]
  400eb6:	e7ac      	b.n	400e12 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400eb8:	4a11      	ldr	r2, [pc, #68]	; (400f00 <SystemCoreClockUpdate+0x100>)
  400eba:	4b0e      	ldr	r3, [pc, #56]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400ebc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ebe:	4b0c      	ldr	r3, [pc, #48]	; (400ef0 <SystemCoreClockUpdate+0xf0>)
  400ec0:	6a1b      	ldr	r3, [r3, #32]
  400ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ec6:	2b10      	cmp	r3, #16
  400ec8:	d005      	beq.n	400ed6 <SystemCoreClockUpdate+0xd6>
  400eca:	2b20      	cmp	r3, #32
  400ecc:	d1e0      	bne.n	400e90 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400ece:	4a0b      	ldr	r2, [pc, #44]	; (400efc <SystemCoreClockUpdate+0xfc>)
  400ed0:	4b08      	ldr	r3, [pc, #32]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400ed2:	601a      	str	r2, [r3, #0]
          break;
  400ed4:	e7dc      	b.n	400e90 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400ed6:	4a0b      	ldr	r2, [pc, #44]	; (400f04 <SystemCoreClockUpdate+0x104>)
  400ed8:	4b06      	ldr	r3, [pc, #24]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400eda:	601a      	str	r2, [r3, #0]
          break;
  400edc:	e7d8      	b.n	400e90 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400ede:	4a05      	ldr	r2, [pc, #20]	; (400ef4 <SystemCoreClockUpdate+0xf4>)
  400ee0:	6813      	ldr	r3, [r2, #0]
  400ee2:	4909      	ldr	r1, [pc, #36]	; (400f08 <SystemCoreClockUpdate+0x108>)
  400ee4:	fba1 1303 	umull	r1, r3, r1, r3
  400ee8:	085b      	lsrs	r3, r3, #1
  400eea:	6013      	str	r3, [r2, #0]
  400eec:	4770      	bx	lr
  400eee:	bf00      	nop
  400ef0:	400e0600 	.word	0x400e0600
  400ef4:	2040000c 	.word	0x2040000c
  400ef8:	400e1810 	.word	0x400e1810
  400efc:	00b71b00 	.word	0x00b71b00
  400f00:	003d0900 	.word	0x003d0900
  400f04:	007a1200 	.word	0x007a1200
  400f08:	aaaaaaab 	.word	0xaaaaaaab

00400f0c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400f0c:	4b16      	ldr	r3, [pc, #88]	; (400f68 <system_init_flash+0x5c>)
  400f0e:	4298      	cmp	r0, r3
  400f10:	d913      	bls.n	400f3a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400f12:	4b16      	ldr	r3, [pc, #88]	; (400f6c <system_init_flash+0x60>)
  400f14:	4298      	cmp	r0, r3
  400f16:	d915      	bls.n	400f44 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400f18:	4b15      	ldr	r3, [pc, #84]	; (400f70 <system_init_flash+0x64>)
  400f1a:	4298      	cmp	r0, r3
  400f1c:	d916      	bls.n	400f4c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400f1e:	4b15      	ldr	r3, [pc, #84]	; (400f74 <system_init_flash+0x68>)
  400f20:	4298      	cmp	r0, r3
  400f22:	d917      	bls.n	400f54 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400f24:	4b14      	ldr	r3, [pc, #80]	; (400f78 <system_init_flash+0x6c>)
  400f26:	4298      	cmp	r0, r3
  400f28:	d918      	bls.n	400f5c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400f2a:	4b14      	ldr	r3, [pc, #80]	; (400f7c <system_init_flash+0x70>)
  400f2c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f2e:	bf94      	ite	ls
  400f30:	4a13      	ldrls	r2, [pc, #76]	; (400f80 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400f32:	4a14      	ldrhi	r2, [pc, #80]	; (400f84 <system_init_flash+0x78>)
  400f34:	4b14      	ldr	r3, [pc, #80]	; (400f88 <system_init_flash+0x7c>)
  400f36:	601a      	str	r2, [r3, #0]
  400f38:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400f3e:	4b12      	ldr	r3, [pc, #72]	; (400f88 <system_init_flash+0x7c>)
  400f40:	601a      	str	r2, [r3, #0]
  400f42:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f44:	4a11      	ldr	r2, [pc, #68]	; (400f8c <system_init_flash+0x80>)
  400f46:	4b10      	ldr	r3, [pc, #64]	; (400f88 <system_init_flash+0x7c>)
  400f48:	601a      	str	r2, [r3, #0]
  400f4a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f4c:	4a10      	ldr	r2, [pc, #64]	; (400f90 <system_init_flash+0x84>)
  400f4e:	4b0e      	ldr	r3, [pc, #56]	; (400f88 <system_init_flash+0x7c>)
  400f50:	601a      	str	r2, [r3, #0]
  400f52:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f54:	4a0f      	ldr	r2, [pc, #60]	; (400f94 <system_init_flash+0x88>)
  400f56:	4b0c      	ldr	r3, [pc, #48]	; (400f88 <system_init_flash+0x7c>)
  400f58:	601a      	str	r2, [r3, #0]
  400f5a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f5c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400f60:	4b09      	ldr	r3, [pc, #36]	; (400f88 <system_init_flash+0x7c>)
  400f62:	601a      	str	r2, [r3, #0]
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	015ef3bf 	.word	0x015ef3bf
  400f6c:	02bde77f 	.word	0x02bde77f
  400f70:	041cdb3f 	.word	0x041cdb3f
  400f74:	057bceff 	.word	0x057bceff
  400f78:	06dac2bf 	.word	0x06dac2bf
  400f7c:	0839b67f 	.word	0x0839b67f
  400f80:	04000500 	.word	0x04000500
  400f84:	04000600 	.word	0x04000600
  400f88:	400e0c00 	.word	0x400e0c00
  400f8c:	04000100 	.word	0x04000100
  400f90:	04000200 	.word	0x04000200
  400f94:	04000300 	.word	0x04000300

00400f98 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f98:	4b0a      	ldr	r3, [pc, #40]	; (400fc4 <_sbrk+0x2c>)
  400f9a:	681b      	ldr	r3, [r3, #0]
  400f9c:	b153      	cbz	r3, 400fb4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f9e:	4b09      	ldr	r3, [pc, #36]	; (400fc4 <_sbrk+0x2c>)
  400fa0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400fa2:	181a      	adds	r2, r3, r0
  400fa4:	4908      	ldr	r1, [pc, #32]	; (400fc8 <_sbrk+0x30>)
  400fa6:	4291      	cmp	r1, r2
  400fa8:	db08      	blt.n	400fbc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400faa:	4610      	mov	r0, r2
  400fac:	4a05      	ldr	r2, [pc, #20]	; (400fc4 <_sbrk+0x2c>)
  400fae:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400fb0:	4618      	mov	r0, r3
  400fb2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400fb4:	4a05      	ldr	r2, [pc, #20]	; (400fcc <_sbrk+0x34>)
  400fb6:	4b03      	ldr	r3, [pc, #12]	; (400fc4 <_sbrk+0x2c>)
  400fb8:	601a      	str	r2, [r3, #0]
  400fba:	e7f0      	b.n	400f9e <_sbrk+0x6>
		return (caddr_t) -1;	
  400fbc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop
  400fc4:	20400a54 	.word	0x20400a54
  400fc8:	2045fffc 	.word	0x2045fffc
  400fcc:	20402ef8 	.word	0x20402ef8

00400fd0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400fd0:	f04f 30ff 	mov.w	r0, #4294967295
  400fd4:	4770      	bx	lr

00400fd6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400fda:	604b      	str	r3, [r1, #4]

	return 0;
}
  400fdc:	2000      	movs	r0, #0
  400fde:	4770      	bx	lr

00400fe0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400fe0:	2001      	movs	r0, #1
  400fe2:	4770      	bx	lr

00400fe4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400fe4:	2000      	movs	r0, #0
  400fe6:	4770      	bx	lr

00400fe8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fe8:	f100 0308 	add.w	r3, r0, #8
  400fec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400fee:	f04f 32ff 	mov.w	r2, #4294967295
  400ff2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ff4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ff6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400ff8:	2300      	movs	r3, #0
  400ffa:	6003      	str	r3, [r0, #0]
  400ffc:	4770      	bx	lr

00400ffe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400ffe:	2300      	movs	r3, #0
  401000:	6103      	str	r3, [r0, #16]
  401002:	4770      	bx	lr

00401004 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401004:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401006:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401008:	689a      	ldr	r2, [r3, #8]
  40100a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40100c:	689a      	ldr	r2, [r3, #8]
  40100e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401010:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401012:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401014:	6803      	ldr	r3, [r0, #0]
  401016:	3301      	adds	r3, #1
  401018:	6003      	str	r3, [r0, #0]
  40101a:	4770      	bx	lr

0040101c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40101c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40101e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401020:	f1b5 3fff 	cmp.w	r5, #4294967295
  401024:	d002      	beq.n	40102c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401026:	f100 0208 	add.w	r2, r0, #8
  40102a:	e002      	b.n	401032 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40102c:	6902      	ldr	r2, [r0, #16]
  40102e:	e004      	b.n	40103a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401030:	461a      	mov	r2, r3
  401032:	6853      	ldr	r3, [r2, #4]
  401034:	681c      	ldr	r4, [r3, #0]
  401036:	42a5      	cmp	r5, r4
  401038:	d2fa      	bcs.n	401030 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40103a:	6853      	ldr	r3, [r2, #4]
  40103c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40103e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401040:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401042:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401044:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401046:	6803      	ldr	r3, [r0, #0]
  401048:	3301      	adds	r3, #1
  40104a:	6003      	str	r3, [r0, #0]
}
  40104c:	bc30      	pop	{r4, r5}
  40104e:	4770      	bx	lr

00401050 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401050:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401052:	6842      	ldr	r2, [r0, #4]
  401054:	6881      	ldr	r1, [r0, #8]
  401056:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401058:	6882      	ldr	r2, [r0, #8]
  40105a:	6841      	ldr	r1, [r0, #4]
  40105c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40105e:	685a      	ldr	r2, [r3, #4]
  401060:	4290      	cmp	r0, r2
  401062:	d005      	beq.n	401070 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401064:	2200      	movs	r2, #0
  401066:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401068:	6818      	ldr	r0, [r3, #0]
  40106a:	3801      	subs	r0, #1
  40106c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40106e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401070:	6882      	ldr	r2, [r0, #8]
  401072:	605a      	str	r2, [r3, #4]
  401074:	e7f6      	b.n	401064 <uxListRemove+0x14>
	...

00401078 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401078:	4b0d      	ldr	r3, [pc, #52]	; (4010b0 <prvTaskExitError+0x38>)
  40107a:	681b      	ldr	r3, [r3, #0]
  40107c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401080:	d00a      	beq.n	401098 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401082:	f04f 0380 	mov.w	r3, #128	; 0x80
  401086:	b672      	cpsid	i
  401088:	f383 8811 	msr	BASEPRI, r3
  40108c:	f3bf 8f6f 	isb	sy
  401090:	f3bf 8f4f 	dsb	sy
  401094:	b662      	cpsie	i
  401096:	e7fe      	b.n	401096 <prvTaskExitError+0x1e>
  401098:	f04f 0380 	mov.w	r3, #128	; 0x80
  40109c:	b672      	cpsid	i
  40109e:	f383 8811 	msr	BASEPRI, r3
  4010a2:	f3bf 8f6f 	isb	sy
  4010a6:	f3bf 8f4f 	dsb	sy
  4010aa:	b662      	cpsie	i
  4010ac:	e7fe      	b.n	4010ac <prvTaskExitError+0x34>
  4010ae:	bf00      	nop
  4010b0:	20400010 	.word	0x20400010

004010b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4010b4:	4806      	ldr	r0, [pc, #24]	; (4010d0 <prvPortStartFirstTask+0x1c>)
  4010b6:	6800      	ldr	r0, [r0, #0]
  4010b8:	6800      	ldr	r0, [r0, #0]
  4010ba:	f380 8808 	msr	MSP, r0
  4010be:	b662      	cpsie	i
  4010c0:	b661      	cpsie	f
  4010c2:	f3bf 8f4f 	dsb	sy
  4010c6:	f3bf 8f6f 	isb	sy
  4010ca:	df00      	svc	0
  4010cc:	bf00      	nop
  4010ce:	0000      	.short	0x0000
  4010d0:	e000ed08 	.word	0xe000ed08

004010d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4010d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4010e4 <vPortEnableVFP+0x10>
  4010d8:	6801      	ldr	r1, [r0, #0]
  4010da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4010de:	6001      	str	r1, [r0, #0]
  4010e0:	4770      	bx	lr
  4010e2:	0000      	.short	0x0000
  4010e4:	e000ed88 	.word	0xe000ed88

004010e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4010e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4010ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4010f0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4010f4:	4b05      	ldr	r3, [pc, #20]	; (40110c <pxPortInitialiseStack+0x24>)
  4010f6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4010fa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4010fe:	f06f 0302 	mvn.w	r3, #2
  401102:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401106:	3844      	subs	r0, #68	; 0x44
  401108:	4770      	bx	lr
  40110a:	bf00      	nop
  40110c:	00401079 	.word	0x00401079

00401110 <SVC_Handler>:
	__asm volatile (
  401110:	4b06      	ldr	r3, [pc, #24]	; (40112c <pxCurrentTCBConst2>)
  401112:	6819      	ldr	r1, [r3, #0]
  401114:	6808      	ldr	r0, [r1, #0]
  401116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40111a:	f380 8809 	msr	PSP, r0
  40111e:	f3bf 8f6f 	isb	sy
  401122:	f04f 0000 	mov.w	r0, #0
  401126:	f380 8811 	msr	BASEPRI, r0
  40112a:	4770      	bx	lr

0040112c <pxCurrentTCBConst2>:
  40112c:	20400a60 	.word	0x20400a60
  401130:	4770      	bx	lr
  401132:	bf00      	nop

00401134 <vPortEnterCritical>:
  401134:	f04f 0380 	mov.w	r3, #128	; 0x80
  401138:	b672      	cpsid	i
  40113a:	f383 8811 	msr	BASEPRI, r3
  40113e:	f3bf 8f6f 	isb	sy
  401142:	f3bf 8f4f 	dsb	sy
  401146:	b662      	cpsie	i
	uxCriticalNesting++;
  401148:	4a0b      	ldr	r2, [pc, #44]	; (401178 <vPortEnterCritical+0x44>)
  40114a:	6813      	ldr	r3, [r2, #0]
  40114c:	3301      	adds	r3, #1
  40114e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401150:	2b01      	cmp	r3, #1
  401152:	d10f      	bne.n	401174 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401154:	4b09      	ldr	r3, [pc, #36]	; (40117c <vPortEnterCritical+0x48>)
  401156:	681b      	ldr	r3, [r3, #0]
  401158:	f013 0fff 	tst.w	r3, #255	; 0xff
  40115c:	d00a      	beq.n	401174 <vPortEnterCritical+0x40>
  40115e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401162:	b672      	cpsid	i
  401164:	f383 8811 	msr	BASEPRI, r3
  401168:	f3bf 8f6f 	isb	sy
  40116c:	f3bf 8f4f 	dsb	sy
  401170:	b662      	cpsie	i
  401172:	e7fe      	b.n	401172 <vPortEnterCritical+0x3e>
  401174:	4770      	bx	lr
  401176:	bf00      	nop
  401178:	20400010 	.word	0x20400010
  40117c:	e000ed04 	.word	0xe000ed04

00401180 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401180:	4b0a      	ldr	r3, [pc, #40]	; (4011ac <vPortExitCritical+0x2c>)
  401182:	681b      	ldr	r3, [r3, #0]
  401184:	b953      	cbnz	r3, 40119c <vPortExitCritical+0x1c>
  401186:	f04f 0380 	mov.w	r3, #128	; 0x80
  40118a:	b672      	cpsid	i
  40118c:	f383 8811 	msr	BASEPRI, r3
  401190:	f3bf 8f6f 	isb	sy
  401194:	f3bf 8f4f 	dsb	sy
  401198:	b662      	cpsie	i
  40119a:	e7fe      	b.n	40119a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40119c:	3b01      	subs	r3, #1
  40119e:	4a03      	ldr	r2, [pc, #12]	; (4011ac <vPortExitCritical+0x2c>)
  4011a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4011a2:	b90b      	cbnz	r3, 4011a8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4011a4:	f383 8811 	msr	BASEPRI, r3
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	20400010 	.word	0x20400010

004011b0 <PendSV_Handler>:
	__asm volatile
  4011b0:	f3ef 8009 	mrs	r0, PSP
  4011b4:	f3bf 8f6f 	isb	sy
  4011b8:	4b15      	ldr	r3, [pc, #84]	; (401210 <pxCurrentTCBConst>)
  4011ba:	681a      	ldr	r2, [r3, #0]
  4011bc:	f01e 0f10 	tst.w	lr, #16
  4011c0:	bf08      	it	eq
  4011c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4011c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011ca:	6010      	str	r0, [r2, #0]
  4011cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4011d0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4011d4:	b672      	cpsid	i
  4011d6:	f380 8811 	msr	BASEPRI, r0
  4011da:	f3bf 8f4f 	dsb	sy
  4011de:	f3bf 8f6f 	isb	sy
  4011e2:	b662      	cpsie	i
  4011e4:	f001 f8fe 	bl	4023e4 <vTaskSwitchContext>
  4011e8:	f04f 0000 	mov.w	r0, #0
  4011ec:	f380 8811 	msr	BASEPRI, r0
  4011f0:	bc08      	pop	{r3}
  4011f2:	6819      	ldr	r1, [r3, #0]
  4011f4:	6808      	ldr	r0, [r1, #0]
  4011f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011fa:	f01e 0f10 	tst.w	lr, #16
  4011fe:	bf08      	it	eq
  401200:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401204:	f380 8809 	msr	PSP, r0
  401208:	f3bf 8f6f 	isb	sy
  40120c:	4770      	bx	lr
  40120e:	bf00      	nop

00401210 <pxCurrentTCBConst>:
  401210:	20400a60 	.word	0x20400a60
  401214:	4770      	bx	lr
  401216:	bf00      	nop

00401218 <SysTick_Handler>:
{
  401218:	b508      	push	{r3, lr}
	__asm volatile
  40121a:	f3ef 8311 	mrs	r3, BASEPRI
  40121e:	f04f 0280 	mov.w	r2, #128	; 0x80
  401222:	b672      	cpsid	i
  401224:	f382 8811 	msr	BASEPRI, r2
  401228:	f3bf 8f6f 	isb	sy
  40122c:	f3bf 8f4f 	dsb	sy
  401230:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401232:	4b05      	ldr	r3, [pc, #20]	; (401248 <SysTick_Handler+0x30>)
  401234:	4798      	blx	r3
  401236:	b118      	cbz	r0, 401240 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40123c:	4b03      	ldr	r3, [pc, #12]	; (40124c <SysTick_Handler+0x34>)
  40123e:	601a      	str	r2, [r3, #0]
	__asm volatile
  401240:	2300      	movs	r3, #0
  401242:	f383 8811 	msr	BASEPRI, r3
  401246:	bd08      	pop	{r3, pc}
  401248:	00402051 	.word	0x00402051
  40124c:	e000ed04 	.word	0xe000ed04

00401250 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401250:	4a03      	ldr	r2, [pc, #12]	; (401260 <vPortSetupTimerInterrupt+0x10>)
  401252:	4b04      	ldr	r3, [pc, #16]	; (401264 <vPortSetupTimerInterrupt+0x14>)
  401254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401256:	2207      	movs	r2, #7
  401258:	3b04      	subs	r3, #4
  40125a:	601a      	str	r2, [r3, #0]
  40125c:	4770      	bx	lr
  40125e:	bf00      	nop
  401260:	000927bf 	.word	0x000927bf
  401264:	e000e014 	.word	0xe000e014

00401268 <xPortStartScheduler>:
{
  401268:	b500      	push	{lr}
  40126a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40126c:	4b25      	ldr	r3, [pc, #148]	; (401304 <xPortStartScheduler+0x9c>)
  40126e:	781a      	ldrb	r2, [r3, #0]
  401270:	b2d2      	uxtb	r2, r2
  401272:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401274:	22ff      	movs	r2, #255	; 0xff
  401276:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401278:	781b      	ldrb	r3, [r3, #0]
  40127a:	b2db      	uxtb	r3, r3
  40127c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401280:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401284:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401288:	4a1f      	ldr	r2, [pc, #124]	; (401308 <xPortStartScheduler+0xa0>)
  40128a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40128c:	2207      	movs	r2, #7
  40128e:	4b1f      	ldr	r3, [pc, #124]	; (40130c <xPortStartScheduler+0xa4>)
  401290:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401292:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401296:	f013 0f80 	tst.w	r3, #128	; 0x80
  40129a:	d010      	beq.n	4012be <xPortStartScheduler+0x56>
  40129c:	2206      	movs	r2, #6
  40129e:	e000      	b.n	4012a2 <xPortStartScheduler+0x3a>
  4012a0:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4012a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4012a6:	005b      	lsls	r3, r3, #1
  4012a8:	b2db      	uxtb	r3, r3
  4012aa:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4012ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4012b2:	1e51      	subs	r1, r2, #1
  4012b4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4012b8:	d1f2      	bne.n	4012a0 <xPortStartScheduler+0x38>
  4012ba:	4b14      	ldr	r3, [pc, #80]	; (40130c <xPortStartScheduler+0xa4>)
  4012bc:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4012be:	4a13      	ldr	r2, [pc, #76]	; (40130c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4012c0:	6813      	ldr	r3, [r2, #0]
  4012c2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4012c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4012c8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4012ca:	9b01      	ldr	r3, [sp, #4]
  4012cc:	b2db      	uxtb	r3, r3
  4012ce:	4a0d      	ldr	r2, [pc, #52]	; (401304 <xPortStartScheduler+0x9c>)
  4012d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4012d2:	4b0f      	ldr	r3, [pc, #60]	; (401310 <xPortStartScheduler+0xa8>)
  4012d4:	681a      	ldr	r2, [r3, #0]
  4012d6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4012da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4012dc:	681a      	ldr	r2, [r3, #0]
  4012de:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4012e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4012e4:	4b0b      	ldr	r3, [pc, #44]	; (401314 <xPortStartScheduler+0xac>)
  4012e6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4012e8:	2200      	movs	r2, #0
  4012ea:	4b0b      	ldr	r3, [pc, #44]	; (401318 <xPortStartScheduler+0xb0>)
  4012ec:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4012ee:	4b0b      	ldr	r3, [pc, #44]	; (40131c <xPortStartScheduler+0xb4>)
  4012f0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4012f2:	4a0b      	ldr	r2, [pc, #44]	; (401320 <xPortStartScheduler+0xb8>)
  4012f4:	6813      	ldr	r3, [r2, #0]
  4012f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4012fa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4012fc:	4b09      	ldr	r3, [pc, #36]	; (401324 <xPortStartScheduler+0xbc>)
  4012fe:	4798      	blx	r3
	prvTaskExitError();
  401300:	4b09      	ldr	r3, [pc, #36]	; (401328 <xPortStartScheduler+0xc0>)
  401302:	4798      	blx	r3
  401304:	e000e400 	.word	0xe000e400
  401308:	20400a58 	.word	0x20400a58
  40130c:	20400a5c 	.word	0x20400a5c
  401310:	e000ed20 	.word	0xe000ed20
  401314:	00401251 	.word	0x00401251
  401318:	20400010 	.word	0x20400010
  40131c:	004010d5 	.word	0x004010d5
  401320:	e000ef34 	.word	0xe000ef34
  401324:	004010b5 	.word	0x004010b5
  401328:	00401079 	.word	0x00401079

0040132c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40132c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401330:	2b0f      	cmp	r3, #15
  401332:	d911      	bls.n	401358 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401334:	4a12      	ldr	r2, [pc, #72]	; (401380 <vPortValidateInterruptPriority+0x54>)
  401336:	5c9b      	ldrb	r3, [r3, r2]
  401338:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40133a:	4a12      	ldr	r2, [pc, #72]	; (401384 <vPortValidateInterruptPriority+0x58>)
  40133c:	7812      	ldrb	r2, [r2, #0]
  40133e:	429a      	cmp	r2, r3
  401340:	d90a      	bls.n	401358 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401342:	f04f 0380 	mov.w	r3, #128	; 0x80
  401346:	b672      	cpsid	i
  401348:	f383 8811 	msr	BASEPRI, r3
  40134c:	f3bf 8f6f 	isb	sy
  401350:	f3bf 8f4f 	dsb	sy
  401354:	b662      	cpsie	i
  401356:	e7fe      	b.n	401356 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401358:	4b0b      	ldr	r3, [pc, #44]	; (401388 <vPortValidateInterruptPriority+0x5c>)
  40135a:	681b      	ldr	r3, [r3, #0]
  40135c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401360:	4a0a      	ldr	r2, [pc, #40]	; (40138c <vPortValidateInterruptPriority+0x60>)
  401362:	6812      	ldr	r2, [r2, #0]
  401364:	4293      	cmp	r3, r2
  401366:	d90a      	bls.n	40137e <vPortValidateInterruptPriority+0x52>
  401368:	f04f 0380 	mov.w	r3, #128	; 0x80
  40136c:	b672      	cpsid	i
  40136e:	f383 8811 	msr	BASEPRI, r3
  401372:	f3bf 8f6f 	isb	sy
  401376:	f3bf 8f4f 	dsb	sy
  40137a:	b662      	cpsie	i
  40137c:	e7fe      	b.n	40137c <vPortValidateInterruptPriority+0x50>
  40137e:	4770      	bx	lr
  401380:	e000e3f0 	.word	0xe000e3f0
  401384:	20400a58 	.word	0x20400a58
  401388:	e000ed0c 	.word	0xe000ed0c
  40138c:	20400a5c 	.word	0x20400a5c

00401390 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401390:	b510      	push	{r4, lr}
  401392:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401394:	4b06      	ldr	r3, [pc, #24]	; (4013b0 <pvPortMalloc+0x20>)
  401396:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401398:	4620      	mov	r0, r4
  40139a:	4b06      	ldr	r3, [pc, #24]	; (4013b4 <pvPortMalloc+0x24>)
  40139c:	4798      	blx	r3
  40139e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4013a0:	4b05      	ldr	r3, [pc, #20]	; (4013b8 <pvPortMalloc+0x28>)
  4013a2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4013a4:	b10c      	cbz	r4, 4013aa <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4013a6:	4620      	mov	r0, r4
  4013a8:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  4013aa:	4b04      	ldr	r3, [pc, #16]	; (4013bc <pvPortMalloc+0x2c>)
  4013ac:	4798      	blx	r3
	return pvReturn;
  4013ae:	e7fa      	b.n	4013a6 <pvPortMalloc+0x16>
  4013b0:	00402035 	.word	0x00402035
  4013b4:	00403f29 	.word	0x00403f29
  4013b8:	0040219d 	.word	0x0040219d
  4013bc:	0040314b 	.word	0x0040314b

004013c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4013c0:	b148      	cbz	r0, 4013d6 <vPortFree+0x16>
{
  4013c2:	b510      	push	{r4, lr}
  4013c4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4013c6:	4b04      	ldr	r3, [pc, #16]	; (4013d8 <vPortFree+0x18>)
  4013c8:	4798      	blx	r3
		{
			free( pv );
  4013ca:	4620      	mov	r0, r4
  4013cc:	4b03      	ldr	r3, [pc, #12]	; (4013dc <vPortFree+0x1c>)
  4013ce:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4013d0:	4b03      	ldr	r3, [pc, #12]	; (4013e0 <vPortFree+0x20>)
  4013d2:	4798      	blx	r3
  4013d4:	bd10      	pop	{r4, pc}
  4013d6:	4770      	bx	lr
  4013d8:	00402035 	.word	0x00402035
  4013dc:	00403f39 	.word	0x00403f39
  4013e0:	0040219d 	.word	0x0040219d

004013e4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4013e4:	b538      	push	{r3, r4, r5, lr}
  4013e6:	4604      	mov	r4, r0
  4013e8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013ec:	b95a      	cbnz	r2, 401406 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013ee:	6803      	ldr	r3, [r0, #0]
  4013f0:	2b00      	cmp	r3, #0
  4013f2:	d12e      	bne.n	401452 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013f4:	6840      	ldr	r0, [r0, #4]
  4013f6:	4b1b      	ldr	r3, [pc, #108]	; (401464 <prvCopyDataToQueue+0x80>)
  4013f8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013fa:	2300      	movs	r3, #0
  4013fc:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4013fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401400:	3301      	adds	r3, #1
  401402:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401404:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401406:	b96d      	cbnz	r5, 401424 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401408:	6880      	ldr	r0, [r0, #8]
  40140a:	4b17      	ldr	r3, [pc, #92]	; (401468 <prvCopyDataToQueue+0x84>)
  40140c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40140e:	68a3      	ldr	r3, [r4, #8]
  401410:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401412:	4413      	add	r3, r2
  401414:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401416:	6862      	ldr	r2, [r4, #4]
  401418:	4293      	cmp	r3, r2
  40141a:	d31c      	bcc.n	401456 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40141c:	6823      	ldr	r3, [r4, #0]
  40141e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401420:	2000      	movs	r0, #0
  401422:	e7ec      	b.n	4013fe <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401424:	68c0      	ldr	r0, [r0, #12]
  401426:	4b10      	ldr	r3, [pc, #64]	; (401468 <prvCopyDataToQueue+0x84>)
  401428:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40142c:	425b      	negs	r3, r3
  40142e:	68e2      	ldr	r2, [r4, #12]
  401430:	441a      	add	r2, r3
  401432:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401434:	6821      	ldr	r1, [r4, #0]
  401436:	428a      	cmp	r2, r1
  401438:	d202      	bcs.n	401440 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40143a:	6862      	ldr	r2, [r4, #4]
  40143c:	4413      	add	r3, r2
  40143e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401440:	2d02      	cmp	r5, #2
  401442:	d10a      	bne.n	40145a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401446:	b153      	cbz	r3, 40145e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40144a:	3b01      	subs	r3, #1
  40144c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40144e:	2000      	movs	r0, #0
  401450:	e7d5      	b.n	4013fe <prvCopyDataToQueue+0x1a>
  401452:	2000      	movs	r0, #0
  401454:	e7d3      	b.n	4013fe <prvCopyDataToQueue+0x1a>
  401456:	2000      	movs	r0, #0
  401458:	e7d1      	b.n	4013fe <prvCopyDataToQueue+0x1a>
  40145a:	2000      	movs	r0, #0
  40145c:	e7cf      	b.n	4013fe <prvCopyDataToQueue+0x1a>
  40145e:	2000      	movs	r0, #0
  401460:	e7cd      	b.n	4013fe <prvCopyDataToQueue+0x1a>
  401462:	bf00      	nop
  401464:	004027e5 	.word	0x004027e5
  401468:	004044a9 	.word	0x004044a9

0040146c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40146c:	b530      	push	{r4, r5, lr}
  40146e:	b083      	sub	sp, #12
  401470:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401472:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401474:	b174      	cbz	r4, 401494 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401476:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40147a:	429a      	cmp	r2, r3
  40147c:	d315      	bcc.n	4014aa <prvNotifyQueueSetContainer+0x3e>
  40147e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401482:	b672      	cpsid	i
  401484:	f383 8811 	msr	BASEPRI, r3
  401488:	f3bf 8f6f 	isb	sy
  40148c:	f3bf 8f4f 	dsb	sy
  401490:	b662      	cpsie	i
  401492:	e7fe      	b.n	401492 <prvNotifyQueueSetContainer+0x26>
  401494:	f04f 0380 	mov.w	r3, #128	; 0x80
  401498:	b672      	cpsid	i
  40149a:	f383 8811 	msr	BASEPRI, r3
  40149e:	f3bf 8f6f 	isb	sy
  4014a2:	f3bf 8f4f 	dsb	sy
  4014a6:	b662      	cpsie	i
  4014a8:	e7fe      	b.n	4014a8 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4014aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014ac:	4293      	cmp	r3, r2
  4014ae:	d803      	bhi.n	4014b8 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4014b0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4014b2:	4628      	mov	r0, r5
  4014b4:	b003      	add	sp, #12
  4014b6:	bd30      	pop	{r4, r5, pc}
  4014b8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4014ba:	a901      	add	r1, sp, #4
  4014bc:	4620      	mov	r0, r4
  4014be:	4b0b      	ldr	r3, [pc, #44]	; (4014ec <prvNotifyQueueSetContainer+0x80>)
  4014c0:	4798      	blx	r3
  4014c2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4014c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014ca:	d10a      	bne.n	4014e2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4014cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014ce:	2b00      	cmp	r3, #0
  4014d0:	d0ef      	beq.n	4014b2 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4014d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014d6:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <prvNotifyQueueSetContainer+0x84>)
  4014d8:	4798      	blx	r3
  4014da:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014dc:	bf18      	it	ne
  4014de:	2501      	movne	r5, #1
  4014e0:	e7e7      	b.n	4014b2 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4014e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014e4:	3301      	adds	r3, #1
  4014e6:	64a3      	str	r3, [r4, #72]	; 0x48
  4014e8:	e7e3      	b.n	4014b2 <prvNotifyQueueSetContainer+0x46>
  4014ea:	bf00      	nop
  4014ec:	004013e5 	.word	0x004013e5
  4014f0:	004025b9 	.word	0x004025b9

004014f4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014f6:	b172      	cbz	r2, 401516 <prvCopyDataFromQueue+0x22>
{
  4014f8:	b510      	push	{r4, lr}
  4014fa:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014fc:	68c4      	ldr	r4, [r0, #12]
  4014fe:	4414      	add	r4, r2
  401500:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401502:	6840      	ldr	r0, [r0, #4]
  401504:	4284      	cmp	r4, r0
  401506:	d301      	bcc.n	40150c <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401508:	6818      	ldr	r0, [r3, #0]
  40150a:	60d8      	str	r0, [r3, #12]
  40150c:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40150e:	68d9      	ldr	r1, [r3, #12]
  401510:	4b01      	ldr	r3, [pc, #4]	; (401518 <prvCopyDataFromQueue+0x24>)
  401512:	4798      	blx	r3
  401514:	bd10      	pop	{r4, pc}
  401516:	4770      	bx	lr
  401518:	004044a9 	.word	0x004044a9

0040151c <prvUnlockQueue>:
{
  40151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40151e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401520:	4b22      	ldr	r3, [pc, #136]	; (4015ac <prvUnlockQueue+0x90>)
  401522:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401526:	2b00      	cmp	r3, #0
  401528:	dd1b      	ble.n	401562 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40152a:	4d21      	ldr	r5, [pc, #132]	; (4015b0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40152c:	4f21      	ldr	r7, [pc, #132]	; (4015b4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40152e:	4e22      	ldr	r6, [pc, #136]	; (4015b8 <prvUnlockQueue+0x9c>)
  401530:	e00b      	b.n	40154a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401532:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401534:	b1ab      	cbz	r3, 401562 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401536:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40153a:	47b0      	blx	r6
  40153c:	b978      	cbnz	r0, 40155e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40153e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401540:	3b01      	subs	r3, #1
  401542:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401544:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401546:	2b00      	cmp	r3, #0
  401548:	dd0b      	ble.n	401562 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40154a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40154c:	2b00      	cmp	r3, #0
  40154e:	d0f0      	beq.n	401532 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401550:	2100      	movs	r1, #0
  401552:	4620      	mov	r0, r4
  401554:	47a8      	blx	r5
  401556:	2801      	cmp	r0, #1
  401558:	d1f1      	bne.n	40153e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40155a:	47b8      	blx	r7
  40155c:	e7ef      	b.n	40153e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40155e:	47b8      	blx	r7
  401560:	e7ed      	b.n	40153e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401562:	f04f 33ff 	mov.w	r3, #4294967295
  401566:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401568:	4b14      	ldr	r3, [pc, #80]	; (4015bc <prvUnlockQueue+0xa0>)
  40156a:	4798      	blx	r3
	taskENTER_CRITICAL();
  40156c:	4b0f      	ldr	r3, [pc, #60]	; (4015ac <prvUnlockQueue+0x90>)
  40156e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401570:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401572:	2b00      	cmp	r3, #0
  401574:	dd14      	ble.n	4015a0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401576:	6923      	ldr	r3, [r4, #16]
  401578:	b193      	cbz	r3, 4015a0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40157a:	f104 0610 	add.w	r6, r4, #16
  40157e:	4d0e      	ldr	r5, [pc, #56]	; (4015b8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401580:	4f0c      	ldr	r7, [pc, #48]	; (4015b4 <prvUnlockQueue+0x98>)
  401582:	e007      	b.n	401594 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401584:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401586:	3b01      	subs	r3, #1
  401588:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40158a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40158c:	2b00      	cmp	r3, #0
  40158e:	dd07      	ble.n	4015a0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401590:	6923      	ldr	r3, [r4, #16]
  401592:	b12b      	cbz	r3, 4015a0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401594:	4630      	mov	r0, r6
  401596:	47a8      	blx	r5
  401598:	2800      	cmp	r0, #0
  40159a:	d0f3      	beq.n	401584 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40159c:	47b8      	blx	r7
  40159e:	e7f1      	b.n	401584 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4015a0:	f04f 33ff 	mov.w	r3, #4294967295
  4015a4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4015a6:	4b05      	ldr	r3, [pc, #20]	; (4015bc <prvUnlockQueue+0xa0>)
  4015a8:	4798      	blx	r3
  4015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015ac:	00401135 	.word	0x00401135
  4015b0:	0040146d 	.word	0x0040146d
  4015b4:	00402715 	.word	0x00402715
  4015b8:	004025b9 	.word	0x004025b9
  4015bc:	00401181 	.word	0x00401181

004015c0 <xQueueGenericReset>:
{
  4015c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4015c2:	b308      	cbz	r0, 401608 <xQueueGenericReset+0x48>
  4015c4:	4604      	mov	r4, r0
  4015c6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4015c8:	4b1d      	ldr	r3, [pc, #116]	; (401640 <xQueueGenericReset+0x80>)
  4015ca:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4015cc:	6822      	ldr	r2, [r4, #0]
  4015ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4015d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015d2:	fb03 f301 	mul.w	r3, r3, r1
  4015d6:	18d0      	adds	r0, r2, r3
  4015d8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015da:	2000      	movs	r0, #0
  4015dc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015de:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015e0:	1a5b      	subs	r3, r3, r1
  4015e2:	4413      	add	r3, r2
  4015e4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4015e6:	f04f 33ff 	mov.w	r3, #4294967295
  4015ea:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4015ec:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4015ee:	b9fd      	cbnz	r5, 401630 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015f0:	6923      	ldr	r3, [r4, #16]
  4015f2:	b12b      	cbz	r3, 401600 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015f4:	f104 0010 	add.w	r0, r4, #16
  4015f8:	4b12      	ldr	r3, [pc, #72]	; (401644 <xQueueGenericReset+0x84>)
  4015fa:	4798      	blx	r3
  4015fc:	2801      	cmp	r0, #1
  4015fe:	d00e      	beq.n	40161e <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401600:	4b11      	ldr	r3, [pc, #68]	; (401648 <xQueueGenericReset+0x88>)
  401602:	4798      	blx	r3
}
  401604:	2001      	movs	r0, #1
  401606:	bd38      	pop	{r3, r4, r5, pc}
  401608:	f04f 0380 	mov.w	r3, #128	; 0x80
  40160c:	b672      	cpsid	i
  40160e:	f383 8811 	msr	BASEPRI, r3
  401612:	f3bf 8f6f 	isb	sy
  401616:	f3bf 8f4f 	dsb	sy
  40161a:	b662      	cpsie	i
  40161c:	e7fe      	b.n	40161c <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401622:	4b0a      	ldr	r3, [pc, #40]	; (40164c <xQueueGenericReset+0x8c>)
  401624:	601a      	str	r2, [r3, #0]
  401626:	f3bf 8f4f 	dsb	sy
  40162a:	f3bf 8f6f 	isb	sy
  40162e:	e7e7      	b.n	401600 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401630:	f104 0010 	add.w	r0, r4, #16
  401634:	4d06      	ldr	r5, [pc, #24]	; (401650 <xQueueGenericReset+0x90>)
  401636:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401638:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40163c:	47a8      	blx	r5
  40163e:	e7df      	b.n	401600 <xQueueGenericReset+0x40>
  401640:	00401135 	.word	0x00401135
  401644:	004025b9 	.word	0x004025b9
  401648:	00401181 	.word	0x00401181
  40164c:	e000ed04 	.word	0xe000ed04
  401650:	00400fe9 	.word	0x00400fe9

00401654 <xQueueGenericCreate>:
{
  401654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401656:	b950      	cbnz	r0, 40166e <xQueueGenericCreate+0x1a>
  401658:	f04f 0380 	mov.w	r3, #128	; 0x80
  40165c:	b672      	cpsid	i
  40165e:	f383 8811 	msr	BASEPRI, r3
  401662:	f3bf 8f6f 	isb	sy
  401666:	f3bf 8f4f 	dsb	sy
  40166a:	b662      	cpsie	i
  40166c:	e7fe      	b.n	40166c <xQueueGenericCreate+0x18>
  40166e:	4606      	mov	r6, r0
  401670:	4617      	mov	r7, r2
  401672:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401674:	b189      	cbz	r1, 40169a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401676:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40167a:	3059      	adds	r0, #89	; 0x59
  40167c:	4b12      	ldr	r3, [pc, #72]	; (4016c8 <xQueueGenericCreate+0x74>)
  40167e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401680:	4604      	mov	r4, r0
  401682:	b9e8      	cbnz	r0, 4016c0 <xQueueGenericCreate+0x6c>
  401684:	f04f 0380 	mov.w	r3, #128	; 0x80
  401688:	b672      	cpsid	i
  40168a:	f383 8811 	msr	BASEPRI, r3
  40168e:	f3bf 8f6f 	isb	sy
  401692:	f3bf 8f4f 	dsb	sy
  401696:	b662      	cpsie	i
  401698:	e7fe      	b.n	401698 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40169a:	2058      	movs	r0, #88	; 0x58
  40169c:	4b0a      	ldr	r3, [pc, #40]	; (4016c8 <xQueueGenericCreate+0x74>)
  40169e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4016a0:	4604      	mov	r4, r0
  4016a2:	2800      	cmp	r0, #0
  4016a4:	d0ee      	beq.n	401684 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4016a6:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4016a8:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4016aa:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4016ac:	2101      	movs	r1, #1
  4016ae:	4620      	mov	r0, r4
  4016b0:	4b06      	ldr	r3, [pc, #24]	; (4016cc <xQueueGenericCreate+0x78>)
  4016b2:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4016b4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4016b8:	2300      	movs	r3, #0
  4016ba:	6563      	str	r3, [r4, #84]	; 0x54
}
  4016bc:	4620      	mov	r0, r4
  4016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4016c0:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4016c4:	6003      	str	r3, [r0, #0]
  4016c6:	e7ef      	b.n	4016a8 <xQueueGenericCreate+0x54>
  4016c8:	00401391 	.word	0x00401391
  4016cc:	004015c1 	.word	0x004015c1

004016d0 <xQueueGenericSend>:
{
  4016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016d4:	b085      	sub	sp, #20
  4016d6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4016d8:	b1b8      	cbz	r0, 40170a <xQueueGenericSend+0x3a>
  4016da:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016dc:	b301      	cbz	r1, 401720 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016de:	2b02      	cmp	r3, #2
  4016e0:	d02c      	beq.n	40173c <xQueueGenericSend+0x6c>
  4016e2:	461d      	mov	r5, r3
  4016e4:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016e6:	4b66      	ldr	r3, [pc, #408]	; (401880 <xQueueGenericSend+0x1b0>)
  4016e8:	4798      	blx	r3
  4016ea:	2800      	cmp	r0, #0
  4016ec:	d134      	bne.n	401758 <xQueueGenericSend+0x88>
  4016ee:	9b01      	ldr	r3, [sp, #4]
  4016f0:	2b00      	cmp	r3, #0
  4016f2:	d038      	beq.n	401766 <xQueueGenericSend+0x96>
  4016f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f8:	b672      	cpsid	i
  4016fa:	f383 8811 	msr	BASEPRI, r3
  4016fe:	f3bf 8f6f 	isb	sy
  401702:	f3bf 8f4f 	dsb	sy
  401706:	b662      	cpsie	i
  401708:	e7fe      	b.n	401708 <xQueueGenericSend+0x38>
  40170a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40170e:	b672      	cpsid	i
  401710:	f383 8811 	msr	BASEPRI, r3
  401714:	f3bf 8f6f 	isb	sy
  401718:	f3bf 8f4f 	dsb	sy
  40171c:	b662      	cpsie	i
  40171e:	e7fe      	b.n	40171e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401720:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401722:	2a00      	cmp	r2, #0
  401724:	d0db      	beq.n	4016de <xQueueGenericSend+0xe>
  401726:	f04f 0380 	mov.w	r3, #128	; 0x80
  40172a:	b672      	cpsid	i
  40172c:	f383 8811 	msr	BASEPRI, r3
  401730:	f3bf 8f6f 	isb	sy
  401734:	f3bf 8f4f 	dsb	sy
  401738:	b662      	cpsie	i
  40173a:	e7fe      	b.n	40173a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40173c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40173e:	2a01      	cmp	r2, #1
  401740:	d0cf      	beq.n	4016e2 <xQueueGenericSend+0x12>
  401742:	f04f 0380 	mov.w	r3, #128	; 0x80
  401746:	b672      	cpsid	i
  401748:	f383 8811 	msr	BASEPRI, r3
  40174c:	f3bf 8f6f 	isb	sy
  401750:	f3bf 8f4f 	dsb	sy
  401754:	b662      	cpsie	i
  401756:	e7fe      	b.n	401756 <xQueueGenericSend+0x86>
  401758:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40175a:	4e4a      	ldr	r6, [pc, #296]	; (401884 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  40175c:	f8df a150 	ldr.w	sl, [pc, #336]	; 4018b0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401760:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401890 <xQueueGenericSend+0x1c0>
  401764:	e042      	b.n	4017ec <xQueueGenericSend+0x11c>
  401766:	2700      	movs	r7, #0
  401768:	e7f7      	b.n	40175a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40176a:	462a      	mov	r2, r5
  40176c:	4641      	mov	r1, r8
  40176e:	4620      	mov	r0, r4
  401770:	4b45      	ldr	r3, [pc, #276]	; (401888 <xQueueGenericSend+0x1b8>)
  401772:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401774:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401776:	b19b      	cbz	r3, 4017a0 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401778:	4629      	mov	r1, r5
  40177a:	4620      	mov	r0, r4
  40177c:	4b43      	ldr	r3, [pc, #268]	; (40188c <xQueueGenericSend+0x1bc>)
  40177e:	4798      	blx	r3
  401780:	2801      	cmp	r0, #1
  401782:	d107      	bne.n	401794 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401788:	4b41      	ldr	r3, [pc, #260]	; (401890 <xQueueGenericSend+0x1c0>)
  40178a:	601a      	str	r2, [r3, #0]
  40178c:	f3bf 8f4f 	dsb	sy
  401790:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401794:	4b3f      	ldr	r3, [pc, #252]	; (401894 <xQueueGenericSend+0x1c4>)
  401796:	4798      	blx	r3
				return pdPASS;
  401798:	2001      	movs	r0, #1
}
  40179a:	b005      	add	sp, #20
  40179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4017a2:	b173      	cbz	r3, 4017c2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4017a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017a8:	4b3b      	ldr	r3, [pc, #236]	; (401898 <xQueueGenericSend+0x1c8>)
  4017aa:	4798      	blx	r3
  4017ac:	2801      	cmp	r0, #1
  4017ae:	d1f1      	bne.n	401794 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4017b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017b4:	4b36      	ldr	r3, [pc, #216]	; (401890 <xQueueGenericSend+0x1c0>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	f3bf 8f4f 	dsb	sy
  4017bc:	f3bf 8f6f 	isb	sy
  4017c0:	e7e8      	b.n	401794 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4017c2:	2800      	cmp	r0, #0
  4017c4:	d0e6      	beq.n	401794 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4017c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017ca:	4b31      	ldr	r3, [pc, #196]	; (401890 <xQueueGenericSend+0x1c0>)
  4017cc:	601a      	str	r2, [r3, #0]
  4017ce:	f3bf 8f4f 	dsb	sy
  4017d2:	f3bf 8f6f 	isb	sy
  4017d6:	e7dd      	b.n	401794 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4017d8:	4b2e      	ldr	r3, [pc, #184]	; (401894 <xQueueGenericSend+0x1c4>)
  4017da:	4798      	blx	r3
					return errQUEUE_FULL;
  4017dc:	2000      	movs	r0, #0
  4017de:	e7dc      	b.n	40179a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4017e0:	4620      	mov	r0, r4
  4017e2:	4b2e      	ldr	r3, [pc, #184]	; (40189c <xQueueGenericSend+0x1cc>)
  4017e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4017e6:	4b2e      	ldr	r3, [pc, #184]	; (4018a0 <xQueueGenericSend+0x1d0>)
  4017e8:	4798      	blx	r3
  4017ea:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4017ec:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4017ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4017f2:	429a      	cmp	r2, r3
  4017f4:	d3b9      	bcc.n	40176a <xQueueGenericSend+0x9a>
  4017f6:	2d02      	cmp	r5, #2
  4017f8:	d0b7      	beq.n	40176a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017fa:	9b01      	ldr	r3, [sp, #4]
  4017fc:	2b00      	cmp	r3, #0
  4017fe:	d0eb      	beq.n	4017d8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401800:	b90f      	cbnz	r7, 401806 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401802:	a802      	add	r0, sp, #8
  401804:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401806:	4b23      	ldr	r3, [pc, #140]	; (401894 <xQueueGenericSend+0x1c4>)
  401808:	4798      	blx	r3
		vTaskSuspendAll();
  40180a:	4b26      	ldr	r3, [pc, #152]	; (4018a4 <xQueueGenericSend+0x1d4>)
  40180c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40180e:	47b0      	blx	r6
  401810:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401812:	f1b3 3fff 	cmp.w	r3, #4294967295
  401816:	d101      	bne.n	40181c <xQueueGenericSend+0x14c>
  401818:	2300      	movs	r3, #0
  40181a:	6463      	str	r3, [r4, #68]	; 0x44
  40181c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40181e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401822:	d101      	bne.n	401828 <xQueueGenericSend+0x158>
  401824:	2300      	movs	r3, #0
  401826:	64a3      	str	r3, [r4, #72]	; 0x48
  401828:	4b1a      	ldr	r3, [pc, #104]	; (401894 <xQueueGenericSend+0x1c4>)
  40182a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40182c:	a901      	add	r1, sp, #4
  40182e:	a802      	add	r0, sp, #8
  401830:	4b1d      	ldr	r3, [pc, #116]	; (4018a8 <xQueueGenericSend+0x1d8>)
  401832:	4798      	blx	r3
  401834:	b9e0      	cbnz	r0, 401870 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401836:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401838:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  40183c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40183e:	4b15      	ldr	r3, [pc, #84]	; (401894 <xQueueGenericSend+0x1c4>)
  401840:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401842:	45bb      	cmp	fp, r7
  401844:	d1cc      	bne.n	4017e0 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401846:	9901      	ldr	r1, [sp, #4]
  401848:	f104 0010 	add.w	r0, r4, #16
  40184c:	4b17      	ldr	r3, [pc, #92]	; (4018ac <xQueueGenericSend+0x1dc>)
  40184e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401850:	4620      	mov	r0, r4
  401852:	4b12      	ldr	r3, [pc, #72]	; (40189c <xQueueGenericSend+0x1cc>)
  401854:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401856:	4b12      	ldr	r3, [pc, #72]	; (4018a0 <xQueueGenericSend+0x1d0>)
  401858:	4798      	blx	r3
  40185a:	2800      	cmp	r0, #0
  40185c:	d1c5      	bne.n	4017ea <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40185e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401862:	f8c9 3000 	str.w	r3, [r9]
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	f3bf 8f6f 	isb	sy
  40186e:	e7bc      	b.n	4017ea <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401870:	4620      	mov	r0, r4
  401872:	4b0a      	ldr	r3, [pc, #40]	; (40189c <xQueueGenericSend+0x1cc>)
  401874:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401876:	4b0a      	ldr	r3, [pc, #40]	; (4018a0 <xQueueGenericSend+0x1d0>)
  401878:	4798      	blx	r3
			return errQUEUE_FULL;
  40187a:	2000      	movs	r0, #0
  40187c:	e78d      	b.n	40179a <xQueueGenericSend+0xca>
  40187e:	bf00      	nop
  401880:	00402721 	.word	0x00402721
  401884:	00401135 	.word	0x00401135
  401888:	004013e5 	.word	0x004013e5
  40188c:	0040146d 	.word	0x0040146d
  401890:	e000ed04 	.word	0xe000ed04
  401894:	00401181 	.word	0x00401181
  401898:	004025b9 	.word	0x004025b9
  40189c:	0040151d 	.word	0x0040151d
  4018a0:	0040219d 	.word	0x0040219d
  4018a4:	00402035 	.word	0x00402035
  4018a8:	00402681 	.word	0x00402681
  4018ac:	004024b5 	.word	0x004024b5
  4018b0:	00402651 	.word	0x00402651

004018b4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4018b4:	2800      	cmp	r0, #0
  4018b6:	d036      	beq.n	401926 <xQueueGenericSendFromISR+0x72>
{
  4018b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4018bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018be:	2900      	cmp	r1, #0
  4018c0:	d03c      	beq.n	40193c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4018c2:	2b02      	cmp	r3, #2
  4018c4:	d048      	beq.n	401958 <xQueueGenericSendFromISR+0xa4>
  4018c6:	461e      	mov	r6, r3
  4018c8:	4615      	mov	r5, r2
  4018ca:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4018cc:	4b35      	ldr	r3, [pc, #212]	; (4019a4 <xQueueGenericSendFromISR+0xf0>)
  4018ce:	4798      	blx	r3
	__asm volatile
  4018d0:	f3ef 8711 	mrs	r7, BASEPRI
  4018d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018d8:	b672      	cpsid	i
  4018da:	f383 8811 	msr	BASEPRI, r3
  4018de:	f3bf 8f6f 	isb	sy
  4018e2:	f3bf 8f4f 	dsb	sy
  4018e6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018ec:	429a      	cmp	r2, r3
  4018ee:	d301      	bcc.n	4018f4 <xQueueGenericSendFromISR+0x40>
  4018f0:	2e02      	cmp	r6, #2
  4018f2:	d14f      	bne.n	401994 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018f4:	4632      	mov	r2, r6
  4018f6:	4641      	mov	r1, r8
  4018f8:	4620      	mov	r0, r4
  4018fa:	4b2b      	ldr	r3, [pc, #172]	; (4019a8 <xQueueGenericSendFromISR+0xf4>)
  4018fc:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4018fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401900:	f1b3 3fff 	cmp.w	r3, #4294967295
  401904:	d141      	bne.n	40198a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401906:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401908:	2b00      	cmp	r3, #0
  40190a:	d033      	beq.n	401974 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40190c:	4631      	mov	r1, r6
  40190e:	4620      	mov	r0, r4
  401910:	4b26      	ldr	r3, [pc, #152]	; (4019ac <xQueueGenericSendFromISR+0xf8>)
  401912:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401914:	2d00      	cmp	r5, #0
  401916:	d03f      	beq.n	401998 <xQueueGenericSendFromISR+0xe4>
  401918:	2801      	cmp	r0, #1
  40191a:	d13d      	bne.n	401998 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40191c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40191e:	f387 8811 	msr	BASEPRI, r7
}
  401922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192a:	b672      	cpsid	i
  40192c:	f383 8811 	msr	BASEPRI, r3
  401930:	f3bf 8f6f 	isb	sy
  401934:	f3bf 8f4f 	dsb	sy
  401938:	b662      	cpsie	i
  40193a:	e7fe      	b.n	40193a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40193c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40193e:	2800      	cmp	r0, #0
  401940:	d0bf      	beq.n	4018c2 <xQueueGenericSendFromISR+0xe>
  401942:	f04f 0380 	mov.w	r3, #128	; 0x80
  401946:	b672      	cpsid	i
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	f3bf 8f6f 	isb	sy
  401950:	f3bf 8f4f 	dsb	sy
  401954:	b662      	cpsie	i
  401956:	e7fe      	b.n	401956 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401958:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40195a:	2801      	cmp	r0, #1
  40195c:	d0b3      	beq.n	4018c6 <xQueueGenericSendFromISR+0x12>
  40195e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401962:	b672      	cpsid	i
  401964:	f383 8811 	msr	BASEPRI, r3
  401968:	f3bf 8f6f 	isb	sy
  40196c:	f3bf 8f4f 	dsb	sy
  401970:	b662      	cpsie	i
  401972:	e7fe      	b.n	401972 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401974:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401976:	b18b      	cbz	r3, 40199c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401978:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40197c:	4b0c      	ldr	r3, [pc, #48]	; (4019b0 <xQueueGenericSendFromISR+0xfc>)
  40197e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401980:	b175      	cbz	r5, 4019a0 <xQueueGenericSendFromISR+0xec>
  401982:	b168      	cbz	r0, 4019a0 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401984:	2001      	movs	r0, #1
  401986:	6028      	str	r0, [r5, #0]
  401988:	e7c9      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40198a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40198c:	3301      	adds	r3, #1
  40198e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401990:	2001      	movs	r0, #1
  401992:	e7c4      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401994:	2000      	movs	r0, #0
  401996:	e7c2      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401998:	2001      	movs	r0, #1
  40199a:	e7c0      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
  40199c:	2001      	movs	r0, #1
  40199e:	e7be      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
  4019a0:	2001      	movs	r0, #1
  4019a2:	e7bc      	b.n	40191e <xQueueGenericSendFromISR+0x6a>
  4019a4:	0040132d 	.word	0x0040132d
  4019a8:	004013e5 	.word	0x004013e5
  4019ac:	0040146d 	.word	0x0040146d
  4019b0:	004025b9 	.word	0x004025b9

004019b4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  4019b4:	b170      	cbz	r0, 4019d4 <xQueueGiveFromISR+0x20>
{
  4019b6:	b570      	push	{r4, r5, r6, lr}
  4019b8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4019ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4019bc:	b1ab      	cbz	r3, 4019ea <xQueueGiveFromISR+0x36>
  4019be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019c2:	b672      	cpsid	i
  4019c4:	f383 8811 	msr	BASEPRI, r3
  4019c8:	f3bf 8f6f 	isb	sy
  4019cc:	f3bf 8f4f 	dsb	sy
  4019d0:	b662      	cpsie	i
  4019d2:	e7fe      	b.n	4019d2 <xQueueGiveFromISR+0x1e>
  4019d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d8:	b672      	cpsid	i
  4019da:	f383 8811 	msr	BASEPRI, r3
  4019de:	f3bf 8f6f 	isb	sy
  4019e2:	f3bf 8f4f 	dsb	sy
  4019e6:	b662      	cpsie	i
  4019e8:	e7fe      	b.n	4019e8 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019ea:	6803      	ldr	r3, [r0, #0]
  4019ec:	b333      	cbz	r3, 401a3c <xQueueGiveFromISR+0x88>
  4019ee:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019f0:	4b25      	ldr	r3, [pc, #148]	; (401a88 <xQueueGiveFromISR+0xd4>)
  4019f2:	4798      	blx	r3
	__asm volatile
  4019f4:	f3ef 8611 	mrs	r6, BASEPRI
  4019f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019fc:	b672      	cpsid	i
  4019fe:	f383 8811 	msr	BASEPRI, r3
  401a02:	f3bf 8f6f 	isb	sy
  401a06:	f3bf 8f4f 	dsb	sy
  401a0a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401a0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a10:	429a      	cmp	r2, r3
  401a12:	d231      	bcs.n	401a78 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a16:	3301      	adds	r3, #1
  401a18:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401a1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a20:	d125      	bne.n	401a6e <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401a24:	b1c3      	cbz	r3, 401a58 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401a26:	2100      	movs	r1, #0
  401a28:	4620      	mov	r0, r4
  401a2a:	4b18      	ldr	r3, [pc, #96]	; (401a8c <xQueueGiveFromISR+0xd8>)
  401a2c:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a2e:	b32d      	cbz	r5, 401a7c <xQueueGiveFromISR+0xc8>
  401a30:	2801      	cmp	r0, #1
  401a32:	d123      	bne.n	401a7c <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a34:	6028      	str	r0, [r5, #0]
	__asm volatile
  401a36:	f386 8811 	msr	BASEPRI, r6
}
  401a3a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a3c:	6843      	ldr	r3, [r0, #4]
  401a3e:	2b00      	cmp	r3, #0
  401a40:	d0d5      	beq.n	4019ee <xQueueGiveFromISR+0x3a>
	__asm volatile
  401a42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a46:	b672      	cpsid	i
  401a48:	f383 8811 	msr	BASEPRI, r3
  401a4c:	f3bf 8f6f 	isb	sy
  401a50:	f3bf 8f4f 	dsb	sy
  401a54:	b662      	cpsie	i
  401a56:	e7fe      	b.n	401a56 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a5a:	b18b      	cbz	r3, 401a80 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a60:	4b0b      	ldr	r3, [pc, #44]	; (401a90 <xQueueGiveFromISR+0xdc>)
  401a62:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a64:	b175      	cbz	r5, 401a84 <xQueueGiveFromISR+0xd0>
  401a66:	b168      	cbz	r0, 401a84 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a68:	2001      	movs	r0, #1
  401a6a:	6028      	str	r0, [r5, #0]
  401a6c:	e7e3      	b.n	401a36 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401a6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a70:	3301      	adds	r3, #1
  401a72:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a74:	2001      	movs	r0, #1
  401a76:	e7de      	b.n	401a36 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401a78:	2000      	movs	r0, #0
  401a7a:	e7dc      	b.n	401a36 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401a7c:	2001      	movs	r0, #1
  401a7e:	e7da      	b.n	401a36 <xQueueGiveFromISR+0x82>
  401a80:	2001      	movs	r0, #1
  401a82:	e7d8      	b.n	401a36 <xQueueGiveFromISR+0x82>
  401a84:	2001      	movs	r0, #1
  401a86:	e7d6      	b.n	401a36 <xQueueGiveFromISR+0x82>
  401a88:	0040132d 	.word	0x0040132d
  401a8c:	0040146d 	.word	0x0040146d
  401a90:	004025b9 	.word	0x004025b9

00401a94 <xQueueGenericReceive>:
{
  401a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a98:	b084      	sub	sp, #16
  401a9a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401a9c:	b198      	cbz	r0, 401ac6 <xQueueGenericReceive+0x32>
  401a9e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401aa0:	b1e1      	cbz	r1, 401adc <xQueueGenericReceive+0x48>
  401aa2:	4698      	mov	r8, r3
  401aa4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401aa6:	4b61      	ldr	r3, [pc, #388]	; (401c2c <xQueueGenericReceive+0x198>)
  401aa8:	4798      	blx	r3
  401aaa:	bb28      	cbnz	r0, 401af8 <xQueueGenericReceive+0x64>
  401aac:	9b01      	ldr	r3, [sp, #4]
  401aae:	b353      	cbz	r3, 401b06 <xQueueGenericReceive+0x72>
  401ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab4:	b672      	cpsid	i
  401ab6:	f383 8811 	msr	BASEPRI, r3
  401aba:	f3bf 8f6f 	isb	sy
  401abe:	f3bf 8f4f 	dsb	sy
  401ac2:	b662      	cpsie	i
  401ac4:	e7fe      	b.n	401ac4 <xQueueGenericReceive+0x30>
  401ac6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aca:	b672      	cpsid	i
  401acc:	f383 8811 	msr	BASEPRI, r3
  401ad0:	f3bf 8f6f 	isb	sy
  401ad4:	f3bf 8f4f 	dsb	sy
  401ad8:	b662      	cpsie	i
  401ada:	e7fe      	b.n	401ada <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401adc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ade:	2a00      	cmp	r2, #0
  401ae0:	d0df      	beq.n	401aa2 <xQueueGenericReceive+0xe>
  401ae2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae6:	b672      	cpsid	i
  401ae8:	f383 8811 	msr	BASEPRI, r3
  401aec:	f3bf 8f6f 	isb	sy
  401af0:	f3bf 8f4f 	dsb	sy
  401af4:	b662      	cpsie	i
  401af6:	e7fe      	b.n	401af6 <xQueueGenericReceive+0x62>
  401af8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401afa:	4d4d      	ldr	r5, [pc, #308]	; (401c30 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401afc:	f8df a160 	ldr.w	sl, [pc, #352]	; 401c60 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401b00:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401c40 <xQueueGenericReceive+0x1ac>
  401b04:	e04b      	b.n	401b9e <xQueueGenericReceive+0x10a>
  401b06:	2600      	movs	r6, #0
  401b08:	e7f7      	b.n	401afa <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401b0a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401b0c:	4639      	mov	r1, r7
  401b0e:	4620      	mov	r0, r4
  401b10:	4b48      	ldr	r3, [pc, #288]	; (401c34 <xQueueGenericReceive+0x1a0>)
  401b12:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401b14:	f1b8 0f00 	cmp.w	r8, #0
  401b18:	d11d      	bne.n	401b56 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b1c:	3b01      	subs	r3, #1
  401b1e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b20:	6823      	ldr	r3, [r4, #0]
  401b22:	b913      	cbnz	r3, 401b2a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401b24:	4b44      	ldr	r3, [pc, #272]	; (401c38 <xQueueGenericReceive+0x1a4>)
  401b26:	4798      	blx	r3
  401b28:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401b2a:	6923      	ldr	r3, [r4, #16]
  401b2c:	b16b      	cbz	r3, 401b4a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401b2e:	f104 0010 	add.w	r0, r4, #16
  401b32:	4b42      	ldr	r3, [pc, #264]	; (401c3c <xQueueGenericReceive+0x1a8>)
  401b34:	4798      	blx	r3
  401b36:	2801      	cmp	r0, #1
  401b38:	d107      	bne.n	401b4a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b3e:	4b40      	ldr	r3, [pc, #256]	; (401c40 <xQueueGenericReceive+0x1ac>)
  401b40:	601a      	str	r2, [r3, #0]
  401b42:	f3bf 8f4f 	dsb	sy
  401b46:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b4a:	4b3e      	ldr	r3, [pc, #248]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401b4c:	4798      	blx	r3
				return pdPASS;
  401b4e:	2001      	movs	r0, #1
}
  401b50:	b004      	add	sp, #16
  401b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401b56:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d0f5      	beq.n	401b4a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401b5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b62:	4b36      	ldr	r3, [pc, #216]	; (401c3c <xQueueGenericReceive+0x1a8>)
  401b64:	4798      	blx	r3
  401b66:	2800      	cmp	r0, #0
  401b68:	d0ef      	beq.n	401b4a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b6e:	4b34      	ldr	r3, [pc, #208]	; (401c40 <xQueueGenericReceive+0x1ac>)
  401b70:	601a      	str	r2, [r3, #0]
  401b72:	f3bf 8f4f 	dsb	sy
  401b76:	f3bf 8f6f 	isb	sy
  401b7a:	e7e6      	b.n	401b4a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401b7c:	4b31      	ldr	r3, [pc, #196]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401b7e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b80:	2000      	movs	r0, #0
  401b82:	e7e5      	b.n	401b50 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401b84:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401b86:	6860      	ldr	r0, [r4, #4]
  401b88:	4b2f      	ldr	r3, [pc, #188]	; (401c48 <xQueueGenericReceive+0x1b4>)
  401b8a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401b8c:	4b2d      	ldr	r3, [pc, #180]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401b8e:	4798      	blx	r3
  401b90:	e030      	b.n	401bf4 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401b92:	4620      	mov	r0, r4
  401b94:	4b2d      	ldr	r3, [pc, #180]	; (401c4c <xQueueGenericReceive+0x1b8>)
  401b96:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b98:	4b2d      	ldr	r3, [pc, #180]	; (401c50 <xQueueGenericReceive+0x1bc>)
  401b9a:	4798      	blx	r3
  401b9c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401b9e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ba2:	2b00      	cmp	r3, #0
  401ba4:	d1b1      	bne.n	401b0a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ba6:	9b01      	ldr	r3, [sp, #4]
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d0e7      	beq.n	401b7c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401bac:	b90e      	cbnz	r6, 401bb2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401bae:	a802      	add	r0, sp, #8
  401bb0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401bb2:	4b24      	ldr	r3, [pc, #144]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401bb4:	4798      	blx	r3
		vTaskSuspendAll();
  401bb6:	4b27      	ldr	r3, [pc, #156]	; (401c54 <xQueueGenericReceive+0x1c0>)
  401bb8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401bba:	47a8      	blx	r5
  401bbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bc2:	d101      	bne.n	401bc8 <xQueueGenericReceive+0x134>
  401bc4:	2300      	movs	r3, #0
  401bc6:	6463      	str	r3, [r4, #68]	; 0x44
  401bc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bce:	d101      	bne.n	401bd4 <xQueueGenericReceive+0x140>
  401bd0:	2300      	movs	r3, #0
  401bd2:	64a3      	str	r3, [r4, #72]	; 0x48
  401bd4:	4b1b      	ldr	r3, [pc, #108]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401bd6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401bd8:	a901      	add	r1, sp, #4
  401bda:	a802      	add	r0, sp, #8
  401bdc:	4b1e      	ldr	r3, [pc, #120]	; (401c58 <xQueueGenericReceive+0x1c4>)
  401bde:	4798      	blx	r3
  401be0:	b9e8      	cbnz	r0, 401c1e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401be2:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401be4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401be6:	4b17      	ldr	r3, [pc, #92]	; (401c44 <xQueueGenericReceive+0x1b0>)
  401be8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401bea:	2e00      	cmp	r6, #0
  401bec:	d1d1      	bne.n	401b92 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401bee:	6823      	ldr	r3, [r4, #0]
  401bf0:	2b00      	cmp	r3, #0
  401bf2:	d0c7      	beq.n	401b84 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401bf4:	9901      	ldr	r1, [sp, #4]
  401bf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bfa:	4b18      	ldr	r3, [pc, #96]	; (401c5c <xQueueGenericReceive+0x1c8>)
  401bfc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401bfe:	4620      	mov	r0, r4
  401c00:	4b12      	ldr	r3, [pc, #72]	; (401c4c <xQueueGenericReceive+0x1b8>)
  401c02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c04:	4b12      	ldr	r3, [pc, #72]	; (401c50 <xQueueGenericReceive+0x1bc>)
  401c06:	4798      	blx	r3
  401c08:	2800      	cmp	r0, #0
  401c0a:	d1c7      	bne.n	401b9c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401c0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c10:	f8c9 3000 	str.w	r3, [r9]
  401c14:	f3bf 8f4f 	dsb	sy
  401c18:	f3bf 8f6f 	isb	sy
  401c1c:	e7be      	b.n	401b9c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401c1e:	4620      	mov	r0, r4
  401c20:	4b0a      	ldr	r3, [pc, #40]	; (401c4c <xQueueGenericReceive+0x1b8>)
  401c22:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c24:	4b0a      	ldr	r3, [pc, #40]	; (401c50 <xQueueGenericReceive+0x1bc>)
  401c26:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401c28:	2000      	movs	r0, #0
  401c2a:	e791      	b.n	401b50 <xQueueGenericReceive+0xbc>
  401c2c:	00402721 	.word	0x00402721
  401c30:	00401135 	.word	0x00401135
  401c34:	004014f5 	.word	0x004014f5
  401c38:	004028a1 	.word	0x004028a1
  401c3c:	004025b9 	.word	0x004025b9
  401c40:	e000ed04 	.word	0xe000ed04
  401c44:	00401181 	.word	0x00401181
  401c48:	00402741 	.word	0x00402741
  401c4c:	0040151d 	.word	0x0040151d
  401c50:	0040219d 	.word	0x0040219d
  401c54:	00402035 	.word	0x00402035
  401c58:	00402681 	.word	0x00402681
  401c5c:	004024b5 	.word	0x004024b5
  401c60:	00402651 	.word	0x00402651

00401c64 <vQueueAddToRegistry>:
	{
  401c64:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401c66:	4b0b      	ldr	r3, [pc, #44]	; (401c94 <vQueueAddToRegistry+0x30>)
  401c68:	681b      	ldr	r3, [r3, #0]
  401c6a:	b153      	cbz	r3, 401c82 <vQueueAddToRegistry+0x1e>
  401c6c:	2301      	movs	r3, #1
  401c6e:	4c09      	ldr	r4, [pc, #36]	; (401c94 <vQueueAddToRegistry+0x30>)
  401c70:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401c74:	b132      	cbz	r2, 401c84 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c76:	3301      	adds	r3, #1
  401c78:	2b08      	cmp	r3, #8
  401c7a:	d1f9      	bne.n	401c70 <vQueueAddToRegistry+0xc>
	}
  401c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c80:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c82:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401c84:	4a03      	ldr	r2, [pc, #12]	; (401c94 <vQueueAddToRegistry+0x30>)
  401c86:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401c8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401c8e:	6058      	str	r0, [r3, #4]
				break;
  401c90:	e7f4      	b.n	401c7c <vQueueAddToRegistry+0x18>
  401c92:	bf00      	nop
  401c94:	20400c68 	.word	0x20400c68

00401c98 <vQueueWaitForMessageRestricted>:
	{
  401c98:	b570      	push	{r4, r5, r6, lr}
  401c9a:	4604      	mov	r4, r0
  401c9c:	460d      	mov	r5, r1
  401c9e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401ca0:	4b0f      	ldr	r3, [pc, #60]	; (401ce0 <vQueueWaitForMessageRestricted+0x48>)
  401ca2:	4798      	blx	r3
  401ca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401caa:	d00b      	beq.n	401cc4 <vQueueWaitForMessageRestricted+0x2c>
  401cac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cae:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cb2:	d00a      	beq.n	401cca <vQueueWaitForMessageRestricted+0x32>
  401cb4:	4b0b      	ldr	r3, [pc, #44]	; (401ce4 <vQueueWaitForMessageRestricted+0x4c>)
  401cb6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401cba:	b14b      	cbz	r3, 401cd0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401cbc:	4620      	mov	r0, r4
  401cbe:	4b0a      	ldr	r3, [pc, #40]	; (401ce8 <vQueueWaitForMessageRestricted+0x50>)
  401cc0:	4798      	blx	r3
  401cc2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401cc4:	2300      	movs	r3, #0
  401cc6:	6463      	str	r3, [r4, #68]	; 0x44
  401cc8:	e7f0      	b.n	401cac <vQueueWaitForMessageRestricted+0x14>
  401cca:	2300      	movs	r3, #0
  401ccc:	64a3      	str	r3, [r4, #72]	; 0x48
  401cce:	e7f1      	b.n	401cb4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401cd0:	4632      	mov	r2, r6
  401cd2:	4629      	mov	r1, r5
  401cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cd8:	4b04      	ldr	r3, [pc, #16]	; (401cec <vQueueWaitForMessageRestricted+0x54>)
  401cda:	4798      	blx	r3
  401cdc:	e7ee      	b.n	401cbc <vQueueWaitForMessageRestricted+0x24>
  401cde:	bf00      	nop
  401ce0:	00401135 	.word	0x00401135
  401ce4:	00401181 	.word	0x00401181
  401ce8:	0040151d 	.word	0x0040151d
  401cec:	00402539 	.word	0x00402539

00401cf0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401cf0:	4b08      	ldr	r3, [pc, #32]	; (401d14 <prvResetNextTaskUnblockTime+0x24>)
  401cf2:	681b      	ldr	r3, [r3, #0]
  401cf4:	681b      	ldr	r3, [r3, #0]
  401cf6:	b13b      	cbz	r3, 401d08 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401cf8:	4b06      	ldr	r3, [pc, #24]	; (401d14 <prvResetNextTaskUnblockTime+0x24>)
  401cfa:	681b      	ldr	r3, [r3, #0]
  401cfc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401cfe:	68db      	ldr	r3, [r3, #12]
  401d00:	685a      	ldr	r2, [r3, #4]
  401d02:	4b05      	ldr	r3, [pc, #20]	; (401d18 <prvResetNextTaskUnblockTime+0x28>)
  401d04:	601a      	str	r2, [r3, #0]
  401d06:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d08:	f04f 32ff 	mov.w	r2, #4294967295
  401d0c:	4b02      	ldr	r3, [pc, #8]	; (401d18 <prvResetNextTaskUnblockTime+0x28>)
  401d0e:	601a      	str	r2, [r3, #0]
  401d10:	4770      	bx	lr
  401d12:	bf00      	nop
  401d14:	20400a64 	.word	0x20400a64
  401d18:	20400b10 	.word	0x20400b10

00401d1c <prvAddCurrentTaskToDelayedList>:
{
  401d1c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d1e:	4b0f      	ldr	r3, [pc, #60]	; (401d5c <prvAddCurrentTaskToDelayedList+0x40>)
  401d20:	681b      	ldr	r3, [r3, #0]
  401d22:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401d24:	4b0e      	ldr	r3, [pc, #56]	; (401d60 <prvAddCurrentTaskToDelayedList+0x44>)
  401d26:	681b      	ldr	r3, [r3, #0]
  401d28:	4298      	cmp	r0, r3
  401d2a:	d30e      	bcc.n	401d4a <prvAddCurrentTaskToDelayedList+0x2e>
  401d2c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d2e:	4b0d      	ldr	r3, [pc, #52]	; (401d64 <prvAddCurrentTaskToDelayedList+0x48>)
  401d30:	6818      	ldr	r0, [r3, #0]
  401d32:	4b0a      	ldr	r3, [pc, #40]	; (401d5c <prvAddCurrentTaskToDelayedList+0x40>)
  401d34:	6819      	ldr	r1, [r3, #0]
  401d36:	3104      	adds	r1, #4
  401d38:	4b0b      	ldr	r3, [pc, #44]	; (401d68 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d3a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401d3c:	4b0b      	ldr	r3, [pc, #44]	; (401d6c <prvAddCurrentTaskToDelayedList+0x50>)
  401d3e:	681b      	ldr	r3, [r3, #0]
  401d40:	429c      	cmp	r4, r3
  401d42:	d201      	bcs.n	401d48 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401d44:	4b09      	ldr	r3, [pc, #36]	; (401d6c <prvAddCurrentTaskToDelayedList+0x50>)
  401d46:	601c      	str	r4, [r3, #0]
  401d48:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d4a:	4b09      	ldr	r3, [pc, #36]	; (401d70 <prvAddCurrentTaskToDelayedList+0x54>)
  401d4c:	6818      	ldr	r0, [r3, #0]
  401d4e:	4b03      	ldr	r3, [pc, #12]	; (401d5c <prvAddCurrentTaskToDelayedList+0x40>)
  401d50:	6819      	ldr	r1, [r3, #0]
  401d52:	3104      	adds	r1, #4
  401d54:	4b04      	ldr	r3, [pc, #16]	; (401d68 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d56:	4798      	blx	r3
  401d58:	bd10      	pop	{r4, pc}
  401d5a:	bf00      	nop
  401d5c:	20400a60 	.word	0x20400a60
  401d60:	20400b58 	.word	0x20400b58
  401d64:	20400a64 	.word	0x20400a64
  401d68:	0040101d 	.word	0x0040101d
  401d6c:	20400b10 	.word	0x20400b10
  401d70:	20400a68 	.word	0x20400a68

00401d74 <xTaskGenericCreate>:
{
  401d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d78:	b083      	sub	sp, #12
  401d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401d7c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401d80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401d82:	b160      	cbz	r0, 401d9e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401d84:	2d04      	cmp	r5, #4
  401d86:	d915      	bls.n	401db4 <xTaskGenericCreate+0x40>
  401d88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d8c:	b672      	cpsid	i
  401d8e:	f383 8811 	msr	BASEPRI, r3
  401d92:	f3bf 8f6f 	isb	sy
  401d96:	f3bf 8f4f 	dsb	sy
  401d9a:	b662      	cpsie	i
  401d9c:	e7fe      	b.n	401d9c <xTaskGenericCreate+0x28>
  401d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401da2:	b672      	cpsid	i
  401da4:	f383 8811 	msr	BASEPRI, r3
  401da8:	f3bf 8f6f 	isb	sy
  401dac:	f3bf 8f4f 	dsb	sy
  401db0:	b662      	cpsie	i
  401db2:	e7fe      	b.n	401db2 <xTaskGenericCreate+0x3e>
  401db4:	9001      	str	r0, [sp, #4]
  401db6:	4698      	mov	r8, r3
  401db8:	4691      	mov	r9, r2
  401dba:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dbc:	b936      	cbnz	r6, 401dcc <xTaskGenericCreate+0x58>
  401dbe:	0090      	lsls	r0, r2, #2
  401dc0:	4b62      	ldr	r3, [pc, #392]	; (401f4c <xTaskGenericCreate+0x1d8>)
  401dc2:	4798      	blx	r3
		if( pxStack != NULL )
  401dc4:	4606      	mov	r6, r0
  401dc6:	2800      	cmp	r0, #0
  401dc8:	f000 809e 	beq.w	401f08 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401dcc:	2058      	movs	r0, #88	; 0x58
  401dce:	4b5f      	ldr	r3, [pc, #380]	; (401f4c <xTaskGenericCreate+0x1d8>)
  401dd0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401dd2:	4604      	mov	r4, r0
  401dd4:	2800      	cmp	r0, #0
  401dd6:	f000 8094 	beq.w	401f02 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401dda:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401ddc:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401de0:	21a5      	movs	r1, #165	; 0xa5
  401de2:	4630      	mov	r0, r6
  401de4:	4b5a      	ldr	r3, [pc, #360]	; (401f50 <xTaskGenericCreate+0x1dc>)
  401de6:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401de8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401dec:	444e      	add	r6, r9
  401dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401df0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401df4:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401df8:	783b      	ldrb	r3, [r7, #0]
  401dfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401dfe:	783b      	ldrb	r3, [r7, #0]
  401e00:	2b00      	cmp	r3, #0
  401e02:	f040 8084 	bne.w	401f0e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e06:	2700      	movs	r7, #0
  401e08:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e0c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e0e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e10:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e12:	f104 0904 	add.w	r9, r4, #4
  401e16:	4648      	mov	r0, r9
  401e18:	f8df b184 	ldr.w	fp, [pc, #388]	; 401fa0 <xTaskGenericCreate+0x22c>
  401e1c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e1e:	f104 0018 	add.w	r0, r4, #24
  401e22:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401e24:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e26:	f1c5 0305 	rsb	r3, r5, #5
  401e2a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401e2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401e2e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401e30:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401e34:	4642      	mov	r2, r8
  401e36:	9901      	ldr	r1, [sp, #4]
  401e38:	4630      	mov	r0, r6
  401e3a:	4b46      	ldr	r3, [pc, #280]	; (401f54 <xTaskGenericCreate+0x1e0>)
  401e3c:	4798      	blx	r3
  401e3e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401e40:	f1ba 0f00 	cmp.w	sl, #0
  401e44:	d001      	beq.n	401e4a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401e46:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401e4a:	4b43      	ldr	r3, [pc, #268]	; (401f58 <xTaskGenericCreate+0x1e4>)
  401e4c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401e4e:	4a43      	ldr	r2, [pc, #268]	; (401f5c <xTaskGenericCreate+0x1e8>)
  401e50:	6813      	ldr	r3, [r2, #0]
  401e52:	3301      	adds	r3, #1
  401e54:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401e56:	4b42      	ldr	r3, [pc, #264]	; (401f60 <xTaskGenericCreate+0x1ec>)
  401e58:	681b      	ldr	r3, [r3, #0]
  401e5a:	2b00      	cmp	r3, #0
  401e5c:	d166      	bne.n	401f2c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401e5e:	4b40      	ldr	r3, [pc, #256]	; (401f60 <xTaskGenericCreate+0x1ec>)
  401e60:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401e62:	6813      	ldr	r3, [r2, #0]
  401e64:	2b01      	cmp	r3, #1
  401e66:	d121      	bne.n	401eac <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401e68:	4f3e      	ldr	r7, [pc, #248]	; (401f64 <xTaskGenericCreate+0x1f0>)
  401e6a:	4638      	mov	r0, r7
  401e6c:	4e3e      	ldr	r6, [pc, #248]	; (401f68 <xTaskGenericCreate+0x1f4>)
  401e6e:	47b0      	blx	r6
  401e70:	f107 0014 	add.w	r0, r7, #20
  401e74:	47b0      	blx	r6
  401e76:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401e7a:	47b0      	blx	r6
  401e7c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401e80:	47b0      	blx	r6
  401e82:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401e86:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401e88:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401fa4 <xTaskGenericCreate+0x230>
  401e8c:	4640      	mov	r0, r8
  401e8e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401e90:	4f36      	ldr	r7, [pc, #216]	; (401f6c <xTaskGenericCreate+0x1f8>)
  401e92:	4638      	mov	r0, r7
  401e94:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401e96:	4836      	ldr	r0, [pc, #216]	; (401f70 <xTaskGenericCreate+0x1fc>)
  401e98:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401e9a:	4836      	ldr	r0, [pc, #216]	; (401f74 <xTaskGenericCreate+0x200>)
  401e9c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401e9e:	4836      	ldr	r0, [pc, #216]	; (401f78 <xTaskGenericCreate+0x204>)
  401ea0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401ea2:	4b36      	ldr	r3, [pc, #216]	; (401f7c <xTaskGenericCreate+0x208>)
  401ea4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ea8:	4b35      	ldr	r3, [pc, #212]	; (401f80 <xTaskGenericCreate+0x20c>)
  401eaa:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401eac:	4a35      	ldr	r2, [pc, #212]	; (401f84 <xTaskGenericCreate+0x210>)
  401eae:	6813      	ldr	r3, [r2, #0]
  401eb0:	3301      	adds	r3, #1
  401eb2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401eb4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401eb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401eb8:	4a33      	ldr	r2, [pc, #204]	; (401f88 <xTaskGenericCreate+0x214>)
  401eba:	6811      	ldr	r1, [r2, #0]
  401ebc:	2301      	movs	r3, #1
  401ebe:	4083      	lsls	r3, r0
  401ec0:	430b      	orrs	r3, r1
  401ec2:	6013      	str	r3, [r2, #0]
  401ec4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ec8:	4649      	mov	r1, r9
  401eca:	4b26      	ldr	r3, [pc, #152]	; (401f64 <xTaskGenericCreate+0x1f0>)
  401ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ed0:	4b2e      	ldr	r3, [pc, #184]	; (401f8c <xTaskGenericCreate+0x218>)
  401ed2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401ed4:	4b2e      	ldr	r3, [pc, #184]	; (401f90 <xTaskGenericCreate+0x21c>)
  401ed6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401ed8:	4b2e      	ldr	r3, [pc, #184]	; (401f94 <xTaskGenericCreate+0x220>)
  401eda:	681b      	ldr	r3, [r3, #0]
  401edc:	2b00      	cmp	r3, #0
  401ede:	d031      	beq.n	401f44 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401ee0:	4b1f      	ldr	r3, [pc, #124]	; (401f60 <xTaskGenericCreate+0x1ec>)
  401ee2:	681b      	ldr	r3, [r3, #0]
  401ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ee6:	429d      	cmp	r5, r3
  401ee8:	d92e      	bls.n	401f48 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401eee:	4b2a      	ldr	r3, [pc, #168]	; (401f98 <xTaskGenericCreate+0x224>)
  401ef0:	601a      	str	r2, [r3, #0]
  401ef2:	f3bf 8f4f 	dsb	sy
  401ef6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401efa:	2001      	movs	r0, #1
}
  401efc:	b003      	add	sp, #12
  401efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f02:	4630      	mov	r0, r6
  401f04:	4b25      	ldr	r3, [pc, #148]	; (401f9c <xTaskGenericCreate+0x228>)
  401f06:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f08:	f04f 30ff 	mov.w	r0, #4294967295
  401f0c:	e7f6      	b.n	401efc <xTaskGenericCreate+0x188>
  401f0e:	463b      	mov	r3, r7
  401f10:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f14:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f16:	7859      	ldrb	r1, [r3, #1]
  401f18:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f1c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401f20:	2900      	cmp	r1, #0
  401f22:	f43f af70 	beq.w	401e06 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f26:	42bb      	cmp	r3, r7
  401f28:	d1f5      	bne.n	401f16 <xTaskGenericCreate+0x1a2>
  401f2a:	e76c      	b.n	401e06 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401f2c:	4b19      	ldr	r3, [pc, #100]	; (401f94 <xTaskGenericCreate+0x220>)
  401f2e:	681b      	ldr	r3, [r3, #0]
  401f30:	2b00      	cmp	r3, #0
  401f32:	d1bb      	bne.n	401eac <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401f34:	4b0a      	ldr	r3, [pc, #40]	; (401f60 <xTaskGenericCreate+0x1ec>)
  401f36:	681b      	ldr	r3, [r3, #0]
  401f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f3a:	429d      	cmp	r5, r3
  401f3c:	d3b6      	bcc.n	401eac <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401f3e:	4b08      	ldr	r3, [pc, #32]	; (401f60 <xTaskGenericCreate+0x1ec>)
  401f40:	601c      	str	r4, [r3, #0]
  401f42:	e7b3      	b.n	401eac <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401f44:	2001      	movs	r0, #1
  401f46:	e7d9      	b.n	401efc <xTaskGenericCreate+0x188>
  401f48:	2001      	movs	r0, #1
	return xReturn;
  401f4a:	e7d7      	b.n	401efc <xTaskGenericCreate+0x188>
  401f4c:	00401391 	.word	0x00401391
  401f50:	004045dd 	.word	0x004045dd
  401f54:	004010e9 	.word	0x004010e9
  401f58:	00401135 	.word	0x00401135
  401f5c:	20400ad0 	.word	0x20400ad0
  401f60:	20400a60 	.word	0x20400a60
  401f64:	20400a6c 	.word	0x20400a6c
  401f68:	00400fe9 	.word	0x00400fe9
  401f6c:	20400afc 	.word	0x20400afc
  401f70:	20400b18 	.word	0x20400b18
  401f74:	20400b44 	.word	0x20400b44
  401f78:	20400b30 	.word	0x20400b30
  401f7c:	20400a64 	.word	0x20400a64
  401f80:	20400a68 	.word	0x20400a68
  401f84:	20400adc 	.word	0x20400adc
  401f88:	20400ae4 	.word	0x20400ae4
  401f8c:	00401005 	.word	0x00401005
  401f90:	00401181 	.word	0x00401181
  401f94:	20400b2c 	.word	0x20400b2c
  401f98:	e000ed04 	.word	0xe000ed04
  401f9c:	004013c1 	.word	0x004013c1
  401fa0:	00400fff 	.word	0x00400fff
  401fa4:	20400ae8 	.word	0x20400ae8

00401fa8 <vTaskStartScheduler>:
{
  401fa8:	b510      	push	{r4, lr}
  401faa:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401fac:	2300      	movs	r3, #0
  401fae:	9303      	str	r3, [sp, #12]
  401fb0:	9302      	str	r3, [sp, #8]
  401fb2:	9301      	str	r3, [sp, #4]
  401fb4:	9300      	str	r3, [sp, #0]
  401fb6:	2282      	movs	r2, #130	; 0x82
  401fb8:	4916      	ldr	r1, [pc, #88]	; (402014 <vTaskStartScheduler+0x6c>)
  401fba:	4817      	ldr	r0, [pc, #92]	; (402018 <vTaskStartScheduler+0x70>)
  401fbc:	4c17      	ldr	r4, [pc, #92]	; (40201c <vTaskStartScheduler+0x74>)
  401fbe:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401fc0:	2801      	cmp	r0, #1
  401fc2:	d00b      	beq.n	401fdc <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401fc4:	bb20      	cbnz	r0, 402010 <vTaskStartScheduler+0x68>
  401fc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fca:	b672      	cpsid	i
  401fcc:	f383 8811 	msr	BASEPRI, r3
  401fd0:	f3bf 8f6f 	isb	sy
  401fd4:	f3bf 8f4f 	dsb	sy
  401fd8:	b662      	cpsie	i
  401fda:	e7fe      	b.n	401fda <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401fdc:	4b10      	ldr	r3, [pc, #64]	; (402020 <vTaskStartScheduler+0x78>)
  401fde:	4798      	blx	r3
	if( xReturn == pdPASS )
  401fe0:	2801      	cmp	r0, #1
  401fe2:	d1ef      	bne.n	401fc4 <vTaskStartScheduler+0x1c>
  401fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe8:	b672      	cpsid	i
  401fea:	f383 8811 	msr	BASEPRI, r3
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	f3bf 8f4f 	dsb	sy
  401ff6:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401ff8:	f04f 32ff 	mov.w	r2, #4294967295
  401ffc:	4b09      	ldr	r3, [pc, #36]	; (402024 <vTaskStartScheduler+0x7c>)
  401ffe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402000:	2201      	movs	r2, #1
  402002:	4b09      	ldr	r3, [pc, #36]	; (402028 <vTaskStartScheduler+0x80>)
  402004:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402006:	2200      	movs	r2, #0
  402008:	4b08      	ldr	r3, [pc, #32]	; (40202c <vTaskStartScheduler+0x84>)
  40200a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40200c:	4b08      	ldr	r3, [pc, #32]	; (402030 <vTaskStartScheduler+0x88>)
  40200e:	4798      	blx	r3
}
  402010:	b004      	add	sp, #16
  402012:	bd10      	pop	{r4, pc}
  402014:	00406e58 	.word	0x00406e58
  402018:	0040234d 	.word	0x0040234d
  40201c:	00401d75 	.word	0x00401d75
  402020:	0040298d 	.word	0x0040298d
  402024:	20400b10 	.word	0x20400b10
  402028:	20400b2c 	.word	0x20400b2c
  40202c:	20400b58 	.word	0x20400b58
  402030:	00401269 	.word	0x00401269

00402034 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402034:	4a02      	ldr	r2, [pc, #8]	; (402040 <vTaskSuspendAll+0xc>)
  402036:	6813      	ldr	r3, [r2, #0]
  402038:	3301      	adds	r3, #1
  40203a:	6013      	str	r3, [r2, #0]
  40203c:	4770      	bx	lr
  40203e:	bf00      	nop
  402040:	20400ad8 	.word	0x20400ad8

00402044 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402044:	4b01      	ldr	r3, [pc, #4]	; (40204c <xTaskGetTickCount+0x8>)
  402046:	6818      	ldr	r0, [r3, #0]
}
  402048:	4770      	bx	lr
  40204a:	bf00      	nop
  40204c:	20400b58 	.word	0x20400b58

00402050 <xTaskIncrementTick>:
{
  402050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402054:	4b42      	ldr	r3, [pc, #264]	; (402160 <xTaskIncrementTick+0x110>)
  402056:	681b      	ldr	r3, [r3, #0]
  402058:	2b00      	cmp	r3, #0
  40205a:	d178      	bne.n	40214e <xTaskIncrementTick+0xfe>
		++xTickCount;
  40205c:	4b41      	ldr	r3, [pc, #260]	; (402164 <xTaskIncrementTick+0x114>)
  40205e:	681a      	ldr	r2, [r3, #0]
  402060:	3201      	adds	r2, #1
  402062:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402064:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402066:	b9d6      	cbnz	r6, 40209e <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402068:	4b3f      	ldr	r3, [pc, #252]	; (402168 <xTaskIncrementTick+0x118>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	681b      	ldr	r3, [r3, #0]
  40206e:	b153      	cbz	r3, 402086 <xTaskIncrementTick+0x36>
  402070:	f04f 0380 	mov.w	r3, #128	; 0x80
  402074:	b672      	cpsid	i
  402076:	f383 8811 	msr	BASEPRI, r3
  40207a:	f3bf 8f6f 	isb	sy
  40207e:	f3bf 8f4f 	dsb	sy
  402082:	b662      	cpsie	i
  402084:	e7fe      	b.n	402084 <xTaskIncrementTick+0x34>
  402086:	4a38      	ldr	r2, [pc, #224]	; (402168 <xTaskIncrementTick+0x118>)
  402088:	6811      	ldr	r1, [r2, #0]
  40208a:	4b38      	ldr	r3, [pc, #224]	; (40216c <xTaskIncrementTick+0x11c>)
  40208c:	6818      	ldr	r0, [r3, #0]
  40208e:	6010      	str	r0, [r2, #0]
  402090:	6019      	str	r1, [r3, #0]
  402092:	4a37      	ldr	r2, [pc, #220]	; (402170 <xTaskIncrementTick+0x120>)
  402094:	6813      	ldr	r3, [r2, #0]
  402096:	3301      	adds	r3, #1
  402098:	6013      	str	r3, [r2, #0]
  40209a:	4b36      	ldr	r3, [pc, #216]	; (402174 <xTaskIncrementTick+0x124>)
  40209c:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40209e:	4b36      	ldr	r3, [pc, #216]	; (402178 <xTaskIncrementTick+0x128>)
  4020a0:	681b      	ldr	r3, [r3, #0]
  4020a2:	429e      	cmp	r6, r3
  4020a4:	d218      	bcs.n	4020d8 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4020a6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4020a8:	4b34      	ldr	r3, [pc, #208]	; (40217c <xTaskIncrementTick+0x12c>)
  4020aa:	681b      	ldr	r3, [r3, #0]
  4020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4020b2:	4a33      	ldr	r2, [pc, #204]	; (402180 <xTaskIncrementTick+0x130>)
  4020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4020b8:	2b02      	cmp	r3, #2
  4020ba:	bf28      	it	cs
  4020bc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4020be:	4b31      	ldr	r3, [pc, #196]	; (402184 <xTaskIncrementTick+0x134>)
  4020c0:	681b      	ldr	r3, [r3, #0]
  4020c2:	b90b      	cbnz	r3, 4020c8 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4020c4:	4b30      	ldr	r3, [pc, #192]	; (402188 <xTaskIncrementTick+0x138>)
  4020c6:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4020c8:	4b30      	ldr	r3, [pc, #192]	; (40218c <xTaskIncrementTick+0x13c>)
  4020ca:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4020cc:	2b00      	cmp	r3, #0
}
  4020ce:	bf0c      	ite	eq
  4020d0:	4620      	moveq	r0, r4
  4020d2:	2001      	movne	r0, #1
  4020d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020d8:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020da:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402168 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4020de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402198 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4020e2:	4f2b      	ldr	r7, [pc, #172]	; (402190 <xTaskIncrementTick+0x140>)
  4020e4:	e01f      	b.n	402126 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4020e6:	f04f 32ff 	mov.w	r2, #4294967295
  4020ea:	4b23      	ldr	r3, [pc, #140]	; (402178 <xTaskIncrementTick+0x128>)
  4020ec:	601a      	str	r2, [r3, #0]
						break;
  4020ee:	e7db      	b.n	4020a8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4020f0:	4a21      	ldr	r2, [pc, #132]	; (402178 <xTaskIncrementTick+0x128>)
  4020f2:	6013      	str	r3, [r2, #0]
							break;
  4020f4:	e7d8      	b.n	4020a8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4020f6:	f105 0018 	add.w	r0, r5, #24
  4020fa:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4020fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4020fe:	683a      	ldr	r2, [r7, #0]
  402100:	2301      	movs	r3, #1
  402102:	4083      	lsls	r3, r0
  402104:	4313      	orrs	r3, r2
  402106:	603b      	str	r3, [r7, #0]
  402108:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40210c:	4651      	mov	r1, sl
  40210e:	4b1c      	ldr	r3, [pc, #112]	; (402180 <xTaskIncrementTick+0x130>)
  402110:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402114:	4b1f      	ldr	r3, [pc, #124]	; (402194 <xTaskIncrementTick+0x144>)
  402116:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402118:	4b18      	ldr	r3, [pc, #96]	; (40217c <xTaskIncrementTick+0x12c>)
  40211a:	681b      	ldr	r3, [r3, #0]
  40211c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402120:	429a      	cmp	r2, r3
  402122:	bf28      	it	cs
  402124:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402126:	f8d9 3000 	ldr.w	r3, [r9]
  40212a:	681b      	ldr	r3, [r3, #0]
  40212c:	2b00      	cmp	r3, #0
  40212e:	d0da      	beq.n	4020e6 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402130:	f8d9 3000 	ldr.w	r3, [r9]
  402134:	68db      	ldr	r3, [r3, #12]
  402136:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402138:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40213a:	429e      	cmp	r6, r3
  40213c:	d3d8      	bcc.n	4020f0 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40213e:	f105 0a04 	add.w	sl, r5, #4
  402142:	4650      	mov	r0, sl
  402144:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402146:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402148:	2b00      	cmp	r3, #0
  40214a:	d1d4      	bne.n	4020f6 <xTaskIncrementTick+0xa6>
  40214c:	e7d6      	b.n	4020fc <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40214e:	4a0d      	ldr	r2, [pc, #52]	; (402184 <xTaskIncrementTick+0x134>)
  402150:	6813      	ldr	r3, [r2, #0]
  402152:	3301      	adds	r3, #1
  402154:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402156:	4b0c      	ldr	r3, [pc, #48]	; (402188 <xTaskIncrementTick+0x138>)
  402158:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40215a:	2400      	movs	r4, #0
  40215c:	e7b4      	b.n	4020c8 <xTaskIncrementTick+0x78>
  40215e:	bf00      	nop
  402160:	20400ad8 	.word	0x20400ad8
  402164:	20400b58 	.word	0x20400b58
  402168:	20400a64 	.word	0x20400a64
  40216c:	20400a68 	.word	0x20400a68
  402170:	20400b14 	.word	0x20400b14
  402174:	00401cf1 	.word	0x00401cf1
  402178:	20400b10 	.word	0x20400b10
  40217c:	20400a60 	.word	0x20400a60
  402180:	20400a6c 	.word	0x20400a6c
  402184:	20400ad4 	.word	0x20400ad4
  402188:	00403149 	.word	0x00403149
  40218c:	20400b5c 	.word	0x20400b5c
  402190:	20400ae4 	.word	0x20400ae4
  402194:	00401005 	.word	0x00401005
  402198:	00401051 	.word	0x00401051

0040219c <xTaskResumeAll>:
{
  40219c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4021a0:	4b38      	ldr	r3, [pc, #224]	; (402284 <xTaskResumeAll+0xe8>)
  4021a2:	681b      	ldr	r3, [r3, #0]
  4021a4:	b953      	cbnz	r3, 4021bc <xTaskResumeAll+0x20>
  4021a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021aa:	b672      	cpsid	i
  4021ac:	f383 8811 	msr	BASEPRI, r3
  4021b0:	f3bf 8f6f 	isb	sy
  4021b4:	f3bf 8f4f 	dsb	sy
  4021b8:	b662      	cpsie	i
  4021ba:	e7fe      	b.n	4021ba <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4021bc:	4b32      	ldr	r3, [pc, #200]	; (402288 <xTaskResumeAll+0xec>)
  4021be:	4798      	blx	r3
		--uxSchedulerSuspended;
  4021c0:	4b30      	ldr	r3, [pc, #192]	; (402284 <xTaskResumeAll+0xe8>)
  4021c2:	681a      	ldr	r2, [r3, #0]
  4021c4:	3a01      	subs	r2, #1
  4021c6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021c8:	681b      	ldr	r3, [r3, #0]
  4021ca:	2b00      	cmp	r3, #0
  4021cc:	d155      	bne.n	40227a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4021ce:	4b2f      	ldr	r3, [pc, #188]	; (40228c <xTaskResumeAll+0xf0>)
  4021d0:	681b      	ldr	r3, [r3, #0]
  4021d2:	2b00      	cmp	r3, #0
  4021d4:	d132      	bne.n	40223c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4021d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4021d8:	4b2d      	ldr	r3, [pc, #180]	; (402290 <xTaskResumeAll+0xf4>)
  4021da:	4798      	blx	r3
}
  4021dc:	4620      	mov	r0, r4
  4021de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4021e2:	68fb      	ldr	r3, [r7, #12]
  4021e4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4021e6:	f104 0018 	add.w	r0, r4, #24
  4021ea:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021ec:	f104 0804 	add.w	r8, r4, #4
  4021f0:	4640      	mov	r0, r8
  4021f2:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4021f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021f6:	682a      	ldr	r2, [r5, #0]
  4021f8:	2301      	movs	r3, #1
  4021fa:	4083      	lsls	r3, r0
  4021fc:	4313      	orrs	r3, r2
  4021fe:	602b      	str	r3, [r5, #0]
  402200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402204:	4641      	mov	r1, r8
  402206:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40220a:	4b22      	ldr	r3, [pc, #136]	; (402294 <xTaskResumeAll+0xf8>)
  40220c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40220e:	4b22      	ldr	r3, [pc, #136]	; (402298 <xTaskResumeAll+0xfc>)
  402210:	681b      	ldr	r3, [r3, #0]
  402212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402216:	429a      	cmp	r2, r3
  402218:	d20c      	bcs.n	402234 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40221a:	683b      	ldr	r3, [r7, #0]
  40221c:	2b00      	cmp	r3, #0
  40221e:	d1e0      	bne.n	4021e2 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402220:	4b1e      	ldr	r3, [pc, #120]	; (40229c <xTaskResumeAll+0x100>)
  402222:	681b      	ldr	r3, [r3, #0]
  402224:	b1db      	cbz	r3, 40225e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402226:	4b1d      	ldr	r3, [pc, #116]	; (40229c <xTaskResumeAll+0x100>)
  402228:	681b      	ldr	r3, [r3, #0]
  40222a:	b1c3      	cbz	r3, 40225e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40222c:	4e1c      	ldr	r6, [pc, #112]	; (4022a0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40222e:	4d1d      	ldr	r5, [pc, #116]	; (4022a4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402230:	4c1a      	ldr	r4, [pc, #104]	; (40229c <xTaskResumeAll+0x100>)
  402232:	e00e      	b.n	402252 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402234:	2201      	movs	r2, #1
  402236:	4b1b      	ldr	r3, [pc, #108]	; (4022a4 <xTaskResumeAll+0x108>)
  402238:	601a      	str	r2, [r3, #0]
  40223a:	e7ee      	b.n	40221a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40223c:	4f1a      	ldr	r7, [pc, #104]	; (4022a8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40223e:	4e1b      	ldr	r6, [pc, #108]	; (4022ac <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402240:	4d1b      	ldr	r5, [pc, #108]	; (4022b0 <xTaskResumeAll+0x114>)
  402242:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4022b8 <xTaskResumeAll+0x11c>
  402246:	e7e8      	b.n	40221a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402248:	6823      	ldr	r3, [r4, #0]
  40224a:	3b01      	subs	r3, #1
  40224c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40224e:	6823      	ldr	r3, [r4, #0]
  402250:	b12b      	cbz	r3, 40225e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402252:	47b0      	blx	r6
  402254:	2800      	cmp	r0, #0
  402256:	d0f7      	beq.n	402248 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402258:	2301      	movs	r3, #1
  40225a:	602b      	str	r3, [r5, #0]
  40225c:	e7f4      	b.n	402248 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40225e:	4b11      	ldr	r3, [pc, #68]	; (4022a4 <xTaskResumeAll+0x108>)
  402260:	681b      	ldr	r3, [r3, #0]
  402262:	2b01      	cmp	r3, #1
  402264:	d10b      	bne.n	40227e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40226a:	4b12      	ldr	r3, [pc, #72]	; (4022b4 <xTaskResumeAll+0x118>)
  40226c:	601a      	str	r2, [r3, #0]
  40226e:	f3bf 8f4f 	dsb	sy
  402272:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402276:	2401      	movs	r4, #1
  402278:	e7ae      	b.n	4021d8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40227a:	2400      	movs	r4, #0
  40227c:	e7ac      	b.n	4021d8 <xTaskResumeAll+0x3c>
  40227e:	2400      	movs	r4, #0
  402280:	e7aa      	b.n	4021d8 <xTaskResumeAll+0x3c>
  402282:	bf00      	nop
  402284:	20400ad8 	.word	0x20400ad8
  402288:	00401135 	.word	0x00401135
  40228c:	20400ad0 	.word	0x20400ad0
  402290:	00401181 	.word	0x00401181
  402294:	00401005 	.word	0x00401005
  402298:	20400a60 	.word	0x20400a60
  40229c:	20400ad4 	.word	0x20400ad4
  4022a0:	00402051 	.word	0x00402051
  4022a4:	20400b5c 	.word	0x20400b5c
  4022a8:	20400b18 	.word	0x20400b18
  4022ac:	00401051 	.word	0x00401051
  4022b0:	20400ae4 	.word	0x20400ae4
  4022b4:	e000ed04 	.word	0xe000ed04
  4022b8:	20400a6c 	.word	0x20400a6c

004022bc <vTaskDelay>:
	{
  4022bc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4022be:	2800      	cmp	r0, #0
  4022c0:	d029      	beq.n	402316 <vTaskDelay+0x5a>
  4022c2:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4022c4:	4b18      	ldr	r3, [pc, #96]	; (402328 <vTaskDelay+0x6c>)
  4022c6:	681b      	ldr	r3, [r3, #0]
  4022c8:	b153      	cbz	r3, 4022e0 <vTaskDelay+0x24>
  4022ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ce:	b672      	cpsid	i
  4022d0:	f383 8811 	msr	BASEPRI, r3
  4022d4:	f3bf 8f6f 	isb	sy
  4022d8:	f3bf 8f4f 	dsb	sy
  4022dc:	b662      	cpsie	i
  4022de:	e7fe      	b.n	4022de <vTaskDelay+0x22>
			vTaskSuspendAll();
  4022e0:	4b12      	ldr	r3, [pc, #72]	; (40232c <vTaskDelay+0x70>)
  4022e2:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4022e4:	4b12      	ldr	r3, [pc, #72]	; (402330 <vTaskDelay+0x74>)
  4022e6:	681b      	ldr	r3, [r3, #0]
  4022e8:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022ea:	4b12      	ldr	r3, [pc, #72]	; (402334 <vTaskDelay+0x78>)
  4022ec:	6818      	ldr	r0, [r3, #0]
  4022ee:	3004      	adds	r0, #4
  4022f0:	4b11      	ldr	r3, [pc, #68]	; (402338 <vTaskDelay+0x7c>)
  4022f2:	4798      	blx	r3
  4022f4:	b948      	cbnz	r0, 40230a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4022f6:	4b0f      	ldr	r3, [pc, #60]	; (402334 <vTaskDelay+0x78>)
  4022f8:	681a      	ldr	r2, [r3, #0]
  4022fa:	4910      	ldr	r1, [pc, #64]	; (40233c <vTaskDelay+0x80>)
  4022fc:	680b      	ldr	r3, [r1, #0]
  4022fe:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402300:	2201      	movs	r2, #1
  402302:	4082      	lsls	r2, r0
  402304:	ea23 0302 	bic.w	r3, r3, r2
  402308:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40230a:	4620      	mov	r0, r4
  40230c:	4b0c      	ldr	r3, [pc, #48]	; (402340 <vTaskDelay+0x84>)
  40230e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402310:	4b0c      	ldr	r3, [pc, #48]	; (402344 <vTaskDelay+0x88>)
  402312:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402314:	b938      	cbnz	r0, 402326 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40231a:	4b0b      	ldr	r3, [pc, #44]	; (402348 <vTaskDelay+0x8c>)
  40231c:	601a      	str	r2, [r3, #0]
  40231e:	f3bf 8f4f 	dsb	sy
  402322:	f3bf 8f6f 	isb	sy
  402326:	bd10      	pop	{r4, pc}
  402328:	20400ad8 	.word	0x20400ad8
  40232c:	00402035 	.word	0x00402035
  402330:	20400b58 	.word	0x20400b58
  402334:	20400a60 	.word	0x20400a60
  402338:	00401051 	.word	0x00401051
  40233c:	20400ae4 	.word	0x20400ae4
  402340:	00401d1d 	.word	0x00401d1d
  402344:	0040219d 	.word	0x0040219d
  402348:	e000ed04 	.word	0xe000ed04

0040234c <prvIdleTask>:
{
  40234c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40234e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4023d8 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402352:	4e19      	ldr	r6, [pc, #100]	; (4023b8 <prvIdleTask+0x6c>)
				taskYIELD();
  402354:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4023dc <prvIdleTask+0x90>
  402358:	e02a      	b.n	4023b0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40235a:	4b18      	ldr	r3, [pc, #96]	; (4023bc <prvIdleTask+0x70>)
  40235c:	681b      	ldr	r3, [r3, #0]
  40235e:	2b01      	cmp	r3, #1
  402360:	d81e      	bhi.n	4023a0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402362:	682b      	ldr	r3, [r5, #0]
  402364:	2b00      	cmp	r3, #0
  402366:	d0f8      	beq.n	40235a <prvIdleTask+0xe>
			vTaskSuspendAll();
  402368:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40236a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40236c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40236e:	2c00      	cmp	r4, #0
  402370:	d0f7      	beq.n	402362 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402372:	4b13      	ldr	r3, [pc, #76]	; (4023c0 <prvIdleTask+0x74>)
  402374:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402376:	68f3      	ldr	r3, [r6, #12]
  402378:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40237a:	1d20      	adds	r0, r4, #4
  40237c:	4b11      	ldr	r3, [pc, #68]	; (4023c4 <prvIdleTask+0x78>)
  40237e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402380:	4a11      	ldr	r2, [pc, #68]	; (4023c8 <prvIdleTask+0x7c>)
  402382:	6813      	ldr	r3, [r2, #0]
  402384:	3b01      	subs	r3, #1
  402386:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402388:	682b      	ldr	r3, [r5, #0]
  40238a:	3b01      	subs	r3, #1
  40238c:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40238e:	4b0f      	ldr	r3, [pc, #60]	; (4023cc <prvIdleTask+0x80>)
  402390:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402392:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402394:	f8df a048 	ldr.w	sl, [pc, #72]	; 4023e0 <prvIdleTask+0x94>
  402398:	47d0      	blx	sl
		vPortFree( pxTCB );
  40239a:	4620      	mov	r0, r4
  40239c:	47d0      	blx	sl
  40239e:	e7e0      	b.n	402362 <prvIdleTask+0x16>
				taskYIELD();
  4023a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4023a4:	f8c9 3000 	str.w	r3, [r9]
  4023a8:	f3bf 8f4f 	dsb	sy
  4023ac:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4023b0:	4d07      	ldr	r5, [pc, #28]	; (4023d0 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4023b2:	4f08      	ldr	r7, [pc, #32]	; (4023d4 <prvIdleTask+0x88>)
  4023b4:	e7d5      	b.n	402362 <prvIdleTask+0x16>
  4023b6:	bf00      	nop
  4023b8:	20400b44 	.word	0x20400b44
  4023bc:	20400a6c 	.word	0x20400a6c
  4023c0:	00401135 	.word	0x00401135
  4023c4:	00401051 	.word	0x00401051
  4023c8:	20400ad0 	.word	0x20400ad0
  4023cc:	00401181 	.word	0x00401181
  4023d0:	20400ae0 	.word	0x20400ae0
  4023d4:	0040219d 	.word	0x0040219d
  4023d8:	00402035 	.word	0x00402035
  4023dc:	e000ed04 	.word	0xe000ed04
  4023e0:	004013c1 	.word	0x004013c1

004023e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4023e4:	4b2d      	ldr	r3, [pc, #180]	; (40249c <vTaskSwitchContext+0xb8>)
  4023e6:	681b      	ldr	r3, [r3, #0]
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	d12c      	bne.n	402446 <vTaskSwitchContext+0x62>
{
  4023ec:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4023ee:	2200      	movs	r2, #0
  4023f0:	4b2b      	ldr	r3, [pc, #172]	; (4024a0 <vTaskSwitchContext+0xbc>)
  4023f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4023f4:	4b2b      	ldr	r3, [pc, #172]	; (4024a4 <vTaskSwitchContext+0xc0>)
  4023f6:	681b      	ldr	r3, [r3, #0]
  4023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023fa:	681a      	ldr	r2, [r3, #0]
  4023fc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402400:	d103      	bne.n	40240a <vTaskSwitchContext+0x26>
  402402:	685a      	ldr	r2, [r3, #4]
  402404:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402408:	d021      	beq.n	40244e <vTaskSwitchContext+0x6a>
  40240a:	4b26      	ldr	r3, [pc, #152]	; (4024a4 <vTaskSwitchContext+0xc0>)
  40240c:	6818      	ldr	r0, [r3, #0]
  40240e:	6819      	ldr	r1, [r3, #0]
  402410:	3134      	adds	r1, #52	; 0x34
  402412:	4b25      	ldr	r3, [pc, #148]	; (4024a8 <vTaskSwitchContext+0xc4>)
  402414:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402416:	4b25      	ldr	r3, [pc, #148]	; (4024ac <vTaskSwitchContext+0xc8>)
  402418:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40241a:	fab3 f383 	clz	r3, r3
  40241e:	b2db      	uxtb	r3, r3
  402420:	f1c3 031f 	rsb	r3, r3, #31
  402424:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402428:	4a21      	ldr	r2, [pc, #132]	; (4024b0 <vTaskSwitchContext+0xcc>)
  40242a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40242e:	b9ba      	cbnz	r2, 402460 <vTaskSwitchContext+0x7c>
	__asm volatile
  402430:	f04f 0380 	mov.w	r3, #128	; 0x80
  402434:	b672      	cpsid	i
  402436:	f383 8811 	msr	BASEPRI, r3
  40243a:	f3bf 8f6f 	isb	sy
  40243e:	f3bf 8f4f 	dsb	sy
  402442:	b662      	cpsie	i
  402444:	e7fe      	b.n	402444 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402446:	2201      	movs	r2, #1
  402448:	4b15      	ldr	r3, [pc, #84]	; (4024a0 <vTaskSwitchContext+0xbc>)
  40244a:	601a      	str	r2, [r3, #0]
  40244c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40244e:	689a      	ldr	r2, [r3, #8]
  402450:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402454:	d1d9      	bne.n	40240a <vTaskSwitchContext+0x26>
  402456:	68db      	ldr	r3, [r3, #12]
  402458:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40245c:	d1d5      	bne.n	40240a <vTaskSwitchContext+0x26>
  40245e:	e7da      	b.n	402416 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402460:	4a13      	ldr	r2, [pc, #76]	; (4024b0 <vTaskSwitchContext+0xcc>)
  402462:	0099      	lsls	r1, r3, #2
  402464:	18c8      	adds	r0, r1, r3
  402466:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40246a:	6844      	ldr	r4, [r0, #4]
  40246c:	6864      	ldr	r4, [r4, #4]
  40246e:	6044      	str	r4, [r0, #4]
  402470:	4419      	add	r1, r3
  402472:	4602      	mov	r2, r0
  402474:	3208      	adds	r2, #8
  402476:	4294      	cmp	r4, r2
  402478:	d009      	beq.n	40248e <vTaskSwitchContext+0xaa>
  40247a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40247e:	4a0c      	ldr	r2, [pc, #48]	; (4024b0 <vTaskSwitchContext+0xcc>)
  402480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402484:	685b      	ldr	r3, [r3, #4]
  402486:	68da      	ldr	r2, [r3, #12]
  402488:	4b06      	ldr	r3, [pc, #24]	; (4024a4 <vTaskSwitchContext+0xc0>)
  40248a:	601a      	str	r2, [r3, #0]
  40248c:	bd10      	pop	{r4, pc}
  40248e:	6860      	ldr	r0, [r4, #4]
  402490:	4a07      	ldr	r2, [pc, #28]	; (4024b0 <vTaskSwitchContext+0xcc>)
  402492:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402496:	6050      	str	r0, [r2, #4]
  402498:	e7ef      	b.n	40247a <vTaskSwitchContext+0x96>
  40249a:	bf00      	nop
  40249c:	20400ad8 	.word	0x20400ad8
  4024a0:	20400b5c 	.word	0x20400b5c
  4024a4:	20400a60 	.word	0x20400a60
  4024a8:	00403131 	.word	0x00403131
  4024ac:	20400ae4 	.word	0x20400ae4
  4024b0:	20400a6c 	.word	0x20400a6c

004024b4 <vTaskPlaceOnEventList>:
{
  4024b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4024b6:	b1e0      	cbz	r0, 4024f2 <vTaskPlaceOnEventList+0x3e>
  4024b8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4024ba:	4d17      	ldr	r5, [pc, #92]	; (402518 <vTaskPlaceOnEventList+0x64>)
  4024bc:	6829      	ldr	r1, [r5, #0]
  4024be:	3118      	adds	r1, #24
  4024c0:	4b16      	ldr	r3, [pc, #88]	; (40251c <vTaskPlaceOnEventList+0x68>)
  4024c2:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4024c4:	6828      	ldr	r0, [r5, #0]
  4024c6:	3004      	adds	r0, #4
  4024c8:	4b15      	ldr	r3, [pc, #84]	; (402520 <vTaskPlaceOnEventList+0x6c>)
  4024ca:	4798      	blx	r3
  4024cc:	b940      	cbnz	r0, 4024e0 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4024ce:	682a      	ldr	r2, [r5, #0]
  4024d0:	4914      	ldr	r1, [pc, #80]	; (402524 <vTaskPlaceOnEventList+0x70>)
  4024d2:	680b      	ldr	r3, [r1, #0]
  4024d4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4024d6:	2201      	movs	r2, #1
  4024d8:	4082      	lsls	r2, r0
  4024da:	ea23 0302 	bic.w	r3, r3, r2
  4024de:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4024e0:	f1b4 3fff 	cmp.w	r4, #4294967295
  4024e4:	d010      	beq.n	402508 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4024e6:	4b10      	ldr	r3, [pc, #64]	; (402528 <vTaskPlaceOnEventList+0x74>)
  4024e8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4024ea:	4420      	add	r0, r4
  4024ec:	4b0f      	ldr	r3, [pc, #60]	; (40252c <vTaskPlaceOnEventList+0x78>)
  4024ee:	4798      	blx	r3
  4024f0:	bd38      	pop	{r3, r4, r5, pc}
  4024f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024f6:	b672      	cpsid	i
  4024f8:	f383 8811 	msr	BASEPRI, r3
  4024fc:	f3bf 8f6f 	isb	sy
  402500:	f3bf 8f4f 	dsb	sy
  402504:	b662      	cpsie	i
  402506:	e7fe      	b.n	402506 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402508:	4b03      	ldr	r3, [pc, #12]	; (402518 <vTaskPlaceOnEventList+0x64>)
  40250a:	6819      	ldr	r1, [r3, #0]
  40250c:	3104      	adds	r1, #4
  40250e:	4808      	ldr	r0, [pc, #32]	; (402530 <vTaskPlaceOnEventList+0x7c>)
  402510:	4b08      	ldr	r3, [pc, #32]	; (402534 <vTaskPlaceOnEventList+0x80>)
  402512:	4798      	blx	r3
  402514:	bd38      	pop	{r3, r4, r5, pc}
  402516:	bf00      	nop
  402518:	20400a60 	.word	0x20400a60
  40251c:	0040101d 	.word	0x0040101d
  402520:	00401051 	.word	0x00401051
  402524:	20400ae4 	.word	0x20400ae4
  402528:	20400b58 	.word	0x20400b58
  40252c:	00401d1d 	.word	0x00401d1d
  402530:	20400b30 	.word	0x20400b30
  402534:	00401005 	.word	0x00401005

00402538 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402538:	b1e8      	cbz	r0, 402576 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40253a:	b570      	push	{r4, r5, r6, lr}
  40253c:	4615      	mov	r5, r2
  40253e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402540:	4e16      	ldr	r6, [pc, #88]	; (40259c <vTaskPlaceOnEventListRestricted+0x64>)
  402542:	6831      	ldr	r1, [r6, #0]
  402544:	3118      	adds	r1, #24
  402546:	4b16      	ldr	r3, [pc, #88]	; (4025a0 <vTaskPlaceOnEventListRestricted+0x68>)
  402548:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40254a:	6830      	ldr	r0, [r6, #0]
  40254c:	3004      	adds	r0, #4
  40254e:	4b15      	ldr	r3, [pc, #84]	; (4025a4 <vTaskPlaceOnEventListRestricted+0x6c>)
  402550:	4798      	blx	r3
  402552:	b940      	cbnz	r0, 402566 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402554:	6832      	ldr	r2, [r6, #0]
  402556:	4914      	ldr	r1, [pc, #80]	; (4025a8 <vTaskPlaceOnEventListRestricted+0x70>)
  402558:	680b      	ldr	r3, [r1, #0]
  40255a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40255c:	2201      	movs	r2, #1
  40255e:	4082      	lsls	r2, r0
  402560:	ea23 0302 	bic.w	r3, r3, r2
  402564:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402566:	2d01      	cmp	r5, #1
  402568:	d010      	beq.n	40258c <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40256a:	4b10      	ldr	r3, [pc, #64]	; (4025ac <vTaskPlaceOnEventListRestricted+0x74>)
  40256c:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40256e:	4420      	add	r0, r4
  402570:	4b0f      	ldr	r3, [pc, #60]	; (4025b0 <vTaskPlaceOnEventListRestricted+0x78>)
  402572:	4798      	blx	r3
  402574:	bd70      	pop	{r4, r5, r6, pc}
  402576:	f04f 0380 	mov.w	r3, #128	; 0x80
  40257a:	b672      	cpsid	i
  40257c:	f383 8811 	msr	BASEPRI, r3
  402580:	f3bf 8f6f 	isb	sy
  402584:	f3bf 8f4f 	dsb	sy
  402588:	b662      	cpsie	i
  40258a:	e7fe      	b.n	40258a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40258c:	4b03      	ldr	r3, [pc, #12]	; (40259c <vTaskPlaceOnEventListRestricted+0x64>)
  40258e:	6819      	ldr	r1, [r3, #0]
  402590:	3104      	adds	r1, #4
  402592:	4808      	ldr	r0, [pc, #32]	; (4025b4 <vTaskPlaceOnEventListRestricted+0x7c>)
  402594:	4b02      	ldr	r3, [pc, #8]	; (4025a0 <vTaskPlaceOnEventListRestricted+0x68>)
  402596:	4798      	blx	r3
  402598:	bd70      	pop	{r4, r5, r6, pc}
  40259a:	bf00      	nop
  40259c:	20400a60 	.word	0x20400a60
  4025a0:	00401005 	.word	0x00401005
  4025a4:	00401051 	.word	0x00401051
  4025a8:	20400ae4 	.word	0x20400ae4
  4025ac:	20400b58 	.word	0x20400b58
  4025b0:	00401d1d 	.word	0x00401d1d
  4025b4:	20400b30 	.word	0x20400b30

004025b8 <xTaskRemoveFromEventList>:
{
  4025b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4025ba:	68c3      	ldr	r3, [r0, #12]
  4025bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4025be:	b324      	cbz	r4, 40260a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4025c0:	f104 0518 	add.w	r5, r4, #24
  4025c4:	4628      	mov	r0, r5
  4025c6:	4b1a      	ldr	r3, [pc, #104]	; (402630 <xTaskRemoveFromEventList+0x78>)
  4025c8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025ca:	4b1a      	ldr	r3, [pc, #104]	; (402634 <xTaskRemoveFromEventList+0x7c>)
  4025cc:	681b      	ldr	r3, [r3, #0]
  4025ce:	bb3b      	cbnz	r3, 402620 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4025d0:	1d25      	adds	r5, r4, #4
  4025d2:	4628      	mov	r0, r5
  4025d4:	4b16      	ldr	r3, [pc, #88]	; (402630 <xTaskRemoveFromEventList+0x78>)
  4025d6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4025d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4025da:	4a17      	ldr	r2, [pc, #92]	; (402638 <xTaskRemoveFromEventList+0x80>)
  4025dc:	6811      	ldr	r1, [r2, #0]
  4025de:	2301      	movs	r3, #1
  4025e0:	4083      	lsls	r3, r0
  4025e2:	430b      	orrs	r3, r1
  4025e4:	6013      	str	r3, [r2, #0]
  4025e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025ea:	4629      	mov	r1, r5
  4025ec:	4b13      	ldr	r3, [pc, #76]	; (40263c <xTaskRemoveFromEventList+0x84>)
  4025ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025f2:	4b13      	ldr	r3, [pc, #76]	; (402640 <xTaskRemoveFromEventList+0x88>)
  4025f4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4025f6:	4b13      	ldr	r3, [pc, #76]	; (402644 <xTaskRemoveFromEventList+0x8c>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025fe:	429a      	cmp	r2, r3
  402600:	d913      	bls.n	40262a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402602:	2001      	movs	r0, #1
  402604:	4b10      	ldr	r3, [pc, #64]	; (402648 <xTaskRemoveFromEventList+0x90>)
  402606:	6018      	str	r0, [r3, #0]
  402608:	bd38      	pop	{r3, r4, r5, pc}
  40260a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40260e:	b672      	cpsid	i
  402610:	f383 8811 	msr	BASEPRI, r3
  402614:	f3bf 8f6f 	isb	sy
  402618:	f3bf 8f4f 	dsb	sy
  40261c:	b662      	cpsie	i
  40261e:	e7fe      	b.n	40261e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402620:	4629      	mov	r1, r5
  402622:	480a      	ldr	r0, [pc, #40]	; (40264c <xTaskRemoveFromEventList+0x94>)
  402624:	4b06      	ldr	r3, [pc, #24]	; (402640 <xTaskRemoveFromEventList+0x88>)
  402626:	4798      	blx	r3
  402628:	e7e5      	b.n	4025f6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40262a:	2000      	movs	r0, #0
}
  40262c:	bd38      	pop	{r3, r4, r5, pc}
  40262e:	bf00      	nop
  402630:	00401051 	.word	0x00401051
  402634:	20400ad8 	.word	0x20400ad8
  402638:	20400ae4 	.word	0x20400ae4
  40263c:	20400a6c 	.word	0x20400a6c
  402640:	00401005 	.word	0x00401005
  402644:	20400a60 	.word	0x20400a60
  402648:	20400b5c 	.word	0x20400b5c
  40264c:	20400b18 	.word	0x20400b18

00402650 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402650:	b130      	cbz	r0, 402660 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402652:	4a09      	ldr	r2, [pc, #36]	; (402678 <vTaskSetTimeOutState+0x28>)
  402654:	6812      	ldr	r2, [r2, #0]
  402656:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402658:	4a08      	ldr	r2, [pc, #32]	; (40267c <vTaskSetTimeOutState+0x2c>)
  40265a:	6812      	ldr	r2, [r2, #0]
  40265c:	6042      	str	r2, [r0, #4]
  40265e:	4770      	bx	lr
  402660:	f04f 0380 	mov.w	r3, #128	; 0x80
  402664:	b672      	cpsid	i
  402666:	f383 8811 	msr	BASEPRI, r3
  40266a:	f3bf 8f6f 	isb	sy
  40266e:	f3bf 8f4f 	dsb	sy
  402672:	b662      	cpsie	i
  402674:	e7fe      	b.n	402674 <vTaskSetTimeOutState+0x24>
  402676:	bf00      	nop
  402678:	20400b14 	.word	0x20400b14
  40267c:	20400b58 	.word	0x20400b58

00402680 <xTaskCheckForTimeOut>:
{
  402680:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402682:	b1c0      	cbz	r0, 4026b6 <xTaskCheckForTimeOut+0x36>
  402684:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402686:	b309      	cbz	r1, 4026cc <xTaskCheckForTimeOut+0x4c>
  402688:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40268a:	4b1d      	ldr	r3, [pc, #116]	; (402700 <xTaskCheckForTimeOut+0x80>)
  40268c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40268e:	4b1d      	ldr	r3, [pc, #116]	; (402704 <xTaskCheckForTimeOut+0x84>)
  402690:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402692:	682b      	ldr	r3, [r5, #0]
  402694:	f1b3 3fff 	cmp.w	r3, #4294967295
  402698:	d02e      	beq.n	4026f8 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40269a:	491b      	ldr	r1, [pc, #108]	; (402708 <xTaskCheckForTimeOut+0x88>)
  40269c:	6809      	ldr	r1, [r1, #0]
  40269e:	6820      	ldr	r0, [r4, #0]
  4026a0:	4288      	cmp	r0, r1
  4026a2:	d002      	beq.n	4026aa <xTaskCheckForTimeOut+0x2a>
  4026a4:	6861      	ldr	r1, [r4, #4]
  4026a6:	428a      	cmp	r2, r1
  4026a8:	d228      	bcs.n	4026fc <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4026aa:	6861      	ldr	r1, [r4, #4]
  4026ac:	1a50      	subs	r0, r2, r1
  4026ae:	4283      	cmp	r3, r0
  4026b0:	d817      	bhi.n	4026e2 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4026b2:	2401      	movs	r4, #1
  4026b4:	e01c      	b.n	4026f0 <xTaskCheckForTimeOut+0x70>
  4026b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026ba:	b672      	cpsid	i
  4026bc:	f383 8811 	msr	BASEPRI, r3
  4026c0:	f3bf 8f6f 	isb	sy
  4026c4:	f3bf 8f4f 	dsb	sy
  4026c8:	b662      	cpsie	i
  4026ca:	e7fe      	b.n	4026ca <xTaskCheckForTimeOut+0x4a>
  4026cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d0:	b672      	cpsid	i
  4026d2:	f383 8811 	msr	BASEPRI, r3
  4026d6:	f3bf 8f6f 	isb	sy
  4026da:	f3bf 8f4f 	dsb	sy
  4026de:	b662      	cpsie	i
  4026e0:	e7fe      	b.n	4026e0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4026e2:	1a9b      	subs	r3, r3, r2
  4026e4:	440b      	add	r3, r1
  4026e6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4026e8:	4620      	mov	r0, r4
  4026ea:	4b08      	ldr	r3, [pc, #32]	; (40270c <xTaskCheckForTimeOut+0x8c>)
  4026ec:	4798      	blx	r3
			xReturn = pdFALSE;
  4026ee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4026f0:	4b07      	ldr	r3, [pc, #28]	; (402710 <xTaskCheckForTimeOut+0x90>)
  4026f2:	4798      	blx	r3
}
  4026f4:	4620      	mov	r0, r4
  4026f6:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4026f8:	2400      	movs	r4, #0
  4026fa:	e7f9      	b.n	4026f0 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4026fc:	2401      	movs	r4, #1
  4026fe:	e7f7      	b.n	4026f0 <xTaskCheckForTimeOut+0x70>
  402700:	00401135 	.word	0x00401135
  402704:	20400b58 	.word	0x20400b58
  402708:	20400b14 	.word	0x20400b14
  40270c:	00402651 	.word	0x00402651
  402710:	00401181 	.word	0x00401181

00402714 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402714:	2201      	movs	r2, #1
  402716:	4b01      	ldr	r3, [pc, #4]	; (40271c <vTaskMissedYield+0x8>)
  402718:	601a      	str	r2, [r3, #0]
  40271a:	4770      	bx	lr
  40271c:	20400b5c 	.word	0x20400b5c

00402720 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402720:	4b05      	ldr	r3, [pc, #20]	; (402738 <xTaskGetSchedulerState+0x18>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	b133      	cbz	r3, 402734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402726:	4b05      	ldr	r3, [pc, #20]	; (40273c <xTaskGetSchedulerState+0x1c>)
  402728:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40272a:	2b00      	cmp	r3, #0
  40272c:	bf0c      	ite	eq
  40272e:	2002      	moveq	r0, #2
  402730:	2000      	movne	r0, #0
  402732:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402734:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402736:	4770      	bx	lr
  402738:	20400b2c 	.word	0x20400b2c
  40273c:	20400ad8 	.word	0x20400ad8

00402740 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402740:	2800      	cmp	r0, #0
  402742:	d044      	beq.n	4027ce <vTaskPriorityInherit+0x8e>
	{
  402744:	b538      	push	{r3, r4, r5, lr}
  402746:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402748:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40274a:	4921      	ldr	r1, [pc, #132]	; (4027d0 <vTaskPriorityInherit+0x90>)
  40274c:	6809      	ldr	r1, [r1, #0]
  40274e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402750:	428a      	cmp	r2, r1
  402752:	d214      	bcs.n	40277e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402754:	6981      	ldr	r1, [r0, #24]
  402756:	2900      	cmp	r1, #0
  402758:	db05      	blt.n	402766 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40275a:	491d      	ldr	r1, [pc, #116]	; (4027d0 <vTaskPriorityInherit+0x90>)
  40275c:	6809      	ldr	r1, [r1, #0]
  40275e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402760:	f1c1 0105 	rsb	r1, r1, #5
  402764:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402766:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40276a:	491a      	ldr	r1, [pc, #104]	; (4027d4 <vTaskPriorityInherit+0x94>)
  40276c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402770:	6961      	ldr	r1, [r4, #20]
  402772:	4291      	cmp	r1, r2
  402774:	d004      	beq.n	402780 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402776:	4a16      	ldr	r2, [pc, #88]	; (4027d0 <vTaskPriorityInherit+0x90>)
  402778:	6812      	ldr	r2, [r2, #0]
  40277a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40277c:	62e2      	str	r2, [r4, #44]	; 0x2c
  40277e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402780:	1d25      	adds	r5, r4, #4
  402782:	4628      	mov	r0, r5
  402784:	4b14      	ldr	r3, [pc, #80]	; (4027d8 <vTaskPriorityInherit+0x98>)
  402786:	4798      	blx	r3
  402788:	b970      	cbnz	r0, 4027a8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40278a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40278c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402790:	4a10      	ldr	r2, [pc, #64]	; (4027d4 <vTaskPriorityInherit+0x94>)
  402792:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402796:	b93a      	cbnz	r2, 4027a8 <vTaskPriorityInherit+0x68>
  402798:	4810      	ldr	r0, [pc, #64]	; (4027dc <vTaskPriorityInherit+0x9c>)
  40279a:	6802      	ldr	r2, [r0, #0]
  40279c:	2101      	movs	r1, #1
  40279e:	fa01 f303 	lsl.w	r3, r1, r3
  4027a2:	ea22 0303 	bic.w	r3, r2, r3
  4027a6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4027a8:	4b09      	ldr	r3, [pc, #36]	; (4027d0 <vTaskPriorityInherit+0x90>)
  4027aa:	681b      	ldr	r3, [r3, #0]
  4027ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4027ae:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4027b0:	4a0a      	ldr	r2, [pc, #40]	; (4027dc <vTaskPriorityInherit+0x9c>)
  4027b2:	6811      	ldr	r1, [r2, #0]
  4027b4:	2301      	movs	r3, #1
  4027b6:	4083      	lsls	r3, r0
  4027b8:	430b      	orrs	r3, r1
  4027ba:	6013      	str	r3, [r2, #0]
  4027bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4027c0:	4629      	mov	r1, r5
  4027c2:	4b04      	ldr	r3, [pc, #16]	; (4027d4 <vTaskPriorityInherit+0x94>)
  4027c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4027c8:	4b05      	ldr	r3, [pc, #20]	; (4027e0 <vTaskPriorityInherit+0xa0>)
  4027ca:	4798      	blx	r3
  4027cc:	bd38      	pop	{r3, r4, r5, pc}
  4027ce:	4770      	bx	lr
  4027d0:	20400a60 	.word	0x20400a60
  4027d4:	20400a6c 	.word	0x20400a6c
  4027d8:	00401051 	.word	0x00401051
  4027dc:	20400ae4 	.word	0x20400ae4
  4027e0:	00401005 	.word	0x00401005

004027e4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4027e4:	2800      	cmp	r0, #0
  4027e6:	d04d      	beq.n	402884 <xTaskPriorityDisinherit+0xa0>
	{
  4027e8:	b538      	push	{r3, r4, r5, lr}
  4027ea:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4027ec:	4a27      	ldr	r2, [pc, #156]	; (40288c <xTaskPriorityDisinherit+0xa8>)
  4027ee:	6812      	ldr	r2, [r2, #0]
  4027f0:	4290      	cmp	r0, r2
  4027f2:	d00a      	beq.n	40280a <xTaskPriorityDisinherit+0x26>
  4027f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f8:	b672      	cpsid	i
  4027fa:	f383 8811 	msr	BASEPRI, r3
  4027fe:	f3bf 8f6f 	isb	sy
  402802:	f3bf 8f4f 	dsb	sy
  402806:	b662      	cpsie	i
  402808:	e7fe      	b.n	402808 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40280a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40280c:	b952      	cbnz	r2, 402824 <xTaskPriorityDisinherit+0x40>
  40280e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402812:	b672      	cpsid	i
  402814:	f383 8811 	msr	BASEPRI, r3
  402818:	f3bf 8f6f 	isb	sy
  40281c:	f3bf 8f4f 	dsb	sy
  402820:	b662      	cpsie	i
  402822:	e7fe      	b.n	402822 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402824:	3a01      	subs	r2, #1
  402826:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402828:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40282a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40282c:	4288      	cmp	r0, r1
  40282e:	d02b      	beq.n	402888 <xTaskPriorityDisinherit+0xa4>
  402830:	bb52      	cbnz	r2, 402888 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402832:	1d25      	adds	r5, r4, #4
  402834:	4628      	mov	r0, r5
  402836:	4b16      	ldr	r3, [pc, #88]	; (402890 <xTaskPriorityDisinherit+0xac>)
  402838:	4798      	blx	r3
  40283a:	b968      	cbnz	r0, 402858 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40283c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40283e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402842:	4b14      	ldr	r3, [pc, #80]	; (402894 <xTaskPriorityDisinherit+0xb0>)
  402844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402848:	b933      	cbnz	r3, 402858 <xTaskPriorityDisinherit+0x74>
  40284a:	4813      	ldr	r0, [pc, #76]	; (402898 <xTaskPriorityDisinherit+0xb4>)
  40284c:	6803      	ldr	r3, [r0, #0]
  40284e:	2201      	movs	r2, #1
  402850:	408a      	lsls	r2, r1
  402852:	ea23 0302 	bic.w	r3, r3, r2
  402856:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402858:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40285a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40285c:	f1c0 0305 	rsb	r3, r0, #5
  402860:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402862:	4a0d      	ldr	r2, [pc, #52]	; (402898 <xTaskPriorityDisinherit+0xb4>)
  402864:	6811      	ldr	r1, [r2, #0]
  402866:	2401      	movs	r4, #1
  402868:	fa04 f300 	lsl.w	r3, r4, r0
  40286c:	430b      	orrs	r3, r1
  40286e:	6013      	str	r3, [r2, #0]
  402870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402874:	4629      	mov	r1, r5
  402876:	4b07      	ldr	r3, [pc, #28]	; (402894 <xTaskPriorityDisinherit+0xb0>)
  402878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40287c:	4b07      	ldr	r3, [pc, #28]	; (40289c <xTaskPriorityDisinherit+0xb8>)
  40287e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402880:	4620      	mov	r0, r4
  402882:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402884:	2000      	movs	r0, #0
  402886:	4770      	bx	lr
  402888:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40288a:	bd38      	pop	{r3, r4, r5, pc}
  40288c:	20400a60 	.word	0x20400a60
  402890:	00401051 	.word	0x00401051
  402894:	20400a6c 	.word	0x20400a6c
  402898:	20400ae4 	.word	0x20400ae4
  40289c:	00401005 	.word	0x00401005

004028a0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4028a0:	4b05      	ldr	r3, [pc, #20]	; (4028b8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028a2:	681b      	ldr	r3, [r3, #0]
  4028a4:	b123      	cbz	r3, 4028b0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4028a6:	4b04      	ldr	r3, [pc, #16]	; (4028b8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028a8:	681a      	ldr	r2, [r3, #0]
  4028aa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4028ac:	3301      	adds	r3, #1
  4028ae:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4028b0:	4b01      	ldr	r3, [pc, #4]	; (4028b8 <pvTaskIncrementMutexHeldCount+0x18>)
  4028b2:	6818      	ldr	r0, [r3, #0]
	}
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop
  4028b8:	20400a60 	.word	0x20400a60

004028bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4028bc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4028be:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4028c0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4028c2:	4291      	cmp	r1, r2
  4028c4:	d80c      	bhi.n	4028e0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4028c6:	1ad2      	subs	r2, r2, r3
  4028c8:	6983      	ldr	r3, [r0, #24]
  4028ca:	429a      	cmp	r2, r3
  4028cc:	d301      	bcc.n	4028d2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4028ce:	2001      	movs	r0, #1
  4028d0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4028d2:	1d01      	adds	r1, r0, #4
  4028d4:	4b09      	ldr	r3, [pc, #36]	; (4028fc <prvInsertTimerInActiveList+0x40>)
  4028d6:	6818      	ldr	r0, [r3, #0]
  4028d8:	4b09      	ldr	r3, [pc, #36]	; (402900 <prvInsertTimerInActiveList+0x44>)
  4028da:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028dc:	2000      	movs	r0, #0
  4028de:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4028e0:	429a      	cmp	r2, r3
  4028e2:	d203      	bcs.n	4028ec <prvInsertTimerInActiveList+0x30>
  4028e4:	4299      	cmp	r1, r3
  4028e6:	d301      	bcc.n	4028ec <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4028e8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4028ea:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4028ec:	1d01      	adds	r1, r0, #4
  4028ee:	4b05      	ldr	r3, [pc, #20]	; (402904 <prvInsertTimerInActiveList+0x48>)
  4028f0:	6818      	ldr	r0, [r3, #0]
  4028f2:	4b03      	ldr	r3, [pc, #12]	; (402900 <prvInsertTimerInActiveList+0x44>)
  4028f4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028f6:	2000      	movs	r0, #0
  4028f8:	bd08      	pop	{r3, pc}
  4028fa:	bf00      	nop
  4028fc:	20400b64 	.word	0x20400b64
  402900:	0040101d 	.word	0x0040101d
  402904:	20400b60 	.word	0x20400b60

00402908 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402908:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40290a:	4b15      	ldr	r3, [pc, #84]	; (402960 <prvCheckForValidListAndQueue+0x58>)
  40290c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40290e:	4b15      	ldr	r3, [pc, #84]	; (402964 <prvCheckForValidListAndQueue+0x5c>)
  402910:	681b      	ldr	r3, [r3, #0]
  402912:	b113      	cbz	r3, 40291a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402914:	4b14      	ldr	r3, [pc, #80]	; (402968 <prvCheckForValidListAndQueue+0x60>)
  402916:	4798      	blx	r3
  402918:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40291a:	4d14      	ldr	r5, [pc, #80]	; (40296c <prvCheckForValidListAndQueue+0x64>)
  40291c:	4628      	mov	r0, r5
  40291e:	4e14      	ldr	r6, [pc, #80]	; (402970 <prvCheckForValidListAndQueue+0x68>)
  402920:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402922:	4c14      	ldr	r4, [pc, #80]	; (402974 <prvCheckForValidListAndQueue+0x6c>)
  402924:	4620      	mov	r0, r4
  402926:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402928:	4b13      	ldr	r3, [pc, #76]	; (402978 <prvCheckForValidListAndQueue+0x70>)
  40292a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40292c:	4b13      	ldr	r3, [pc, #76]	; (40297c <prvCheckForValidListAndQueue+0x74>)
  40292e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402930:	2200      	movs	r2, #0
  402932:	2110      	movs	r1, #16
  402934:	2005      	movs	r0, #5
  402936:	4b12      	ldr	r3, [pc, #72]	; (402980 <prvCheckForValidListAndQueue+0x78>)
  402938:	4798      	blx	r3
  40293a:	4b0a      	ldr	r3, [pc, #40]	; (402964 <prvCheckForValidListAndQueue+0x5c>)
  40293c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40293e:	b118      	cbz	r0, 402948 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402940:	4910      	ldr	r1, [pc, #64]	; (402984 <prvCheckForValidListAndQueue+0x7c>)
  402942:	4b11      	ldr	r3, [pc, #68]	; (402988 <prvCheckForValidListAndQueue+0x80>)
  402944:	4798      	blx	r3
  402946:	e7e5      	b.n	402914 <prvCheckForValidListAndQueue+0xc>
  402948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294c:	b672      	cpsid	i
  40294e:	f383 8811 	msr	BASEPRI, r3
  402952:	f3bf 8f6f 	isb	sy
  402956:	f3bf 8f4f 	dsb	sy
  40295a:	b662      	cpsie	i
  40295c:	e7fe      	b.n	40295c <prvCheckForValidListAndQueue+0x54>
  40295e:	bf00      	nop
  402960:	00401135 	.word	0x00401135
  402964:	20400b94 	.word	0x20400b94
  402968:	00401181 	.word	0x00401181
  40296c:	20400b68 	.word	0x20400b68
  402970:	00400fe9 	.word	0x00400fe9
  402974:	20400b7c 	.word	0x20400b7c
  402978:	20400b60 	.word	0x20400b60
  40297c:	20400b64 	.word	0x20400b64
  402980:	00401655 	.word	0x00401655
  402984:	00406e60 	.word	0x00406e60
  402988:	00401c65 	.word	0x00401c65

0040298c <xTimerCreateTimerTask>:
{
  40298c:	b510      	push	{r4, lr}
  40298e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402990:	4b0f      	ldr	r3, [pc, #60]	; (4029d0 <xTimerCreateTimerTask+0x44>)
  402992:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402994:	4b0f      	ldr	r3, [pc, #60]	; (4029d4 <xTimerCreateTimerTask+0x48>)
  402996:	681b      	ldr	r3, [r3, #0]
  402998:	b173      	cbz	r3, 4029b8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40299a:	2300      	movs	r3, #0
  40299c:	9303      	str	r3, [sp, #12]
  40299e:	9302      	str	r3, [sp, #8]
  4029a0:	9301      	str	r3, [sp, #4]
  4029a2:	2204      	movs	r2, #4
  4029a4:	9200      	str	r2, [sp, #0]
  4029a6:	f44f 7282 	mov.w	r2, #260	; 0x104
  4029aa:	490b      	ldr	r1, [pc, #44]	; (4029d8 <xTimerCreateTimerTask+0x4c>)
  4029ac:	480b      	ldr	r0, [pc, #44]	; (4029dc <xTimerCreateTimerTask+0x50>)
  4029ae:	4c0c      	ldr	r4, [pc, #48]	; (4029e0 <xTimerCreateTimerTask+0x54>)
  4029b0:	47a0      	blx	r4
	configASSERT( xReturn );
  4029b2:	b108      	cbz	r0, 4029b8 <xTimerCreateTimerTask+0x2c>
}
  4029b4:	b004      	add	sp, #16
  4029b6:	bd10      	pop	{r4, pc}
  4029b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029bc:	b672      	cpsid	i
  4029be:	f383 8811 	msr	BASEPRI, r3
  4029c2:	f3bf 8f6f 	isb	sy
  4029c6:	f3bf 8f4f 	dsb	sy
  4029ca:	b662      	cpsie	i
  4029cc:	e7fe      	b.n	4029cc <xTimerCreateTimerTask+0x40>
  4029ce:	bf00      	nop
  4029d0:	00402909 	.word	0x00402909
  4029d4:	20400b94 	.word	0x20400b94
  4029d8:	00406e68 	.word	0x00406e68
  4029dc:	00402b0d 	.word	0x00402b0d
  4029e0:	00401d75 	.word	0x00401d75

004029e4 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4029e4:	b1d8      	cbz	r0, 402a1e <xTimerGenericCommand+0x3a>
{
  4029e6:	b530      	push	{r4, r5, lr}
  4029e8:	b085      	sub	sp, #20
  4029ea:	4615      	mov	r5, r2
  4029ec:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4029ee:	4a15      	ldr	r2, [pc, #84]	; (402a44 <xTimerGenericCommand+0x60>)
  4029f0:	6810      	ldr	r0, [r2, #0]
  4029f2:	b320      	cbz	r0, 402a3e <xTimerGenericCommand+0x5a>
  4029f4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4029f6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4029f8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4029fa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4029fc:	2905      	cmp	r1, #5
  4029fe:	dc19      	bgt.n	402a34 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402a00:	4b11      	ldr	r3, [pc, #68]	; (402a48 <xTimerGenericCommand+0x64>)
  402a02:	4798      	blx	r3
  402a04:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402a06:	f04f 0300 	mov.w	r3, #0
  402a0a:	bf0c      	ite	eq
  402a0c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402a0e:	461a      	movne	r2, r3
  402a10:	4669      	mov	r1, sp
  402a12:	480c      	ldr	r0, [pc, #48]	; (402a44 <xTimerGenericCommand+0x60>)
  402a14:	6800      	ldr	r0, [r0, #0]
  402a16:	4c0d      	ldr	r4, [pc, #52]	; (402a4c <xTimerGenericCommand+0x68>)
  402a18:	47a0      	blx	r4
}
  402a1a:	b005      	add	sp, #20
  402a1c:	bd30      	pop	{r4, r5, pc}
  402a1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a22:	b672      	cpsid	i
  402a24:	f383 8811 	msr	BASEPRI, r3
  402a28:	f3bf 8f6f 	isb	sy
  402a2c:	f3bf 8f4f 	dsb	sy
  402a30:	b662      	cpsie	i
  402a32:	e7fe      	b.n	402a32 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402a34:	2300      	movs	r3, #0
  402a36:	4669      	mov	r1, sp
  402a38:	4c05      	ldr	r4, [pc, #20]	; (402a50 <xTimerGenericCommand+0x6c>)
  402a3a:	47a0      	blx	r4
  402a3c:	e7ed      	b.n	402a1a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402a3e:	2000      	movs	r0, #0
	return xReturn;
  402a40:	e7eb      	b.n	402a1a <xTimerGenericCommand+0x36>
  402a42:	bf00      	nop
  402a44:	20400b94 	.word	0x20400b94
  402a48:	00402721 	.word	0x00402721
  402a4c:	004016d1 	.word	0x004016d1
  402a50:	004018b5 	.word	0x004018b5

00402a54 <prvSampleTimeNow>:
{
  402a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a58:	b082      	sub	sp, #8
  402a5a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402a5c:	4b24      	ldr	r3, [pc, #144]	; (402af0 <prvSampleTimeNow+0x9c>)
  402a5e:	4798      	blx	r3
  402a60:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402a62:	4b24      	ldr	r3, [pc, #144]	; (402af4 <prvSampleTimeNow+0xa0>)
  402a64:	681b      	ldr	r3, [r3, #0]
  402a66:	4298      	cmp	r0, r3
  402a68:	d31b      	bcc.n	402aa2 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402a6a:	2300      	movs	r3, #0
  402a6c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a70:	4b20      	ldr	r3, [pc, #128]	; (402af4 <prvSampleTimeNow+0xa0>)
  402a72:	601f      	str	r7, [r3, #0]
}
  402a74:	4638      	mov	r0, r7
  402a76:	b002      	add	sp, #8
  402a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a7c:	2100      	movs	r1, #0
  402a7e:	9100      	str	r1, [sp, #0]
  402a80:	460b      	mov	r3, r1
  402a82:	4652      	mov	r2, sl
  402a84:	4620      	mov	r0, r4
  402a86:	4c1c      	ldr	r4, [pc, #112]	; (402af8 <prvSampleTimeNow+0xa4>)
  402a88:	47a0      	blx	r4
				configASSERT( xResult );
  402a8a:	b960      	cbnz	r0, 402aa6 <prvSampleTimeNow+0x52>
  402a8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a90:	b672      	cpsid	i
  402a92:	f383 8811 	msr	BASEPRI, r3
  402a96:	f3bf 8f6f 	isb	sy
  402a9a:	f3bf 8f4f 	dsb	sy
  402a9e:	b662      	cpsie	i
  402aa0:	e7fe      	b.n	402aa0 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402aa2:	4d16      	ldr	r5, [pc, #88]	; (402afc <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402aa4:	4e16      	ldr	r6, [pc, #88]	; (402b00 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402aa6:	682b      	ldr	r3, [r5, #0]
  402aa8:	681a      	ldr	r2, [r3, #0]
  402aaa:	b1c2      	cbz	r2, 402ade <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402aac:	68db      	ldr	r3, [r3, #12]
  402aae:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ab2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ab4:	f104 0904 	add.w	r9, r4, #4
  402ab8:	4648      	mov	r0, r9
  402aba:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402abe:	4620      	mov	r0, r4
  402ac0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402ac2:	69e3      	ldr	r3, [r4, #28]
  402ac4:	2b01      	cmp	r3, #1
  402ac6:	d1ee      	bne.n	402aa6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402ac8:	69a3      	ldr	r3, [r4, #24]
  402aca:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402acc:	459a      	cmp	sl, r3
  402ace:	d2d5      	bcs.n	402a7c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402ad0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402ad2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402ad4:	4649      	mov	r1, r9
  402ad6:	6828      	ldr	r0, [r5, #0]
  402ad8:	4b0a      	ldr	r3, [pc, #40]	; (402b04 <prvSampleTimeNow+0xb0>)
  402ada:	4798      	blx	r3
  402adc:	e7e3      	b.n	402aa6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ade:	4a0a      	ldr	r2, [pc, #40]	; (402b08 <prvSampleTimeNow+0xb4>)
  402ae0:	6810      	ldr	r0, [r2, #0]
  402ae2:	4906      	ldr	r1, [pc, #24]	; (402afc <prvSampleTimeNow+0xa8>)
  402ae4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402ae6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402ae8:	2301      	movs	r3, #1
  402aea:	f8c8 3000 	str.w	r3, [r8]
  402aee:	e7bf      	b.n	402a70 <prvSampleTimeNow+0x1c>
  402af0:	00402045 	.word	0x00402045
  402af4:	20400b90 	.word	0x20400b90
  402af8:	004029e5 	.word	0x004029e5
  402afc:	20400b60 	.word	0x20400b60
  402b00:	00401051 	.word	0x00401051
  402b04:	0040101d 	.word	0x0040101d
  402b08:	20400b64 	.word	0x20400b64

00402b0c <prvTimerTask>:
{
  402b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b10:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b12:	4e75      	ldr	r6, [pc, #468]	; (402ce8 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402b14:	4f75      	ldr	r7, [pc, #468]	; (402cec <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402b16:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402d14 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b1a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402d18 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b1e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402b20:	681a      	ldr	r2, [r3, #0]
  402b22:	2a00      	cmp	r2, #0
  402b24:	f000 80ce 	beq.w	402cc4 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b28:	68db      	ldr	r3, [r3, #12]
  402b2a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402b2c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b2e:	a804      	add	r0, sp, #16
  402b30:	4b6f      	ldr	r3, [pc, #444]	; (402cf0 <prvTimerTask+0x1e4>)
  402b32:	4798      	blx	r3
  402b34:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402b36:	9b04      	ldr	r3, [sp, #16]
  402b38:	2b00      	cmp	r3, #0
  402b3a:	d144      	bne.n	402bc6 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402b3c:	42a0      	cmp	r0, r4
  402b3e:	d212      	bcs.n	402b66 <prvTimerTask+0x5a>
  402b40:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402b42:	1b61      	subs	r1, r4, r5
  402b44:	4b6b      	ldr	r3, [pc, #428]	; (402cf4 <prvTimerTask+0x1e8>)
  402b46:	6818      	ldr	r0, [r3, #0]
  402b48:	4b6b      	ldr	r3, [pc, #428]	; (402cf8 <prvTimerTask+0x1ec>)
  402b4a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b4c:	4b6b      	ldr	r3, [pc, #428]	; (402cfc <prvTimerTask+0x1f0>)
  402b4e:	4798      	blx	r3
  402b50:	2800      	cmp	r0, #0
  402b52:	d13a      	bne.n	402bca <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402b54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b58:	f8c9 3000 	str.w	r3, [r9]
  402b5c:	f3bf 8f4f 	dsb	sy
  402b60:	f3bf 8f6f 	isb	sy
  402b64:	e031      	b.n	402bca <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402b66:	4b65      	ldr	r3, [pc, #404]	; (402cfc <prvTimerTask+0x1f0>)
  402b68:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b6a:	6833      	ldr	r3, [r6, #0]
  402b6c:	68db      	ldr	r3, [r3, #12]
  402b6e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b72:	f10a 0004 	add.w	r0, sl, #4
  402b76:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b78:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b7c:	2b01      	cmp	r3, #1
  402b7e:	d004      	beq.n	402b8a <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b80:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b84:	4650      	mov	r0, sl
  402b86:	4798      	blx	r3
  402b88:	e01f      	b.n	402bca <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402b8a:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b8e:	4623      	mov	r3, r4
  402b90:	462a      	mov	r2, r5
  402b92:	4421      	add	r1, r4
  402b94:	4650      	mov	r0, sl
  402b96:	4d5a      	ldr	r5, [pc, #360]	; (402d00 <prvTimerTask+0x1f4>)
  402b98:	47a8      	blx	r5
  402b9a:	2801      	cmp	r0, #1
  402b9c:	d1f0      	bne.n	402b80 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b9e:	2100      	movs	r1, #0
  402ba0:	9100      	str	r1, [sp, #0]
  402ba2:	460b      	mov	r3, r1
  402ba4:	4622      	mov	r2, r4
  402ba6:	4650      	mov	r0, sl
  402ba8:	4c56      	ldr	r4, [pc, #344]	; (402d04 <prvTimerTask+0x1f8>)
  402baa:	47a0      	blx	r4
			configASSERT( xResult );
  402bac:	2800      	cmp	r0, #0
  402bae:	d1e7      	bne.n	402b80 <prvTimerTask+0x74>
  402bb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bb4:	b672      	cpsid	i
  402bb6:	f383 8811 	msr	BASEPRI, r3
  402bba:	f3bf 8f6f 	isb	sy
  402bbe:	f3bf 8f4f 	dsb	sy
  402bc2:	b662      	cpsie	i
  402bc4:	e7fe      	b.n	402bc4 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402bc6:	4b4d      	ldr	r3, [pc, #308]	; (402cfc <prvTimerTask+0x1f0>)
  402bc8:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402bca:	4d4a      	ldr	r5, [pc, #296]	; (402cf4 <prvTimerTask+0x1e8>)
  402bcc:	4c4e      	ldr	r4, [pc, #312]	; (402d08 <prvTimerTask+0x1fc>)
  402bce:	e006      	b.n	402bde <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402bd0:	9907      	ldr	r1, [sp, #28]
  402bd2:	9806      	ldr	r0, [sp, #24]
  402bd4:	9b05      	ldr	r3, [sp, #20]
  402bd6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402bd8:	9b04      	ldr	r3, [sp, #16]
  402bda:	2b00      	cmp	r3, #0
  402bdc:	da09      	bge.n	402bf2 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402bde:	2300      	movs	r3, #0
  402be0:	461a      	mov	r2, r3
  402be2:	a904      	add	r1, sp, #16
  402be4:	6828      	ldr	r0, [r5, #0]
  402be6:	47a0      	blx	r4
  402be8:	2800      	cmp	r0, #0
  402bea:	d098      	beq.n	402b1e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402bec:	9b04      	ldr	r3, [sp, #16]
  402bee:	2b00      	cmp	r3, #0
  402bf0:	dbee      	blt.n	402bd0 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402bf2:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402bf6:	f8da 3014 	ldr.w	r3, [sl, #20]
  402bfa:	b113      	cbz	r3, 402c02 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bfc:	f10a 0004 	add.w	r0, sl, #4
  402c00:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c02:	a803      	add	r0, sp, #12
  402c04:	4b3a      	ldr	r3, [pc, #232]	; (402cf0 <prvTimerTask+0x1e4>)
  402c06:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402c08:	9b04      	ldr	r3, [sp, #16]
  402c0a:	2b09      	cmp	r3, #9
  402c0c:	d8e7      	bhi.n	402bde <prvTimerTask+0xd2>
  402c0e:	a201      	add	r2, pc, #4	; (adr r2, 402c14 <prvTimerTask+0x108>)
  402c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c14:	00402c3d 	.word	0x00402c3d
  402c18:	00402c3d 	.word	0x00402c3d
  402c1c:	00402c3d 	.word	0x00402c3d
  402c20:	00402bdf 	.word	0x00402bdf
  402c24:	00402c91 	.word	0x00402c91
  402c28:	00402cbd 	.word	0x00402cbd
  402c2c:	00402c3d 	.word	0x00402c3d
  402c30:	00402c3d 	.word	0x00402c3d
  402c34:	00402bdf 	.word	0x00402bdf
  402c38:	00402c91 	.word	0x00402c91
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402c3c:	9c05      	ldr	r4, [sp, #20]
  402c3e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c42:	4623      	mov	r3, r4
  402c44:	4602      	mov	r2, r0
  402c46:	4421      	add	r1, r4
  402c48:	4650      	mov	r0, sl
  402c4a:	4c2d      	ldr	r4, [pc, #180]	; (402d00 <prvTimerTask+0x1f4>)
  402c4c:	47a0      	blx	r4
  402c4e:	2801      	cmp	r0, #1
  402c50:	d1bc      	bne.n	402bcc <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c52:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c56:	4650      	mov	r0, sl
  402c58:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c5a:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c5e:	2b01      	cmp	r3, #1
  402c60:	d1b4      	bne.n	402bcc <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402c62:	f8da 2018 	ldr.w	r2, [sl, #24]
  402c66:	2100      	movs	r1, #0
  402c68:	9100      	str	r1, [sp, #0]
  402c6a:	460b      	mov	r3, r1
  402c6c:	9805      	ldr	r0, [sp, #20]
  402c6e:	4402      	add	r2, r0
  402c70:	4650      	mov	r0, sl
  402c72:	4c24      	ldr	r4, [pc, #144]	; (402d04 <prvTimerTask+0x1f8>)
  402c74:	47a0      	blx	r4
							configASSERT( xResult );
  402c76:	2800      	cmp	r0, #0
  402c78:	d1a8      	bne.n	402bcc <prvTimerTask+0xc0>
  402c7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c7e:	b672      	cpsid	i
  402c80:	f383 8811 	msr	BASEPRI, r3
  402c84:	f3bf 8f6f 	isb	sy
  402c88:	f3bf 8f4f 	dsb	sy
  402c8c:	b662      	cpsie	i
  402c8e:	e7fe      	b.n	402c8e <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c90:	9905      	ldr	r1, [sp, #20]
  402c92:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c96:	b131      	cbz	r1, 402ca6 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c98:	4603      	mov	r3, r0
  402c9a:	4602      	mov	r2, r0
  402c9c:	4401      	add	r1, r0
  402c9e:	4650      	mov	r0, sl
  402ca0:	4c17      	ldr	r4, [pc, #92]	; (402d00 <prvTimerTask+0x1f4>)
  402ca2:	47a0      	blx	r4
  402ca4:	e792      	b.n	402bcc <prvTimerTask+0xc0>
  402ca6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402caa:	b672      	cpsid	i
  402cac:	f383 8811 	msr	BASEPRI, r3
  402cb0:	f3bf 8f6f 	isb	sy
  402cb4:	f3bf 8f4f 	dsb	sy
  402cb8:	b662      	cpsie	i
  402cba:	e7fe      	b.n	402cba <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402cbc:	4650      	mov	r0, sl
  402cbe:	4b13      	ldr	r3, [pc, #76]	; (402d0c <prvTimerTask+0x200>)
  402cc0:	4798      	blx	r3
  402cc2:	e783      	b.n	402bcc <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402cc4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402cc6:	a804      	add	r0, sp, #16
  402cc8:	4b09      	ldr	r3, [pc, #36]	; (402cf0 <prvTimerTask+0x1e4>)
  402cca:	4798      	blx	r3
  402ccc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402cce:	9b04      	ldr	r3, [sp, #16]
  402cd0:	2b00      	cmp	r3, #0
  402cd2:	f47f af78 	bne.w	402bc6 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402cd6:	4b0e      	ldr	r3, [pc, #56]	; (402d10 <prvTimerTask+0x204>)
  402cd8:	681b      	ldr	r3, [r3, #0]
  402cda:	681a      	ldr	r2, [r3, #0]
  402cdc:	fab2 f282 	clz	r2, r2
  402ce0:	0952      	lsrs	r2, r2, #5
  402ce2:	2400      	movs	r4, #0
  402ce4:	e72d      	b.n	402b42 <prvTimerTask+0x36>
  402ce6:	bf00      	nop
  402ce8:	20400b60 	.word	0x20400b60
  402cec:	00402035 	.word	0x00402035
  402cf0:	00402a55 	.word	0x00402a55
  402cf4:	20400b94 	.word	0x20400b94
  402cf8:	00401c99 	.word	0x00401c99
  402cfc:	0040219d 	.word	0x0040219d
  402d00:	004028bd 	.word	0x004028bd
  402d04:	004029e5 	.word	0x004029e5
  402d08:	00401a95 	.word	0x00401a95
  402d0c:	004013c1 	.word	0x004013c1
  402d10:	20400b64 	.word	0x20400b64
  402d14:	e000ed04 	.word	0xe000ed04
  402d18:	00401051 	.word	0x00401051

00402d1c <EchoCallback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void EchoCallback(void){
  402d1c:	b510      	push	{r4, lr}
  402d1e:	b082      	sub	sp, #8
	if(pio_get(ECHO_PIO_A, PIO_INPUT, ECHO_IDX_MASK_A)){
  402d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402d24:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d28:	480f      	ldr	r0, [pc, #60]	; (402d68 <EchoCallback+0x4c>)
  402d2a:	4b10      	ldr	r3, [pc, #64]	; (402d6c <EchoCallback+0x50>)
  402d2c:	4798      	blx	r3
  402d2e:	b9b0      	cbnz	r0, 402d5e <EchoCallback+0x42>
		tc_start(TIMER_A, TIMER_CHANNEL_A);
		}else{
		float ts = ((float) tc_read_cv(TIMER_A, TIMER_CHANNEL_A))/32000.0;
  402d30:	2101      	movs	r1, #1
  402d32:	480f      	ldr	r0, [pc, #60]	; (402d70 <EchoCallback+0x54>)
  402d34:	4b0f      	ldr	r3, [pc, #60]	; (402d74 <EchoCallback+0x58>)
  402d36:	4798      	blx	r3
  402d38:	ee07 0a90 	vmov	s15, r0
  402d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
  402d40:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 402d78 <EchoCallback+0x5c>
  402d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
  402d48:	a902      	add	r1, sp, #8
  402d4a:	ed61 7a01 	vstmdb	r1!, {s15}
		xQueueSendToBackFromISR( hc04_A_EchoQueue, &ts, NULL );
  402d4e:	2300      	movs	r3, #0
  402d50:	461a      	mov	r2, r3
  402d52:	480a      	ldr	r0, [pc, #40]	; (402d7c <EchoCallback+0x60>)
  402d54:	6800      	ldr	r0, [r0, #0]
  402d56:	4c0a      	ldr	r4, [pc, #40]	; (402d80 <EchoCallback+0x64>)
  402d58:	47a0      	blx	r4
	}
}
  402d5a:	b002      	add	sp, #8
  402d5c:	bd10      	pop	{r4, pc}
		tc_start(TIMER_A, TIMER_CHANNEL_A);
  402d5e:	2101      	movs	r1, #1
  402d60:	4803      	ldr	r0, [pc, #12]	; (402d70 <EchoCallback+0x54>)
  402d62:	4b08      	ldr	r3, [pc, #32]	; (402d84 <EchoCallback+0x68>)
  402d64:	4798      	blx	r3
  402d66:	e7f8      	b.n	402d5a <EchoCallback+0x3e>
  402d68:	400e1200 	.word	0x400e1200
  402d6c:	00400749 	.word	0x00400749
  402d70:	4000c000 	.word	0x4000c000
  402d74:	00400bdf 	.word	0x00400bdf
  402d78:	46fa0000 	.word	0x46fa0000
  402d7c:	20400cb8 	.word	0x20400cb8
  402d80:	004018b5 	.word	0x004018b5
  402d84:	00400bd7 	.word	0x00400bd7

00402d88 <AFEC_callback>:
	flag_tc = true;
	//printf("AA      ");
}

static void AFEC_callback(void)
{
  402d88:	b510      	push	{r4, lr}
  402d8a:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402d8c:	4b06      	ldr	r3, [pc, #24]	; (402da8 <AFEC_callback+0x20>)
  402d8e:	2200      	movs	r2, #0
  402d90:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	int32_t ph_value;
	ph_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL);
  402d94:	a902      	add	r1, sp, #8
  402d96:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR( xQueueAfec, &ph_value, 0);
  402d9a:	4613      	mov	r3, r2
  402d9c:	4803      	ldr	r0, [pc, #12]	; (402dac <AFEC_callback+0x24>)
  402d9e:	6800      	ldr	r0, [r0, #0]
  402da0:	4c03      	ldr	r4, [pc, #12]	; (402db0 <AFEC_callback+0x28>)
  402da2:	47a0      	blx	r4
	
}
  402da4:	b002      	add	sp, #8
  402da6:	bd10      	pop	{r4, pc}
  402da8:	4003c000 	.word	0x4003c000
  402dac:	20400cc0 	.word	0x20400cc0
  402db0:	004018b5 	.word	0x004018b5

00402db4 <WaterCallback>:
void WaterCallback(void){
  402db4:	b508      	push	{r3, lr}
	spin_counter++;
  402db6:	4a05      	ldr	r2, [pc, #20]	; (402dcc <WaterCallback+0x18>)
  402db8:	6813      	ldr	r3, [r2, #0]
  402dba:	3301      	adds	r3, #1
  402dbc:	6013      	str	r3, [r2, #0]
	xSemaphoreGiveFromISR(xSemaphoreWater, NULL);
  402dbe:	2100      	movs	r1, #0
  402dc0:	4b03      	ldr	r3, [pc, #12]	; (402dd0 <WaterCallback+0x1c>)
  402dc2:	6818      	ldr	r0, [r3, #0]
  402dc4:	4b03      	ldr	r3, [pc, #12]	; (402dd4 <WaterCallback+0x20>)
  402dc6:	4798      	blx	r3
  402dc8:	bd08      	pop	{r3, pc}
  402dca:	bf00      	nop
  402dcc:	20400b9c 	.word	0x20400b9c
  402dd0:	20400cbc 	.word	0x20400cbc
  402dd4:	004019b5 	.word	0x004019b5

00402dd8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402dd8:	b570      	push	{r4, r5, r6, lr}
  402dda:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402ddc:	4b2a      	ldr	r3, [pc, #168]	; (402e88 <usart_serial_putchar+0xb0>)
  402dde:	4298      	cmp	r0, r3
  402de0:	d013      	beq.n	402e0a <usart_serial_putchar+0x32>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402de2:	4b2a      	ldr	r3, [pc, #168]	; (402e8c <usart_serial_putchar+0xb4>)
  402de4:	4298      	cmp	r0, r3
  402de6:	d019      	beq.n	402e1c <usart_serial_putchar+0x44>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402de8:	4b29      	ldr	r3, [pc, #164]	; (402e90 <usart_serial_putchar+0xb8>)
  402dea:	4298      	cmp	r0, r3
  402dec:	d01f      	beq.n	402e2e <usart_serial_putchar+0x56>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402dee:	4b29      	ldr	r3, [pc, #164]	; (402e94 <usart_serial_putchar+0xbc>)
  402df0:	4298      	cmp	r0, r3
  402df2:	d025      	beq.n	402e40 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402df4:	4b28      	ldr	r3, [pc, #160]	; (402e98 <usart_serial_putchar+0xc0>)
  402df6:	4298      	cmp	r0, r3
  402df8:	d02b      	beq.n	402e52 <usart_serial_putchar+0x7a>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402dfa:	4b28      	ldr	r3, [pc, #160]	; (402e9c <usart_serial_putchar+0xc4>)
  402dfc:	4298      	cmp	r0, r3
  402dfe:	d031      	beq.n	402e64 <usart_serial_putchar+0x8c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402e00:	4b27      	ldr	r3, [pc, #156]	; (402ea0 <usart_serial_putchar+0xc8>)
  402e02:	4298      	cmp	r0, r3
  402e04:	d037      	beq.n	402e76 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402e06:	2000      	movs	r0, #0
}
  402e08:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e0a:	461e      	mov	r6, r3
  402e0c:	4d25      	ldr	r5, [pc, #148]	; (402ea4 <usart_serial_putchar+0xcc>)
  402e0e:	4621      	mov	r1, r4
  402e10:	4630      	mov	r0, r6
  402e12:	47a8      	blx	r5
  402e14:	2800      	cmp	r0, #0
  402e16:	d1fa      	bne.n	402e0e <usart_serial_putchar+0x36>
		return 1;
  402e18:	2001      	movs	r0, #1
  402e1a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e1c:	461e      	mov	r6, r3
  402e1e:	4d21      	ldr	r5, [pc, #132]	; (402ea4 <usart_serial_putchar+0xcc>)
  402e20:	4621      	mov	r1, r4
  402e22:	4630      	mov	r0, r6
  402e24:	47a8      	blx	r5
  402e26:	2800      	cmp	r0, #0
  402e28:	d1fa      	bne.n	402e20 <usart_serial_putchar+0x48>
		return 1;
  402e2a:	2001      	movs	r0, #1
  402e2c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e2e:	461e      	mov	r6, r3
  402e30:	4d1c      	ldr	r5, [pc, #112]	; (402ea4 <usart_serial_putchar+0xcc>)
  402e32:	4621      	mov	r1, r4
  402e34:	4630      	mov	r0, r6
  402e36:	47a8      	blx	r5
  402e38:	2800      	cmp	r0, #0
  402e3a:	d1fa      	bne.n	402e32 <usart_serial_putchar+0x5a>
		return 1;
  402e3c:	2001      	movs	r0, #1
  402e3e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402e40:	461e      	mov	r6, r3
  402e42:	4d18      	ldr	r5, [pc, #96]	; (402ea4 <usart_serial_putchar+0xcc>)
  402e44:	4621      	mov	r1, r4
  402e46:	4630      	mov	r0, r6
  402e48:	47a8      	blx	r5
  402e4a:	2800      	cmp	r0, #0
  402e4c:	d1fa      	bne.n	402e44 <usart_serial_putchar+0x6c>
		return 1;
  402e4e:	2001      	movs	r0, #1
  402e50:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e52:	461e      	mov	r6, r3
  402e54:	4d14      	ldr	r5, [pc, #80]	; (402ea8 <usart_serial_putchar+0xd0>)
  402e56:	4621      	mov	r1, r4
  402e58:	4630      	mov	r0, r6
  402e5a:	47a8      	blx	r5
  402e5c:	2800      	cmp	r0, #0
  402e5e:	d1fa      	bne.n	402e56 <usart_serial_putchar+0x7e>
		return 1;
  402e60:	2001      	movs	r0, #1
  402e62:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e64:	461e      	mov	r6, r3
  402e66:	4d10      	ldr	r5, [pc, #64]	; (402ea8 <usart_serial_putchar+0xd0>)
  402e68:	4621      	mov	r1, r4
  402e6a:	4630      	mov	r0, r6
  402e6c:	47a8      	blx	r5
  402e6e:	2800      	cmp	r0, #0
  402e70:	d1fa      	bne.n	402e68 <usart_serial_putchar+0x90>
		return 1;
  402e72:	2001      	movs	r0, #1
  402e74:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402e76:	461e      	mov	r6, r3
  402e78:	4d0b      	ldr	r5, [pc, #44]	; (402ea8 <usart_serial_putchar+0xd0>)
  402e7a:	4621      	mov	r1, r4
  402e7c:	4630      	mov	r0, r6
  402e7e:	47a8      	blx	r5
  402e80:	2800      	cmp	r0, #0
  402e82:	d1fa      	bne.n	402e7a <usart_serial_putchar+0xa2>
		return 1;
  402e84:	2001      	movs	r0, #1
  402e86:	bd70      	pop	{r4, r5, r6, pc}
  402e88:	400e0800 	.word	0x400e0800
  402e8c:	400e0a00 	.word	0x400e0a00
  402e90:	400e1a00 	.word	0x400e1a00
  402e94:	400e1c00 	.word	0x400e1c00
  402e98:	40024000 	.word	0x40024000
  402e9c:	40028000 	.word	0x40028000
  402ea0:	4002c000 	.word	0x4002c000
  402ea4:	00400bff 	.word	0x00400bff
  402ea8:	00400d09 	.word	0x00400d09

00402eac <task_data>:
		}
		vTaskDelay(1000);
	}
}

void task_data(void){
  402eac:	b580      	push	{r7, lr}
  402eae:	b084      	sub	sp, #16
	xQueueData = xQueueCreate( 10, sizeof( sensorData ) );
  402eb0:	2200      	movs	r2, #0
  402eb2:	210c      	movs	r1, #12
  402eb4:	200a      	movs	r0, #10
  402eb6:	4b10      	ldr	r3, [pc, #64]	; (402ef8 <task_data+0x4c>)
  402eb8:	4798      	blx	r3
  402eba:	4b10      	ldr	r3, [pc, #64]	; (402efc <task_data+0x50>)
  402ebc:	6018      	str	r0, [r3, #0]
	
	sensorData data;

	while (true) {
		if (xQueueReceive( xQueueData, &(data), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  402ebe:	461e      	mov	r6, r3
  402ec0:	4d0f      	ldr	r5, [pc, #60]	; (402f00 <task_data+0x54>)
			printf("---------------------------");
  402ec2:	4f10      	ldr	r7, [pc, #64]	; (402f04 <task_data+0x58>)
  402ec4:	e003      	b.n	402ece <task_data+0x22>
			printf("\nID: %d \t", data.id);
			printf("VALUE: %d \n", data.value);
			printf("---------------------------");
		}
		vTaskDelay(300);
  402ec6:	f44f 7096 	mov.w	r0, #300	; 0x12c
  402eca:	4b0f      	ldr	r3, [pc, #60]	; (402f08 <task_data+0x5c>)
  402ecc:	4798      	blx	r3
		if (xQueueReceive( xQueueData, &(data), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  402ece:	2300      	movs	r3, #0
  402ed0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402ed4:	a901      	add	r1, sp, #4
  402ed6:	6830      	ldr	r0, [r6, #0]
  402ed8:	47a8      	blx	r5
  402eda:	2800      	cmp	r0, #0
  402edc:	d0f3      	beq.n	402ec6 <task_data+0x1a>
			printf("---------------------------");
  402ede:	4638      	mov	r0, r7
  402ee0:	4c0a      	ldr	r4, [pc, #40]	; (402f0c <task_data+0x60>)
  402ee2:	47a0      	blx	r4
			printf("\nID: %d \t", data.id);
  402ee4:	9901      	ldr	r1, [sp, #4]
  402ee6:	480a      	ldr	r0, [pc, #40]	; (402f10 <task_data+0x64>)
  402ee8:	47a0      	blx	r4
			printf("VALUE: %d \n", data.value);
  402eea:	9902      	ldr	r1, [sp, #8]
  402eec:	4809      	ldr	r0, [pc, #36]	; (402f14 <task_data+0x68>)
  402eee:	47a0      	blx	r4
			printf("---------------------------");
  402ef0:	4638      	mov	r0, r7
  402ef2:	47a0      	blx	r4
  402ef4:	e7e7      	b.n	402ec6 <task_data+0x1a>
  402ef6:	bf00      	nop
  402ef8:	00401655 	.word	0x00401655
  402efc:	20400cc8 	.word	0x20400cc8
  402f00:	00401a95 	.word	0x00401a95
  402f04:	00406eb8 	.word	0x00406eb8
  402f08:	004022bd 	.word	0x004022bd
  402f0c:	00403f01 	.word	0x00403f01
  402f10:	00406ed4 	.word	0x00406ed4
  402f14:	00406ee0 	.word	0x00406ee0

00402f18 <task_timer>:
static void task_timer(void *pvParameters){
  402f18:	b508      	push	{r3, lr}
	xSemaphoreCounter = xSemaphoreCreateBinary();
  402f1a:	2203      	movs	r2, #3
  402f1c:	2100      	movs	r1, #0
  402f1e:	2001      	movs	r0, #1
  402f20:	4b07      	ldr	r3, [pc, #28]	; (402f40 <task_timer+0x28>)
  402f22:	4798      	blx	r3
  402f24:	4b07      	ldr	r3, [pc, #28]	; (402f44 <task_timer+0x2c>)
  402f26:	6018      	str	r0, [r3, #0]
		vTaskDelay(500 / portTICK_PERIOD_MS);
  402f28:	4e07      	ldr	r6, [pc, #28]	; (402f48 <task_timer+0x30>)
		xSemaphoreGive(xSemaphoreCounter);
  402f2a:	461d      	mov	r5, r3
  402f2c:	4c07      	ldr	r4, [pc, #28]	; (402f4c <task_timer+0x34>)
		vTaskDelay(500 / portTICK_PERIOD_MS);
  402f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  402f32:	47b0      	blx	r6
		xSemaphoreGive(xSemaphoreCounter);
  402f34:	2300      	movs	r3, #0
  402f36:	461a      	mov	r2, r3
  402f38:	4619      	mov	r1, r3
  402f3a:	6828      	ldr	r0, [r5, #0]
  402f3c:	47a0      	blx	r4
  402f3e:	e7f6      	b.n	402f2e <task_timer+0x16>
  402f40:	00401655 	.word	0x00401655
  402f44:	20400cac 	.word	0x20400cac
  402f48:	004022bd 	.word	0x004022bd
  402f4c:	004016d1 	.word	0x004016d1

00402f50 <task_afec>:
void task_afec(void){
  402f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f52:	b08f      	sub	sp, #60	; 0x3c
	xQueueAfec = xQueueCreate( 10, sizeof( int32_t ) );
  402f54:	2200      	movs	r2, #0
  402f56:	2104      	movs	r1, #4
  402f58:	200a      	movs	r0, #10
  402f5a:	4b2e      	ldr	r3, [pc, #184]	; (403014 <task_afec+0xc4>)
  402f5c:	4798      	blx	r3
  402f5e:	4b2e      	ldr	r3, [pc, #184]	; (403018 <task_afec+0xc8>)
  402f60:	6018      	str	r0, [r3, #0]
	afec_enable(AFEC0);
  402f62:	4c2e      	ldr	r4, [pc, #184]	; (40301c <task_afec+0xcc>)
  402f64:	4620      	mov	r0, r4
  402f66:	4b2e      	ldr	r3, [pc, #184]	; (403020 <task_afec+0xd0>)
  402f68:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  402f6a:	a804      	add	r0, sp, #16
  402f6c:	4b2d      	ldr	r3, [pc, #180]	; (403024 <task_afec+0xd4>)
  402f6e:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  402f70:	a904      	add	r1, sp, #16
  402f72:	4620      	mov	r0, r4
  402f74:	4b2c      	ldr	r3, [pc, #176]	; (403028 <task_afec+0xd8>)
  402f76:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402f78:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402f7a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402f7e:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_callback, 5);
  402f80:	2305      	movs	r3, #5
  402f82:	4a2a      	ldr	r2, [pc, #168]	; (40302c <task_afec+0xdc>)
  402f84:	2100      	movs	r1, #0
  402f86:	4620      	mov	r0, r4
  402f88:	4d29      	ldr	r5, [pc, #164]	; (403030 <task_afec+0xe0>)
  402f8a:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402f8c:	a801      	add	r0, sp, #4
  402f8e:	4b29      	ldr	r3, [pc, #164]	; (403034 <task_afec+0xe4>)
  402f90:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402f92:	2500      	movs	r5, #0
  402f94:	f88d 5005 	strb.w	r5, [sp, #5]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL, &afec_ch_cfg);
  402f98:	aa01      	add	r2, sp, #4
  402f9a:	4629      	mov	r1, r5
  402f9c:	4620      	mov	r0, r4
  402f9e:	4b26      	ldr	r3, [pc, #152]	; (403038 <task_afec+0xe8>)
  402fa0:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  402fa2:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
  402fa8:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402faa:	a802      	add	r0, sp, #8
  402fac:	4b23      	ldr	r3, [pc, #140]	; (40303c <task_afec+0xec>)
  402fae:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  402fb0:	a902      	add	r1, sp, #8
  402fb2:	4620      	mov	r0, r4
  402fb4:	4b22      	ldr	r3, [pc, #136]	; (403040 <task_afec+0xf0>)
  402fb6:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402fb8:	2301      	movs	r3, #1
  402fba:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  402fbc:	2302      	movs	r3, #2
  402fbe:	6023      	str	r3, [r4, #0]
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  2000 / portTICK_PERIOD_MS)) {
  402fc0:	4f15      	ldr	r7, [pc, #84]	; (403018 <task_afec+0xc8>)
  402fc2:	4e20      	ldr	r6, [pc, #128]	; (403044 <task_afec+0xf4>)
	vTaskDelay(1000 / portTICK_PERIOD_MS);
  402fc4:	4d20      	ldr	r5, [pc, #128]	; (403048 <task_afec+0xf8>)
  402fc6:	e002      	b.n	402fce <task_afec+0x7e>
		vTaskDelay(1000);
  402fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402fcc:	47a8      	blx	r5
		if (xQueueReceive( xQueueAfec, &(adc_value), ( TickType_t )  2000 / portTICK_PERIOD_MS)) {
  402fce:	2300      	movs	r3, #0
  402fd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  402fd4:	a90a      	add	r1, sp, #40	; 0x28
  402fd6:	6838      	ldr	r0, [r7, #0]
  402fd8:	47b0      	blx	r6
  402fda:	2800      	cmp	r0, #0
  402fdc:	d0f4      	beq.n	402fc8 <task_afec+0x78>
	ul_vol = ADC_value * 100 / 4096;
  402fde:	2364      	movs	r3, #100	; 0x64
  402fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402fe2:	fb03 f302 	mul.w	r3, r3, r2
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	bfb8      	it	lt
  402fea:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
  402fee:	131c      	asrs	r4, r3, #12
	vTaskDelay(1000 / portTICK_PERIOD_MS);
  402ff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402ff4:	47a8      	blx	r5
  402ff6:	2202      	movs	r2, #2
  402ff8:	4b08      	ldr	r3, [pc, #32]	; (40301c <task_afec+0xcc>)
  402ffa:	601a      	str	r2, [r3, #0]
			data.id = 3;
  402ffc:	2303      	movs	r3, #3
  402ffe:	930b      	str	r3, [sp, #44]	; 0x2c
			data.value = ph_value;
  403000:	940c      	str	r4, [sp, #48]	; 0x30
			xQueueSend( xQueueData, &data, 0);
  403002:	2300      	movs	r3, #0
  403004:	461a      	mov	r2, r3
  403006:	a90b      	add	r1, sp, #44	; 0x2c
  403008:	4810      	ldr	r0, [pc, #64]	; (40304c <task_afec+0xfc>)
  40300a:	6800      	ldr	r0, [r0, #0]
  40300c:	4c10      	ldr	r4, [pc, #64]	; (403050 <task_afec+0x100>)
  40300e:	47a0      	blx	r4
  403010:	e7da      	b.n	402fc8 <task_afec+0x78>
  403012:	bf00      	nop
  403014:	00401655 	.word	0x00401655
  403018:	20400cc0 	.word	0x20400cc0
  40301c:	4003c000 	.word	0x4003c000
  403020:	004006dd 	.word	0x004006dd
  403024:	0040050d 	.word	0x0040050d
  403028:	0040055d 	.word	0x0040055d
  40302c:	00402d89 	.word	0x00402d89
  403030:	0040065d 	.word	0x0040065d
  403034:	0040053d 	.word	0x0040053d
  403038:	004004c9 	.word	0x004004c9
  40303c:	00400547 	.word	0x00400547
  403040:	004004f9 	.word	0x004004f9
  403044:	00401a95 	.word	0x00401a95
  403048:	004022bd 	.word	0x004022bd
  40304c:	20400cc8 	.word	0x20400cc8
  403050:	004016d1 	.word	0x004016d1

00403054 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403054:	b5f0      	push	{r4, r5, r6, r7, lr}
  403056:	b083      	sub	sp, #12
  403058:	4605      	mov	r5, r0
  40305a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40305c:	2300      	movs	r3, #0
  40305e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403060:	4b2a      	ldr	r3, [pc, #168]	; (40310c <usart_serial_getchar+0xb8>)
  403062:	4298      	cmp	r0, r3
  403064:	d013      	beq.n	40308e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403066:	4b2a      	ldr	r3, [pc, #168]	; (403110 <usart_serial_getchar+0xbc>)
  403068:	4298      	cmp	r0, r3
  40306a:	d018      	beq.n	40309e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40306c:	4b29      	ldr	r3, [pc, #164]	; (403114 <usart_serial_getchar+0xc0>)
  40306e:	4298      	cmp	r0, r3
  403070:	d01d      	beq.n	4030ae <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403072:	4b29      	ldr	r3, [pc, #164]	; (403118 <usart_serial_getchar+0xc4>)
  403074:	429d      	cmp	r5, r3
  403076:	d022      	beq.n	4030be <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403078:	4b28      	ldr	r3, [pc, #160]	; (40311c <usart_serial_getchar+0xc8>)
  40307a:	429d      	cmp	r5, r3
  40307c:	d027      	beq.n	4030ce <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40307e:	4b28      	ldr	r3, [pc, #160]	; (403120 <usart_serial_getchar+0xcc>)
  403080:	429d      	cmp	r5, r3
  403082:	d02e      	beq.n	4030e2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403084:	4b27      	ldr	r3, [pc, #156]	; (403124 <usart_serial_getchar+0xd0>)
  403086:	429d      	cmp	r5, r3
  403088:	d035      	beq.n	4030f6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40308a:	b003      	add	sp, #12
  40308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40308e:	461f      	mov	r7, r3
  403090:	4e25      	ldr	r6, [pc, #148]	; (403128 <usart_serial_getchar+0xd4>)
  403092:	4621      	mov	r1, r4
  403094:	4638      	mov	r0, r7
  403096:	47b0      	blx	r6
  403098:	2800      	cmp	r0, #0
  40309a:	d1fa      	bne.n	403092 <usart_serial_getchar+0x3e>
  40309c:	e7e9      	b.n	403072 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40309e:	461f      	mov	r7, r3
  4030a0:	4e21      	ldr	r6, [pc, #132]	; (403128 <usart_serial_getchar+0xd4>)
  4030a2:	4621      	mov	r1, r4
  4030a4:	4638      	mov	r0, r7
  4030a6:	47b0      	blx	r6
  4030a8:	2800      	cmp	r0, #0
  4030aa:	d1fa      	bne.n	4030a2 <usart_serial_getchar+0x4e>
  4030ac:	e7e4      	b.n	403078 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4030ae:	461f      	mov	r7, r3
  4030b0:	4e1d      	ldr	r6, [pc, #116]	; (403128 <usart_serial_getchar+0xd4>)
  4030b2:	4621      	mov	r1, r4
  4030b4:	4638      	mov	r0, r7
  4030b6:	47b0      	blx	r6
  4030b8:	2800      	cmp	r0, #0
  4030ba:	d1fa      	bne.n	4030b2 <usart_serial_getchar+0x5e>
  4030bc:	e7df      	b.n	40307e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4030be:	461f      	mov	r7, r3
  4030c0:	4e19      	ldr	r6, [pc, #100]	; (403128 <usart_serial_getchar+0xd4>)
  4030c2:	4621      	mov	r1, r4
  4030c4:	4638      	mov	r0, r7
  4030c6:	47b0      	blx	r6
  4030c8:	2800      	cmp	r0, #0
  4030ca:	d1fa      	bne.n	4030c2 <usart_serial_getchar+0x6e>
  4030cc:	e7da      	b.n	403084 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4030ce:	461e      	mov	r6, r3
  4030d0:	4d16      	ldr	r5, [pc, #88]	; (40312c <usart_serial_getchar+0xd8>)
  4030d2:	a901      	add	r1, sp, #4
  4030d4:	4630      	mov	r0, r6
  4030d6:	47a8      	blx	r5
  4030d8:	2800      	cmp	r0, #0
  4030da:	d1fa      	bne.n	4030d2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4030dc:	9b01      	ldr	r3, [sp, #4]
  4030de:	7023      	strb	r3, [r4, #0]
  4030e0:	e7d3      	b.n	40308a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4030e2:	461e      	mov	r6, r3
  4030e4:	4d11      	ldr	r5, [pc, #68]	; (40312c <usart_serial_getchar+0xd8>)
  4030e6:	a901      	add	r1, sp, #4
  4030e8:	4630      	mov	r0, r6
  4030ea:	47a8      	blx	r5
  4030ec:	2800      	cmp	r0, #0
  4030ee:	d1fa      	bne.n	4030e6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4030f0:	9b01      	ldr	r3, [sp, #4]
  4030f2:	7023      	strb	r3, [r4, #0]
  4030f4:	e7c9      	b.n	40308a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4030f6:	461e      	mov	r6, r3
  4030f8:	4d0c      	ldr	r5, [pc, #48]	; (40312c <usart_serial_getchar+0xd8>)
  4030fa:	a901      	add	r1, sp, #4
  4030fc:	4630      	mov	r0, r6
  4030fe:	47a8      	blx	r5
  403100:	2800      	cmp	r0, #0
  403102:	d1fa      	bne.n	4030fa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403104:	9b01      	ldr	r3, [sp, #4]
  403106:	7023      	strb	r3, [r4, #0]
}
  403108:	e7bf      	b.n	40308a <usart_serial_getchar+0x36>
  40310a:	bf00      	nop
  40310c:	400e0800 	.word	0x400e0800
  403110:	400e0a00 	.word	0x400e0a00
  403114:	400e1a00 	.word	0x400e1a00
  403118:	400e1c00 	.word	0x400e1c00
  40311c:	40024000 	.word	0x40024000
  403120:	40028000 	.word	0x40028000
  403124:	4002c000 	.word	0x4002c000
  403128:	00400c11 	.word	0x00400c11
  40312c:	00400d1f 	.word	0x00400d1f

00403130 <vApplicationStackOverflowHook>:
{
  403130:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403132:	460a      	mov	r2, r1
  403134:	4601      	mov	r1, r0
  403136:	4802      	ldr	r0, [pc, #8]	; (403140 <vApplicationStackOverflowHook+0x10>)
  403138:	4b02      	ldr	r3, [pc, #8]	; (403144 <vApplicationStackOverflowHook+0x14>)
  40313a:	4798      	blx	r3
  40313c:	e7fe      	b.n	40313c <vApplicationStackOverflowHook+0xc>
  40313e:	bf00      	nop
  403140:	00406eec 	.word	0x00406eec
  403144:	00403f01 	.word	0x00403f01

00403148 <vApplicationTickHook>:
{
  403148:	4770      	bx	lr

0040314a <vApplicationMallocFailedHook>:
  40314a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40314e:	b672      	cpsid	i
  403150:	f383 8811 	msr	BASEPRI, r3
  403154:	f3bf 8f6f 	isb	sy
  403158:	f3bf 8f4f 	dsb	sy
  40315c:	b662      	cpsie	i
  40315e:	e7fe      	b.n	40315e <vApplicationMallocFailedHook+0x14>

00403160 <TC0_Handler>:
void TC0_Handler(void){
  403160:	b500      	push	{lr}
  403162:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 1);
  403164:	2101      	movs	r1, #1
  403166:	4805      	ldr	r0, [pc, #20]	; (40317c <TC0_Handler+0x1c>)
  403168:	4b05      	ldr	r3, [pc, #20]	; (403180 <TC0_Handler+0x20>)
  40316a:	4798      	blx	r3
  40316c:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40316e:	9b01      	ldr	r3, [sp, #4]
	flag_tc = true;
  403170:	2201      	movs	r2, #1
  403172:	4b04      	ldr	r3, [pc, #16]	; (403184 <TC0_Handler+0x24>)
  403174:	601a      	str	r2, [r3, #0]
}
  403176:	b003      	add	sp, #12
  403178:	f85d fb04 	ldr.w	pc, [sp], #4
  40317c:	4000c000 	.word	0x4000c000
  403180:	00400bf7 	.word	0x00400bf7
  403184:	20400b98 	.word	0x20400b98

00403188 <TC_init0>:
void TC_init0(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403188:	b570      	push	{r4, r5, r6, lr}
  40318a:	4605      	mov	r5, r0
  40318c:	460c      	mov	r4, r1
  40318e:	4616      	mov	r6, r2
	pmc_enable_periph_clk(ID_TC);
  403190:	4608      	mov	r0, r1
  403192:	4b0f      	ldr	r3, [pc, #60]	; (4031d0 <TC_init0+0x48>)
  403194:	4798      	blx	r3
	tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK5 | TC_CMR_CPCTRG);
  403196:	f244 0204 	movw	r2, #16388	; 0x4004
  40319a:	4631      	mov	r1, r6
  40319c:	4628      	mov	r0, r5
  40319e:	4b0d      	ldr	r3, [pc, #52]	; (4031d4 <TC_init0+0x4c>)
  4031a0:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, 65535);
  4031a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4031a6:	4631      	mov	r1, r6
  4031a8:	4628      	mov	r0, r5
  4031aa:	4b0b      	ldr	r3, [pc, #44]	; (4031d8 <TC_init0+0x50>)
  4031ac:	4798      	blx	r3
  4031ae:	b263      	sxtb	r3, r4
  4031b0:	095b      	lsrs	r3, r3, #5
  4031b2:	f004 041f 	and.w	r4, r4, #31
  4031b6:	2201      	movs	r2, #1
  4031b8:	fa02 f404 	lsl.w	r4, r2, r4
  4031bc:	4a07      	ldr	r2, [pc, #28]	; (4031dc <TC_init0+0x54>)
  4031be:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4031c2:	2210      	movs	r2, #16
  4031c4:	4631      	mov	r1, r6
  4031c6:	4628      	mov	r0, r5
  4031c8:	4b05      	ldr	r3, [pc, #20]	; (4031e0 <TC_init0+0x58>)
  4031ca:	4798      	blx	r3
  4031cc:	bd70      	pop	{r4, r5, r6, pc}
  4031ce:	bf00      	nop
  4031d0:	00400b69 	.word	0x00400b69
  4031d4:	00400bbd 	.word	0x00400bbd
  4031d8:	00400be7 	.word	0x00400be7
  4031dc:	e000e100 	.word	0xe000e100
  4031e0:	00400bef 	.word	0x00400bef

004031e4 <io_init>:
void io_init(void){
  4031e4:	b570      	push	{r4, r5, r6, lr}
  4031e6:	b082      	sub	sp, #8
	pmc_enable_periph_clk(TRIGGER_PIO_ID_A);
  4031e8:	2010      	movs	r0, #16
  4031ea:	4c24      	ldr	r4, [pc, #144]	; (40327c <io_init+0x98>)
  4031ec:	47a0      	blx	r4
	pio_configure(TRIGGER_PIO_A, PIO_OUTPUT_0, TRIGGER_IDX_MASK_A, PIO_DEFAULT);
  4031ee:	2300      	movs	r3, #0
  4031f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4031f4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4031f8:	4821      	ldr	r0, [pc, #132]	; (403280 <io_init+0x9c>)
  4031fa:	4e22      	ldr	r6, [pc, #136]	; (403284 <io_init+0xa0>)
  4031fc:	47b0      	blx	r6
	pmc_enable_periph_clk(ECHO_PIO_ID_A);
  4031fe:	200c      	movs	r0, #12
  403200:	47a0      	blx	r4
	pio_configure(ECHO_PIO_A, PIO_INPUT, ECHO_IDX_MASK_A, PIO_PULLUP);
  403202:	4d21      	ldr	r5, [pc, #132]	; (403288 <io_init+0xa4>)
  403204:	2301      	movs	r3, #1
  403206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40320a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40320e:	4628      	mov	r0, r5
  403210:	47b0      	blx	r6
	pmc_enable_periph_clk(WATER_PIO_ID_A);
  403212:	200a      	movs	r0, #10
  403214:	47a0      	blx	r4
	pio_configure(WATER_PIO_A, PIO_INPUT, WATER_IDX_MASK_A, PIO_PULLUP);
  403216:	4c1d      	ldr	r4, [pc, #116]	; (40328c <io_init+0xa8>)
  403218:	2301      	movs	r3, #1
  40321a:	2210      	movs	r2, #16
  40321c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403220:	4620      	mov	r0, r4
  403222:	47b0      	blx	r6
	pio_handler_set(ECHO_PIO_A,
  403224:	4b1a      	ldr	r3, [pc, #104]	; (403290 <io_init+0xac>)
  403226:	9300      	str	r3, [sp, #0]
  403228:	2340      	movs	r3, #64	; 0x40
  40322a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40322e:	210c      	movs	r1, #12
  403230:	4628      	mov	r0, r5
  403232:	4e18      	ldr	r6, [pc, #96]	; (403294 <io_init+0xb0>)
  403234:	47b0      	blx	r6
	pio_handler_set(WATER_PIO_A,
  403236:	4b18      	ldr	r3, [pc, #96]	; (403298 <io_init+0xb4>)
  403238:	9300      	str	r3, [sp, #0]
  40323a:	2340      	movs	r3, #64	; 0x40
  40323c:	2210      	movs	r2, #16
  40323e:	210a      	movs	r1, #10
  403240:	4620      	mov	r0, r4
  403242:	47b0      	blx	r6
  403244:	4b15      	ldr	r3, [pc, #84]	; (40329c <io_init+0xb8>)
  403246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40324a:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40324c:	22a0      	movs	r2, #160	; 0xa0
  40324e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403252:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403256:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403258:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	pio_enable_interrupt(ECHO_PIO_A, ECHO_IDX_MASK_A);
  40325c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403260:	4628      	mov	r0, r5
  403262:	4e0f      	ldr	r6, [pc, #60]	; (4032a0 <io_init+0xbc>)
  403264:	47b0      	blx	r6
	pio_enable_interrupt(WATER_PIO_A, WATER_IDX_MASK_A);
  403266:	2110      	movs	r1, #16
  403268:	4620      	mov	r0, r4
  40326a:	47b0      	blx	r6
	pio_get_interrupt_status(ECHO_PIO_A); // clear IRQ
  40326c:	4628      	mov	r0, r5
  40326e:	4d0d      	ldr	r5, [pc, #52]	; (4032a4 <io_init+0xc0>)
  403270:	47a8      	blx	r5
	pio_get_interrupt_status(WATER_PIO_A); // clear IRQ
  403272:	4620      	mov	r0, r4
  403274:	47a8      	blx	r5
}
  403276:	b002      	add	sp, #8
  403278:	bd70      	pop	{r4, r5, r6, pc}
  40327a:	bf00      	nop
  40327c:	00400b69 	.word	0x00400b69
  403280:	400e1400 	.word	0x400e1400
  403284:	00400855 	.word	0x00400855
  403288:	400e1200 	.word	0x400e1200
  40328c:	400e0e00 	.word	0x400e0e00
  403290:	00402d1d 	.word	0x00402d1d
  403294:	00400975 	.word	0x00400975
  403298:	00402db5 	.word	0x00402db5
  40329c:	e000e100 	.word	0xe000e100
  4032a0:	00400917 	.word	0x00400917
  4032a4:	0040091b 	.word	0x0040091b

004032a8 <task_water_cicles>:
static void task_water_cicles(void *pvParameters){
  4032a8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  4032ac:	b084      	sub	sp, #16
	xSemaphoreWater = xSemaphoreCreateBinary();
  4032ae:	2203      	movs	r2, #3
  4032b0:	2100      	movs	r1, #0
  4032b2:	2001      	movs	r0, #1
  4032b4:	4c26      	ldr	r4, [pc, #152]	; (403350 <task_water_cicles+0xa8>)
  4032b6:	47a0      	blx	r4
  4032b8:	4b26      	ldr	r3, [pc, #152]	; (403354 <task_water_cicles+0xac>)
  4032ba:	6018      	str	r0, [r3, #0]
	xSemaphoreCounter = xSemaphoreCreateBinary();
  4032bc:	2203      	movs	r2, #3
  4032be:	2100      	movs	r1, #0
  4032c0:	2001      	movs	r0, #1
  4032c2:	47a0      	blx	r4
  4032c4:	4b24      	ldr	r3, [pc, #144]	; (403358 <task_water_cicles+0xb0>)
  4032c6:	6018      	str	r0, [r3, #0]
	io_init();
  4032c8:	4b24      	ldr	r3, [pc, #144]	; (40335c <task_water_cicles+0xb4>)
  4032ca:	4798      	blx	r3
		if( xSemaphoreTake(xSemaphoreWater, ( TickType_t ) 50) == pdTRUE)
  4032cc:	f8df a084 	ldr.w	sl, [pc, #132]	; 403354 <task_water_cicles+0xac>
  4032d0:	2400      	movs	r4, #0
  4032d2:	4d23      	ldr	r5, [pc, #140]	; (403360 <task_water_cicles+0xb8>)
				water_flow = 7.2727 * cicles + 3.63636;
  4032d4:	f20f 0968 	addw	r9, pc, #104	; 0x68
  4032d8:	e9d9 8900 	ldrd	r8, r9, [r9]
  4032dc:	e00a      	b.n	4032f4 <task_water_cicles+0x4c>
				water_flow = 0;
  4032de:	4620      	mov	r0, r4
			data.id = 2;
  4032e0:	2302      	movs	r3, #2
  4032e2:	9301      	str	r3, [sp, #4]
			data.value = water_flow;
  4032e4:	9002      	str	r0, [sp, #8]
			xQueueSend( xQueueData, &data, 0);
  4032e6:	4623      	mov	r3, r4
  4032e8:	4622      	mov	r2, r4
  4032ea:	a901      	add	r1, sp, #4
  4032ec:	481d      	ldr	r0, [pc, #116]	; (403364 <task_water_cicles+0xbc>)
  4032ee:	6800      	ldr	r0, [r0, #0]
  4032f0:	4e1d      	ldr	r6, [pc, #116]	; (403368 <task_water_cicles+0xc0>)
  4032f2:	47b0      	blx	r6
static void task_water_cicles(void *pvParameters){
  4032f4:	f04f 0b00 	mov.w	fp, #0
		if( xSemaphoreTake(xSemaphoreWater, ( TickType_t ) 50) == pdTRUE)
  4032f8:	4623      	mov	r3, r4
  4032fa:	2232      	movs	r2, #50	; 0x32
  4032fc:	4621      	mov	r1, r4
  4032fe:	f8da 0000 	ldr.w	r0, [sl]
  403302:	47a8      	blx	r5
  403304:	2801      	cmp	r0, #1
			cicles = cicles + 1;
  403306:	bf08      	it	eq
  403308:	f10b 0b01 	addeq.w	fp, fp, #1
		if( xSemaphoreTake(xSemaphoreCounter, ( TickType_t ) 5) == pdTRUE){
  40330c:	4623      	mov	r3, r4
  40330e:	2205      	movs	r2, #5
  403310:	4621      	mov	r1, r4
  403312:	4811      	ldr	r0, [pc, #68]	; (403358 <task_water_cicles+0xb0>)
  403314:	6800      	ldr	r0, [r0, #0]
  403316:	47a8      	blx	r5
  403318:	2801      	cmp	r0, #1
  40331a:	d1ed      	bne.n	4032f8 <task_water_cicles+0x50>
			if(cicles <= 16){
  40331c:	f1bb 0f10 	cmp.w	fp, #16
  403320:	dddd      	ble.n	4032de <task_water_cicles+0x36>
				water_flow = 7.2727 * cicles + 3.63636;
  403322:	4658      	mov	r0, fp
  403324:	4b11      	ldr	r3, [pc, #68]	; (40336c <task_water_cicles+0xc4>)
  403326:	4798      	blx	r3
  403328:	4642      	mov	r2, r8
  40332a:	464b      	mov	r3, r9
  40332c:	4e10      	ldr	r6, [pc, #64]	; (403370 <task_water_cicles+0xc8>)
  40332e:	47b0      	blx	r6
  403330:	a305      	add	r3, pc, #20	; (adr r3, 403348 <task_water_cicles+0xa0>)
  403332:	e9d3 2300 	ldrd	r2, r3, [r3]
  403336:	4e0f      	ldr	r6, [pc, #60]	; (403374 <task_water_cicles+0xcc>)
  403338:	47b0      	blx	r6
  40333a:	4b0f      	ldr	r3, [pc, #60]	; (403378 <task_water_cicles+0xd0>)
  40333c:	4798      	blx	r3
  40333e:	e7cf      	b.n	4032e0 <task_water_cicles+0x38>
  403340:	ab367a10 	.word	0xab367a10
  403344:	401d173e 	.word	0x401d173e
  403348:	e963dc48 	.word	0xe963dc48
  40334c:	400d1743 	.word	0x400d1743
  403350:	00401655 	.word	0x00401655
  403354:	20400cbc 	.word	0x20400cbc
  403358:	20400cac 	.word	0x20400cac
  40335c:	004031e5 	.word	0x004031e5
  403360:	00401a95 	.word	0x00401a95
  403364:	20400cc8 	.word	0x20400cc8
  403368:	004016d1 	.word	0x004016d1
  40336c:	004038d1 	.word	0x004038d1
  403370:	0040399d 	.word	0x0040399d
  403374:	00403639 	.word	0x00403639
  403378:	00403dc1 	.word	0x00403dc1

0040337c <signal_trigger>:
void signal_trigger(void){
  40337c:	b510      	push	{r4, lr}
	pio_set(TRIGGER_PIO_A, TRIGGER_IDX_MASK_A);
  40337e:	4c08      	ldr	r4, [pc, #32]	; (4033a0 <signal_trigger+0x24>)
  403380:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403384:	4620      	mov	r0, r4
  403386:	4b07      	ldr	r3, [pc, #28]	; (4033a4 <signal_trigger+0x28>)
  403388:	4798      	blx	r3
	delay_us(10);
  40338a:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40338e:	4b06      	ldr	r3, [pc, #24]	; (4033a8 <signal_trigger+0x2c>)
  403390:	4798      	blx	r3
	pio_clear(TRIGGER_PIO_A, TRIGGER_IDX_MASK_A);
  403392:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403396:	4620      	mov	r0, r4
  403398:	4b04      	ldr	r3, [pc, #16]	; (4033ac <signal_trigger+0x30>)
  40339a:	4798      	blx	r3
  40339c:	bd10      	pop	{r4, pc}
  40339e:	bf00      	nop
  4033a0:	400e1400 	.word	0x400e1400
  4033a4:	00400741 	.word	0x00400741
  4033a8:	20400001 	.word	0x20400001
  4033ac:	00400745 	.word	0x00400745

004033b0 <task_hc04_A>:
static void task_hc04_A(void *pvParameters){
  4033b0:	e92d 46d0 	stmdb	sp!, {r4, r6, r7, r9, sl, lr}
  4033b4:	ed2d 8b02 	vpush	{d8}
  4033b8:	b084      	sub	sp, #16
	xSemaphoreTC = xSemaphoreCreateBinary();
  4033ba:	2203      	movs	r2, #3
  4033bc:	2100      	movs	r1, #0
  4033be:	2001      	movs	r0, #1
  4033c0:	4c24      	ldr	r4, [pc, #144]	; (403454 <task_hc04_A+0xa4>)
  4033c2:	47a0      	blx	r4
  4033c4:	4b24      	ldr	r3, [pc, #144]	; (403458 <task_hc04_A+0xa8>)
  4033c6:	6018      	str	r0, [r3, #0]
	hc04_A_EchoQueue = xQueueCreate( 1, sizeof( float ) );
  4033c8:	2200      	movs	r2, #0
  4033ca:	2104      	movs	r1, #4
  4033cc:	2001      	movs	r0, #1
  4033ce:	47a0      	blx	r4
  4033d0:	4b22      	ldr	r3, [pc, #136]	; (40345c <task_hc04_A+0xac>)
  4033d2:	6018      	str	r0, [r3, #0]
	TC_init0(TIMER_A, TIMER_ID_A, TIMER_CHANNEL_A, TIMER_FREQ_A);
  4033d4:	232a      	movs	r3, #42	; 0x2a
  4033d6:	2201      	movs	r2, #1
  4033d8:	2118      	movs	r1, #24
  4033da:	4821      	ldr	r0, [pc, #132]	; (403460 <task_hc04_A+0xb0>)
  4033dc:	4c21      	ldr	r4, [pc, #132]	; (403464 <task_hc04_A+0xb4>)
  4033de:	47a0      	blx	r4
		signal_trigger();
  4033e0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 403494 <task_hc04_A+0xe4>
		if( xQueueReceive(hc04_A_EchoQueue, &ts, ( TickType_t ) 100 / portTICK_PERIOD_MS) == pdTRUE ){
  4033e4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40345c <task_hc04_A+0xac>
	return(ts * SOUND_SPEED_MS/2);
  4033e8:	2600      	movs	r6, #0
  4033ea:	4f1f      	ldr	r7, [pc, #124]	; (403468 <task_hc04_A+0xb8>)
			int water_level = (int) (224 - (dm*100));
  4033ec:	eddf 8a1f 	vldr	s17, [pc, #124]	; 40346c <task_hc04_A+0xbc>
  4033f0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 403470 <task_hc04_A+0xc0>
  4033f4:	e003      	b.n	4033fe <task_hc04_A+0x4e>
		vTaskDelay(500 / portTICK_PERIOD_MS);
  4033f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4033fa:	4b1e      	ldr	r3, [pc, #120]	; (403474 <task_hc04_A+0xc4>)
  4033fc:	4798      	blx	r3
		signal_trigger();
  4033fe:	47d0      	blx	sl
		if( xQueueReceive(hc04_A_EchoQueue, &ts, ( TickType_t ) 100 / portTICK_PERIOD_MS) == pdTRUE ){
  403400:	2300      	movs	r3, #0
  403402:	2264      	movs	r2, #100	; 0x64
  403404:	4669      	mov	r1, sp
  403406:	f8d9 0000 	ldr.w	r0, [r9]
  40340a:	4c1b      	ldr	r4, [pc, #108]	; (403478 <task_hc04_A+0xc8>)
  40340c:	47a0      	blx	r4
  40340e:	2801      	cmp	r0, #1
  403410:	d1f1      	bne.n	4033f6 <task_hc04_A+0x46>
	return(ts * SOUND_SPEED_MS/2);
  403412:	9800      	ldr	r0, [sp, #0]
  403414:	4b19      	ldr	r3, [pc, #100]	; (40347c <task_hc04_A+0xcc>)
  403416:	4798      	blx	r3
  403418:	4c19      	ldr	r4, [pc, #100]	; (403480 <task_hc04_A+0xd0>)
  40341a:	4632      	mov	r2, r6
  40341c:	463b      	mov	r3, r7
  40341e:	47a0      	blx	r4
  403420:	2200      	movs	r2, #0
  403422:	4b18      	ldr	r3, [pc, #96]	; (403484 <task_hc04_A+0xd4>)
  403424:	47a0      	blx	r4
  403426:	4b18      	ldr	r3, [pc, #96]	; (403488 <task_hc04_A+0xd8>)
  403428:	4798      	blx	r3
			int water_level = (int) (224 - (dm*100));
  40342a:	ee07 0a90 	vmov	s15, r0
  40342e:	ee67 7aa8 	vmul.f32	s15, s15, s17
  403432:	ee78 7a67 	vsub.f32	s15, s16, s15
  403436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			data.id = 1;
  40343a:	2301      	movs	r3, #1
  40343c:	9301      	str	r3, [sp, #4]
			data.value = 224 - (dm * 100);
  40343e:	edcd 7a02 	vstr	s15, [sp, #8]
			xQueueSend( xQueueData, &data, 0);
  403442:	2300      	movs	r3, #0
  403444:	461a      	mov	r2, r3
  403446:	a901      	add	r1, sp, #4
  403448:	4810      	ldr	r0, [pc, #64]	; (40348c <task_hc04_A+0xdc>)
  40344a:	6800      	ldr	r0, [r0, #0]
  40344c:	4c10      	ldr	r4, [pc, #64]	; (403490 <task_hc04_A+0xe0>)
  40344e:	47a0      	blx	r4
  403450:	e7d1      	b.n	4033f6 <task_hc04_A+0x46>
  403452:	bf00      	nop
  403454:	00401655 	.word	0x00401655
  403458:	20400cc4 	.word	0x20400cc4
  40345c:	20400cb8 	.word	0x20400cb8
  403460:	4000c000 	.word	0x4000c000
  403464:	00403189 	.word	0x00403189
  403468:	40754000 	.word	0x40754000
  40346c:	42c80000 	.word	0x42c80000
  403470:	43600000 	.word	0x43600000
  403474:	004022bd 	.word	0x004022bd
  403478:	00401a95 	.word	0x00401a95
  40347c:	004038f5 	.word	0x004038f5
  403480:	0040399d 	.word	0x0040399d
  403484:	3fe00000 	.word	0x3fe00000
  403488:	00403e11 	.word	0x00403e11
  40348c:	20400cc8 	.word	0x20400cc8
  403490:	004016d1 	.word	0x004016d1
  403494:	0040337d 	.word	0x0040337d

00403498 <main>:
/**
*  \brief FreeRTOS Real Time Kernel example entry point.
*
*  \return Unused (ANSI-C compatibility).
*/
int main(void){
  403498:	b500      	push	{lr}
  40349a:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  40349c:	4b45      	ldr	r3, [pc, #276]	; (4035b4 <main+0x11c>)
  40349e:	4798      	blx	r3
	board_init();
  4034a0:	4b45      	ldr	r3, [pc, #276]	; (4035b8 <main+0x120>)
  4034a2:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;
  4034a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4034a8:	4b44      	ldr	r3, [pc, #272]	; (4035bc <main+0x124>)
  4034aa:	605a      	str	r2, [r3, #4]
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4034ac:	4d44      	ldr	r5, [pc, #272]	; (4035c0 <main+0x128>)
  4034ae:	4b45      	ldr	r3, [pc, #276]	; (4035c4 <main+0x12c>)
  4034b0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4034b2:	4a45      	ldr	r2, [pc, #276]	; (4035c8 <main+0x130>)
  4034b4:	4b45      	ldr	r3, [pc, #276]	; (4035cc <main+0x134>)
  4034b6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4034b8:	4a45      	ldr	r2, [pc, #276]	; (4035d0 <main+0x138>)
  4034ba:	4b46      	ldr	r3, [pc, #280]	; (4035d4 <main+0x13c>)
  4034bc:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4034be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4034c2:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4034c4:	23c0      	movs	r3, #192	; 0xc0
  4034c6:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4034c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4034cc:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4034ce:	2400      	movs	r4, #0
  4034d0:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4034d2:	9408      	str	r4, [sp, #32]
  4034d4:	200e      	movs	r0, #14
  4034d6:	4b40      	ldr	r3, [pc, #256]	; (4035d8 <main+0x140>)
  4034d8:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4034da:	4a40      	ldr	r2, [pc, #256]	; (4035dc <main+0x144>)
  4034dc:	a904      	add	r1, sp, #16
  4034de:	4628      	mov	r0, r5
  4034e0:	4b3f      	ldr	r3, [pc, #252]	; (4035e0 <main+0x148>)
  4034e2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4034e4:	4628      	mov	r0, r5
  4034e6:	4b3f      	ldr	r3, [pc, #252]	; (4035e4 <main+0x14c>)
  4034e8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4034ea:	4628      	mov	r0, r5
  4034ec:	4b3e      	ldr	r3, [pc, #248]	; (4035e8 <main+0x150>)
  4034ee:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4034f0:	4e3e      	ldr	r6, [pc, #248]	; (4035ec <main+0x154>)
  4034f2:	6833      	ldr	r3, [r6, #0]
  4034f4:	4621      	mov	r1, r4
  4034f6:	6898      	ldr	r0, [r3, #8]
  4034f8:	4d3d      	ldr	r5, [pc, #244]	; (4035f0 <main+0x158>)
  4034fa:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4034fc:	6833      	ldr	r3, [r6, #0]
  4034fe:	4621      	mov	r1, r4
  403500:	6858      	ldr	r0, [r3, #4]
  403502:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403504:	6833      	ldr	r3, [r6, #0]
  403506:	4621      	mov	r1, r4
  403508:	6898      	ldr	r0, [r3, #8]
  40350a:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();
	
	/* Create task to run the hc04_A sensor*/
	if (xTaskCreate(task_hc04_A, "hc04_A", TASK_UARTTX_STACK_SIZE, NULL,
  40350c:	9403      	str	r4, [sp, #12]
  40350e:	9402      	str	r4, [sp, #8]
  403510:	9401      	str	r4, [sp, #4]
  403512:	9400      	str	r4, [sp, #0]
  403514:	4623      	mov	r3, r4
  403516:	f44f 7200 	mov.w	r2, #512	; 0x200
  40351a:	4936      	ldr	r1, [pc, #216]	; (4035f4 <main+0x15c>)
  40351c:	4836      	ldr	r0, [pc, #216]	; (4035f8 <main+0x160>)
  40351e:	4c37      	ldr	r4, [pc, #220]	; (4035fc <main+0x164>)
  403520:	47a0      	blx	r4
  403522:	2801      	cmp	r0, #1
  403524:	d002      	beq.n	40352c <main+0x94>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403526:	4836      	ldr	r0, [pc, #216]	; (403600 <main+0x168>)
  403528:	4b36      	ldr	r3, [pc, #216]	; (403604 <main+0x16c>)
  40352a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_water_cicles, "cicles", TASK_UARTTX_STACK_SIZE, NULL,
  40352c:	2300      	movs	r3, #0
  40352e:	9303      	str	r3, [sp, #12]
  403530:	9302      	str	r3, [sp, #8]
  403532:	9301      	str	r3, [sp, #4]
  403534:	9300      	str	r3, [sp, #0]
  403536:	f44f 7200 	mov.w	r2, #512	; 0x200
  40353a:	4933      	ldr	r1, [pc, #204]	; (403608 <main+0x170>)
  40353c:	4833      	ldr	r0, [pc, #204]	; (40360c <main+0x174>)
  40353e:	4c2f      	ldr	r4, [pc, #188]	; (4035fc <main+0x164>)
  403540:	47a0      	blx	r4
  403542:	2801      	cmp	r0, #1
  403544:	d002      	beq.n	40354c <main+0xb4>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403546:	482e      	ldr	r0, [pc, #184]	; (403600 <main+0x168>)
  403548:	4b2e      	ldr	r3, [pc, #184]	; (403604 <main+0x16c>)
  40354a:	4798      	blx	r3
	}

	if (xTaskCreate(task_timer, "timer", TASK_UARTTX_STACK_SIZE, NULL,
  40354c:	2300      	movs	r3, #0
  40354e:	9303      	str	r3, [sp, #12]
  403550:	9302      	str	r3, [sp, #8]
  403552:	9301      	str	r3, [sp, #4]
  403554:	9300      	str	r3, [sp, #0]
  403556:	f44f 7200 	mov.w	r2, #512	; 0x200
  40355a:	492d      	ldr	r1, [pc, #180]	; (403610 <main+0x178>)
  40355c:	482d      	ldr	r0, [pc, #180]	; (403614 <main+0x17c>)
  40355e:	4c27      	ldr	r4, [pc, #156]	; (4035fc <main+0x164>)
  403560:	47a0      	blx	r4
  403562:	2801      	cmp	r0, #1
  403564:	d002      	beq.n	40356c <main+0xd4>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403566:	4826      	ldr	r0, [pc, #152]	; (403600 <main+0x168>)
  403568:	4b26      	ldr	r3, [pc, #152]	; (403604 <main+0x16c>)
  40356a:	4798      	blx	r3
	}

	if (xTaskCreate(task_afec, "afec", TASK_UARTTX_STACK_SIZE, NULL,
  40356c:	2300      	movs	r3, #0
  40356e:	9303      	str	r3, [sp, #12]
  403570:	9302      	str	r3, [sp, #8]
  403572:	9301      	str	r3, [sp, #4]
  403574:	9300      	str	r3, [sp, #0]
  403576:	f44f 7200 	mov.w	r2, #512	; 0x200
  40357a:	4927      	ldr	r1, [pc, #156]	; (403618 <main+0x180>)
  40357c:	4827      	ldr	r0, [pc, #156]	; (40361c <main+0x184>)
  40357e:	4c1f      	ldr	r4, [pc, #124]	; (4035fc <main+0x164>)
  403580:	47a0      	blx	r4
  403582:	2801      	cmp	r0, #1
  403584:	d002      	beq.n	40358c <main+0xf4>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  403586:	481e      	ldr	r0, [pc, #120]	; (403600 <main+0x168>)
  403588:	4b1e      	ldr	r3, [pc, #120]	; (403604 <main+0x16c>)
  40358a:	4798      	blx	r3
	}

	if (xTaskCreate(task_data, "data", TASK_UARTTX_STACK_SIZE, NULL,
  40358c:	2300      	movs	r3, #0
  40358e:	9303      	str	r3, [sp, #12]
  403590:	9302      	str	r3, [sp, #8]
  403592:	9301      	str	r3, [sp, #4]
  403594:	9300      	str	r3, [sp, #0]
  403596:	f44f 7200 	mov.w	r2, #512	; 0x200
  40359a:	4921      	ldr	r1, [pc, #132]	; (403620 <main+0x188>)
  40359c:	4821      	ldr	r0, [pc, #132]	; (403624 <main+0x18c>)
  40359e:	4c17      	ldr	r4, [pc, #92]	; (4035fc <main+0x164>)
  4035a0:	47a0      	blx	r4
  4035a2:	2801      	cmp	r0, #1
  4035a4:	d002      	beq.n	4035ac <main+0x114>
	TASK_UARTTX_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create UartTx task\r\n");
  4035a6:	4816      	ldr	r0, [pc, #88]	; (403600 <main+0x168>)
  4035a8:	4b16      	ldr	r3, [pc, #88]	; (403604 <main+0x16c>)
  4035aa:	4798      	blx	r3




	/* Start the scheduler. */
	vTaskStartScheduler();
  4035ac:	4b1e      	ldr	r3, [pc, #120]	; (403628 <main+0x190>)
  4035ae:	4798      	blx	r3
  4035b0:	e7fe      	b.n	4035b0 <main+0x118>
  4035b2:	bf00      	nop
  4035b4:	004001ad 	.word	0x004001ad
  4035b8:	004002a9 	.word	0x004002a9
  4035bc:	400e1850 	.word	0x400e1850
  4035c0:	40028000 	.word	0x40028000
  4035c4:	20400be4 	.word	0x20400be4
  4035c8:	00402dd9 	.word	0x00402dd9
  4035cc:	20400be0 	.word	0x20400be0
  4035d0:	00403055 	.word	0x00403055
  4035d4:	20400bdc 	.word	0x20400bdc
  4035d8:	00400b69 	.word	0x00400b69
  4035dc:	08f0d180 	.word	0x08f0d180
  4035e0:	00400ca9 	.word	0x00400ca9
  4035e4:	00400cfd 	.word	0x00400cfd
  4035e8:	00400d03 	.word	0x00400d03
  4035ec:	20400014 	.word	0x20400014
  4035f0:	004046b5 	.word	0x004046b5
  4035f4:	00406e70 	.word	0x00406e70
  4035f8:	004033b1 	.word	0x004033b1
  4035fc:	00401d75 	.word	0x00401d75
  403600:	00406e78 	.word	0x00406e78
  403604:	00403f01 	.word	0x00403f01
  403608:	00406e98 	.word	0x00406e98
  40360c:	004032a9 	.word	0x004032a9
  403610:	00406ea0 	.word	0x00406ea0
  403614:	00402f19 	.word	0x00402f19
  403618:	00406ea8 	.word	0x00406ea8
  40361c:	00402f51 	.word	0x00402f51
  403620:	00406eb0 	.word	0x00406eb0
  403624:	00402ead 	.word	0x00402ead
  403628:	00401fa9 	.word	0x00401fa9

0040362c <__aeabi_drsub>:
  40362c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403630:	e002      	b.n	403638 <__adddf3>
  403632:	bf00      	nop

00403634 <__aeabi_dsub>:
  403634:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403638 <__adddf3>:
  403638:	b530      	push	{r4, r5, lr}
  40363a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40363e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403642:	ea94 0f05 	teq	r4, r5
  403646:	bf08      	it	eq
  403648:	ea90 0f02 	teqeq	r0, r2
  40364c:	bf1f      	itttt	ne
  40364e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403652:	ea55 0c02 	orrsne.w	ip, r5, r2
  403656:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40365a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40365e:	f000 80e2 	beq.w	403826 <__adddf3+0x1ee>
  403662:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403666:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40366a:	bfb8      	it	lt
  40366c:	426d      	neglt	r5, r5
  40366e:	dd0c      	ble.n	40368a <__adddf3+0x52>
  403670:	442c      	add	r4, r5
  403672:	ea80 0202 	eor.w	r2, r0, r2
  403676:	ea81 0303 	eor.w	r3, r1, r3
  40367a:	ea82 0000 	eor.w	r0, r2, r0
  40367e:	ea83 0101 	eor.w	r1, r3, r1
  403682:	ea80 0202 	eor.w	r2, r0, r2
  403686:	ea81 0303 	eor.w	r3, r1, r3
  40368a:	2d36      	cmp	r5, #54	; 0x36
  40368c:	bf88      	it	hi
  40368e:	bd30      	pophi	{r4, r5, pc}
  403690:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403694:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403698:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40369c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4036a0:	d002      	beq.n	4036a8 <__adddf3+0x70>
  4036a2:	4240      	negs	r0, r0
  4036a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4036a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4036ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4036b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4036b4:	d002      	beq.n	4036bc <__adddf3+0x84>
  4036b6:	4252      	negs	r2, r2
  4036b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036bc:	ea94 0f05 	teq	r4, r5
  4036c0:	f000 80a7 	beq.w	403812 <__adddf3+0x1da>
  4036c4:	f1a4 0401 	sub.w	r4, r4, #1
  4036c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4036cc:	db0d      	blt.n	4036ea <__adddf3+0xb2>
  4036ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4036d2:	fa22 f205 	lsr.w	r2, r2, r5
  4036d6:	1880      	adds	r0, r0, r2
  4036d8:	f141 0100 	adc.w	r1, r1, #0
  4036dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4036e0:	1880      	adds	r0, r0, r2
  4036e2:	fa43 f305 	asr.w	r3, r3, r5
  4036e6:	4159      	adcs	r1, r3
  4036e8:	e00e      	b.n	403708 <__adddf3+0xd0>
  4036ea:	f1a5 0520 	sub.w	r5, r5, #32
  4036ee:	f10e 0e20 	add.w	lr, lr, #32
  4036f2:	2a01      	cmp	r2, #1
  4036f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4036f8:	bf28      	it	cs
  4036fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4036fe:	fa43 f305 	asr.w	r3, r3, r5
  403702:	18c0      	adds	r0, r0, r3
  403704:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40370c:	d507      	bpl.n	40371e <__adddf3+0xe6>
  40370e:	f04f 0e00 	mov.w	lr, #0
  403712:	f1dc 0c00 	rsbs	ip, ip, #0
  403716:	eb7e 0000 	sbcs.w	r0, lr, r0
  40371a:	eb6e 0101 	sbc.w	r1, lr, r1
  40371e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403722:	d31b      	bcc.n	40375c <__adddf3+0x124>
  403724:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403728:	d30c      	bcc.n	403744 <__adddf3+0x10c>
  40372a:	0849      	lsrs	r1, r1, #1
  40372c:	ea5f 0030 	movs.w	r0, r0, rrx
  403730:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403734:	f104 0401 	add.w	r4, r4, #1
  403738:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40373c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403740:	f080 809a 	bcs.w	403878 <__adddf3+0x240>
  403744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403748:	bf08      	it	eq
  40374a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40374e:	f150 0000 	adcs.w	r0, r0, #0
  403752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403756:	ea41 0105 	orr.w	r1, r1, r5
  40375a:	bd30      	pop	{r4, r5, pc}
  40375c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403760:	4140      	adcs	r0, r0
  403762:	eb41 0101 	adc.w	r1, r1, r1
  403766:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40376a:	f1a4 0401 	sub.w	r4, r4, #1
  40376e:	d1e9      	bne.n	403744 <__adddf3+0x10c>
  403770:	f091 0f00 	teq	r1, #0
  403774:	bf04      	itt	eq
  403776:	4601      	moveq	r1, r0
  403778:	2000      	moveq	r0, #0
  40377a:	fab1 f381 	clz	r3, r1
  40377e:	bf08      	it	eq
  403780:	3320      	addeq	r3, #32
  403782:	f1a3 030b 	sub.w	r3, r3, #11
  403786:	f1b3 0220 	subs.w	r2, r3, #32
  40378a:	da0c      	bge.n	4037a6 <__adddf3+0x16e>
  40378c:	320c      	adds	r2, #12
  40378e:	dd08      	ble.n	4037a2 <__adddf3+0x16a>
  403790:	f102 0c14 	add.w	ip, r2, #20
  403794:	f1c2 020c 	rsb	r2, r2, #12
  403798:	fa01 f00c 	lsl.w	r0, r1, ip
  40379c:	fa21 f102 	lsr.w	r1, r1, r2
  4037a0:	e00c      	b.n	4037bc <__adddf3+0x184>
  4037a2:	f102 0214 	add.w	r2, r2, #20
  4037a6:	bfd8      	it	le
  4037a8:	f1c2 0c20 	rsble	ip, r2, #32
  4037ac:	fa01 f102 	lsl.w	r1, r1, r2
  4037b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4037b4:	bfdc      	itt	le
  4037b6:	ea41 010c 	orrle.w	r1, r1, ip
  4037ba:	4090      	lslle	r0, r2
  4037bc:	1ae4      	subs	r4, r4, r3
  4037be:	bfa2      	ittt	ge
  4037c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4037c4:	4329      	orrge	r1, r5
  4037c6:	bd30      	popge	{r4, r5, pc}
  4037c8:	ea6f 0404 	mvn.w	r4, r4
  4037cc:	3c1f      	subs	r4, #31
  4037ce:	da1c      	bge.n	40380a <__adddf3+0x1d2>
  4037d0:	340c      	adds	r4, #12
  4037d2:	dc0e      	bgt.n	4037f2 <__adddf3+0x1ba>
  4037d4:	f104 0414 	add.w	r4, r4, #20
  4037d8:	f1c4 0220 	rsb	r2, r4, #32
  4037dc:	fa20 f004 	lsr.w	r0, r0, r4
  4037e0:	fa01 f302 	lsl.w	r3, r1, r2
  4037e4:	ea40 0003 	orr.w	r0, r0, r3
  4037e8:	fa21 f304 	lsr.w	r3, r1, r4
  4037ec:	ea45 0103 	orr.w	r1, r5, r3
  4037f0:	bd30      	pop	{r4, r5, pc}
  4037f2:	f1c4 040c 	rsb	r4, r4, #12
  4037f6:	f1c4 0220 	rsb	r2, r4, #32
  4037fa:	fa20 f002 	lsr.w	r0, r0, r2
  4037fe:	fa01 f304 	lsl.w	r3, r1, r4
  403802:	ea40 0003 	orr.w	r0, r0, r3
  403806:	4629      	mov	r1, r5
  403808:	bd30      	pop	{r4, r5, pc}
  40380a:	fa21 f004 	lsr.w	r0, r1, r4
  40380e:	4629      	mov	r1, r5
  403810:	bd30      	pop	{r4, r5, pc}
  403812:	f094 0f00 	teq	r4, #0
  403816:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40381a:	bf06      	itte	eq
  40381c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403820:	3401      	addeq	r4, #1
  403822:	3d01      	subne	r5, #1
  403824:	e74e      	b.n	4036c4 <__adddf3+0x8c>
  403826:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40382a:	bf18      	it	ne
  40382c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403830:	d029      	beq.n	403886 <__adddf3+0x24e>
  403832:	ea94 0f05 	teq	r4, r5
  403836:	bf08      	it	eq
  403838:	ea90 0f02 	teqeq	r0, r2
  40383c:	d005      	beq.n	40384a <__adddf3+0x212>
  40383e:	ea54 0c00 	orrs.w	ip, r4, r0
  403842:	bf04      	itt	eq
  403844:	4619      	moveq	r1, r3
  403846:	4610      	moveq	r0, r2
  403848:	bd30      	pop	{r4, r5, pc}
  40384a:	ea91 0f03 	teq	r1, r3
  40384e:	bf1e      	ittt	ne
  403850:	2100      	movne	r1, #0
  403852:	2000      	movne	r0, #0
  403854:	bd30      	popne	{r4, r5, pc}
  403856:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40385a:	d105      	bne.n	403868 <__adddf3+0x230>
  40385c:	0040      	lsls	r0, r0, #1
  40385e:	4149      	adcs	r1, r1
  403860:	bf28      	it	cs
  403862:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403866:	bd30      	pop	{r4, r5, pc}
  403868:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40386c:	bf3c      	itt	cc
  40386e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403872:	bd30      	popcc	{r4, r5, pc}
  403874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403878:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40387c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403880:	f04f 0000 	mov.w	r0, #0
  403884:	bd30      	pop	{r4, r5, pc}
  403886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40388a:	bf1a      	itte	ne
  40388c:	4619      	movne	r1, r3
  40388e:	4610      	movne	r0, r2
  403890:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403894:	bf1c      	itt	ne
  403896:	460b      	movne	r3, r1
  403898:	4602      	movne	r2, r0
  40389a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40389e:	bf06      	itte	eq
  4038a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4038a4:	ea91 0f03 	teqeq	r1, r3
  4038a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4038ac:	bd30      	pop	{r4, r5, pc}
  4038ae:	bf00      	nop

004038b0 <__aeabi_ui2d>:
  4038b0:	f090 0f00 	teq	r0, #0
  4038b4:	bf04      	itt	eq
  4038b6:	2100      	moveq	r1, #0
  4038b8:	4770      	bxeq	lr
  4038ba:	b530      	push	{r4, r5, lr}
  4038bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4038c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4038c4:	f04f 0500 	mov.w	r5, #0
  4038c8:	f04f 0100 	mov.w	r1, #0
  4038cc:	e750      	b.n	403770 <__adddf3+0x138>
  4038ce:	bf00      	nop

004038d0 <__aeabi_i2d>:
  4038d0:	f090 0f00 	teq	r0, #0
  4038d4:	bf04      	itt	eq
  4038d6:	2100      	moveq	r1, #0
  4038d8:	4770      	bxeq	lr
  4038da:	b530      	push	{r4, r5, lr}
  4038dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4038e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4038e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4038e8:	bf48      	it	mi
  4038ea:	4240      	negmi	r0, r0
  4038ec:	f04f 0100 	mov.w	r1, #0
  4038f0:	e73e      	b.n	403770 <__adddf3+0x138>
  4038f2:	bf00      	nop

004038f4 <__aeabi_f2d>:
  4038f4:	0042      	lsls	r2, r0, #1
  4038f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4038fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4038fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403902:	bf1f      	itttt	ne
  403904:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403908:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40390c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403910:	4770      	bxne	lr
  403912:	f092 0f00 	teq	r2, #0
  403916:	bf14      	ite	ne
  403918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40391c:	4770      	bxeq	lr
  40391e:	b530      	push	{r4, r5, lr}
  403920:	f44f 7460 	mov.w	r4, #896	; 0x380
  403924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40392c:	e720      	b.n	403770 <__adddf3+0x138>
  40392e:	bf00      	nop

00403930 <__aeabi_ul2d>:
  403930:	ea50 0201 	orrs.w	r2, r0, r1
  403934:	bf08      	it	eq
  403936:	4770      	bxeq	lr
  403938:	b530      	push	{r4, r5, lr}
  40393a:	f04f 0500 	mov.w	r5, #0
  40393e:	e00a      	b.n	403956 <__aeabi_l2d+0x16>

00403940 <__aeabi_l2d>:
  403940:	ea50 0201 	orrs.w	r2, r0, r1
  403944:	bf08      	it	eq
  403946:	4770      	bxeq	lr
  403948:	b530      	push	{r4, r5, lr}
  40394a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40394e:	d502      	bpl.n	403956 <__aeabi_l2d+0x16>
  403950:	4240      	negs	r0, r0
  403952:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403956:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40395a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40395e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403962:	f43f aedc 	beq.w	40371e <__adddf3+0xe6>
  403966:	f04f 0203 	mov.w	r2, #3
  40396a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40396e:	bf18      	it	ne
  403970:	3203      	addne	r2, #3
  403972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403976:	bf18      	it	ne
  403978:	3203      	addne	r2, #3
  40397a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40397e:	f1c2 0320 	rsb	r3, r2, #32
  403982:	fa00 fc03 	lsl.w	ip, r0, r3
  403986:	fa20 f002 	lsr.w	r0, r0, r2
  40398a:	fa01 fe03 	lsl.w	lr, r1, r3
  40398e:	ea40 000e 	orr.w	r0, r0, lr
  403992:	fa21 f102 	lsr.w	r1, r1, r2
  403996:	4414      	add	r4, r2
  403998:	e6c1      	b.n	40371e <__adddf3+0xe6>
  40399a:	bf00      	nop

0040399c <__aeabi_dmul>:
  40399c:	b570      	push	{r4, r5, r6, lr}
  40399e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4039a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4039a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4039aa:	bf1d      	ittte	ne
  4039ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4039b0:	ea94 0f0c 	teqne	r4, ip
  4039b4:	ea95 0f0c 	teqne	r5, ip
  4039b8:	f000 f8de 	bleq	403b78 <__aeabi_dmul+0x1dc>
  4039bc:	442c      	add	r4, r5
  4039be:	ea81 0603 	eor.w	r6, r1, r3
  4039c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4039c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4039ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4039ce:	bf18      	it	ne
  4039d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4039d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4039dc:	d038      	beq.n	403a50 <__aeabi_dmul+0xb4>
  4039de:	fba0 ce02 	umull	ip, lr, r0, r2
  4039e2:	f04f 0500 	mov.w	r5, #0
  4039e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4039ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4039ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4039f2:	f04f 0600 	mov.w	r6, #0
  4039f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4039fa:	f09c 0f00 	teq	ip, #0
  4039fe:	bf18      	it	ne
  403a00:	f04e 0e01 	orrne.w	lr, lr, #1
  403a04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403a0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403a10:	d204      	bcs.n	403a1c <__aeabi_dmul+0x80>
  403a12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403a16:	416d      	adcs	r5, r5
  403a18:	eb46 0606 	adc.w	r6, r6, r6
  403a1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403a20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403a24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403a28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403a2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403a30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403a34:	bf88      	it	hi
  403a36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403a3a:	d81e      	bhi.n	403a7a <__aeabi_dmul+0xde>
  403a3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403a40:	bf08      	it	eq
  403a42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403a46:	f150 0000 	adcs.w	r0, r0, #0
  403a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a4e:	bd70      	pop	{r4, r5, r6, pc}
  403a50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403a54:	ea46 0101 	orr.w	r1, r6, r1
  403a58:	ea40 0002 	orr.w	r0, r0, r2
  403a5c:	ea81 0103 	eor.w	r1, r1, r3
  403a60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403a64:	bfc2      	ittt	gt
  403a66:	ebd4 050c 	rsbsgt	r5, r4, ip
  403a6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403a6e:	bd70      	popgt	{r4, r5, r6, pc}
  403a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a74:	f04f 0e00 	mov.w	lr, #0
  403a78:	3c01      	subs	r4, #1
  403a7a:	f300 80ab 	bgt.w	403bd4 <__aeabi_dmul+0x238>
  403a7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403a82:	bfde      	ittt	le
  403a84:	2000      	movle	r0, #0
  403a86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403a8a:	bd70      	pople	{r4, r5, r6, pc}
  403a8c:	f1c4 0400 	rsb	r4, r4, #0
  403a90:	3c20      	subs	r4, #32
  403a92:	da35      	bge.n	403b00 <__aeabi_dmul+0x164>
  403a94:	340c      	adds	r4, #12
  403a96:	dc1b      	bgt.n	403ad0 <__aeabi_dmul+0x134>
  403a98:	f104 0414 	add.w	r4, r4, #20
  403a9c:	f1c4 0520 	rsb	r5, r4, #32
  403aa0:	fa00 f305 	lsl.w	r3, r0, r5
  403aa4:	fa20 f004 	lsr.w	r0, r0, r4
  403aa8:	fa01 f205 	lsl.w	r2, r1, r5
  403aac:	ea40 0002 	orr.w	r0, r0, r2
  403ab0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403abc:	fa21 f604 	lsr.w	r6, r1, r4
  403ac0:	eb42 0106 	adc.w	r1, r2, r6
  403ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403ac8:	bf08      	it	eq
  403aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403ace:	bd70      	pop	{r4, r5, r6, pc}
  403ad0:	f1c4 040c 	rsb	r4, r4, #12
  403ad4:	f1c4 0520 	rsb	r5, r4, #32
  403ad8:	fa00 f304 	lsl.w	r3, r0, r4
  403adc:	fa20 f005 	lsr.w	r0, r0, r5
  403ae0:	fa01 f204 	lsl.w	r2, r1, r4
  403ae4:	ea40 0002 	orr.w	r0, r0, r2
  403ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403af0:	f141 0100 	adc.w	r1, r1, #0
  403af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403af8:	bf08      	it	eq
  403afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403afe:	bd70      	pop	{r4, r5, r6, pc}
  403b00:	f1c4 0520 	rsb	r5, r4, #32
  403b04:	fa00 f205 	lsl.w	r2, r0, r5
  403b08:	ea4e 0e02 	orr.w	lr, lr, r2
  403b0c:	fa20 f304 	lsr.w	r3, r0, r4
  403b10:	fa01 f205 	lsl.w	r2, r1, r5
  403b14:	ea43 0302 	orr.w	r3, r3, r2
  403b18:	fa21 f004 	lsr.w	r0, r1, r4
  403b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403b20:	fa21 f204 	lsr.w	r2, r1, r4
  403b24:	ea20 0002 	bic.w	r0, r0, r2
  403b28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403b2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403b30:	bf08      	it	eq
  403b32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403b36:	bd70      	pop	{r4, r5, r6, pc}
  403b38:	f094 0f00 	teq	r4, #0
  403b3c:	d10f      	bne.n	403b5e <__aeabi_dmul+0x1c2>
  403b3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403b42:	0040      	lsls	r0, r0, #1
  403b44:	eb41 0101 	adc.w	r1, r1, r1
  403b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403b4c:	bf08      	it	eq
  403b4e:	3c01      	subeq	r4, #1
  403b50:	d0f7      	beq.n	403b42 <__aeabi_dmul+0x1a6>
  403b52:	ea41 0106 	orr.w	r1, r1, r6
  403b56:	f095 0f00 	teq	r5, #0
  403b5a:	bf18      	it	ne
  403b5c:	4770      	bxne	lr
  403b5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403b62:	0052      	lsls	r2, r2, #1
  403b64:	eb43 0303 	adc.w	r3, r3, r3
  403b68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403b6c:	bf08      	it	eq
  403b6e:	3d01      	subeq	r5, #1
  403b70:	d0f7      	beq.n	403b62 <__aeabi_dmul+0x1c6>
  403b72:	ea43 0306 	orr.w	r3, r3, r6
  403b76:	4770      	bx	lr
  403b78:	ea94 0f0c 	teq	r4, ip
  403b7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403b80:	bf18      	it	ne
  403b82:	ea95 0f0c 	teqne	r5, ip
  403b86:	d00c      	beq.n	403ba2 <__aeabi_dmul+0x206>
  403b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403b8c:	bf18      	it	ne
  403b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403b92:	d1d1      	bne.n	403b38 <__aeabi_dmul+0x19c>
  403b94:	ea81 0103 	eor.w	r1, r1, r3
  403b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403b9c:	f04f 0000 	mov.w	r0, #0
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
  403ba2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ba6:	bf06      	itte	eq
  403ba8:	4610      	moveq	r0, r2
  403baa:	4619      	moveq	r1, r3
  403bac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403bb0:	d019      	beq.n	403be6 <__aeabi_dmul+0x24a>
  403bb2:	ea94 0f0c 	teq	r4, ip
  403bb6:	d102      	bne.n	403bbe <__aeabi_dmul+0x222>
  403bb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403bbc:	d113      	bne.n	403be6 <__aeabi_dmul+0x24a>
  403bbe:	ea95 0f0c 	teq	r5, ip
  403bc2:	d105      	bne.n	403bd0 <__aeabi_dmul+0x234>
  403bc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403bc8:	bf1c      	itt	ne
  403bca:	4610      	movne	r0, r2
  403bcc:	4619      	movne	r1, r3
  403bce:	d10a      	bne.n	403be6 <__aeabi_dmul+0x24a>
  403bd0:	ea81 0103 	eor.w	r1, r1, r3
  403bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403bd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403be0:	f04f 0000 	mov.w	r0, #0
  403be4:	bd70      	pop	{r4, r5, r6, pc}
  403be6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403bea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403bee:	bd70      	pop	{r4, r5, r6, pc}

00403bf0 <__aeabi_ddiv>:
  403bf0:	b570      	push	{r4, r5, r6, lr}
  403bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403bfe:	bf1d      	ittte	ne
  403c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403c04:	ea94 0f0c 	teqne	r4, ip
  403c08:	ea95 0f0c 	teqne	r5, ip
  403c0c:	f000 f8a7 	bleq	403d5e <__aeabi_ddiv+0x16e>
  403c10:	eba4 0405 	sub.w	r4, r4, r5
  403c14:	ea81 0e03 	eor.w	lr, r1, r3
  403c18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403c1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403c20:	f000 8088 	beq.w	403d34 <__aeabi_ddiv+0x144>
  403c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403c28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403c2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403c34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403c38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403c3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403c40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403c44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403c48:	429d      	cmp	r5, r3
  403c4a:	bf08      	it	eq
  403c4c:	4296      	cmpeq	r6, r2
  403c4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403c52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403c56:	d202      	bcs.n	403c5e <__aeabi_ddiv+0x6e>
  403c58:	085b      	lsrs	r3, r3, #1
  403c5a:	ea4f 0232 	mov.w	r2, r2, rrx
  403c5e:	1ab6      	subs	r6, r6, r2
  403c60:	eb65 0503 	sbc.w	r5, r5, r3
  403c64:	085b      	lsrs	r3, r3, #1
  403c66:	ea4f 0232 	mov.w	r2, r2, rrx
  403c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403c6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403c72:	ebb6 0e02 	subs.w	lr, r6, r2
  403c76:	eb75 0e03 	sbcs.w	lr, r5, r3
  403c7a:	bf22      	ittt	cs
  403c7c:	1ab6      	subcs	r6, r6, r2
  403c7e:	4675      	movcs	r5, lr
  403c80:	ea40 000c 	orrcs.w	r0, r0, ip
  403c84:	085b      	lsrs	r3, r3, #1
  403c86:	ea4f 0232 	mov.w	r2, r2, rrx
  403c8a:	ebb6 0e02 	subs.w	lr, r6, r2
  403c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  403c92:	bf22      	ittt	cs
  403c94:	1ab6      	subcs	r6, r6, r2
  403c96:	4675      	movcs	r5, lr
  403c98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403c9c:	085b      	lsrs	r3, r3, #1
  403c9e:	ea4f 0232 	mov.w	r2, r2, rrx
  403ca2:	ebb6 0e02 	subs.w	lr, r6, r2
  403ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
  403caa:	bf22      	ittt	cs
  403cac:	1ab6      	subcs	r6, r6, r2
  403cae:	4675      	movcs	r5, lr
  403cb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403cb4:	085b      	lsrs	r3, r3, #1
  403cb6:	ea4f 0232 	mov.w	r2, r2, rrx
  403cba:	ebb6 0e02 	subs.w	lr, r6, r2
  403cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403cc2:	bf22      	ittt	cs
  403cc4:	1ab6      	subcs	r6, r6, r2
  403cc6:	4675      	movcs	r5, lr
  403cc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403ccc:	ea55 0e06 	orrs.w	lr, r5, r6
  403cd0:	d018      	beq.n	403d04 <__aeabi_ddiv+0x114>
  403cd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403cd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403cda:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403cde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403ce2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403cea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403cee:	d1c0      	bne.n	403c72 <__aeabi_ddiv+0x82>
  403cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403cf4:	d10b      	bne.n	403d0e <__aeabi_ddiv+0x11e>
  403cf6:	ea41 0100 	orr.w	r1, r1, r0
  403cfa:	f04f 0000 	mov.w	r0, #0
  403cfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403d02:	e7b6      	b.n	403c72 <__aeabi_ddiv+0x82>
  403d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403d08:	bf04      	itt	eq
  403d0a:	4301      	orreq	r1, r0
  403d0c:	2000      	moveq	r0, #0
  403d0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403d12:	bf88      	it	hi
  403d14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403d18:	f63f aeaf 	bhi.w	403a7a <__aeabi_dmul+0xde>
  403d1c:	ebb5 0c03 	subs.w	ip, r5, r3
  403d20:	bf04      	itt	eq
  403d22:	ebb6 0c02 	subseq.w	ip, r6, r2
  403d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403d2a:	f150 0000 	adcs.w	r0, r0, #0
  403d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403d32:	bd70      	pop	{r4, r5, r6, pc}
  403d34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403d38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403d3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403d40:	bfc2      	ittt	gt
  403d42:	ebd4 050c 	rsbsgt	r5, r4, ip
  403d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403d4a:	bd70      	popgt	{r4, r5, r6, pc}
  403d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403d50:	f04f 0e00 	mov.w	lr, #0
  403d54:	3c01      	subs	r4, #1
  403d56:	e690      	b.n	403a7a <__aeabi_dmul+0xde>
  403d58:	ea45 0e06 	orr.w	lr, r5, r6
  403d5c:	e68d      	b.n	403a7a <__aeabi_dmul+0xde>
  403d5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403d62:	ea94 0f0c 	teq	r4, ip
  403d66:	bf08      	it	eq
  403d68:	ea95 0f0c 	teqeq	r5, ip
  403d6c:	f43f af3b 	beq.w	403be6 <__aeabi_dmul+0x24a>
  403d70:	ea94 0f0c 	teq	r4, ip
  403d74:	d10a      	bne.n	403d8c <__aeabi_ddiv+0x19c>
  403d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403d7a:	f47f af34 	bne.w	403be6 <__aeabi_dmul+0x24a>
  403d7e:	ea95 0f0c 	teq	r5, ip
  403d82:	f47f af25 	bne.w	403bd0 <__aeabi_dmul+0x234>
  403d86:	4610      	mov	r0, r2
  403d88:	4619      	mov	r1, r3
  403d8a:	e72c      	b.n	403be6 <__aeabi_dmul+0x24a>
  403d8c:	ea95 0f0c 	teq	r5, ip
  403d90:	d106      	bne.n	403da0 <__aeabi_ddiv+0x1b0>
  403d92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403d96:	f43f aefd 	beq.w	403b94 <__aeabi_dmul+0x1f8>
  403d9a:	4610      	mov	r0, r2
  403d9c:	4619      	mov	r1, r3
  403d9e:	e722      	b.n	403be6 <__aeabi_dmul+0x24a>
  403da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403da4:	bf18      	it	ne
  403da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403daa:	f47f aec5 	bne.w	403b38 <__aeabi_dmul+0x19c>
  403dae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403db2:	f47f af0d 	bne.w	403bd0 <__aeabi_dmul+0x234>
  403db6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403dba:	f47f aeeb 	bne.w	403b94 <__aeabi_dmul+0x1f8>
  403dbe:	e712      	b.n	403be6 <__aeabi_dmul+0x24a>

00403dc0 <__aeabi_d2iz>:
  403dc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403dc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403dc8:	d215      	bcs.n	403df6 <__aeabi_d2iz+0x36>
  403dca:	d511      	bpl.n	403df0 <__aeabi_d2iz+0x30>
  403dcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403dd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403dd4:	d912      	bls.n	403dfc <__aeabi_d2iz+0x3c>
  403dd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403dde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403de2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403de6:	fa23 f002 	lsr.w	r0, r3, r2
  403dea:	bf18      	it	ne
  403dec:	4240      	negne	r0, r0
  403dee:	4770      	bx	lr
  403df0:	f04f 0000 	mov.w	r0, #0
  403df4:	4770      	bx	lr
  403df6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403dfa:	d105      	bne.n	403e08 <__aeabi_d2iz+0x48>
  403dfc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403e00:	bf08      	it	eq
  403e02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403e06:	4770      	bx	lr
  403e08:	f04f 0000 	mov.w	r0, #0
  403e0c:	4770      	bx	lr
  403e0e:	bf00      	nop

00403e10 <__aeabi_d2f>:
  403e10:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403e14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403e18:	bf24      	itt	cs
  403e1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403e1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403e22:	d90d      	bls.n	403e40 <__aeabi_d2f+0x30>
  403e24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403e28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403e2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403e30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403e34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403e38:	bf08      	it	eq
  403e3a:	f020 0001 	biceq.w	r0, r0, #1
  403e3e:	4770      	bx	lr
  403e40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403e44:	d121      	bne.n	403e8a <__aeabi_d2f+0x7a>
  403e46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403e4a:	bfbc      	itt	lt
  403e4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403e50:	4770      	bxlt	lr
  403e52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403e56:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403e5a:	f1c2 0218 	rsb	r2, r2, #24
  403e5e:	f1c2 0c20 	rsb	ip, r2, #32
  403e62:	fa10 f30c 	lsls.w	r3, r0, ip
  403e66:	fa20 f002 	lsr.w	r0, r0, r2
  403e6a:	bf18      	it	ne
  403e6c:	f040 0001 	orrne.w	r0, r0, #1
  403e70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403e74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403e78:	fa03 fc0c 	lsl.w	ip, r3, ip
  403e7c:	ea40 000c 	orr.w	r0, r0, ip
  403e80:	fa23 f302 	lsr.w	r3, r3, r2
  403e84:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403e88:	e7cc      	b.n	403e24 <__aeabi_d2f+0x14>
  403e8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403e8e:	d107      	bne.n	403ea0 <__aeabi_d2f+0x90>
  403e90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403e94:	bf1e      	ittt	ne
  403e96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403e9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403e9e:	4770      	bxne	lr
  403ea0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403ea4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403eac:	4770      	bx	lr
  403eae:	bf00      	nop

00403eb0 <__libc_init_array>:
  403eb0:	b570      	push	{r4, r5, r6, lr}
  403eb2:	4e0f      	ldr	r6, [pc, #60]	; (403ef0 <__libc_init_array+0x40>)
  403eb4:	4d0f      	ldr	r5, [pc, #60]	; (403ef4 <__libc_init_array+0x44>)
  403eb6:	1b76      	subs	r6, r6, r5
  403eb8:	10b6      	asrs	r6, r6, #2
  403eba:	bf18      	it	ne
  403ebc:	2400      	movne	r4, #0
  403ebe:	d005      	beq.n	403ecc <__libc_init_array+0x1c>
  403ec0:	3401      	adds	r4, #1
  403ec2:	f855 3b04 	ldr.w	r3, [r5], #4
  403ec6:	4798      	blx	r3
  403ec8:	42a6      	cmp	r6, r4
  403eca:	d1f9      	bne.n	403ec0 <__libc_init_array+0x10>
  403ecc:	4e0a      	ldr	r6, [pc, #40]	; (403ef8 <__libc_init_array+0x48>)
  403ece:	4d0b      	ldr	r5, [pc, #44]	; (403efc <__libc_init_array+0x4c>)
  403ed0:	1b76      	subs	r6, r6, r5
  403ed2:	f003 f8cb 	bl	40706c <_init>
  403ed6:	10b6      	asrs	r6, r6, #2
  403ed8:	bf18      	it	ne
  403eda:	2400      	movne	r4, #0
  403edc:	d006      	beq.n	403eec <__libc_init_array+0x3c>
  403ede:	3401      	adds	r4, #1
  403ee0:	f855 3b04 	ldr.w	r3, [r5], #4
  403ee4:	4798      	blx	r3
  403ee6:	42a6      	cmp	r6, r4
  403ee8:	d1f9      	bne.n	403ede <__libc_init_array+0x2e>
  403eea:	bd70      	pop	{r4, r5, r6, pc}
  403eec:	bd70      	pop	{r4, r5, r6, pc}
  403eee:	bf00      	nop
  403ef0:	00407078 	.word	0x00407078
  403ef4:	00407078 	.word	0x00407078
  403ef8:	00407080 	.word	0x00407080
  403efc:	00407078 	.word	0x00407078

00403f00 <iprintf>:
  403f00:	b40f      	push	{r0, r1, r2, r3}
  403f02:	b500      	push	{lr}
  403f04:	4907      	ldr	r1, [pc, #28]	; (403f24 <iprintf+0x24>)
  403f06:	b083      	sub	sp, #12
  403f08:	ab04      	add	r3, sp, #16
  403f0a:	6808      	ldr	r0, [r1, #0]
  403f0c:	f853 2b04 	ldr.w	r2, [r3], #4
  403f10:	6881      	ldr	r1, [r0, #8]
  403f12:	9301      	str	r3, [sp, #4]
  403f14:	f000 fd62 	bl	4049dc <_vfiprintf_r>
  403f18:	b003      	add	sp, #12
  403f1a:	f85d eb04 	ldr.w	lr, [sp], #4
  403f1e:	b004      	add	sp, #16
  403f20:	4770      	bx	lr
  403f22:	bf00      	nop
  403f24:	20400014 	.word	0x20400014

00403f28 <malloc>:
  403f28:	4b02      	ldr	r3, [pc, #8]	; (403f34 <malloc+0xc>)
  403f2a:	4601      	mov	r1, r0
  403f2c:	6818      	ldr	r0, [r3, #0]
  403f2e:	f000 b80b 	b.w	403f48 <_malloc_r>
  403f32:	bf00      	nop
  403f34:	20400014 	.word	0x20400014

00403f38 <free>:
  403f38:	4b02      	ldr	r3, [pc, #8]	; (403f44 <free+0xc>)
  403f3a:	4601      	mov	r1, r0
  403f3c:	6818      	ldr	r0, [r3, #0]
  403f3e:	f001 be69 	b.w	405c14 <_free_r>
  403f42:	bf00      	nop
  403f44:	20400014 	.word	0x20400014

00403f48 <_malloc_r>:
  403f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f4c:	f101 060b 	add.w	r6, r1, #11
  403f50:	2e16      	cmp	r6, #22
  403f52:	b083      	sub	sp, #12
  403f54:	4605      	mov	r5, r0
  403f56:	f240 809e 	bls.w	404096 <_malloc_r+0x14e>
  403f5a:	f036 0607 	bics.w	r6, r6, #7
  403f5e:	f100 80bd 	bmi.w	4040dc <_malloc_r+0x194>
  403f62:	42b1      	cmp	r1, r6
  403f64:	f200 80ba 	bhi.w	4040dc <_malloc_r+0x194>
  403f68:	f000 fb86 	bl	404678 <__malloc_lock>
  403f6c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403f70:	f0c0 8293 	bcc.w	40449a <_malloc_r+0x552>
  403f74:	0a73      	lsrs	r3, r6, #9
  403f76:	f000 80b8 	beq.w	4040ea <_malloc_r+0x1a2>
  403f7a:	2b04      	cmp	r3, #4
  403f7c:	f200 8179 	bhi.w	404272 <_malloc_r+0x32a>
  403f80:	09b3      	lsrs	r3, r6, #6
  403f82:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403f86:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403f8a:	00c3      	lsls	r3, r0, #3
  403f8c:	4fbf      	ldr	r7, [pc, #764]	; (40428c <_malloc_r+0x344>)
  403f8e:	443b      	add	r3, r7
  403f90:	f1a3 0108 	sub.w	r1, r3, #8
  403f94:	685c      	ldr	r4, [r3, #4]
  403f96:	42a1      	cmp	r1, r4
  403f98:	d106      	bne.n	403fa8 <_malloc_r+0x60>
  403f9a:	e00c      	b.n	403fb6 <_malloc_r+0x6e>
  403f9c:	2a00      	cmp	r2, #0
  403f9e:	f280 80aa 	bge.w	4040f6 <_malloc_r+0x1ae>
  403fa2:	68e4      	ldr	r4, [r4, #12]
  403fa4:	42a1      	cmp	r1, r4
  403fa6:	d006      	beq.n	403fb6 <_malloc_r+0x6e>
  403fa8:	6863      	ldr	r3, [r4, #4]
  403faa:	f023 0303 	bic.w	r3, r3, #3
  403fae:	1b9a      	subs	r2, r3, r6
  403fb0:	2a0f      	cmp	r2, #15
  403fb2:	ddf3      	ble.n	403f9c <_malloc_r+0x54>
  403fb4:	4670      	mov	r0, lr
  403fb6:	693c      	ldr	r4, [r7, #16]
  403fb8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4042a0 <_malloc_r+0x358>
  403fbc:	4574      	cmp	r4, lr
  403fbe:	f000 81ab 	beq.w	404318 <_malloc_r+0x3d0>
  403fc2:	6863      	ldr	r3, [r4, #4]
  403fc4:	f023 0303 	bic.w	r3, r3, #3
  403fc8:	1b9a      	subs	r2, r3, r6
  403fca:	2a0f      	cmp	r2, #15
  403fcc:	f300 8190 	bgt.w	4042f0 <_malloc_r+0x3a8>
  403fd0:	2a00      	cmp	r2, #0
  403fd2:	f8c7 e014 	str.w	lr, [r7, #20]
  403fd6:	f8c7 e010 	str.w	lr, [r7, #16]
  403fda:	f280 809d 	bge.w	404118 <_malloc_r+0x1d0>
  403fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403fe2:	f080 8161 	bcs.w	4042a8 <_malloc_r+0x360>
  403fe6:	08db      	lsrs	r3, r3, #3
  403fe8:	f103 0c01 	add.w	ip, r3, #1
  403fec:	1099      	asrs	r1, r3, #2
  403fee:	687a      	ldr	r2, [r7, #4]
  403ff0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403ff4:	f8c4 8008 	str.w	r8, [r4, #8]
  403ff8:	2301      	movs	r3, #1
  403ffa:	408b      	lsls	r3, r1
  403ffc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404000:	4313      	orrs	r3, r2
  404002:	3908      	subs	r1, #8
  404004:	60e1      	str	r1, [r4, #12]
  404006:	607b      	str	r3, [r7, #4]
  404008:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40400c:	f8c8 400c 	str.w	r4, [r8, #12]
  404010:	1082      	asrs	r2, r0, #2
  404012:	2401      	movs	r4, #1
  404014:	4094      	lsls	r4, r2
  404016:	429c      	cmp	r4, r3
  404018:	f200 808b 	bhi.w	404132 <_malloc_r+0x1ea>
  40401c:	421c      	tst	r4, r3
  40401e:	d106      	bne.n	40402e <_malloc_r+0xe6>
  404020:	f020 0003 	bic.w	r0, r0, #3
  404024:	0064      	lsls	r4, r4, #1
  404026:	421c      	tst	r4, r3
  404028:	f100 0004 	add.w	r0, r0, #4
  40402c:	d0fa      	beq.n	404024 <_malloc_r+0xdc>
  40402e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404032:	46cc      	mov	ip, r9
  404034:	4680      	mov	r8, r0
  404036:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40403a:	459c      	cmp	ip, r3
  40403c:	d107      	bne.n	40404e <_malloc_r+0x106>
  40403e:	e16d      	b.n	40431c <_malloc_r+0x3d4>
  404040:	2a00      	cmp	r2, #0
  404042:	f280 817b 	bge.w	40433c <_malloc_r+0x3f4>
  404046:	68db      	ldr	r3, [r3, #12]
  404048:	459c      	cmp	ip, r3
  40404a:	f000 8167 	beq.w	40431c <_malloc_r+0x3d4>
  40404e:	6859      	ldr	r1, [r3, #4]
  404050:	f021 0103 	bic.w	r1, r1, #3
  404054:	1b8a      	subs	r2, r1, r6
  404056:	2a0f      	cmp	r2, #15
  404058:	ddf2      	ble.n	404040 <_malloc_r+0xf8>
  40405a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40405e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404062:	9300      	str	r3, [sp, #0]
  404064:	199c      	adds	r4, r3, r6
  404066:	4628      	mov	r0, r5
  404068:	f046 0601 	orr.w	r6, r6, #1
  40406c:	f042 0501 	orr.w	r5, r2, #1
  404070:	605e      	str	r6, [r3, #4]
  404072:	f8c8 c00c 	str.w	ip, [r8, #12]
  404076:	f8cc 8008 	str.w	r8, [ip, #8]
  40407a:	617c      	str	r4, [r7, #20]
  40407c:	613c      	str	r4, [r7, #16]
  40407e:	f8c4 e00c 	str.w	lr, [r4, #12]
  404082:	f8c4 e008 	str.w	lr, [r4, #8]
  404086:	6065      	str	r5, [r4, #4]
  404088:	505a      	str	r2, [r3, r1]
  40408a:	f000 fafb 	bl	404684 <__malloc_unlock>
  40408e:	9b00      	ldr	r3, [sp, #0]
  404090:	f103 0408 	add.w	r4, r3, #8
  404094:	e01e      	b.n	4040d4 <_malloc_r+0x18c>
  404096:	2910      	cmp	r1, #16
  404098:	d820      	bhi.n	4040dc <_malloc_r+0x194>
  40409a:	f000 faed 	bl	404678 <__malloc_lock>
  40409e:	2610      	movs	r6, #16
  4040a0:	2318      	movs	r3, #24
  4040a2:	2002      	movs	r0, #2
  4040a4:	4f79      	ldr	r7, [pc, #484]	; (40428c <_malloc_r+0x344>)
  4040a6:	443b      	add	r3, r7
  4040a8:	f1a3 0208 	sub.w	r2, r3, #8
  4040ac:	685c      	ldr	r4, [r3, #4]
  4040ae:	4294      	cmp	r4, r2
  4040b0:	f000 813d 	beq.w	40432e <_malloc_r+0x3e6>
  4040b4:	6863      	ldr	r3, [r4, #4]
  4040b6:	68e1      	ldr	r1, [r4, #12]
  4040b8:	68a6      	ldr	r6, [r4, #8]
  4040ba:	f023 0303 	bic.w	r3, r3, #3
  4040be:	4423      	add	r3, r4
  4040c0:	4628      	mov	r0, r5
  4040c2:	685a      	ldr	r2, [r3, #4]
  4040c4:	60f1      	str	r1, [r6, #12]
  4040c6:	f042 0201 	orr.w	r2, r2, #1
  4040ca:	608e      	str	r6, [r1, #8]
  4040cc:	605a      	str	r2, [r3, #4]
  4040ce:	f000 fad9 	bl	404684 <__malloc_unlock>
  4040d2:	3408      	adds	r4, #8
  4040d4:	4620      	mov	r0, r4
  4040d6:	b003      	add	sp, #12
  4040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040dc:	2400      	movs	r4, #0
  4040de:	230c      	movs	r3, #12
  4040e0:	4620      	mov	r0, r4
  4040e2:	602b      	str	r3, [r5, #0]
  4040e4:	b003      	add	sp, #12
  4040e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040ea:	2040      	movs	r0, #64	; 0x40
  4040ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  4040f0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4040f4:	e74a      	b.n	403f8c <_malloc_r+0x44>
  4040f6:	4423      	add	r3, r4
  4040f8:	68e1      	ldr	r1, [r4, #12]
  4040fa:	685a      	ldr	r2, [r3, #4]
  4040fc:	68a6      	ldr	r6, [r4, #8]
  4040fe:	f042 0201 	orr.w	r2, r2, #1
  404102:	60f1      	str	r1, [r6, #12]
  404104:	4628      	mov	r0, r5
  404106:	608e      	str	r6, [r1, #8]
  404108:	605a      	str	r2, [r3, #4]
  40410a:	f000 fabb 	bl	404684 <__malloc_unlock>
  40410e:	3408      	adds	r4, #8
  404110:	4620      	mov	r0, r4
  404112:	b003      	add	sp, #12
  404114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404118:	4423      	add	r3, r4
  40411a:	4628      	mov	r0, r5
  40411c:	685a      	ldr	r2, [r3, #4]
  40411e:	f042 0201 	orr.w	r2, r2, #1
  404122:	605a      	str	r2, [r3, #4]
  404124:	f000 faae 	bl	404684 <__malloc_unlock>
  404128:	3408      	adds	r4, #8
  40412a:	4620      	mov	r0, r4
  40412c:	b003      	add	sp, #12
  40412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404132:	68bc      	ldr	r4, [r7, #8]
  404134:	6863      	ldr	r3, [r4, #4]
  404136:	f023 0803 	bic.w	r8, r3, #3
  40413a:	45b0      	cmp	r8, r6
  40413c:	d304      	bcc.n	404148 <_malloc_r+0x200>
  40413e:	eba8 0306 	sub.w	r3, r8, r6
  404142:	2b0f      	cmp	r3, #15
  404144:	f300 8085 	bgt.w	404252 <_malloc_r+0x30a>
  404148:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4042a4 <_malloc_r+0x35c>
  40414c:	4b50      	ldr	r3, [pc, #320]	; (404290 <_malloc_r+0x348>)
  40414e:	f8d9 2000 	ldr.w	r2, [r9]
  404152:	681b      	ldr	r3, [r3, #0]
  404154:	3201      	adds	r2, #1
  404156:	4433      	add	r3, r6
  404158:	eb04 0a08 	add.w	sl, r4, r8
  40415c:	f000 8155 	beq.w	40440a <_malloc_r+0x4c2>
  404160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404164:	330f      	adds	r3, #15
  404166:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40416a:	f02b 0b0f 	bic.w	fp, fp, #15
  40416e:	4659      	mov	r1, fp
  404170:	4628      	mov	r0, r5
  404172:	f000 fa8d 	bl	404690 <_sbrk_r>
  404176:	1c41      	adds	r1, r0, #1
  404178:	4602      	mov	r2, r0
  40417a:	f000 80fc 	beq.w	404376 <_malloc_r+0x42e>
  40417e:	4582      	cmp	sl, r0
  404180:	f200 80f7 	bhi.w	404372 <_malloc_r+0x42a>
  404184:	4b43      	ldr	r3, [pc, #268]	; (404294 <_malloc_r+0x34c>)
  404186:	6819      	ldr	r1, [r3, #0]
  404188:	4459      	add	r1, fp
  40418a:	6019      	str	r1, [r3, #0]
  40418c:	f000 814d 	beq.w	40442a <_malloc_r+0x4e2>
  404190:	f8d9 0000 	ldr.w	r0, [r9]
  404194:	3001      	adds	r0, #1
  404196:	bf1b      	ittet	ne
  404198:	eba2 0a0a 	subne.w	sl, r2, sl
  40419c:	4451      	addne	r1, sl
  40419e:	f8c9 2000 	streq.w	r2, [r9]
  4041a2:	6019      	strne	r1, [r3, #0]
  4041a4:	f012 0107 	ands.w	r1, r2, #7
  4041a8:	f000 8115 	beq.w	4043d6 <_malloc_r+0x48e>
  4041ac:	f1c1 0008 	rsb	r0, r1, #8
  4041b0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4041b4:	4402      	add	r2, r0
  4041b6:	3108      	adds	r1, #8
  4041b8:	eb02 090b 	add.w	r9, r2, fp
  4041bc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4041c0:	eba1 0909 	sub.w	r9, r1, r9
  4041c4:	4649      	mov	r1, r9
  4041c6:	4628      	mov	r0, r5
  4041c8:	9301      	str	r3, [sp, #4]
  4041ca:	9200      	str	r2, [sp, #0]
  4041cc:	f000 fa60 	bl	404690 <_sbrk_r>
  4041d0:	1c43      	adds	r3, r0, #1
  4041d2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4041d6:	f000 8143 	beq.w	404460 <_malloc_r+0x518>
  4041da:	1a80      	subs	r0, r0, r2
  4041dc:	4448      	add	r0, r9
  4041de:	f040 0001 	orr.w	r0, r0, #1
  4041e2:	6819      	ldr	r1, [r3, #0]
  4041e4:	60ba      	str	r2, [r7, #8]
  4041e6:	4449      	add	r1, r9
  4041e8:	42bc      	cmp	r4, r7
  4041ea:	6050      	str	r0, [r2, #4]
  4041ec:	6019      	str	r1, [r3, #0]
  4041ee:	d017      	beq.n	404220 <_malloc_r+0x2d8>
  4041f0:	f1b8 0f0f 	cmp.w	r8, #15
  4041f4:	f240 80fb 	bls.w	4043ee <_malloc_r+0x4a6>
  4041f8:	6860      	ldr	r0, [r4, #4]
  4041fa:	f1a8 020c 	sub.w	r2, r8, #12
  4041fe:	f022 0207 	bic.w	r2, r2, #7
  404202:	eb04 0e02 	add.w	lr, r4, r2
  404206:	f000 0001 	and.w	r0, r0, #1
  40420a:	f04f 0c05 	mov.w	ip, #5
  40420e:	4310      	orrs	r0, r2
  404210:	2a0f      	cmp	r2, #15
  404212:	6060      	str	r0, [r4, #4]
  404214:	f8ce c004 	str.w	ip, [lr, #4]
  404218:	f8ce c008 	str.w	ip, [lr, #8]
  40421c:	f200 8117 	bhi.w	40444e <_malloc_r+0x506>
  404220:	4b1d      	ldr	r3, [pc, #116]	; (404298 <_malloc_r+0x350>)
  404222:	68bc      	ldr	r4, [r7, #8]
  404224:	681a      	ldr	r2, [r3, #0]
  404226:	4291      	cmp	r1, r2
  404228:	bf88      	it	hi
  40422a:	6019      	strhi	r1, [r3, #0]
  40422c:	4b1b      	ldr	r3, [pc, #108]	; (40429c <_malloc_r+0x354>)
  40422e:	681a      	ldr	r2, [r3, #0]
  404230:	4291      	cmp	r1, r2
  404232:	6862      	ldr	r2, [r4, #4]
  404234:	bf88      	it	hi
  404236:	6019      	strhi	r1, [r3, #0]
  404238:	f022 0203 	bic.w	r2, r2, #3
  40423c:	4296      	cmp	r6, r2
  40423e:	eba2 0306 	sub.w	r3, r2, r6
  404242:	d801      	bhi.n	404248 <_malloc_r+0x300>
  404244:	2b0f      	cmp	r3, #15
  404246:	dc04      	bgt.n	404252 <_malloc_r+0x30a>
  404248:	4628      	mov	r0, r5
  40424a:	f000 fa1b 	bl	404684 <__malloc_unlock>
  40424e:	2400      	movs	r4, #0
  404250:	e740      	b.n	4040d4 <_malloc_r+0x18c>
  404252:	19a2      	adds	r2, r4, r6
  404254:	f043 0301 	orr.w	r3, r3, #1
  404258:	f046 0601 	orr.w	r6, r6, #1
  40425c:	6066      	str	r6, [r4, #4]
  40425e:	4628      	mov	r0, r5
  404260:	60ba      	str	r2, [r7, #8]
  404262:	6053      	str	r3, [r2, #4]
  404264:	f000 fa0e 	bl	404684 <__malloc_unlock>
  404268:	3408      	adds	r4, #8
  40426a:	4620      	mov	r0, r4
  40426c:	b003      	add	sp, #12
  40426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404272:	2b14      	cmp	r3, #20
  404274:	d971      	bls.n	40435a <_malloc_r+0x412>
  404276:	2b54      	cmp	r3, #84	; 0x54
  404278:	f200 80a3 	bhi.w	4043c2 <_malloc_r+0x47a>
  40427c:	0b33      	lsrs	r3, r6, #12
  40427e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404282:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404286:	00c3      	lsls	r3, r0, #3
  404288:	e680      	b.n	403f8c <_malloc_r+0x44>
  40428a:	bf00      	nop
  40428c:	20400440 	.word	0x20400440
  404290:	20400bd0 	.word	0x20400bd0
  404294:	20400ba0 	.word	0x20400ba0
  404298:	20400bc8 	.word	0x20400bc8
  40429c:	20400bcc 	.word	0x20400bcc
  4042a0:	20400448 	.word	0x20400448
  4042a4:	20400848 	.word	0x20400848
  4042a8:	0a5a      	lsrs	r2, r3, #9
  4042aa:	2a04      	cmp	r2, #4
  4042ac:	d95b      	bls.n	404366 <_malloc_r+0x41e>
  4042ae:	2a14      	cmp	r2, #20
  4042b0:	f200 80ae 	bhi.w	404410 <_malloc_r+0x4c8>
  4042b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4042b8:	00c9      	lsls	r1, r1, #3
  4042ba:	325b      	adds	r2, #91	; 0x5b
  4042bc:	eb07 0c01 	add.w	ip, r7, r1
  4042c0:	5879      	ldr	r1, [r7, r1]
  4042c2:	f1ac 0c08 	sub.w	ip, ip, #8
  4042c6:	458c      	cmp	ip, r1
  4042c8:	f000 8088 	beq.w	4043dc <_malloc_r+0x494>
  4042cc:	684a      	ldr	r2, [r1, #4]
  4042ce:	f022 0203 	bic.w	r2, r2, #3
  4042d2:	4293      	cmp	r3, r2
  4042d4:	d273      	bcs.n	4043be <_malloc_r+0x476>
  4042d6:	6889      	ldr	r1, [r1, #8]
  4042d8:	458c      	cmp	ip, r1
  4042da:	d1f7      	bne.n	4042cc <_malloc_r+0x384>
  4042dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4042e0:	687b      	ldr	r3, [r7, #4]
  4042e2:	60e2      	str	r2, [r4, #12]
  4042e4:	f8c4 c008 	str.w	ip, [r4, #8]
  4042e8:	6094      	str	r4, [r2, #8]
  4042ea:	f8cc 400c 	str.w	r4, [ip, #12]
  4042ee:	e68f      	b.n	404010 <_malloc_r+0xc8>
  4042f0:	19a1      	adds	r1, r4, r6
  4042f2:	f046 0c01 	orr.w	ip, r6, #1
  4042f6:	f042 0601 	orr.w	r6, r2, #1
  4042fa:	f8c4 c004 	str.w	ip, [r4, #4]
  4042fe:	4628      	mov	r0, r5
  404300:	6179      	str	r1, [r7, #20]
  404302:	6139      	str	r1, [r7, #16]
  404304:	f8c1 e00c 	str.w	lr, [r1, #12]
  404308:	f8c1 e008 	str.w	lr, [r1, #8]
  40430c:	604e      	str	r6, [r1, #4]
  40430e:	50e2      	str	r2, [r4, r3]
  404310:	f000 f9b8 	bl	404684 <__malloc_unlock>
  404314:	3408      	adds	r4, #8
  404316:	e6dd      	b.n	4040d4 <_malloc_r+0x18c>
  404318:	687b      	ldr	r3, [r7, #4]
  40431a:	e679      	b.n	404010 <_malloc_r+0xc8>
  40431c:	f108 0801 	add.w	r8, r8, #1
  404320:	f018 0f03 	tst.w	r8, #3
  404324:	f10c 0c08 	add.w	ip, ip, #8
  404328:	f47f ae85 	bne.w	404036 <_malloc_r+0xee>
  40432c:	e02d      	b.n	40438a <_malloc_r+0x442>
  40432e:	68dc      	ldr	r4, [r3, #12]
  404330:	42a3      	cmp	r3, r4
  404332:	bf08      	it	eq
  404334:	3002      	addeq	r0, #2
  404336:	f43f ae3e 	beq.w	403fb6 <_malloc_r+0x6e>
  40433a:	e6bb      	b.n	4040b4 <_malloc_r+0x16c>
  40433c:	4419      	add	r1, r3
  40433e:	461c      	mov	r4, r3
  404340:	684a      	ldr	r2, [r1, #4]
  404342:	68db      	ldr	r3, [r3, #12]
  404344:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404348:	f042 0201 	orr.w	r2, r2, #1
  40434c:	604a      	str	r2, [r1, #4]
  40434e:	4628      	mov	r0, r5
  404350:	60f3      	str	r3, [r6, #12]
  404352:	609e      	str	r6, [r3, #8]
  404354:	f000 f996 	bl	404684 <__malloc_unlock>
  404358:	e6bc      	b.n	4040d4 <_malloc_r+0x18c>
  40435a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40435e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404362:	00c3      	lsls	r3, r0, #3
  404364:	e612      	b.n	403f8c <_malloc_r+0x44>
  404366:	099a      	lsrs	r2, r3, #6
  404368:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40436c:	00c9      	lsls	r1, r1, #3
  40436e:	3238      	adds	r2, #56	; 0x38
  404370:	e7a4      	b.n	4042bc <_malloc_r+0x374>
  404372:	42bc      	cmp	r4, r7
  404374:	d054      	beq.n	404420 <_malloc_r+0x4d8>
  404376:	68bc      	ldr	r4, [r7, #8]
  404378:	6862      	ldr	r2, [r4, #4]
  40437a:	f022 0203 	bic.w	r2, r2, #3
  40437e:	e75d      	b.n	40423c <_malloc_r+0x2f4>
  404380:	f859 3908 	ldr.w	r3, [r9], #-8
  404384:	4599      	cmp	r9, r3
  404386:	f040 8086 	bne.w	404496 <_malloc_r+0x54e>
  40438a:	f010 0f03 	tst.w	r0, #3
  40438e:	f100 30ff 	add.w	r0, r0, #4294967295
  404392:	d1f5      	bne.n	404380 <_malloc_r+0x438>
  404394:	687b      	ldr	r3, [r7, #4]
  404396:	ea23 0304 	bic.w	r3, r3, r4
  40439a:	607b      	str	r3, [r7, #4]
  40439c:	0064      	lsls	r4, r4, #1
  40439e:	429c      	cmp	r4, r3
  4043a0:	f63f aec7 	bhi.w	404132 <_malloc_r+0x1ea>
  4043a4:	2c00      	cmp	r4, #0
  4043a6:	f43f aec4 	beq.w	404132 <_malloc_r+0x1ea>
  4043aa:	421c      	tst	r4, r3
  4043ac:	4640      	mov	r0, r8
  4043ae:	f47f ae3e 	bne.w	40402e <_malloc_r+0xe6>
  4043b2:	0064      	lsls	r4, r4, #1
  4043b4:	421c      	tst	r4, r3
  4043b6:	f100 0004 	add.w	r0, r0, #4
  4043ba:	d0fa      	beq.n	4043b2 <_malloc_r+0x46a>
  4043bc:	e637      	b.n	40402e <_malloc_r+0xe6>
  4043be:	468c      	mov	ip, r1
  4043c0:	e78c      	b.n	4042dc <_malloc_r+0x394>
  4043c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4043c6:	d815      	bhi.n	4043f4 <_malloc_r+0x4ac>
  4043c8:	0bf3      	lsrs	r3, r6, #15
  4043ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4043ce:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4043d2:	00c3      	lsls	r3, r0, #3
  4043d4:	e5da      	b.n	403f8c <_malloc_r+0x44>
  4043d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4043da:	e6ed      	b.n	4041b8 <_malloc_r+0x270>
  4043dc:	687b      	ldr	r3, [r7, #4]
  4043de:	1092      	asrs	r2, r2, #2
  4043e0:	2101      	movs	r1, #1
  4043e2:	fa01 f202 	lsl.w	r2, r1, r2
  4043e6:	4313      	orrs	r3, r2
  4043e8:	607b      	str	r3, [r7, #4]
  4043ea:	4662      	mov	r2, ip
  4043ec:	e779      	b.n	4042e2 <_malloc_r+0x39a>
  4043ee:	2301      	movs	r3, #1
  4043f0:	6053      	str	r3, [r2, #4]
  4043f2:	e729      	b.n	404248 <_malloc_r+0x300>
  4043f4:	f240 5254 	movw	r2, #1364	; 0x554
  4043f8:	4293      	cmp	r3, r2
  4043fa:	d822      	bhi.n	404442 <_malloc_r+0x4fa>
  4043fc:	0cb3      	lsrs	r3, r6, #18
  4043fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404402:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404406:	00c3      	lsls	r3, r0, #3
  404408:	e5c0      	b.n	403f8c <_malloc_r+0x44>
  40440a:	f103 0b10 	add.w	fp, r3, #16
  40440e:	e6ae      	b.n	40416e <_malloc_r+0x226>
  404410:	2a54      	cmp	r2, #84	; 0x54
  404412:	d829      	bhi.n	404468 <_malloc_r+0x520>
  404414:	0b1a      	lsrs	r2, r3, #12
  404416:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40441a:	00c9      	lsls	r1, r1, #3
  40441c:	326e      	adds	r2, #110	; 0x6e
  40441e:	e74d      	b.n	4042bc <_malloc_r+0x374>
  404420:	4b20      	ldr	r3, [pc, #128]	; (4044a4 <_malloc_r+0x55c>)
  404422:	6819      	ldr	r1, [r3, #0]
  404424:	4459      	add	r1, fp
  404426:	6019      	str	r1, [r3, #0]
  404428:	e6b2      	b.n	404190 <_malloc_r+0x248>
  40442a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40442e:	2800      	cmp	r0, #0
  404430:	f47f aeae 	bne.w	404190 <_malloc_r+0x248>
  404434:	eb08 030b 	add.w	r3, r8, fp
  404438:	68ba      	ldr	r2, [r7, #8]
  40443a:	f043 0301 	orr.w	r3, r3, #1
  40443e:	6053      	str	r3, [r2, #4]
  404440:	e6ee      	b.n	404220 <_malloc_r+0x2d8>
  404442:	207f      	movs	r0, #127	; 0x7f
  404444:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404448:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40444c:	e59e      	b.n	403f8c <_malloc_r+0x44>
  40444e:	f104 0108 	add.w	r1, r4, #8
  404452:	4628      	mov	r0, r5
  404454:	9300      	str	r3, [sp, #0]
  404456:	f001 fbdd 	bl	405c14 <_free_r>
  40445a:	9b00      	ldr	r3, [sp, #0]
  40445c:	6819      	ldr	r1, [r3, #0]
  40445e:	e6df      	b.n	404220 <_malloc_r+0x2d8>
  404460:	2001      	movs	r0, #1
  404462:	f04f 0900 	mov.w	r9, #0
  404466:	e6bc      	b.n	4041e2 <_malloc_r+0x29a>
  404468:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40446c:	d805      	bhi.n	40447a <_malloc_r+0x532>
  40446e:	0bda      	lsrs	r2, r3, #15
  404470:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404474:	00c9      	lsls	r1, r1, #3
  404476:	3277      	adds	r2, #119	; 0x77
  404478:	e720      	b.n	4042bc <_malloc_r+0x374>
  40447a:	f240 5154 	movw	r1, #1364	; 0x554
  40447e:	428a      	cmp	r2, r1
  404480:	d805      	bhi.n	40448e <_malloc_r+0x546>
  404482:	0c9a      	lsrs	r2, r3, #18
  404484:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404488:	00c9      	lsls	r1, r1, #3
  40448a:	327c      	adds	r2, #124	; 0x7c
  40448c:	e716      	b.n	4042bc <_malloc_r+0x374>
  40448e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404492:	227e      	movs	r2, #126	; 0x7e
  404494:	e712      	b.n	4042bc <_malloc_r+0x374>
  404496:	687b      	ldr	r3, [r7, #4]
  404498:	e780      	b.n	40439c <_malloc_r+0x454>
  40449a:	08f0      	lsrs	r0, r6, #3
  40449c:	f106 0308 	add.w	r3, r6, #8
  4044a0:	e600      	b.n	4040a4 <_malloc_r+0x15c>
  4044a2:	bf00      	nop
  4044a4:	20400ba0 	.word	0x20400ba0

004044a8 <memcpy>:
  4044a8:	4684      	mov	ip, r0
  4044aa:	ea41 0300 	orr.w	r3, r1, r0
  4044ae:	f013 0303 	ands.w	r3, r3, #3
  4044b2:	d16d      	bne.n	404590 <memcpy+0xe8>
  4044b4:	3a40      	subs	r2, #64	; 0x40
  4044b6:	d341      	bcc.n	40453c <memcpy+0x94>
  4044b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044bc:	f840 3b04 	str.w	r3, [r0], #4
  4044c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044c4:	f840 3b04 	str.w	r3, [r0], #4
  4044c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044cc:	f840 3b04 	str.w	r3, [r0], #4
  4044d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044d4:	f840 3b04 	str.w	r3, [r0], #4
  4044d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044dc:	f840 3b04 	str.w	r3, [r0], #4
  4044e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044e4:	f840 3b04 	str.w	r3, [r0], #4
  4044e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044ec:	f840 3b04 	str.w	r3, [r0], #4
  4044f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4044f4:	f840 3b04 	str.w	r3, [r0], #4
  4044f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4044fc:	f840 3b04 	str.w	r3, [r0], #4
  404500:	f851 3b04 	ldr.w	r3, [r1], #4
  404504:	f840 3b04 	str.w	r3, [r0], #4
  404508:	f851 3b04 	ldr.w	r3, [r1], #4
  40450c:	f840 3b04 	str.w	r3, [r0], #4
  404510:	f851 3b04 	ldr.w	r3, [r1], #4
  404514:	f840 3b04 	str.w	r3, [r0], #4
  404518:	f851 3b04 	ldr.w	r3, [r1], #4
  40451c:	f840 3b04 	str.w	r3, [r0], #4
  404520:	f851 3b04 	ldr.w	r3, [r1], #4
  404524:	f840 3b04 	str.w	r3, [r0], #4
  404528:	f851 3b04 	ldr.w	r3, [r1], #4
  40452c:	f840 3b04 	str.w	r3, [r0], #4
  404530:	f851 3b04 	ldr.w	r3, [r1], #4
  404534:	f840 3b04 	str.w	r3, [r0], #4
  404538:	3a40      	subs	r2, #64	; 0x40
  40453a:	d2bd      	bcs.n	4044b8 <memcpy+0x10>
  40453c:	3230      	adds	r2, #48	; 0x30
  40453e:	d311      	bcc.n	404564 <memcpy+0xbc>
  404540:	f851 3b04 	ldr.w	r3, [r1], #4
  404544:	f840 3b04 	str.w	r3, [r0], #4
  404548:	f851 3b04 	ldr.w	r3, [r1], #4
  40454c:	f840 3b04 	str.w	r3, [r0], #4
  404550:	f851 3b04 	ldr.w	r3, [r1], #4
  404554:	f840 3b04 	str.w	r3, [r0], #4
  404558:	f851 3b04 	ldr.w	r3, [r1], #4
  40455c:	f840 3b04 	str.w	r3, [r0], #4
  404560:	3a10      	subs	r2, #16
  404562:	d2ed      	bcs.n	404540 <memcpy+0x98>
  404564:	320c      	adds	r2, #12
  404566:	d305      	bcc.n	404574 <memcpy+0xcc>
  404568:	f851 3b04 	ldr.w	r3, [r1], #4
  40456c:	f840 3b04 	str.w	r3, [r0], #4
  404570:	3a04      	subs	r2, #4
  404572:	d2f9      	bcs.n	404568 <memcpy+0xc0>
  404574:	3204      	adds	r2, #4
  404576:	d008      	beq.n	40458a <memcpy+0xe2>
  404578:	07d2      	lsls	r2, r2, #31
  40457a:	bf1c      	itt	ne
  40457c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404580:	f800 3b01 	strbne.w	r3, [r0], #1
  404584:	d301      	bcc.n	40458a <memcpy+0xe2>
  404586:	880b      	ldrh	r3, [r1, #0]
  404588:	8003      	strh	r3, [r0, #0]
  40458a:	4660      	mov	r0, ip
  40458c:	4770      	bx	lr
  40458e:	bf00      	nop
  404590:	2a08      	cmp	r2, #8
  404592:	d313      	bcc.n	4045bc <memcpy+0x114>
  404594:	078b      	lsls	r3, r1, #30
  404596:	d08d      	beq.n	4044b4 <memcpy+0xc>
  404598:	f010 0303 	ands.w	r3, r0, #3
  40459c:	d08a      	beq.n	4044b4 <memcpy+0xc>
  40459e:	f1c3 0304 	rsb	r3, r3, #4
  4045a2:	1ad2      	subs	r2, r2, r3
  4045a4:	07db      	lsls	r3, r3, #31
  4045a6:	bf1c      	itt	ne
  4045a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4045ac:	f800 3b01 	strbne.w	r3, [r0], #1
  4045b0:	d380      	bcc.n	4044b4 <memcpy+0xc>
  4045b2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4045b6:	f820 3b02 	strh.w	r3, [r0], #2
  4045ba:	e77b      	b.n	4044b4 <memcpy+0xc>
  4045bc:	3a04      	subs	r2, #4
  4045be:	d3d9      	bcc.n	404574 <memcpy+0xcc>
  4045c0:	3a01      	subs	r2, #1
  4045c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4045c6:	f800 3b01 	strb.w	r3, [r0], #1
  4045ca:	d2f9      	bcs.n	4045c0 <memcpy+0x118>
  4045cc:	780b      	ldrb	r3, [r1, #0]
  4045ce:	7003      	strb	r3, [r0, #0]
  4045d0:	784b      	ldrb	r3, [r1, #1]
  4045d2:	7043      	strb	r3, [r0, #1]
  4045d4:	788b      	ldrb	r3, [r1, #2]
  4045d6:	7083      	strb	r3, [r0, #2]
  4045d8:	4660      	mov	r0, ip
  4045da:	4770      	bx	lr

004045dc <memset>:
  4045dc:	b470      	push	{r4, r5, r6}
  4045de:	0786      	lsls	r6, r0, #30
  4045e0:	d046      	beq.n	404670 <memset+0x94>
  4045e2:	1e54      	subs	r4, r2, #1
  4045e4:	2a00      	cmp	r2, #0
  4045e6:	d041      	beq.n	40466c <memset+0x90>
  4045e8:	b2ca      	uxtb	r2, r1
  4045ea:	4603      	mov	r3, r0
  4045ec:	e002      	b.n	4045f4 <memset+0x18>
  4045ee:	f114 34ff 	adds.w	r4, r4, #4294967295
  4045f2:	d33b      	bcc.n	40466c <memset+0x90>
  4045f4:	f803 2b01 	strb.w	r2, [r3], #1
  4045f8:	079d      	lsls	r5, r3, #30
  4045fa:	d1f8      	bne.n	4045ee <memset+0x12>
  4045fc:	2c03      	cmp	r4, #3
  4045fe:	d92e      	bls.n	40465e <memset+0x82>
  404600:	b2cd      	uxtb	r5, r1
  404602:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404606:	2c0f      	cmp	r4, #15
  404608:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40460c:	d919      	bls.n	404642 <memset+0x66>
  40460e:	f103 0210 	add.w	r2, r3, #16
  404612:	4626      	mov	r6, r4
  404614:	3e10      	subs	r6, #16
  404616:	2e0f      	cmp	r6, #15
  404618:	f842 5c10 	str.w	r5, [r2, #-16]
  40461c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404620:	f842 5c08 	str.w	r5, [r2, #-8]
  404624:	f842 5c04 	str.w	r5, [r2, #-4]
  404628:	f102 0210 	add.w	r2, r2, #16
  40462c:	d8f2      	bhi.n	404614 <memset+0x38>
  40462e:	f1a4 0210 	sub.w	r2, r4, #16
  404632:	f022 020f 	bic.w	r2, r2, #15
  404636:	f004 040f 	and.w	r4, r4, #15
  40463a:	3210      	adds	r2, #16
  40463c:	2c03      	cmp	r4, #3
  40463e:	4413      	add	r3, r2
  404640:	d90d      	bls.n	40465e <memset+0x82>
  404642:	461e      	mov	r6, r3
  404644:	4622      	mov	r2, r4
  404646:	3a04      	subs	r2, #4
  404648:	2a03      	cmp	r2, #3
  40464a:	f846 5b04 	str.w	r5, [r6], #4
  40464e:	d8fa      	bhi.n	404646 <memset+0x6a>
  404650:	1f22      	subs	r2, r4, #4
  404652:	f022 0203 	bic.w	r2, r2, #3
  404656:	3204      	adds	r2, #4
  404658:	4413      	add	r3, r2
  40465a:	f004 0403 	and.w	r4, r4, #3
  40465e:	b12c      	cbz	r4, 40466c <memset+0x90>
  404660:	b2c9      	uxtb	r1, r1
  404662:	441c      	add	r4, r3
  404664:	f803 1b01 	strb.w	r1, [r3], #1
  404668:	429c      	cmp	r4, r3
  40466a:	d1fb      	bne.n	404664 <memset+0x88>
  40466c:	bc70      	pop	{r4, r5, r6}
  40466e:	4770      	bx	lr
  404670:	4614      	mov	r4, r2
  404672:	4603      	mov	r3, r0
  404674:	e7c2      	b.n	4045fc <memset+0x20>
  404676:	bf00      	nop

00404678 <__malloc_lock>:
  404678:	4801      	ldr	r0, [pc, #4]	; (404680 <__malloc_lock+0x8>)
  40467a:	f001 bd65 	b.w	406148 <__retarget_lock_acquire_recursive>
  40467e:	bf00      	nop
  404680:	20400cdc 	.word	0x20400cdc

00404684 <__malloc_unlock>:
  404684:	4801      	ldr	r0, [pc, #4]	; (40468c <__malloc_unlock+0x8>)
  404686:	f001 bd61 	b.w	40614c <__retarget_lock_release_recursive>
  40468a:	bf00      	nop
  40468c:	20400cdc 	.word	0x20400cdc

00404690 <_sbrk_r>:
  404690:	b538      	push	{r3, r4, r5, lr}
  404692:	4c07      	ldr	r4, [pc, #28]	; (4046b0 <_sbrk_r+0x20>)
  404694:	2300      	movs	r3, #0
  404696:	4605      	mov	r5, r0
  404698:	4608      	mov	r0, r1
  40469a:	6023      	str	r3, [r4, #0]
  40469c:	f7fc fc7c 	bl	400f98 <_sbrk>
  4046a0:	1c43      	adds	r3, r0, #1
  4046a2:	d000      	beq.n	4046a6 <_sbrk_r+0x16>
  4046a4:	bd38      	pop	{r3, r4, r5, pc}
  4046a6:	6823      	ldr	r3, [r4, #0]
  4046a8:	2b00      	cmp	r3, #0
  4046aa:	d0fb      	beq.n	4046a4 <_sbrk_r+0x14>
  4046ac:	602b      	str	r3, [r5, #0]
  4046ae:	bd38      	pop	{r3, r4, r5, pc}
  4046b0:	20400cf0 	.word	0x20400cf0

004046b4 <setbuf>:
  4046b4:	2900      	cmp	r1, #0
  4046b6:	bf0c      	ite	eq
  4046b8:	2202      	moveq	r2, #2
  4046ba:	2200      	movne	r2, #0
  4046bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4046c0:	f000 b800 	b.w	4046c4 <setvbuf>

004046c4 <setvbuf>:
  4046c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4046c8:	4c61      	ldr	r4, [pc, #388]	; (404850 <setvbuf+0x18c>)
  4046ca:	6825      	ldr	r5, [r4, #0]
  4046cc:	b083      	sub	sp, #12
  4046ce:	4604      	mov	r4, r0
  4046d0:	460f      	mov	r7, r1
  4046d2:	4690      	mov	r8, r2
  4046d4:	461e      	mov	r6, r3
  4046d6:	b115      	cbz	r5, 4046de <setvbuf+0x1a>
  4046d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4046da:	2b00      	cmp	r3, #0
  4046dc:	d064      	beq.n	4047a8 <setvbuf+0xe4>
  4046de:	f1b8 0f02 	cmp.w	r8, #2
  4046e2:	d006      	beq.n	4046f2 <setvbuf+0x2e>
  4046e4:	f1b8 0f01 	cmp.w	r8, #1
  4046e8:	f200 809f 	bhi.w	40482a <setvbuf+0x166>
  4046ec:	2e00      	cmp	r6, #0
  4046ee:	f2c0 809c 	blt.w	40482a <setvbuf+0x166>
  4046f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4046f4:	07d8      	lsls	r0, r3, #31
  4046f6:	d534      	bpl.n	404762 <setvbuf+0x9e>
  4046f8:	4621      	mov	r1, r4
  4046fa:	4628      	mov	r0, r5
  4046fc:	f001 f90c 	bl	405918 <_fflush_r>
  404700:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404702:	b141      	cbz	r1, 404716 <setvbuf+0x52>
  404704:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404708:	4299      	cmp	r1, r3
  40470a:	d002      	beq.n	404712 <setvbuf+0x4e>
  40470c:	4628      	mov	r0, r5
  40470e:	f001 fa81 	bl	405c14 <_free_r>
  404712:	2300      	movs	r3, #0
  404714:	6323      	str	r3, [r4, #48]	; 0x30
  404716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40471a:	2200      	movs	r2, #0
  40471c:	61a2      	str	r2, [r4, #24]
  40471e:	6062      	str	r2, [r4, #4]
  404720:	061a      	lsls	r2, r3, #24
  404722:	d43a      	bmi.n	40479a <setvbuf+0xd6>
  404724:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404728:	f023 0303 	bic.w	r3, r3, #3
  40472c:	f1b8 0f02 	cmp.w	r8, #2
  404730:	81a3      	strh	r3, [r4, #12]
  404732:	d01d      	beq.n	404770 <setvbuf+0xac>
  404734:	ab01      	add	r3, sp, #4
  404736:	466a      	mov	r2, sp
  404738:	4621      	mov	r1, r4
  40473a:	4628      	mov	r0, r5
  40473c:	f001 fd08 	bl	406150 <__swhatbuf_r>
  404740:	89a3      	ldrh	r3, [r4, #12]
  404742:	4318      	orrs	r0, r3
  404744:	81a0      	strh	r0, [r4, #12]
  404746:	2e00      	cmp	r6, #0
  404748:	d132      	bne.n	4047b0 <setvbuf+0xec>
  40474a:	9e00      	ldr	r6, [sp, #0]
  40474c:	4630      	mov	r0, r6
  40474e:	f7ff fbeb 	bl	403f28 <malloc>
  404752:	4607      	mov	r7, r0
  404754:	2800      	cmp	r0, #0
  404756:	d06b      	beq.n	404830 <setvbuf+0x16c>
  404758:	89a3      	ldrh	r3, [r4, #12]
  40475a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40475e:	81a3      	strh	r3, [r4, #12]
  404760:	e028      	b.n	4047b4 <setvbuf+0xf0>
  404762:	89a3      	ldrh	r3, [r4, #12]
  404764:	0599      	lsls	r1, r3, #22
  404766:	d4c7      	bmi.n	4046f8 <setvbuf+0x34>
  404768:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40476a:	f001 fced 	bl	406148 <__retarget_lock_acquire_recursive>
  40476e:	e7c3      	b.n	4046f8 <setvbuf+0x34>
  404770:	2500      	movs	r5, #0
  404772:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404774:	2600      	movs	r6, #0
  404776:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40477a:	f043 0302 	orr.w	r3, r3, #2
  40477e:	2001      	movs	r0, #1
  404780:	60a6      	str	r6, [r4, #8]
  404782:	07ce      	lsls	r6, r1, #31
  404784:	81a3      	strh	r3, [r4, #12]
  404786:	6022      	str	r2, [r4, #0]
  404788:	6122      	str	r2, [r4, #16]
  40478a:	6160      	str	r0, [r4, #20]
  40478c:	d401      	bmi.n	404792 <setvbuf+0xce>
  40478e:	0598      	lsls	r0, r3, #22
  404790:	d53e      	bpl.n	404810 <setvbuf+0x14c>
  404792:	4628      	mov	r0, r5
  404794:	b003      	add	sp, #12
  404796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40479a:	6921      	ldr	r1, [r4, #16]
  40479c:	4628      	mov	r0, r5
  40479e:	f001 fa39 	bl	405c14 <_free_r>
  4047a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047a6:	e7bd      	b.n	404724 <setvbuf+0x60>
  4047a8:	4628      	mov	r0, r5
  4047aa:	f001 f90d 	bl	4059c8 <__sinit>
  4047ae:	e796      	b.n	4046de <setvbuf+0x1a>
  4047b0:	2f00      	cmp	r7, #0
  4047b2:	d0cb      	beq.n	40474c <setvbuf+0x88>
  4047b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4047b6:	2b00      	cmp	r3, #0
  4047b8:	d033      	beq.n	404822 <setvbuf+0x15e>
  4047ba:	9b00      	ldr	r3, [sp, #0]
  4047bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4047c0:	6027      	str	r7, [r4, #0]
  4047c2:	429e      	cmp	r6, r3
  4047c4:	bf1c      	itt	ne
  4047c6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4047ca:	81a2      	strhne	r2, [r4, #12]
  4047cc:	f1b8 0f01 	cmp.w	r8, #1
  4047d0:	bf04      	itt	eq
  4047d2:	f042 0201 	orreq.w	r2, r2, #1
  4047d6:	81a2      	strheq	r2, [r4, #12]
  4047d8:	b292      	uxth	r2, r2
  4047da:	f012 0308 	ands.w	r3, r2, #8
  4047de:	6127      	str	r7, [r4, #16]
  4047e0:	6166      	str	r6, [r4, #20]
  4047e2:	d00e      	beq.n	404802 <setvbuf+0x13e>
  4047e4:	07d1      	lsls	r1, r2, #31
  4047e6:	d51a      	bpl.n	40481e <setvbuf+0x15a>
  4047e8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4047ea:	4276      	negs	r6, r6
  4047ec:	2300      	movs	r3, #0
  4047ee:	f015 0501 	ands.w	r5, r5, #1
  4047f2:	61a6      	str	r6, [r4, #24]
  4047f4:	60a3      	str	r3, [r4, #8]
  4047f6:	d009      	beq.n	40480c <setvbuf+0x148>
  4047f8:	2500      	movs	r5, #0
  4047fa:	4628      	mov	r0, r5
  4047fc:	b003      	add	sp, #12
  4047fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404802:	60a3      	str	r3, [r4, #8]
  404804:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404806:	f015 0501 	ands.w	r5, r5, #1
  40480a:	d1f5      	bne.n	4047f8 <setvbuf+0x134>
  40480c:	0593      	lsls	r3, r2, #22
  40480e:	d4c0      	bmi.n	404792 <setvbuf+0xce>
  404810:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404812:	f001 fc9b 	bl	40614c <__retarget_lock_release_recursive>
  404816:	4628      	mov	r0, r5
  404818:	b003      	add	sp, #12
  40481a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40481e:	60a6      	str	r6, [r4, #8]
  404820:	e7f0      	b.n	404804 <setvbuf+0x140>
  404822:	4628      	mov	r0, r5
  404824:	f001 f8d0 	bl	4059c8 <__sinit>
  404828:	e7c7      	b.n	4047ba <setvbuf+0xf6>
  40482a:	f04f 35ff 	mov.w	r5, #4294967295
  40482e:	e7b0      	b.n	404792 <setvbuf+0xce>
  404830:	f8dd 9000 	ldr.w	r9, [sp]
  404834:	45b1      	cmp	r9, r6
  404836:	d004      	beq.n	404842 <setvbuf+0x17e>
  404838:	4648      	mov	r0, r9
  40483a:	f7ff fb75 	bl	403f28 <malloc>
  40483e:	4607      	mov	r7, r0
  404840:	b920      	cbnz	r0, 40484c <setvbuf+0x188>
  404842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404846:	f04f 35ff 	mov.w	r5, #4294967295
  40484a:	e792      	b.n	404772 <setvbuf+0xae>
  40484c:	464e      	mov	r6, r9
  40484e:	e783      	b.n	404758 <setvbuf+0x94>
  404850:	20400014 	.word	0x20400014
	...

00404880 <strlen>:
  404880:	f890 f000 	pld	[r0]
  404884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404888:	f020 0107 	bic.w	r1, r0, #7
  40488c:	f06f 0c00 	mvn.w	ip, #0
  404890:	f010 0407 	ands.w	r4, r0, #7
  404894:	f891 f020 	pld	[r1, #32]
  404898:	f040 8049 	bne.w	40492e <strlen+0xae>
  40489c:	f04f 0400 	mov.w	r4, #0
  4048a0:	f06f 0007 	mvn.w	r0, #7
  4048a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4048a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4048ac:	f100 0008 	add.w	r0, r0, #8
  4048b0:	fa82 f24c 	uadd8	r2, r2, ip
  4048b4:	faa4 f28c 	sel	r2, r4, ip
  4048b8:	fa83 f34c 	uadd8	r3, r3, ip
  4048bc:	faa2 f38c 	sel	r3, r2, ip
  4048c0:	bb4b      	cbnz	r3, 404916 <strlen+0x96>
  4048c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4048c6:	fa82 f24c 	uadd8	r2, r2, ip
  4048ca:	f100 0008 	add.w	r0, r0, #8
  4048ce:	faa4 f28c 	sel	r2, r4, ip
  4048d2:	fa83 f34c 	uadd8	r3, r3, ip
  4048d6:	faa2 f38c 	sel	r3, r2, ip
  4048da:	b9e3      	cbnz	r3, 404916 <strlen+0x96>
  4048dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4048e0:	fa82 f24c 	uadd8	r2, r2, ip
  4048e4:	f100 0008 	add.w	r0, r0, #8
  4048e8:	faa4 f28c 	sel	r2, r4, ip
  4048ec:	fa83 f34c 	uadd8	r3, r3, ip
  4048f0:	faa2 f38c 	sel	r3, r2, ip
  4048f4:	b97b      	cbnz	r3, 404916 <strlen+0x96>
  4048f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4048fa:	f101 0120 	add.w	r1, r1, #32
  4048fe:	fa82 f24c 	uadd8	r2, r2, ip
  404902:	f100 0008 	add.w	r0, r0, #8
  404906:	faa4 f28c 	sel	r2, r4, ip
  40490a:	fa83 f34c 	uadd8	r3, r3, ip
  40490e:	faa2 f38c 	sel	r3, r2, ip
  404912:	2b00      	cmp	r3, #0
  404914:	d0c6      	beq.n	4048a4 <strlen+0x24>
  404916:	2a00      	cmp	r2, #0
  404918:	bf04      	itt	eq
  40491a:	3004      	addeq	r0, #4
  40491c:	461a      	moveq	r2, r3
  40491e:	ba12      	rev	r2, r2
  404920:	fab2 f282 	clz	r2, r2
  404924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40492c:	4770      	bx	lr
  40492e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404932:	f004 0503 	and.w	r5, r4, #3
  404936:	f1c4 0000 	rsb	r0, r4, #0
  40493a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40493e:	f014 0f04 	tst.w	r4, #4
  404942:	f891 f040 	pld	[r1, #64]	; 0x40
  404946:	fa0c f505 	lsl.w	r5, ip, r5
  40494a:	ea62 0205 	orn	r2, r2, r5
  40494e:	bf1c      	itt	ne
  404950:	ea63 0305 	ornne	r3, r3, r5
  404954:	4662      	movne	r2, ip
  404956:	f04f 0400 	mov.w	r4, #0
  40495a:	e7a9      	b.n	4048b0 <strlen+0x30>

0040495c <__sprint_r.part.0>:
  40495c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404960:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404962:	049c      	lsls	r4, r3, #18
  404964:	4693      	mov	fp, r2
  404966:	d52f      	bpl.n	4049c8 <__sprint_r.part.0+0x6c>
  404968:	6893      	ldr	r3, [r2, #8]
  40496a:	6812      	ldr	r2, [r2, #0]
  40496c:	b353      	cbz	r3, 4049c4 <__sprint_r.part.0+0x68>
  40496e:	460e      	mov	r6, r1
  404970:	4607      	mov	r7, r0
  404972:	f102 0908 	add.w	r9, r2, #8
  404976:	e919 0420 	ldmdb	r9, {r5, sl}
  40497a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40497e:	d017      	beq.n	4049b0 <__sprint_r.part.0+0x54>
  404980:	3d04      	subs	r5, #4
  404982:	2400      	movs	r4, #0
  404984:	e001      	b.n	40498a <__sprint_r.part.0+0x2e>
  404986:	45a0      	cmp	r8, r4
  404988:	d010      	beq.n	4049ac <__sprint_r.part.0+0x50>
  40498a:	4632      	mov	r2, r6
  40498c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404990:	4638      	mov	r0, r7
  404992:	f001 f8bb 	bl	405b0c <_fputwc_r>
  404996:	1c43      	adds	r3, r0, #1
  404998:	f104 0401 	add.w	r4, r4, #1
  40499c:	d1f3      	bne.n	404986 <__sprint_r.part.0+0x2a>
  40499e:	2300      	movs	r3, #0
  4049a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4049a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4049a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4049b0:	f02a 0a03 	bic.w	sl, sl, #3
  4049b4:	eba3 030a 	sub.w	r3, r3, sl
  4049b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4049bc:	f109 0908 	add.w	r9, r9, #8
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	d1d8      	bne.n	404976 <__sprint_r.part.0+0x1a>
  4049c4:	2000      	movs	r0, #0
  4049c6:	e7ea      	b.n	40499e <__sprint_r.part.0+0x42>
  4049c8:	f001 fa0a 	bl	405de0 <__sfvwrite_r>
  4049cc:	2300      	movs	r3, #0
  4049ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4049d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4049d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049da:	bf00      	nop

004049dc <_vfiprintf_r>:
  4049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049e0:	b0ad      	sub	sp, #180	; 0xb4
  4049e2:	461d      	mov	r5, r3
  4049e4:	468b      	mov	fp, r1
  4049e6:	4690      	mov	r8, r2
  4049e8:	9307      	str	r3, [sp, #28]
  4049ea:	9006      	str	r0, [sp, #24]
  4049ec:	b118      	cbz	r0, 4049f6 <_vfiprintf_r+0x1a>
  4049ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4049f0:	2b00      	cmp	r3, #0
  4049f2:	f000 80f3 	beq.w	404bdc <_vfiprintf_r+0x200>
  4049f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4049fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4049fe:	07df      	lsls	r7, r3, #31
  404a00:	b281      	uxth	r1, r0
  404a02:	d402      	bmi.n	404a0a <_vfiprintf_r+0x2e>
  404a04:	058e      	lsls	r6, r1, #22
  404a06:	f140 80fc 	bpl.w	404c02 <_vfiprintf_r+0x226>
  404a0a:	048c      	lsls	r4, r1, #18
  404a0c:	d40a      	bmi.n	404a24 <_vfiprintf_r+0x48>
  404a0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404a12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404a1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  404a1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404a22:	b289      	uxth	r1, r1
  404a24:	0708      	lsls	r0, r1, #28
  404a26:	f140 80b3 	bpl.w	404b90 <_vfiprintf_r+0x1b4>
  404a2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  404a2e:	2b00      	cmp	r3, #0
  404a30:	f000 80ae 	beq.w	404b90 <_vfiprintf_r+0x1b4>
  404a34:	f001 031a 	and.w	r3, r1, #26
  404a38:	2b0a      	cmp	r3, #10
  404a3a:	f000 80b5 	beq.w	404ba8 <_vfiprintf_r+0x1cc>
  404a3e:	2300      	movs	r3, #0
  404a40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404a44:	930b      	str	r3, [sp, #44]	; 0x2c
  404a46:	9311      	str	r3, [sp, #68]	; 0x44
  404a48:	9310      	str	r3, [sp, #64]	; 0x40
  404a4a:	9303      	str	r3, [sp, #12]
  404a4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404a50:	46ca      	mov	sl, r9
  404a52:	f8cd b010 	str.w	fp, [sp, #16]
  404a56:	f898 3000 	ldrb.w	r3, [r8]
  404a5a:	4644      	mov	r4, r8
  404a5c:	b1fb      	cbz	r3, 404a9e <_vfiprintf_r+0xc2>
  404a5e:	2b25      	cmp	r3, #37	; 0x25
  404a60:	d102      	bne.n	404a68 <_vfiprintf_r+0x8c>
  404a62:	e01c      	b.n	404a9e <_vfiprintf_r+0xc2>
  404a64:	2b25      	cmp	r3, #37	; 0x25
  404a66:	d003      	beq.n	404a70 <_vfiprintf_r+0x94>
  404a68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404a6c:	2b00      	cmp	r3, #0
  404a6e:	d1f9      	bne.n	404a64 <_vfiprintf_r+0x88>
  404a70:	eba4 0508 	sub.w	r5, r4, r8
  404a74:	b19d      	cbz	r5, 404a9e <_vfiprintf_r+0xc2>
  404a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a7a:	f8ca 8000 	str.w	r8, [sl]
  404a7e:	3301      	adds	r3, #1
  404a80:	442a      	add	r2, r5
  404a82:	2b07      	cmp	r3, #7
  404a84:	f8ca 5004 	str.w	r5, [sl, #4]
  404a88:	9211      	str	r2, [sp, #68]	; 0x44
  404a8a:	9310      	str	r3, [sp, #64]	; 0x40
  404a8c:	dd7a      	ble.n	404b84 <_vfiprintf_r+0x1a8>
  404a8e:	2a00      	cmp	r2, #0
  404a90:	f040 84b0 	bne.w	4053f4 <_vfiprintf_r+0xa18>
  404a94:	9b03      	ldr	r3, [sp, #12]
  404a96:	9210      	str	r2, [sp, #64]	; 0x40
  404a98:	442b      	add	r3, r5
  404a9a:	46ca      	mov	sl, r9
  404a9c:	9303      	str	r3, [sp, #12]
  404a9e:	7823      	ldrb	r3, [r4, #0]
  404aa0:	2b00      	cmp	r3, #0
  404aa2:	f000 83e0 	beq.w	405266 <_vfiprintf_r+0x88a>
  404aa6:	2000      	movs	r0, #0
  404aa8:	f04f 0300 	mov.w	r3, #0
  404aac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404ab0:	f104 0801 	add.w	r8, r4, #1
  404ab4:	7862      	ldrb	r2, [r4, #1]
  404ab6:	4605      	mov	r5, r0
  404ab8:	4606      	mov	r6, r0
  404aba:	4603      	mov	r3, r0
  404abc:	f04f 34ff 	mov.w	r4, #4294967295
  404ac0:	f108 0801 	add.w	r8, r8, #1
  404ac4:	f1a2 0120 	sub.w	r1, r2, #32
  404ac8:	2958      	cmp	r1, #88	; 0x58
  404aca:	f200 82de 	bhi.w	40508a <_vfiprintf_r+0x6ae>
  404ace:	e8df f011 	tbh	[pc, r1, lsl #1]
  404ad2:	0221      	.short	0x0221
  404ad4:	02dc02dc 	.word	0x02dc02dc
  404ad8:	02dc0229 	.word	0x02dc0229
  404adc:	02dc02dc 	.word	0x02dc02dc
  404ae0:	02dc02dc 	.word	0x02dc02dc
  404ae4:	028902dc 	.word	0x028902dc
  404ae8:	02dc0295 	.word	0x02dc0295
  404aec:	02bd00a2 	.word	0x02bd00a2
  404af0:	019f02dc 	.word	0x019f02dc
  404af4:	01a401a4 	.word	0x01a401a4
  404af8:	01a401a4 	.word	0x01a401a4
  404afc:	01a401a4 	.word	0x01a401a4
  404b00:	01a401a4 	.word	0x01a401a4
  404b04:	02dc01a4 	.word	0x02dc01a4
  404b08:	02dc02dc 	.word	0x02dc02dc
  404b0c:	02dc02dc 	.word	0x02dc02dc
  404b10:	02dc02dc 	.word	0x02dc02dc
  404b14:	02dc02dc 	.word	0x02dc02dc
  404b18:	01b202dc 	.word	0x01b202dc
  404b1c:	02dc02dc 	.word	0x02dc02dc
  404b20:	02dc02dc 	.word	0x02dc02dc
  404b24:	02dc02dc 	.word	0x02dc02dc
  404b28:	02dc02dc 	.word	0x02dc02dc
  404b2c:	02dc02dc 	.word	0x02dc02dc
  404b30:	02dc0197 	.word	0x02dc0197
  404b34:	02dc02dc 	.word	0x02dc02dc
  404b38:	02dc02dc 	.word	0x02dc02dc
  404b3c:	02dc019b 	.word	0x02dc019b
  404b40:	025302dc 	.word	0x025302dc
  404b44:	02dc02dc 	.word	0x02dc02dc
  404b48:	02dc02dc 	.word	0x02dc02dc
  404b4c:	02dc02dc 	.word	0x02dc02dc
  404b50:	02dc02dc 	.word	0x02dc02dc
  404b54:	02dc02dc 	.word	0x02dc02dc
  404b58:	021b025a 	.word	0x021b025a
  404b5c:	02dc02dc 	.word	0x02dc02dc
  404b60:	026e02dc 	.word	0x026e02dc
  404b64:	02dc021b 	.word	0x02dc021b
  404b68:	027302dc 	.word	0x027302dc
  404b6c:	01f502dc 	.word	0x01f502dc
  404b70:	02090182 	.word	0x02090182
  404b74:	02dc02d7 	.word	0x02dc02d7
  404b78:	02dc029a 	.word	0x02dc029a
  404b7c:	02dc00a7 	.word	0x02dc00a7
  404b80:	022e02dc 	.word	0x022e02dc
  404b84:	f10a 0a08 	add.w	sl, sl, #8
  404b88:	9b03      	ldr	r3, [sp, #12]
  404b8a:	442b      	add	r3, r5
  404b8c:	9303      	str	r3, [sp, #12]
  404b8e:	e786      	b.n	404a9e <_vfiprintf_r+0xc2>
  404b90:	4659      	mov	r1, fp
  404b92:	9806      	ldr	r0, [sp, #24]
  404b94:	f000 fdac 	bl	4056f0 <__swsetup_r>
  404b98:	bb18      	cbnz	r0, 404be2 <_vfiprintf_r+0x206>
  404b9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404b9e:	f001 031a 	and.w	r3, r1, #26
  404ba2:	2b0a      	cmp	r3, #10
  404ba4:	f47f af4b 	bne.w	404a3e <_vfiprintf_r+0x62>
  404ba8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404bac:	2b00      	cmp	r3, #0
  404bae:	f6ff af46 	blt.w	404a3e <_vfiprintf_r+0x62>
  404bb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404bb6:	07db      	lsls	r3, r3, #31
  404bb8:	d405      	bmi.n	404bc6 <_vfiprintf_r+0x1ea>
  404bba:	058f      	lsls	r7, r1, #22
  404bbc:	d403      	bmi.n	404bc6 <_vfiprintf_r+0x1ea>
  404bbe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404bc2:	f001 fac3 	bl	40614c <__retarget_lock_release_recursive>
  404bc6:	462b      	mov	r3, r5
  404bc8:	4642      	mov	r2, r8
  404bca:	4659      	mov	r1, fp
  404bcc:	9806      	ldr	r0, [sp, #24]
  404bce:	f000 fd4d 	bl	40566c <__sbprintf>
  404bd2:	9003      	str	r0, [sp, #12]
  404bd4:	9803      	ldr	r0, [sp, #12]
  404bd6:	b02d      	add	sp, #180	; 0xb4
  404bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bdc:	f000 fef4 	bl	4059c8 <__sinit>
  404be0:	e709      	b.n	4049f6 <_vfiprintf_r+0x1a>
  404be2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404be6:	07d9      	lsls	r1, r3, #31
  404be8:	d404      	bmi.n	404bf4 <_vfiprintf_r+0x218>
  404bea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404bee:	059a      	lsls	r2, r3, #22
  404bf0:	f140 84aa 	bpl.w	405548 <_vfiprintf_r+0xb6c>
  404bf4:	f04f 33ff 	mov.w	r3, #4294967295
  404bf8:	9303      	str	r3, [sp, #12]
  404bfa:	9803      	ldr	r0, [sp, #12]
  404bfc:	b02d      	add	sp, #180	; 0xb4
  404bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404c06:	f001 fa9f 	bl	406148 <__retarget_lock_acquire_recursive>
  404c0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c0e:	b281      	uxth	r1, r0
  404c10:	e6fb      	b.n	404a0a <_vfiprintf_r+0x2e>
  404c12:	4276      	negs	r6, r6
  404c14:	9207      	str	r2, [sp, #28]
  404c16:	f043 0304 	orr.w	r3, r3, #4
  404c1a:	f898 2000 	ldrb.w	r2, [r8]
  404c1e:	e74f      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404c20:	9608      	str	r6, [sp, #32]
  404c22:	069e      	lsls	r6, r3, #26
  404c24:	f100 8450 	bmi.w	4054c8 <_vfiprintf_r+0xaec>
  404c28:	9907      	ldr	r1, [sp, #28]
  404c2a:	06dd      	lsls	r5, r3, #27
  404c2c:	460a      	mov	r2, r1
  404c2e:	f100 83ef 	bmi.w	405410 <_vfiprintf_r+0xa34>
  404c32:	0658      	lsls	r0, r3, #25
  404c34:	f140 83ec 	bpl.w	405410 <_vfiprintf_r+0xa34>
  404c38:	880e      	ldrh	r6, [r1, #0]
  404c3a:	3104      	adds	r1, #4
  404c3c:	2700      	movs	r7, #0
  404c3e:	2201      	movs	r2, #1
  404c40:	9107      	str	r1, [sp, #28]
  404c42:	f04f 0100 	mov.w	r1, #0
  404c46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404c4a:	2500      	movs	r5, #0
  404c4c:	1c61      	adds	r1, r4, #1
  404c4e:	f000 8116 	beq.w	404e7e <_vfiprintf_r+0x4a2>
  404c52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404c56:	9102      	str	r1, [sp, #8]
  404c58:	ea56 0107 	orrs.w	r1, r6, r7
  404c5c:	f040 8114 	bne.w	404e88 <_vfiprintf_r+0x4ac>
  404c60:	2c00      	cmp	r4, #0
  404c62:	f040 835c 	bne.w	40531e <_vfiprintf_r+0x942>
  404c66:	2a00      	cmp	r2, #0
  404c68:	f040 83b7 	bne.w	4053da <_vfiprintf_r+0x9fe>
  404c6c:	f013 0301 	ands.w	r3, r3, #1
  404c70:	9305      	str	r3, [sp, #20]
  404c72:	f000 8457 	beq.w	405524 <_vfiprintf_r+0xb48>
  404c76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404c7a:	2330      	movs	r3, #48	; 0x30
  404c7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404c80:	9b05      	ldr	r3, [sp, #20]
  404c82:	42a3      	cmp	r3, r4
  404c84:	bfb8      	it	lt
  404c86:	4623      	movlt	r3, r4
  404c88:	9301      	str	r3, [sp, #4]
  404c8a:	b10d      	cbz	r5, 404c90 <_vfiprintf_r+0x2b4>
  404c8c:	3301      	adds	r3, #1
  404c8e:	9301      	str	r3, [sp, #4]
  404c90:	9b02      	ldr	r3, [sp, #8]
  404c92:	f013 0302 	ands.w	r3, r3, #2
  404c96:	9309      	str	r3, [sp, #36]	; 0x24
  404c98:	d002      	beq.n	404ca0 <_vfiprintf_r+0x2c4>
  404c9a:	9b01      	ldr	r3, [sp, #4]
  404c9c:	3302      	adds	r3, #2
  404c9e:	9301      	str	r3, [sp, #4]
  404ca0:	9b02      	ldr	r3, [sp, #8]
  404ca2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404ca6:	930a      	str	r3, [sp, #40]	; 0x28
  404ca8:	f040 8217 	bne.w	4050da <_vfiprintf_r+0x6fe>
  404cac:	9b08      	ldr	r3, [sp, #32]
  404cae:	9a01      	ldr	r2, [sp, #4]
  404cb0:	1a9d      	subs	r5, r3, r2
  404cb2:	2d00      	cmp	r5, #0
  404cb4:	f340 8211 	ble.w	4050da <_vfiprintf_r+0x6fe>
  404cb8:	2d10      	cmp	r5, #16
  404cba:	f340 8490 	ble.w	4055de <_vfiprintf_r+0xc02>
  404cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404cc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cc2:	4ec4      	ldr	r6, [pc, #784]	; (404fd4 <_vfiprintf_r+0x5f8>)
  404cc4:	46d6      	mov	lr, sl
  404cc6:	2710      	movs	r7, #16
  404cc8:	46a2      	mov	sl, r4
  404cca:	4619      	mov	r1, r3
  404ccc:	9c06      	ldr	r4, [sp, #24]
  404cce:	e007      	b.n	404ce0 <_vfiprintf_r+0x304>
  404cd0:	f101 0c02 	add.w	ip, r1, #2
  404cd4:	f10e 0e08 	add.w	lr, lr, #8
  404cd8:	4601      	mov	r1, r0
  404cda:	3d10      	subs	r5, #16
  404cdc:	2d10      	cmp	r5, #16
  404cde:	dd11      	ble.n	404d04 <_vfiprintf_r+0x328>
  404ce0:	1c48      	adds	r0, r1, #1
  404ce2:	3210      	adds	r2, #16
  404ce4:	2807      	cmp	r0, #7
  404ce6:	9211      	str	r2, [sp, #68]	; 0x44
  404ce8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404cec:	9010      	str	r0, [sp, #64]	; 0x40
  404cee:	ddef      	ble.n	404cd0 <_vfiprintf_r+0x2f4>
  404cf0:	2a00      	cmp	r2, #0
  404cf2:	f040 81e4 	bne.w	4050be <_vfiprintf_r+0x6e2>
  404cf6:	3d10      	subs	r5, #16
  404cf8:	2d10      	cmp	r5, #16
  404cfa:	4611      	mov	r1, r2
  404cfc:	f04f 0c01 	mov.w	ip, #1
  404d00:	46ce      	mov	lr, r9
  404d02:	dced      	bgt.n	404ce0 <_vfiprintf_r+0x304>
  404d04:	4654      	mov	r4, sl
  404d06:	4661      	mov	r1, ip
  404d08:	46f2      	mov	sl, lr
  404d0a:	442a      	add	r2, r5
  404d0c:	2907      	cmp	r1, #7
  404d0e:	9211      	str	r2, [sp, #68]	; 0x44
  404d10:	f8ca 6000 	str.w	r6, [sl]
  404d14:	f8ca 5004 	str.w	r5, [sl, #4]
  404d18:	9110      	str	r1, [sp, #64]	; 0x40
  404d1a:	f300 82ec 	bgt.w	4052f6 <_vfiprintf_r+0x91a>
  404d1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404d22:	f10a 0a08 	add.w	sl, sl, #8
  404d26:	1c48      	adds	r0, r1, #1
  404d28:	2d00      	cmp	r5, #0
  404d2a:	f040 81de 	bne.w	4050ea <_vfiprintf_r+0x70e>
  404d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d30:	2b00      	cmp	r3, #0
  404d32:	f000 81f8 	beq.w	405126 <_vfiprintf_r+0x74a>
  404d36:	3202      	adds	r2, #2
  404d38:	a90e      	add	r1, sp, #56	; 0x38
  404d3a:	2302      	movs	r3, #2
  404d3c:	2807      	cmp	r0, #7
  404d3e:	9211      	str	r2, [sp, #68]	; 0x44
  404d40:	9010      	str	r0, [sp, #64]	; 0x40
  404d42:	e88a 000a 	stmia.w	sl, {r1, r3}
  404d46:	f340 81ea 	ble.w	40511e <_vfiprintf_r+0x742>
  404d4a:	2a00      	cmp	r2, #0
  404d4c:	f040 838c 	bne.w	405468 <_vfiprintf_r+0xa8c>
  404d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d52:	2b80      	cmp	r3, #128	; 0x80
  404d54:	f04f 0001 	mov.w	r0, #1
  404d58:	4611      	mov	r1, r2
  404d5a:	46ca      	mov	sl, r9
  404d5c:	f040 81e7 	bne.w	40512e <_vfiprintf_r+0x752>
  404d60:	9b08      	ldr	r3, [sp, #32]
  404d62:	9d01      	ldr	r5, [sp, #4]
  404d64:	1b5e      	subs	r6, r3, r5
  404d66:	2e00      	cmp	r6, #0
  404d68:	f340 81e1 	ble.w	40512e <_vfiprintf_r+0x752>
  404d6c:	2e10      	cmp	r6, #16
  404d6e:	4d9a      	ldr	r5, [pc, #616]	; (404fd8 <_vfiprintf_r+0x5fc>)
  404d70:	f340 8450 	ble.w	405614 <_vfiprintf_r+0xc38>
  404d74:	46d4      	mov	ip, sl
  404d76:	2710      	movs	r7, #16
  404d78:	46a2      	mov	sl, r4
  404d7a:	9c06      	ldr	r4, [sp, #24]
  404d7c:	e007      	b.n	404d8e <_vfiprintf_r+0x3b2>
  404d7e:	f101 0e02 	add.w	lr, r1, #2
  404d82:	f10c 0c08 	add.w	ip, ip, #8
  404d86:	4601      	mov	r1, r0
  404d88:	3e10      	subs	r6, #16
  404d8a:	2e10      	cmp	r6, #16
  404d8c:	dd11      	ble.n	404db2 <_vfiprintf_r+0x3d6>
  404d8e:	1c48      	adds	r0, r1, #1
  404d90:	3210      	adds	r2, #16
  404d92:	2807      	cmp	r0, #7
  404d94:	9211      	str	r2, [sp, #68]	; 0x44
  404d96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404d9a:	9010      	str	r0, [sp, #64]	; 0x40
  404d9c:	ddef      	ble.n	404d7e <_vfiprintf_r+0x3a2>
  404d9e:	2a00      	cmp	r2, #0
  404da0:	f040 829d 	bne.w	4052de <_vfiprintf_r+0x902>
  404da4:	3e10      	subs	r6, #16
  404da6:	2e10      	cmp	r6, #16
  404da8:	f04f 0e01 	mov.w	lr, #1
  404dac:	4611      	mov	r1, r2
  404dae:	46cc      	mov	ip, r9
  404db0:	dced      	bgt.n	404d8e <_vfiprintf_r+0x3b2>
  404db2:	4654      	mov	r4, sl
  404db4:	46e2      	mov	sl, ip
  404db6:	4432      	add	r2, r6
  404db8:	f1be 0f07 	cmp.w	lr, #7
  404dbc:	9211      	str	r2, [sp, #68]	; 0x44
  404dbe:	e88a 0060 	stmia.w	sl, {r5, r6}
  404dc2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404dc6:	f300 8369 	bgt.w	40549c <_vfiprintf_r+0xac0>
  404dca:	f10a 0a08 	add.w	sl, sl, #8
  404dce:	f10e 0001 	add.w	r0, lr, #1
  404dd2:	4671      	mov	r1, lr
  404dd4:	e1ab      	b.n	40512e <_vfiprintf_r+0x752>
  404dd6:	9608      	str	r6, [sp, #32]
  404dd8:	f013 0220 	ands.w	r2, r3, #32
  404ddc:	f040 838c 	bne.w	4054f8 <_vfiprintf_r+0xb1c>
  404de0:	f013 0110 	ands.w	r1, r3, #16
  404de4:	f040 831a 	bne.w	40541c <_vfiprintf_r+0xa40>
  404de8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404dec:	f000 8316 	beq.w	40541c <_vfiprintf_r+0xa40>
  404df0:	9807      	ldr	r0, [sp, #28]
  404df2:	460a      	mov	r2, r1
  404df4:	4601      	mov	r1, r0
  404df6:	3104      	adds	r1, #4
  404df8:	8806      	ldrh	r6, [r0, #0]
  404dfa:	9107      	str	r1, [sp, #28]
  404dfc:	2700      	movs	r7, #0
  404dfe:	e720      	b.n	404c42 <_vfiprintf_r+0x266>
  404e00:	9608      	str	r6, [sp, #32]
  404e02:	f043 0310 	orr.w	r3, r3, #16
  404e06:	e7e7      	b.n	404dd8 <_vfiprintf_r+0x3fc>
  404e08:	9608      	str	r6, [sp, #32]
  404e0a:	f043 0310 	orr.w	r3, r3, #16
  404e0e:	e708      	b.n	404c22 <_vfiprintf_r+0x246>
  404e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404e14:	f898 2000 	ldrb.w	r2, [r8]
  404e18:	e652      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404e1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e1e:	2600      	movs	r6, #0
  404e20:	f818 2b01 	ldrb.w	r2, [r8], #1
  404e24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404e28:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404e2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404e30:	2909      	cmp	r1, #9
  404e32:	d9f5      	bls.n	404e20 <_vfiprintf_r+0x444>
  404e34:	e646      	b.n	404ac4 <_vfiprintf_r+0xe8>
  404e36:	9608      	str	r6, [sp, #32]
  404e38:	2800      	cmp	r0, #0
  404e3a:	f040 8408 	bne.w	40564e <_vfiprintf_r+0xc72>
  404e3e:	f043 0310 	orr.w	r3, r3, #16
  404e42:	069e      	lsls	r6, r3, #26
  404e44:	f100 834c 	bmi.w	4054e0 <_vfiprintf_r+0xb04>
  404e48:	06dd      	lsls	r5, r3, #27
  404e4a:	f100 82f3 	bmi.w	405434 <_vfiprintf_r+0xa58>
  404e4e:	0658      	lsls	r0, r3, #25
  404e50:	f140 82f0 	bpl.w	405434 <_vfiprintf_r+0xa58>
  404e54:	9d07      	ldr	r5, [sp, #28]
  404e56:	f9b5 6000 	ldrsh.w	r6, [r5]
  404e5a:	462a      	mov	r2, r5
  404e5c:	17f7      	asrs	r7, r6, #31
  404e5e:	3204      	adds	r2, #4
  404e60:	4630      	mov	r0, r6
  404e62:	4639      	mov	r1, r7
  404e64:	9207      	str	r2, [sp, #28]
  404e66:	2800      	cmp	r0, #0
  404e68:	f171 0200 	sbcs.w	r2, r1, #0
  404e6c:	f2c0 835d 	blt.w	40552a <_vfiprintf_r+0xb4e>
  404e70:	1c61      	adds	r1, r4, #1
  404e72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404e76:	f04f 0201 	mov.w	r2, #1
  404e7a:	f47f aeea 	bne.w	404c52 <_vfiprintf_r+0x276>
  404e7e:	ea56 0107 	orrs.w	r1, r6, r7
  404e82:	f000 824d 	beq.w	405320 <_vfiprintf_r+0x944>
  404e86:	9302      	str	r3, [sp, #8]
  404e88:	2a01      	cmp	r2, #1
  404e8a:	f000 828c 	beq.w	4053a6 <_vfiprintf_r+0x9ca>
  404e8e:	2a02      	cmp	r2, #2
  404e90:	f040 825c 	bne.w	40534c <_vfiprintf_r+0x970>
  404e94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404e96:	46cb      	mov	fp, r9
  404e98:	0933      	lsrs	r3, r6, #4
  404e9a:	f006 010f 	and.w	r1, r6, #15
  404e9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404ea2:	093a      	lsrs	r2, r7, #4
  404ea4:	461e      	mov	r6, r3
  404ea6:	4617      	mov	r7, r2
  404ea8:	5c43      	ldrb	r3, [r0, r1]
  404eaa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404eae:	ea56 0307 	orrs.w	r3, r6, r7
  404eb2:	d1f1      	bne.n	404e98 <_vfiprintf_r+0x4bc>
  404eb4:	eba9 030b 	sub.w	r3, r9, fp
  404eb8:	9305      	str	r3, [sp, #20]
  404eba:	e6e1      	b.n	404c80 <_vfiprintf_r+0x2a4>
  404ebc:	2800      	cmp	r0, #0
  404ebe:	f040 83c0 	bne.w	405642 <_vfiprintf_r+0xc66>
  404ec2:	0699      	lsls	r1, r3, #26
  404ec4:	f100 8367 	bmi.w	405596 <_vfiprintf_r+0xbba>
  404ec8:	06da      	lsls	r2, r3, #27
  404eca:	f100 80f1 	bmi.w	4050b0 <_vfiprintf_r+0x6d4>
  404ece:	065b      	lsls	r3, r3, #25
  404ed0:	f140 80ee 	bpl.w	4050b0 <_vfiprintf_r+0x6d4>
  404ed4:	9a07      	ldr	r2, [sp, #28]
  404ed6:	6813      	ldr	r3, [r2, #0]
  404ed8:	3204      	adds	r2, #4
  404eda:	9207      	str	r2, [sp, #28]
  404edc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ee0:	801a      	strh	r2, [r3, #0]
  404ee2:	e5b8      	b.n	404a56 <_vfiprintf_r+0x7a>
  404ee4:	9807      	ldr	r0, [sp, #28]
  404ee6:	4a3d      	ldr	r2, [pc, #244]	; (404fdc <_vfiprintf_r+0x600>)
  404ee8:	9608      	str	r6, [sp, #32]
  404eea:	920b      	str	r2, [sp, #44]	; 0x2c
  404eec:	6806      	ldr	r6, [r0, #0]
  404eee:	2278      	movs	r2, #120	; 0x78
  404ef0:	2130      	movs	r1, #48	; 0x30
  404ef2:	3004      	adds	r0, #4
  404ef4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404ef8:	f043 0302 	orr.w	r3, r3, #2
  404efc:	9007      	str	r0, [sp, #28]
  404efe:	2700      	movs	r7, #0
  404f00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404f04:	2202      	movs	r2, #2
  404f06:	e69c      	b.n	404c42 <_vfiprintf_r+0x266>
  404f08:	9608      	str	r6, [sp, #32]
  404f0a:	2800      	cmp	r0, #0
  404f0c:	d099      	beq.n	404e42 <_vfiprintf_r+0x466>
  404f0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f12:	e796      	b.n	404e42 <_vfiprintf_r+0x466>
  404f14:	f898 2000 	ldrb.w	r2, [r8]
  404f18:	2d00      	cmp	r5, #0
  404f1a:	f47f add1 	bne.w	404ac0 <_vfiprintf_r+0xe4>
  404f1e:	2001      	movs	r0, #1
  404f20:	2520      	movs	r5, #32
  404f22:	e5cd      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404f24:	f043 0301 	orr.w	r3, r3, #1
  404f28:	f898 2000 	ldrb.w	r2, [r8]
  404f2c:	e5c8      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404f2e:	9608      	str	r6, [sp, #32]
  404f30:	2800      	cmp	r0, #0
  404f32:	f040 8393 	bne.w	40565c <_vfiprintf_r+0xc80>
  404f36:	4929      	ldr	r1, [pc, #164]	; (404fdc <_vfiprintf_r+0x600>)
  404f38:	910b      	str	r1, [sp, #44]	; 0x2c
  404f3a:	069f      	lsls	r7, r3, #26
  404f3c:	f100 82e8 	bmi.w	405510 <_vfiprintf_r+0xb34>
  404f40:	9807      	ldr	r0, [sp, #28]
  404f42:	06de      	lsls	r6, r3, #27
  404f44:	4601      	mov	r1, r0
  404f46:	f100 8270 	bmi.w	40542a <_vfiprintf_r+0xa4e>
  404f4a:	065d      	lsls	r5, r3, #25
  404f4c:	f140 826d 	bpl.w	40542a <_vfiprintf_r+0xa4e>
  404f50:	3104      	adds	r1, #4
  404f52:	8806      	ldrh	r6, [r0, #0]
  404f54:	9107      	str	r1, [sp, #28]
  404f56:	2700      	movs	r7, #0
  404f58:	07d8      	lsls	r0, r3, #31
  404f5a:	f140 8222 	bpl.w	4053a2 <_vfiprintf_r+0x9c6>
  404f5e:	ea56 0107 	orrs.w	r1, r6, r7
  404f62:	f000 821e 	beq.w	4053a2 <_vfiprintf_r+0x9c6>
  404f66:	2130      	movs	r1, #48	; 0x30
  404f68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404f6c:	f043 0302 	orr.w	r3, r3, #2
  404f70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404f74:	2202      	movs	r2, #2
  404f76:	e664      	b.n	404c42 <_vfiprintf_r+0x266>
  404f78:	9608      	str	r6, [sp, #32]
  404f7a:	2800      	cmp	r0, #0
  404f7c:	f040 836b 	bne.w	405656 <_vfiprintf_r+0xc7a>
  404f80:	4917      	ldr	r1, [pc, #92]	; (404fe0 <_vfiprintf_r+0x604>)
  404f82:	910b      	str	r1, [sp, #44]	; 0x2c
  404f84:	e7d9      	b.n	404f3a <_vfiprintf_r+0x55e>
  404f86:	9907      	ldr	r1, [sp, #28]
  404f88:	9608      	str	r6, [sp, #32]
  404f8a:	680a      	ldr	r2, [r1, #0]
  404f8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404f90:	f04f 0000 	mov.w	r0, #0
  404f94:	460a      	mov	r2, r1
  404f96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404f9a:	3204      	adds	r2, #4
  404f9c:	2001      	movs	r0, #1
  404f9e:	9001      	str	r0, [sp, #4]
  404fa0:	9207      	str	r2, [sp, #28]
  404fa2:	9005      	str	r0, [sp, #20]
  404fa4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404fa8:	9302      	str	r3, [sp, #8]
  404faa:	2400      	movs	r4, #0
  404fac:	e670      	b.n	404c90 <_vfiprintf_r+0x2b4>
  404fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fb2:	f898 2000 	ldrb.w	r2, [r8]
  404fb6:	e583      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404fb8:	f898 2000 	ldrb.w	r2, [r8]
  404fbc:	2a6c      	cmp	r2, #108	; 0x6c
  404fbe:	bf03      	ittte	eq
  404fc0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404fc4:	f043 0320 	orreq.w	r3, r3, #32
  404fc8:	f108 0801 	addeq.w	r8, r8, #1
  404fcc:	f043 0310 	orrne.w	r3, r3, #16
  404fd0:	e576      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404fd2:	bf00      	nop
  404fd4:	00406f38 	.word	0x00406f38
  404fd8:	00406f48 	.word	0x00406f48
  404fdc:	00406f1c 	.word	0x00406f1c
  404fe0:	00406f08 	.word	0x00406f08
  404fe4:	9907      	ldr	r1, [sp, #28]
  404fe6:	680e      	ldr	r6, [r1, #0]
  404fe8:	460a      	mov	r2, r1
  404fea:	2e00      	cmp	r6, #0
  404fec:	f102 0204 	add.w	r2, r2, #4
  404ff0:	f6ff ae0f 	blt.w	404c12 <_vfiprintf_r+0x236>
  404ff4:	9207      	str	r2, [sp, #28]
  404ff6:	f898 2000 	ldrb.w	r2, [r8]
  404ffa:	e561      	b.n	404ac0 <_vfiprintf_r+0xe4>
  404ffc:	f898 2000 	ldrb.w	r2, [r8]
  405000:	2001      	movs	r0, #1
  405002:	252b      	movs	r5, #43	; 0x2b
  405004:	e55c      	b.n	404ac0 <_vfiprintf_r+0xe4>
  405006:	9907      	ldr	r1, [sp, #28]
  405008:	9608      	str	r6, [sp, #32]
  40500a:	f8d1 b000 	ldr.w	fp, [r1]
  40500e:	f04f 0200 	mov.w	r2, #0
  405012:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405016:	1d0e      	adds	r6, r1, #4
  405018:	f1bb 0f00 	cmp.w	fp, #0
  40501c:	f000 82e5 	beq.w	4055ea <_vfiprintf_r+0xc0e>
  405020:	1c67      	adds	r7, r4, #1
  405022:	f000 82c4 	beq.w	4055ae <_vfiprintf_r+0xbd2>
  405026:	4622      	mov	r2, r4
  405028:	2100      	movs	r1, #0
  40502a:	4658      	mov	r0, fp
  40502c:	9301      	str	r3, [sp, #4]
  40502e:	f001 f91f 	bl	406270 <memchr>
  405032:	9b01      	ldr	r3, [sp, #4]
  405034:	2800      	cmp	r0, #0
  405036:	f000 82e5 	beq.w	405604 <_vfiprintf_r+0xc28>
  40503a:	eba0 020b 	sub.w	r2, r0, fp
  40503e:	9205      	str	r2, [sp, #20]
  405040:	9607      	str	r6, [sp, #28]
  405042:	9302      	str	r3, [sp, #8]
  405044:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405048:	2400      	movs	r4, #0
  40504a:	e619      	b.n	404c80 <_vfiprintf_r+0x2a4>
  40504c:	f898 2000 	ldrb.w	r2, [r8]
  405050:	2a2a      	cmp	r2, #42	; 0x2a
  405052:	f108 0701 	add.w	r7, r8, #1
  405056:	f000 82e9 	beq.w	40562c <_vfiprintf_r+0xc50>
  40505a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40505e:	2909      	cmp	r1, #9
  405060:	46b8      	mov	r8, r7
  405062:	f04f 0400 	mov.w	r4, #0
  405066:	f63f ad2d 	bhi.w	404ac4 <_vfiprintf_r+0xe8>
  40506a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40506e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405072:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405076:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40507a:	2909      	cmp	r1, #9
  40507c:	d9f5      	bls.n	40506a <_vfiprintf_r+0x68e>
  40507e:	e521      	b.n	404ac4 <_vfiprintf_r+0xe8>
  405080:	f043 0320 	orr.w	r3, r3, #32
  405084:	f898 2000 	ldrb.w	r2, [r8]
  405088:	e51a      	b.n	404ac0 <_vfiprintf_r+0xe4>
  40508a:	9608      	str	r6, [sp, #32]
  40508c:	2800      	cmp	r0, #0
  40508e:	f040 82db 	bne.w	405648 <_vfiprintf_r+0xc6c>
  405092:	2a00      	cmp	r2, #0
  405094:	f000 80e7 	beq.w	405266 <_vfiprintf_r+0x88a>
  405098:	2101      	movs	r1, #1
  40509a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40509e:	f04f 0200 	mov.w	r2, #0
  4050a2:	9101      	str	r1, [sp, #4]
  4050a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4050a8:	9105      	str	r1, [sp, #20]
  4050aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4050ae:	e77b      	b.n	404fa8 <_vfiprintf_r+0x5cc>
  4050b0:	9a07      	ldr	r2, [sp, #28]
  4050b2:	6813      	ldr	r3, [r2, #0]
  4050b4:	3204      	adds	r2, #4
  4050b6:	9207      	str	r2, [sp, #28]
  4050b8:	9a03      	ldr	r2, [sp, #12]
  4050ba:	601a      	str	r2, [r3, #0]
  4050bc:	e4cb      	b.n	404a56 <_vfiprintf_r+0x7a>
  4050be:	aa0f      	add	r2, sp, #60	; 0x3c
  4050c0:	9904      	ldr	r1, [sp, #16]
  4050c2:	4620      	mov	r0, r4
  4050c4:	f7ff fc4a 	bl	40495c <__sprint_r.part.0>
  4050c8:	2800      	cmp	r0, #0
  4050ca:	f040 8139 	bne.w	405340 <_vfiprintf_r+0x964>
  4050ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050d2:	f101 0c01 	add.w	ip, r1, #1
  4050d6:	46ce      	mov	lr, r9
  4050d8:	e5ff      	b.n	404cda <_vfiprintf_r+0x2fe>
  4050da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050de:	1c48      	adds	r0, r1, #1
  4050e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050e4:	2d00      	cmp	r5, #0
  4050e6:	f43f ae22 	beq.w	404d2e <_vfiprintf_r+0x352>
  4050ea:	3201      	adds	r2, #1
  4050ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4050f0:	2101      	movs	r1, #1
  4050f2:	2807      	cmp	r0, #7
  4050f4:	9211      	str	r2, [sp, #68]	; 0x44
  4050f6:	9010      	str	r0, [sp, #64]	; 0x40
  4050f8:	f8ca 5000 	str.w	r5, [sl]
  4050fc:	f8ca 1004 	str.w	r1, [sl, #4]
  405100:	f340 8108 	ble.w	405314 <_vfiprintf_r+0x938>
  405104:	2a00      	cmp	r2, #0
  405106:	f040 81bc 	bne.w	405482 <_vfiprintf_r+0xaa6>
  40510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40510c:	2b00      	cmp	r3, #0
  40510e:	f43f ae1f 	beq.w	404d50 <_vfiprintf_r+0x374>
  405112:	ab0e      	add	r3, sp, #56	; 0x38
  405114:	2202      	movs	r2, #2
  405116:	4608      	mov	r0, r1
  405118:	931c      	str	r3, [sp, #112]	; 0x70
  40511a:	921d      	str	r2, [sp, #116]	; 0x74
  40511c:	46ca      	mov	sl, r9
  40511e:	4601      	mov	r1, r0
  405120:	f10a 0a08 	add.w	sl, sl, #8
  405124:	3001      	adds	r0, #1
  405126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405128:	2b80      	cmp	r3, #128	; 0x80
  40512a:	f43f ae19 	beq.w	404d60 <_vfiprintf_r+0x384>
  40512e:	9b05      	ldr	r3, [sp, #20]
  405130:	1ae4      	subs	r4, r4, r3
  405132:	2c00      	cmp	r4, #0
  405134:	dd2e      	ble.n	405194 <_vfiprintf_r+0x7b8>
  405136:	2c10      	cmp	r4, #16
  405138:	4db3      	ldr	r5, [pc, #716]	; (405408 <_vfiprintf_r+0xa2c>)
  40513a:	dd1e      	ble.n	40517a <_vfiprintf_r+0x79e>
  40513c:	46d6      	mov	lr, sl
  40513e:	2610      	movs	r6, #16
  405140:	9f06      	ldr	r7, [sp, #24]
  405142:	f8dd a010 	ldr.w	sl, [sp, #16]
  405146:	e006      	b.n	405156 <_vfiprintf_r+0x77a>
  405148:	1c88      	adds	r0, r1, #2
  40514a:	f10e 0e08 	add.w	lr, lr, #8
  40514e:	4619      	mov	r1, r3
  405150:	3c10      	subs	r4, #16
  405152:	2c10      	cmp	r4, #16
  405154:	dd10      	ble.n	405178 <_vfiprintf_r+0x79c>
  405156:	1c4b      	adds	r3, r1, #1
  405158:	3210      	adds	r2, #16
  40515a:	2b07      	cmp	r3, #7
  40515c:	9211      	str	r2, [sp, #68]	; 0x44
  40515e:	e88e 0060 	stmia.w	lr, {r5, r6}
  405162:	9310      	str	r3, [sp, #64]	; 0x40
  405164:	ddf0      	ble.n	405148 <_vfiprintf_r+0x76c>
  405166:	2a00      	cmp	r2, #0
  405168:	d165      	bne.n	405236 <_vfiprintf_r+0x85a>
  40516a:	3c10      	subs	r4, #16
  40516c:	2c10      	cmp	r4, #16
  40516e:	f04f 0001 	mov.w	r0, #1
  405172:	4611      	mov	r1, r2
  405174:	46ce      	mov	lr, r9
  405176:	dcee      	bgt.n	405156 <_vfiprintf_r+0x77a>
  405178:	46f2      	mov	sl, lr
  40517a:	4422      	add	r2, r4
  40517c:	2807      	cmp	r0, #7
  40517e:	9211      	str	r2, [sp, #68]	; 0x44
  405180:	f8ca 5000 	str.w	r5, [sl]
  405184:	f8ca 4004 	str.w	r4, [sl, #4]
  405188:	9010      	str	r0, [sp, #64]	; 0x40
  40518a:	f300 8085 	bgt.w	405298 <_vfiprintf_r+0x8bc>
  40518e:	f10a 0a08 	add.w	sl, sl, #8
  405192:	3001      	adds	r0, #1
  405194:	9905      	ldr	r1, [sp, #20]
  405196:	f8ca b000 	str.w	fp, [sl]
  40519a:	440a      	add	r2, r1
  40519c:	2807      	cmp	r0, #7
  40519e:	9211      	str	r2, [sp, #68]	; 0x44
  4051a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4051a4:	9010      	str	r0, [sp, #64]	; 0x40
  4051a6:	f340 8082 	ble.w	4052ae <_vfiprintf_r+0x8d2>
  4051aa:	2a00      	cmp	r2, #0
  4051ac:	f040 8118 	bne.w	4053e0 <_vfiprintf_r+0xa04>
  4051b0:	9b02      	ldr	r3, [sp, #8]
  4051b2:	9210      	str	r2, [sp, #64]	; 0x40
  4051b4:	0758      	lsls	r0, r3, #29
  4051b6:	d535      	bpl.n	405224 <_vfiprintf_r+0x848>
  4051b8:	9b08      	ldr	r3, [sp, #32]
  4051ba:	9901      	ldr	r1, [sp, #4]
  4051bc:	1a5c      	subs	r4, r3, r1
  4051be:	2c00      	cmp	r4, #0
  4051c0:	f340 80e7 	ble.w	405392 <_vfiprintf_r+0x9b6>
  4051c4:	46ca      	mov	sl, r9
  4051c6:	2c10      	cmp	r4, #16
  4051c8:	f340 8218 	ble.w	4055fc <_vfiprintf_r+0xc20>
  4051cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051ce:	4e8f      	ldr	r6, [pc, #572]	; (40540c <_vfiprintf_r+0xa30>)
  4051d0:	9f06      	ldr	r7, [sp, #24]
  4051d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051d6:	2510      	movs	r5, #16
  4051d8:	e006      	b.n	4051e8 <_vfiprintf_r+0x80c>
  4051da:	1c88      	adds	r0, r1, #2
  4051dc:	f10a 0a08 	add.w	sl, sl, #8
  4051e0:	4619      	mov	r1, r3
  4051e2:	3c10      	subs	r4, #16
  4051e4:	2c10      	cmp	r4, #16
  4051e6:	dd11      	ble.n	40520c <_vfiprintf_r+0x830>
  4051e8:	1c4b      	adds	r3, r1, #1
  4051ea:	3210      	adds	r2, #16
  4051ec:	2b07      	cmp	r3, #7
  4051ee:	9211      	str	r2, [sp, #68]	; 0x44
  4051f0:	f8ca 6000 	str.w	r6, [sl]
  4051f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4051f8:	9310      	str	r3, [sp, #64]	; 0x40
  4051fa:	ddee      	ble.n	4051da <_vfiprintf_r+0x7fe>
  4051fc:	bb42      	cbnz	r2, 405250 <_vfiprintf_r+0x874>
  4051fe:	3c10      	subs	r4, #16
  405200:	2c10      	cmp	r4, #16
  405202:	f04f 0001 	mov.w	r0, #1
  405206:	4611      	mov	r1, r2
  405208:	46ca      	mov	sl, r9
  40520a:	dced      	bgt.n	4051e8 <_vfiprintf_r+0x80c>
  40520c:	4422      	add	r2, r4
  40520e:	2807      	cmp	r0, #7
  405210:	9211      	str	r2, [sp, #68]	; 0x44
  405212:	f8ca 6000 	str.w	r6, [sl]
  405216:	f8ca 4004 	str.w	r4, [sl, #4]
  40521a:	9010      	str	r0, [sp, #64]	; 0x40
  40521c:	dd51      	ble.n	4052c2 <_vfiprintf_r+0x8e6>
  40521e:	2a00      	cmp	r2, #0
  405220:	f040 819b 	bne.w	40555a <_vfiprintf_r+0xb7e>
  405224:	9b03      	ldr	r3, [sp, #12]
  405226:	9a08      	ldr	r2, [sp, #32]
  405228:	9901      	ldr	r1, [sp, #4]
  40522a:	428a      	cmp	r2, r1
  40522c:	bfac      	ite	ge
  40522e:	189b      	addge	r3, r3, r2
  405230:	185b      	addlt	r3, r3, r1
  405232:	9303      	str	r3, [sp, #12]
  405234:	e04e      	b.n	4052d4 <_vfiprintf_r+0x8f8>
  405236:	aa0f      	add	r2, sp, #60	; 0x3c
  405238:	4651      	mov	r1, sl
  40523a:	4638      	mov	r0, r7
  40523c:	f7ff fb8e 	bl	40495c <__sprint_r.part.0>
  405240:	2800      	cmp	r0, #0
  405242:	f040 813f 	bne.w	4054c4 <_vfiprintf_r+0xae8>
  405246:	9910      	ldr	r1, [sp, #64]	; 0x40
  405248:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40524a:	1c48      	adds	r0, r1, #1
  40524c:	46ce      	mov	lr, r9
  40524e:	e77f      	b.n	405150 <_vfiprintf_r+0x774>
  405250:	aa0f      	add	r2, sp, #60	; 0x3c
  405252:	4659      	mov	r1, fp
  405254:	4638      	mov	r0, r7
  405256:	f7ff fb81 	bl	40495c <__sprint_r.part.0>
  40525a:	b960      	cbnz	r0, 405276 <_vfiprintf_r+0x89a>
  40525c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40525e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405260:	1c48      	adds	r0, r1, #1
  405262:	46ca      	mov	sl, r9
  405264:	e7bd      	b.n	4051e2 <_vfiprintf_r+0x806>
  405266:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405268:	f8dd b010 	ldr.w	fp, [sp, #16]
  40526c:	2b00      	cmp	r3, #0
  40526e:	f040 81d4 	bne.w	40561a <_vfiprintf_r+0xc3e>
  405272:	2300      	movs	r3, #0
  405274:	9310      	str	r3, [sp, #64]	; 0x40
  405276:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40527a:	f013 0f01 	tst.w	r3, #1
  40527e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405282:	d102      	bne.n	40528a <_vfiprintf_r+0x8ae>
  405284:	059a      	lsls	r2, r3, #22
  405286:	f140 80de 	bpl.w	405446 <_vfiprintf_r+0xa6a>
  40528a:	065b      	lsls	r3, r3, #25
  40528c:	f53f acb2 	bmi.w	404bf4 <_vfiprintf_r+0x218>
  405290:	9803      	ldr	r0, [sp, #12]
  405292:	b02d      	add	sp, #180	; 0xb4
  405294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405298:	2a00      	cmp	r2, #0
  40529a:	f040 8106 	bne.w	4054aa <_vfiprintf_r+0xace>
  40529e:	9a05      	ldr	r2, [sp, #20]
  4052a0:	921d      	str	r2, [sp, #116]	; 0x74
  4052a2:	2301      	movs	r3, #1
  4052a4:	9211      	str	r2, [sp, #68]	; 0x44
  4052a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4052aa:	9310      	str	r3, [sp, #64]	; 0x40
  4052ac:	46ca      	mov	sl, r9
  4052ae:	f10a 0a08 	add.w	sl, sl, #8
  4052b2:	9b02      	ldr	r3, [sp, #8]
  4052b4:	0759      	lsls	r1, r3, #29
  4052b6:	d504      	bpl.n	4052c2 <_vfiprintf_r+0x8e6>
  4052b8:	9b08      	ldr	r3, [sp, #32]
  4052ba:	9901      	ldr	r1, [sp, #4]
  4052bc:	1a5c      	subs	r4, r3, r1
  4052be:	2c00      	cmp	r4, #0
  4052c0:	dc81      	bgt.n	4051c6 <_vfiprintf_r+0x7ea>
  4052c2:	9b03      	ldr	r3, [sp, #12]
  4052c4:	9908      	ldr	r1, [sp, #32]
  4052c6:	9801      	ldr	r0, [sp, #4]
  4052c8:	4281      	cmp	r1, r0
  4052ca:	bfac      	ite	ge
  4052cc:	185b      	addge	r3, r3, r1
  4052ce:	181b      	addlt	r3, r3, r0
  4052d0:	9303      	str	r3, [sp, #12]
  4052d2:	bb72      	cbnz	r2, 405332 <_vfiprintf_r+0x956>
  4052d4:	2300      	movs	r3, #0
  4052d6:	9310      	str	r3, [sp, #64]	; 0x40
  4052d8:	46ca      	mov	sl, r9
  4052da:	f7ff bbbc 	b.w	404a56 <_vfiprintf_r+0x7a>
  4052de:	aa0f      	add	r2, sp, #60	; 0x3c
  4052e0:	9904      	ldr	r1, [sp, #16]
  4052e2:	4620      	mov	r0, r4
  4052e4:	f7ff fb3a 	bl	40495c <__sprint_r.part.0>
  4052e8:	bb50      	cbnz	r0, 405340 <_vfiprintf_r+0x964>
  4052ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052ee:	f101 0e01 	add.w	lr, r1, #1
  4052f2:	46cc      	mov	ip, r9
  4052f4:	e548      	b.n	404d88 <_vfiprintf_r+0x3ac>
  4052f6:	2a00      	cmp	r2, #0
  4052f8:	f040 8140 	bne.w	40557c <_vfiprintf_r+0xba0>
  4052fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405300:	2900      	cmp	r1, #0
  405302:	f000 811b 	beq.w	40553c <_vfiprintf_r+0xb60>
  405306:	2201      	movs	r2, #1
  405308:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40530c:	4610      	mov	r0, r2
  40530e:	921d      	str	r2, [sp, #116]	; 0x74
  405310:	911c      	str	r1, [sp, #112]	; 0x70
  405312:	46ca      	mov	sl, r9
  405314:	4601      	mov	r1, r0
  405316:	f10a 0a08 	add.w	sl, sl, #8
  40531a:	3001      	adds	r0, #1
  40531c:	e507      	b.n	404d2e <_vfiprintf_r+0x352>
  40531e:	9b02      	ldr	r3, [sp, #8]
  405320:	2a01      	cmp	r2, #1
  405322:	f000 8098 	beq.w	405456 <_vfiprintf_r+0xa7a>
  405326:	2a02      	cmp	r2, #2
  405328:	d10d      	bne.n	405346 <_vfiprintf_r+0x96a>
  40532a:	9302      	str	r3, [sp, #8]
  40532c:	2600      	movs	r6, #0
  40532e:	2700      	movs	r7, #0
  405330:	e5b0      	b.n	404e94 <_vfiprintf_r+0x4b8>
  405332:	aa0f      	add	r2, sp, #60	; 0x3c
  405334:	9904      	ldr	r1, [sp, #16]
  405336:	9806      	ldr	r0, [sp, #24]
  405338:	f7ff fb10 	bl	40495c <__sprint_r.part.0>
  40533c:	2800      	cmp	r0, #0
  40533e:	d0c9      	beq.n	4052d4 <_vfiprintf_r+0x8f8>
  405340:	f8dd b010 	ldr.w	fp, [sp, #16]
  405344:	e797      	b.n	405276 <_vfiprintf_r+0x89a>
  405346:	9302      	str	r3, [sp, #8]
  405348:	2600      	movs	r6, #0
  40534a:	2700      	movs	r7, #0
  40534c:	4649      	mov	r1, r9
  40534e:	e000      	b.n	405352 <_vfiprintf_r+0x976>
  405350:	4659      	mov	r1, fp
  405352:	08f2      	lsrs	r2, r6, #3
  405354:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405358:	08f8      	lsrs	r0, r7, #3
  40535a:	f006 0307 	and.w	r3, r6, #7
  40535e:	4607      	mov	r7, r0
  405360:	4616      	mov	r6, r2
  405362:	3330      	adds	r3, #48	; 0x30
  405364:	ea56 0207 	orrs.w	r2, r6, r7
  405368:	f801 3c01 	strb.w	r3, [r1, #-1]
  40536c:	f101 3bff 	add.w	fp, r1, #4294967295
  405370:	d1ee      	bne.n	405350 <_vfiprintf_r+0x974>
  405372:	9a02      	ldr	r2, [sp, #8]
  405374:	07d6      	lsls	r6, r2, #31
  405376:	f57f ad9d 	bpl.w	404eb4 <_vfiprintf_r+0x4d8>
  40537a:	2b30      	cmp	r3, #48	; 0x30
  40537c:	f43f ad9a 	beq.w	404eb4 <_vfiprintf_r+0x4d8>
  405380:	3902      	subs	r1, #2
  405382:	2330      	movs	r3, #48	; 0x30
  405384:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405388:	eba9 0301 	sub.w	r3, r9, r1
  40538c:	9305      	str	r3, [sp, #20]
  40538e:	468b      	mov	fp, r1
  405390:	e476      	b.n	404c80 <_vfiprintf_r+0x2a4>
  405392:	9b03      	ldr	r3, [sp, #12]
  405394:	9a08      	ldr	r2, [sp, #32]
  405396:	428a      	cmp	r2, r1
  405398:	bfac      	ite	ge
  40539a:	189b      	addge	r3, r3, r2
  40539c:	185b      	addlt	r3, r3, r1
  40539e:	9303      	str	r3, [sp, #12]
  4053a0:	e798      	b.n	4052d4 <_vfiprintf_r+0x8f8>
  4053a2:	2202      	movs	r2, #2
  4053a4:	e44d      	b.n	404c42 <_vfiprintf_r+0x266>
  4053a6:	2f00      	cmp	r7, #0
  4053a8:	bf08      	it	eq
  4053aa:	2e0a      	cmpeq	r6, #10
  4053ac:	d352      	bcc.n	405454 <_vfiprintf_r+0xa78>
  4053ae:	46cb      	mov	fp, r9
  4053b0:	4630      	mov	r0, r6
  4053b2:	4639      	mov	r1, r7
  4053b4:	220a      	movs	r2, #10
  4053b6:	2300      	movs	r3, #0
  4053b8:	f001 fbc6 	bl	406b48 <__aeabi_uldivmod>
  4053bc:	3230      	adds	r2, #48	; 0x30
  4053be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4053c2:	4630      	mov	r0, r6
  4053c4:	4639      	mov	r1, r7
  4053c6:	2300      	movs	r3, #0
  4053c8:	220a      	movs	r2, #10
  4053ca:	f001 fbbd 	bl	406b48 <__aeabi_uldivmod>
  4053ce:	4606      	mov	r6, r0
  4053d0:	460f      	mov	r7, r1
  4053d2:	ea56 0307 	orrs.w	r3, r6, r7
  4053d6:	d1eb      	bne.n	4053b0 <_vfiprintf_r+0x9d4>
  4053d8:	e56c      	b.n	404eb4 <_vfiprintf_r+0x4d8>
  4053da:	9405      	str	r4, [sp, #20]
  4053dc:	46cb      	mov	fp, r9
  4053de:	e44f      	b.n	404c80 <_vfiprintf_r+0x2a4>
  4053e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4053e2:	9904      	ldr	r1, [sp, #16]
  4053e4:	9806      	ldr	r0, [sp, #24]
  4053e6:	f7ff fab9 	bl	40495c <__sprint_r.part.0>
  4053ea:	2800      	cmp	r0, #0
  4053ec:	d1a8      	bne.n	405340 <_vfiprintf_r+0x964>
  4053ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053f0:	46ca      	mov	sl, r9
  4053f2:	e75e      	b.n	4052b2 <_vfiprintf_r+0x8d6>
  4053f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4053f6:	9904      	ldr	r1, [sp, #16]
  4053f8:	9806      	ldr	r0, [sp, #24]
  4053fa:	f7ff faaf 	bl	40495c <__sprint_r.part.0>
  4053fe:	2800      	cmp	r0, #0
  405400:	d19e      	bne.n	405340 <_vfiprintf_r+0x964>
  405402:	46ca      	mov	sl, r9
  405404:	f7ff bbc0 	b.w	404b88 <_vfiprintf_r+0x1ac>
  405408:	00406f48 	.word	0x00406f48
  40540c:	00406f38 	.word	0x00406f38
  405410:	3104      	adds	r1, #4
  405412:	6816      	ldr	r6, [r2, #0]
  405414:	9107      	str	r1, [sp, #28]
  405416:	2201      	movs	r2, #1
  405418:	2700      	movs	r7, #0
  40541a:	e412      	b.n	404c42 <_vfiprintf_r+0x266>
  40541c:	9807      	ldr	r0, [sp, #28]
  40541e:	4601      	mov	r1, r0
  405420:	3104      	adds	r1, #4
  405422:	6806      	ldr	r6, [r0, #0]
  405424:	9107      	str	r1, [sp, #28]
  405426:	2700      	movs	r7, #0
  405428:	e40b      	b.n	404c42 <_vfiprintf_r+0x266>
  40542a:	680e      	ldr	r6, [r1, #0]
  40542c:	3104      	adds	r1, #4
  40542e:	9107      	str	r1, [sp, #28]
  405430:	2700      	movs	r7, #0
  405432:	e591      	b.n	404f58 <_vfiprintf_r+0x57c>
  405434:	9907      	ldr	r1, [sp, #28]
  405436:	680e      	ldr	r6, [r1, #0]
  405438:	460a      	mov	r2, r1
  40543a:	17f7      	asrs	r7, r6, #31
  40543c:	3204      	adds	r2, #4
  40543e:	9207      	str	r2, [sp, #28]
  405440:	4630      	mov	r0, r6
  405442:	4639      	mov	r1, r7
  405444:	e50f      	b.n	404e66 <_vfiprintf_r+0x48a>
  405446:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40544a:	f000 fe7f 	bl	40614c <__retarget_lock_release_recursive>
  40544e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405452:	e71a      	b.n	40528a <_vfiprintf_r+0x8ae>
  405454:	9b02      	ldr	r3, [sp, #8]
  405456:	9302      	str	r3, [sp, #8]
  405458:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40545c:	3630      	adds	r6, #48	; 0x30
  40545e:	2301      	movs	r3, #1
  405460:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405464:	9305      	str	r3, [sp, #20]
  405466:	e40b      	b.n	404c80 <_vfiprintf_r+0x2a4>
  405468:	aa0f      	add	r2, sp, #60	; 0x3c
  40546a:	9904      	ldr	r1, [sp, #16]
  40546c:	9806      	ldr	r0, [sp, #24]
  40546e:	f7ff fa75 	bl	40495c <__sprint_r.part.0>
  405472:	2800      	cmp	r0, #0
  405474:	f47f af64 	bne.w	405340 <_vfiprintf_r+0x964>
  405478:	9910      	ldr	r1, [sp, #64]	; 0x40
  40547a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40547c:	1c48      	adds	r0, r1, #1
  40547e:	46ca      	mov	sl, r9
  405480:	e651      	b.n	405126 <_vfiprintf_r+0x74a>
  405482:	aa0f      	add	r2, sp, #60	; 0x3c
  405484:	9904      	ldr	r1, [sp, #16]
  405486:	9806      	ldr	r0, [sp, #24]
  405488:	f7ff fa68 	bl	40495c <__sprint_r.part.0>
  40548c:	2800      	cmp	r0, #0
  40548e:	f47f af57 	bne.w	405340 <_vfiprintf_r+0x964>
  405492:	9910      	ldr	r1, [sp, #64]	; 0x40
  405494:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405496:	1c48      	adds	r0, r1, #1
  405498:	46ca      	mov	sl, r9
  40549a:	e448      	b.n	404d2e <_vfiprintf_r+0x352>
  40549c:	2a00      	cmp	r2, #0
  40549e:	f040 8091 	bne.w	4055c4 <_vfiprintf_r+0xbe8>
  4054a2:	2001      	movs	r0, #1
  4054a4:	4611      	mov	r1, r2
  4054a6:	46ca      	mov	sl, r9
  4054a8:	e641      	b.n	40512e <_vfiprintf_r+0x752>
  4054aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4054ac:	9904      	ldr	r1, [sp, #16]
  4054ae:	9806      	ldr	r0, [sp, #24]
  4054b0:	f7ff fa54 	bl	40495c <__sprint_r.part.0>
  4054b4:	2800      	cmp	r0, #0
  4054b6:	f47f af43 	bne.w	405340 <_vfiprintf_r+0x964>
  4054ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4054bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054be:	3001      	adds	r0, #1
  4054c0:	46ca      	mov	sl, r9
  4054c2:	e667      	b.n	405194 <_vfiprintf_r+0x7b8>
  4054c4:	46d3      	mov	fp, sl
  4054c6:	e6d6      	b.n	405276 <_vfiprintf_r+0x89a>
  4054c8:	9e07      	ldr	r6, [sp, #28]
  4054ca:	3607      	adds	r6, #7
  4054cc:	f026 0207 	bic.w	r2, r6, #7
  4054d0:	f102 0108 	add.w	r1, r2, #8
  4054d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4054d8:	9107      	str	r1, [sp, #28]
  4054da:	2201      	movs	r2, #1
  4054dc:	f7ff bbb1 	b.w	404c42 <_vfiprintf_r+0x266>
  4054e0:	9e07      	ldr	r6, [sp, #28]
  4054e2:	3607      	adds	r6, #7
  4054e4:	f026 0607 	bic.w	r6, r6, #7
  4054e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4054ec:	f106 0208 	add.w	r2, r6, #8
  4054f0:	9207      	str	r2, [sp, #28]
  4054f2:	4606      	mov	r6, r0
  4054f4:	460f      	mov	r7, r1
  4054f6:	e4b6      	b.n	404e66 <_vfiprintf_r+0x48a>
  4054f8:	9e07      	ldr	r6, [sp, #28]
  4054fa:	3607      	adds	r6, #7
  4054fc:	f026 0207 	bic.w	r2, r6, #7
  405500:	f102 0108 	add.w	r1, r2, #8
  405504:	e9d2 6700 	ldrd	r6, r7, [r2]
  405508:	9107      	str	r1, [sp, #28]
  40550a:	2200      	movs	r2, #0
  40550c:	f7ff bb99 	b.w	404c42 <_vfiprintf_r+0x266>
  405510:	9e07      	ldr	r6, [sp, #28]
  405512:	3607      	adds	r6, #7
  405514:	f026 0107 	bic.w	r1, r6, #7
  405518:	f101 0008 	add.w	r0, r1, #8
  40551c:	9007      	str	r0, [sp, #28]
  40551e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405522:	e519      	b.n	404f58 <_vfiprintf_r+0x57c>
  405524:	46cb      	mov	fp, r9
  405526:	f7ff bbab 	b.w	404c80 <_vfiprintf_r+0x2a4>
  40552a:	252d      	movs	r5, #45	; 0x2d
  40552c:	4276      	negs	r6, r6
  40552e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405532:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405536:	2201      	movs	r2, #1
  405538:	f7ff bb88 	b.w	404c4c <_vfiprintf_r+0x270>
  40553c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40553e:	b9b3      	cbnz	r3, 40556e <_vfiprintf_r+0xb92>
  405540:	4611      	mov	r1, r2
  405542:	2001      	movs	r0, #1
  405544:	46ca      	mov	sl, r9
  405546:	e5f2      	b.n	40512e <_vfiprintf_r+0x752>
  405548:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40554c:	f000 fdfe 	bl	40614c <__retarget_lock_release_recursive>
  405550:	f04f 33ff 	mov.w	r3, #4294967295
  405554:	9303      	str	r3, [sp, #12]
  405556:	f7ff bb50 	b.w	404bfa <_vfiprintf_r+0x21e>
  40555a:	aa0f      	add	r2, sp, #60	; 0x3c
  40555c:	9904      	ldr	r1, [sp, #16]
  40555e:	9806      	ldr	r0, [sp, #24]
  405560:	f7ff f9fc 	bl	40495c <__sprint_r.part.0>
  405564:	2800      	cmp	r0, #0
  405566:	f47f aeeb 	bne.w	405340 <_vfiprintf_r+0x964>
  40556a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40556c:	e6a9      	b.n	4052c2 <_vfiprintf_r+0x8e6>
  40556e:	ab0e      	add	r3, sp, #56	; 0x38
  405570:	2202      	movs	r2, #2
  405572:	931c      	str	r3, [sp, #112]	; 0x70
  405574:	921d      	str	r2, [sp, #116]	; 0x74
  405576:	2001      	movs	r0, #1
  405578:	46ca      	mov	sl, r9
  40557a:	e5d0      	b.n	40511e <_vfiprintf_r+0x742>
  40557c:	aa0f      	add	r2, sp, #60	; 0x3c
  40557e:	9904      	ldr	r1, [sp, #16]
  405580:	9806      	ldr	r0, [sp, #24]
  405582:	f7ff f9eb 	bl	40495c <__sprint_r.part.0>
  405586:	2800      	cmp	r0, #0
  405588:	f47f aeda 	bne.w	405340 <_vfiprintf_r+0x964>
  40558c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40558e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405590:	1c48      	adds	r0, r1, #1
  405592:	46ca      	mov	sl, r9
  405594:	e5a4      	b.n	4050e0 <_vfiprintf_r+0x704>
  405596:	9a07      	ldr	r2, [sp, #28]
  405598:	9903      	ldr	r1, [sp, #12]
  40559a:	6813      	ldr	r3, [r2, #0]
  40559c:	17cd      	asrs	r5, r1, #31
  40559e:	4608      	mov	r0, r1
  4055a0:	3204      	adds	r2, #4
  4055a2:	4629      	mov	r1, r5
  4055a4:	9207      	str	r2, [sp, #28]
  4055a6:	e9c3 0100 	strd	r0, r1, [r3]
  4055aa:	f7ff ba54 	b.w	404a56 <_vfiprintf_r+0x7a>
  4055ae:	4658      	mov	r0, fp
  4055b0:	9607      	str	r6, [sp, #28]
  4055b2:	9302      	str	r3, [sp, #8]
  4055b4:	f7ff f964 	bl	404880 <strlen>
  4055b8:	2400      	movs	r4, #0
  4055ba:	9005      	str	r0, [sp, #20]
  4055bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4055c0:	f7ff bb5e 	b.w	404c80 <_vfiprintf_r+0x2a4>
  4055c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4055c6:	9904      	ldr	r1, [sp, #16]
  4055c8:	9806      	ldr	r0, [sp, #24]
  4055ca:	f7ff f9c7 	bl	40495c <__sprint_r.part.0>
  4055ce:	2800      	cmp	r0, #0
  4055d0:	f47f aeb6 	bne.w	405340 <_vfiprintf_r+0x964>
  4055d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4055d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055d8:	1c48      	adds	r0, r1, #1
  4055da:	46ca      	mov	sl, r9
  4055dc:	e5a7      	b.n	40512e <_vfiprintf_r+0x752>
  4055de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4055e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055e2:	4e20      	ldr	r6, [pc, #128]	; (405664 <_vfiprintf_r+0xc88>)
  4055e4:	3101      	adds	r1, #1
  4055e6:	f7ff bb90 	b.w	404d0a <_vfiprintf_r+0x32e>
  4055ea:	2c06      	cmp	r4, #6
  4055ec:	bf28      	it	cs
  4055ee:	2406      	movcs	r4, #6
  4055f0:	9405      	str	r4, [sp, #20]
  4055f2:	9607      	str	r6, [sp, #28]
  4055f4:	9401      	str	r4, [sp, #4]
  4055f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405668 <_vfiprintf_r+0xc8c>
  4055fa:	e4d5      	b.n	404fa8 <_vfiprintf_r+0x5cc>
  4055fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4055fe:	4e19      	ldr	r6, [pc, #100]	; (405664 <_vfiprintf_r+0xc88>)
  405600:	3001      	adds	r0, #1
  405602:	e603      	b.n	40520c <_vfiprintf_r+0x830>
  405604:	9405      	str	r4, [sp, #20]
  405606:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40560a:	9607      	str	r6, [sp, #28]
  40560c:	9302      	str	r3, [sp, #8]
  40560e:	4604      	mov	r4, r0
  405610:	f7ff bb36 	b.w	404c80 <_vfiprintf_r+0x2a4>
  405614:	4686      	mov	lr, r0
  405616:	f7ff bbce 	b.w	404db6 <_vfiprintf_r+0x3da>
  40561a:	9806      	ldr	r0, [sp, #24]
  40561c:	aa0f      	add	r2, sp, #60	; 0x3c
  40561e:	4659      	mov	r1, fp
  405620:	f7ff f99c 	bl	40495c <__sprint_r.part.0>
  405624:	2800      	cmp	r0, #0
  405626:	f43f ae24 	beq.w	405272 <_vfiprintf_r+0x896>
  40562a:	e624      	b.n	405276 <_vfiprintf_r+0x89a>
  40562c:	9907      	ldr	r1, [sp, #28]
  40562e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405632:	680c      	ldr	r4, [r1, #0]
  405634:	3104      	adds	r1, #4
  405636:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40563a:	46b8      	mov	r8, r7
  40563c:	9107      	str	r1, [sp, #28]
  40563e:	f7ff ba3f 	b.w	404ac0 <_vfiprintf_r+0xe4>
  405642:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405646:	e43c      	b.n	404ec2 <_vfiprintf_r+0x4e6>
  405648:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40564c:	e521      	b.n	405092 <_vfiprintf_r+0x6b6>
  40564e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405652:	f7ff bbf4 	b.w	404e3e <_vfiprintf_r+0x462>
  405656:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40565a:	e491      	b.n	404f80 <_vfiprintf_r+0x5a4>
  40565c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405660:	e469      	b.n	404f36 <_vfiprintf_r+0x55a>
  405662:	bf00      	nop
  405664:	00406f38 	.word	0x00406f38
  405668:	00406f30 	.word	0x00406f30

0040566c <__sbprintf>:
  40566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405670:	460c      	mov	r4, r1
  405672:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405676:	8989      	ldrh	r1, [r1, #12]
  405678:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40567a:	89e5      	ldrh	r5, [r4, #14]
  40567c:	9619      	str	r6, [sp, #100]	; 0x64
  40567e:	f021 0102 	bic.w	r1, r1, #2
  405682:	4606      	mov	r6, r0
  405684:	69e0      	ldr	r0, [r4, #28]
  405686:	f8ad 100c 	strh.w	r1, [sp, #12]
  40568a:	4617      	mov	r7, r2
  40568c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405690:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405692:	f8ad 500e 	strh.w	r5, [sp, #14]
  405696:	4698      	mov	r8, r3
  405698:	ad1a      	add	r5, sp, #104	; 0x68
  40569a:	2300      	movs	r3, #0
  40569c:	9007      	str	r0, [sp, #28]
  40569e:	a816      	add	r0, sp, #88	; 0x58
  4056a0:	9209      	str	r2, [sp, #36]	; 0x24
  4056a2:	9306      	str	r3, [sp, #24]
  4056a4:	9500      	str	r5, [sp, #0]
  4056a6:	9504      	str	r5, [sp, #16]
  4056a8:	9102      	str	r1, [sp, #8]
  4056aa:	9105      	str	r1, [sp, #20]
  4056ac:	f000 fd48 	bl	406140 <__retarget_lock_init_recursive>
  4056b0:	4643      	mov	r3, r8
  4056b2:	463a      	mov	r2, r7
  4056b4:	4669      	mov	r1, sp
  4056b6:	4630      	mov	r0, r6
  4056b8:	f7ff f990 	bl	4049dc <_vfiprintf_r>
  4056bc:	1e05      	subs	r5, r0, #0
  4056be:	db07      	blt.n	4056d0 <__sbprintf+0x64>
  4056c0:	4630      	mov	r0, r6
  4056c2:	4669      	mov	r1, sp
  4056c4:	f000 f928 	bl	405918 <_fflush_r>
  4056c8:	2800      	cmp	r0, #0
  4056ca:	bf18      	it	ne
  4056cc:	f04f 35ff 	movne.w	r5, #4294967295
  4056d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4056d4:	065b      	lsls	r3, r3, #25
  4056d6:	d503      	bpl.n	4056e0 <__sbprintf+0x74>
  4056d8:	89a3      	ldrh	r3, [r4, #12]
  4056da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056de:	81a3      	strh	r3, [r4, #12]
  4056e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4056e2:	f000 fd2f 	bl	406144 <__retarget_lock_close_recursive>
  4056e6:	4628      	mov	r0, r5
  4056e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004056f0 <__swsetup_r>:
  4056f0:	b538      	push	{r3, r4, r5, lr}
  4056f2:	4b30      	ldr	r3, [pc, #192]	; (4057b4 <__swsetup_r+0xc4>)
  4056f4:	681b      	ldr	r3, [r3, #0]
  4056f6:	4605      	mov	r5, r0
  4056f8:	460c      	mov	r4, r1
  4056fa:	b113      	cbz	r3, 405702 <__swsetup_r+0x12>
  4056fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4056fe:	2a00      	cmp	r2, #0
  405700:	d038      	beq.n	405774 <__swsetup_r+0x84>
  405702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405706:	b293      	uxth	r3, r2
  405708:	0718      	lsls	r0, r3, #28
  40570a:	d50c      	bpl.n	405726 <__swsetup_r+0x36>
  40570c:	6920      	ldr	r0, [r4, #16]
  40570e:	b1a8      	cbz	r0, 40573c <__swsetup_r+0x4c>
  405710:	f013 0201 	ands.w	r2, r3, #1
  405714:	d01e      	beq.n	405754 <__swsetup_r+0x64>
  405716:	6963      	ldr	r3, [r4, #20]
  405718:	2200      	movs	r2, #0
  40571a:	425b      	negs	r3, r3
  40571c:	61a3      	str	r3, [r4, #24]
  40571e:	60a2      	str	r2, [r4, #8]
  405720:	b1f0      	cbz	r0, 405760 <__swsetup_r+0x70>
  405722:	2000      	movs	r0, #0
  405724:	bd38      	pop	{r3, r4, r5, pc}
  405726:	06d9      	lsls	r1, r3, #27
  405728:	d53c      	bpl.n	4057a4 <__swsetup_r+0xb4>
  40572a:	0758      	lsls	r0, r3, #29
  40572c:	d426      	bmi.n	40577c <__swsetup_r+0x8c>
  40572e:	6920      	ldr	r0, [r4, #16]
  405730:	f042 0308 	orr.w	r3, r2, #8
  405734:	81a3      	strh	r3, [r4, #12]
  405736:	b29b      	uxth	r3, r3
  405738:	2800      	cmp	r0, #0
  40573a:	d1e9      	bne.n	405710 <__swsetup_r+0x20>
  40573c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405740:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405744:	d0e4      	beq.n	405710 <__swsetup_r+0x20>
  405746:	4628      	mov	r0, r5
  405748:	4621      	mov	r1, r4
  40574a:	f000 fd2f 	bl	4061ac <__smakebuf_r>
  40574e:	89a3      	ldrh	r3, [r4, #12]
  405750:	6920      	ldr	r0, [r4, #16]
  405752:	e7dd      	b.n	405710 <__swsetup_r+0x20>
  405754:	0799      	lsls	r1, r3, #30
  405756:	bf58      	it	pl
  405758:	6962      	ldrpl	r2, [r4, #20]
  40575a:	60a2      	str	r2, [r4, #8]
  40575c:	2800      	cmp	r0, #0
  40575e:	d1e0      	bne.n	405722 <__swsetup_r+0x32>
  405760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405764:	061a      	lsls	r2, r3, #24
  405766:	d5dd      	bpl.n	405724 <__swsetup_r+0x34>
  405768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40576c:	81a3      	strh	r3, [r4, #12]
  40576e:	f04f 30ff 	mov.w	r0, #4294967295
  405772:	bd38      	pop	{r3, r4, r5, pc}
  405774:	4618      	mov	r0, r3
  405776:	f000 f927 	bl	4059c8 <__sinit>
  40577a:	e7c2      	b.n	405702 <__swsetup_r+0x12>
  40577c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40577e:	b151      	cbz	r1, 405796 <__swsetup_r+0xa6>
  405780:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405784:	4299      	cmp	r1, r3
  405786:	d004      	beq.n	405792 <__swsetup_r+0xa2>
  405788:	4628      	mov	r0, r5
  40578a:	f000 fa43 	bl	405c14 <_free_r>
  40578e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405792:	2300      	movs	r3, #0
  405794:	6323      	str	r3, [r4, #48]	; 0x30
  405796:	2300      	movs	r3, #0
  405798:	6920      	ldr	r0, [r4, #16]
  40579a:	6063      	str	r3, [r4, #4]
  40579c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4057a0:	6020      	str	r0, [r4, #0]
  4057a2:	e7c5      	b.n	405730 <__swsetup_r+0x40>
  4057a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4057a8:	2309      	movs	r3, #9
  4057aa:	602b      	str	r3, [r5, #0]
  4057ac:	f04f 30ff 	mov.w	r0, #4294967295
  4057b0:	81a2      	strh	r2, [r4, #12]
  4057b2:	bd38      	pop	{r3, r4, r5, pc}
  4057b4:	20400014 	.word	0x20400014

004057b8 <register_fini>:
  4057b8:	4b02      	ldr	r3, [pc, #8]	; (4057c4 <register_fini+0xc>)
  4057ba:	b113      	cbz	r3, 4057c2 <register_fini+0xa>
  4057bc:	4802      	ldr	r0, [pc, #8]	; (4057c8 <register_fini+0x10>)
  4057be:	f000 b805 	b.w	4057cc <atexit>
  4057c2:	4770      	bx	lr
  4057c4:	00000000 	.word	0x00000000
  4057c8:	00405a39 	.word	0x00405a39

004057cc <atexit>:
  4057cc:	2300      	movs	r3, #0
  4057ce:	4601      	mov	r1, r0
  4057d0:	461a      	mov	r2, r3
  4057d2:	4618      	mov	r0, r3
  4057d4:	f001 b890 	b.w	4068f8 <__register_exitproc>

004057d8 <__sflush_r>:
  4057d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4057dc:	b29a      	uxth	r2, r3
  4057de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057e2:	460d      	mov	r5, r1
  4057e4:	0711      	lsls	r1, r2, #28
  4057e6:	4680      	mov	r8, r0
  4057e8:	d43a      	bmi.n	405860 <__sflush_r+0x88>
  4057ea:	686a      	ldr	r2, [r5, #4]
  4057ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4057f0:	2a00      	cmp	r2, #0
  4057f2:	81ab      	strh	r3, [r5, #12]
  4057f4:	dd6f      	ble.n	4058d6 <__sflush_r+0xfe>
  4057f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4057f8:	2c00      	cmp	r4, #0
  4057fa:	d049      	beq.n	405890 <__sflush_r+0xb8>
  4057fc:	2200      	movs	r2, #0
  4057fe:	b29b      	uxth	r3, r3
  405800:	f8d8 6000 	ldr.w	r6, [r8]
  405804:	f8c8 2000 	str.w	r2, [r8]
  405808:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40580c:	d067      	beq.n	4058de <__sflush_r+0x106>
  40580e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405810:	075f      	lsls	r7, r3, #29
  405812:	d505      	bpl.n	405820 <__sflush_r+0x48>
  405814:	6869      	ldr	r1, [r5, #4]
  405816:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405818:	1a52      	subs	r2, r2, r1
  40581a:	b10b      	cbz	r3, 405820 <__sflush_r+0x48>
  40581c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40581e:	1ad2      	subs	r2, r2, r3
  405820:	2300      	movs	r3, #0
  405822:	69e9      	ldr	r1, [r5, #28]
  405824:	4640      	mov	r0, r8
  405826:	47a0      	blx	r4
  405828:	1c44      	adds	r4, r0, #1
  40582a:	d03c      	beq.n	4058a6 <__sflush_r+0xce>
  40582c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405830:	692a      	ldr	r2, [r5, #16]
  405832:	602a      	str	r2, [r5, #0]
  405834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405838:	2200      	movs	r2, #0
  40583a:	81ab      	strh	r3, [r5, #12]
  40583c:	04db      	lsls	r3, r3, #19
  40583e:	606a      	str	r2, [r5, #4]
  405840:	d447      	bmi.n	4058d2 <__sflush_r+0xfa>
  405842:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405844:	f8c8 6000 	str.w	r6, [r8]
  405848:	b311      	cbz	r1, 405890 <__sflush_r+0xb8>
  40584a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40584e:	4299      	cmp	r1, r3
  405850:	d002      	beq.n	405858 <__sflush_r+0x80>
  405852:	4640      	mov	r0, r8
  405854:	f000 f9de 	bl	405c14 <_free_r>
  405858:	2000      	movs	r0, #0
  40585a:	6328      	str	r0, [r5, #48]	; 0x30
  40585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405860:	692e      	ldr	r6, [r5, #16]
  405862:	b1ae      	cbz	r6, 405890 <__sflush_r+0xb8>
  405864:	682c      	ldr	r4, [r5, #0]
  405866:	602e      	str	r6, [r5, #0]
  405868:	0791      	lsls	r1, r2, #30
  40586a:	bf0c      	ite	eq
  40586c:	696b      	ldreq	r3, [r5, #20]
  40586e:	2300      	movne	r3, #0
  405870:	1ba4      	subs	r4, r4, r6
  405872:	60ab      	str	r3, [r5, #8]
  405874:	e00a      	b.n	40588c <__sflush_r+0xb4>
  405876:	4623      	mov	r3, r4
  405878:	4632      	mov	r2, r6
  40587a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40587c:	69e9      	ldr	r1, [r5, #28]
  40587e:	4640      	mov	r0, r8
  405880:	47b8      	blx	r7
  405882:	2800      	cmp	r0, #0
  405884:	eba4 0400 	sub.w	r4, r4, r0
  405888:	4406      	add	r6, r0
  40588a:	dd04      	ble.n	405896 <__sflush_r+0xbe>
  40588c:	2c00      	cmp	r4, #0
  40588e:	dcf2      	bgt.n	405876 <__sflush_r+0x9e>
  405890:	2000      	movs	r0, #0
  405892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405896:	89ab      	ldrh	r3, [r5, #12]
  405898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40589c:	81ab      	strh	r3, [r5, #12]
  40589e:	f04f 30ff 	mov.w	r0, #4294967295
  4058a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058a6:	f8d8 4000 	ldr.w	r4, [r8]
  4058aa:	2c1d      	cmp	r4, #29
  4058ac:	d8f3      	bhi.n	405896 <__sflush_r+0xbe>
  4058ae:	4b19      	ldr	r3, [pc, #100]	; (405914 <__sflush_r+0x13c>)
  4058b0:	40e3      	lsrs	r3, r4
  4058b2:	43db      	mvns	r3, r3
  4058b4:	f013 0301 	ands.w	r3, r3, #1
  4058b8:	d1ed      	bne.n	405896 <__sflush_r+0xbe>
  4058ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4058be:	606b      	str	r3, [r5, #4]
  4058c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4058c4:	6929      	ldr	r1, [r5, #16]
  4058c6:	81ab      	strh	r3, [r5, #12]
  4058c8:	04da      	lsls	r2, r3, #19
  4058ca:	6029      	str	r1, [r5, #0]
  4058cc:	d5b9      	bpl.n	405842 <__sflush_r+0x6a>
  4058ce:	2c00      	cmp	r4, #0
  4058d0:	d1b7      	bne.n	405842 <__sflush_r+0x6a>
  4058d2:	6528      	str	r0, [r5, #80]	; 0x50
  4058d4:	e7b5      	b.n	405842 <__sflush_r+0x6a>
  4058d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4058d8:	2a00      	cmp	r2, #0
  4058da:	dc8c      	bgt.n	4057f6 <__sflush_r+0x1e>
  4058dc:	e7d8      	b.n	405890 <__sflush_r+0xb8>
  4058de:	2301      	movs	r3, #1
  4058e0:	69e9      	ldr	r1, [r5, #28]
  4058e2:	4640      	mov	r0, r8
  4058e4:	47a0      	blx	r4
  4058e6:	1c43      	adds	r3, r0, #1
  4058e8:	4602      	mov	r2, r0
  4058ea:	d002      	beq.n	4058f2 <__sflush_r+0x11a>
  4058ec:	89ab      	ldrh	r3, [r5, #12]
  4058ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4058f0:	e78e      	b.n	405810 <__sflush_r+0x38>
  4058f2:	f8d8 3000 	ldr.w	r3, [r8]
  4058f6:	2b00      	cmp	r3, #0
  4058f8:	d0f8      	beq.n	4058ec <__sflush_r+0x114>
  4058fa:	2b1d      	cmp	r3, #29
  4058fc:	d001      	beq.n	405902 <__sflush_r+0x12a>
  4058fe:	2b16      	cmp	r3, #22
  405900:	d102      	bne.n	405908 <__sflush_r+0x130>
  405902:	f8c8 6000 	str.w	r6, [r8]
  405906:	e7c3      	b.n	405890 <__sflush_r+0xb8>
  405908:	89ab      	ldrh	r3, [r5, #12]
  40590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40590e:	81ab      	strh	r3, [r5, #12]
  405910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405914:	20400001 	.word	0x20400001

00405918 <_fflush_r>:
  405918:	b538      	push	{r3, r4, r5, lr}
  40591a:	460d      	mov	r5, r1
  40591c:	4604      	mov	r4, r0
  40591e:	b108      	cbz	r0, 405924 <_fflush_r+0xc>
  405920:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405922:	b1bb      	cbz	r3, 405954 <_fflush_r+0x3c>
  405924:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405928:	b188      	cbz	r0, 40594e <_fflush_r+0x36>
  40592a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40592c:	07db      	lsls	r3, r3, #31
  40592e:	d401      	bmi.n	405934 <_fflush_r+0x1c>
  405930:	0581      	lsls	r1, r0, #22
  405932:	d517      	bpl.n	405964 <_fflush_r+0x4c>
  405934:	4620      	mov	r0, r4
  405936:	4629      	mov	r1, r5
  405938:	f7ff ff4e 	bl	4057d8 <__sflush_r>
  40593c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40593e:	07da      	lsls	r2, r3, #31
  405940:	4604      	mov	r4, r0
  405942:	d402      	bmi.n	40594a <_fflush_r+0x32>
  405944:	89ab      	ldrh	r3, [r5, #12]
  405946:	059b      	lsls	r3, r3, #22
  405948:	d507      	bpl.n	40595a <_fflush_r+0x42>
  40594a:	4620      	mov	r0, r4
  40594c:	bd38      	pop	{r3, r4, r5, pc}
  40594e:	4604      	mov	r4, r0
  405950:	4620      	mov	r0, r4
  405952:	bd38      	pop	{r3, r4, r5, pc}
  405954:	f000 f838 	bl	4059c8 <__sinit>
  405958:	e7e4      	b.n	405924 <_fflush_r+0xc>
  40595a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40595c:	f000 fbf6 	bl	40614c <__retarget_lock_release_recursive>
  405960:	4620      	mov	r0, r4
  405962:	bd38      	pop	{r3, r4, r5, pc}
  405964:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405966:	f000 fbef 	bl	406148 <__retarget_lock_acquire_recursive>
  40596a:	e7e3      	b.n	405934 <_fflush_r+0x1c>

0040596c <_cleanup_r>:
  40596c:	4901      	ldr	r1, [pc, #4]	; (405974 <_cleanup_r+0x8>)
  40596e:	f000 bbaf 	b.w	4060d0 <_fwalk_reent>
  405972:	bf00      	nop
  405974:	004069e1 	.word	0x004069e1

00405978 <std.isra.0>:
  405978:	b510      	push	{r4, lr}
  40597a:	2300      	movs	r3, #0
  40597c:	4604      	mov	r4, r0
  40597e:	8181      	strh	r1, [r0, #12]
  405980:	81c2      	strh	r2, [r0, #14]
  405982:	6003      	str	r3, [r0, #0]
  405984:	6043      	str	r3, [r0, #4]
  405986:	6083      	str	r3, [r0, #8]
  405988:	6643      	str	r3, [r0, #100]	; 0x64
  40598a:	6103      	str	r3, [r0, #16]
  40598c:	6143      	str	r3, [r0, #20]
  40598e:	6183      	str	r3, [r0, #24]
  405990:	4619      	mov	r1, r3
  405992:	2208      	movs	r2, #8
  405994:	305c      	adds	r0, #92	; 0x5c
  405996:	f7fe fe21 	bl	4045dc <memset>
  40599a:	4807      	ldr	r0, [pc, #28]	; (4059b8 <std.isra.0+0x40>)
  40599c:	4907      	ldr	r1, [pc, #28]	; (4059bc <std.isra.0+0x44>)
  40599e:	4a08      	ldr	r2, [pc, #32]	; (4059c0 <std.isra.0+0x48>)
  4059a0:	4b08      	ldr	r3, [pc, #32]	; (4059c4 <std.isra.0+0x4c>)
  4059a2:	6220      	str	r0, [r4, #32]
  4059a4:	61e4      	str	r4, [r4, #28]
  4059a6:	6261      	str	r1, [r4, #36]	; 0x24
  4059a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4059aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4059ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4059b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4059b4:	f000 bbc4 	b.w	406140 <__retarget_lock_init_recursive>
  4059b8:	00406725 	.word	0x00406725
  4059bc:	00406749 	.word	0x00406749
  4059c0:	00406785 	.word	0x00406785
  4059c4:	004067a5 	.word	0x004067a5

004059c8 <__sinit>:
  4059c8:	b510      	push	{r4, lr}
  4059ca:	4604      	mov	r4, r0
  4059cc:	4812      	ldr	r0, [pc, #72]	; (405a18 <__sinit+0x50>)
  4059ce:	f000 fbbb 	bl	406148 <__retarget_lock_acquire_recursive>
  4059d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4059d4:	b9d2      	cbnz	r2, 405a0c <__sinit+0x44>
  4059d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4059da:	4810      	ldr	r0, [pc, #64]	; (405a1c <__sinit+0x54>)
  4059dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4059e0:	2103      	movs	r1, #3
  4059e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4059e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4059e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4059ec:	6860      	ldr	r0, [r4, #4]
  4059ee:	2104      	movs	r1, #4
  4059f0:	f7ff ffc2 	bl	405978 <std.isra.0>
  4059f4:	2201      	movs	r2, #1
  4059f6:	2109      	movs	r1, #9
  4059f8:	68a0      	ldr	r0, [r4, #8]
  4059fa:	f7ff ffbd 	bl	405978 <std.isra.0>
  4059fe:	2202      	movs	r2, #2
  405a00:	2112      	movs	r1, #18
  405a02:	68e0      	ldr	r0, [r4, #12]
  405a04:	f7ff ffb8 	bl	405978 <std.isra.0>
  405a08:	2301      	movs	r3, #1
  405a0a:	63a3      	str	r3, [r4, #56]	; 0x38
  405a0c:	4802      	ldr	r0, [pc, #8]	; (405a18 <__sinit+0x50>)
  405a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405a12:	f000 bb9b 	b.w	40614c <__retarget_lock_release_recursive>
  405a16:	bf00      	nop
  405a18:	20400cd8 	.word	0x20400cd8
  405a1c:	0040596d 	.word	0x0040596d

00405a20 <__sfp_lock_acquire>:
  405a20:	4801      	ldr	r0, [pc, #4]	; (405a28 <__sfp_lock_acquire+0x8>)
  405a22:	f000 bb91 	b.w	406148 <__retarget_lock_acquire_recursive>
  405a26:	bf00      	nop
  405a28:	20400cec 	.word	0x20400cec

00405a2c <__sfp_lock_release>:
  405a2c:	4801      	ldr	r0, [pc, #4]	; (405a34 <__sfp_lock_release+0x8>)
  405a2e:	f000 bb8d 	b.w	40614c <__retarget_lock_release_recursive>
  405a32:	bf00      	nop
  405a34:	20400cec 	.word	0x20400cec

00405a38 <__libc_fini_array>:
  405a38:	b538      	push	{r3, r4, r5, lr}
  405a3a:	4c0a      	ldr	r4, [pc, #40]	; (405a64 <__libc_fini_array+0x2c>)
  405a3c:	4d0a      	ldr	r5, [pc, #40]	; (405a68 <__libc_fini_array+0x30>)
  405a3e:	1b64      	subs	r4, r4, r5
  405a40:	10a4      	asrs	r4, r4, #2
  405a42:	d00a      	beq.n	405a5a <__libc_fini_array+0x22>
  405a44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405a48:	3b01      	subs	r3, #1
  405a4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405a4e:	3c01      	subs	r4, #1
  405a50:	f855 3904 	ldr.w	r3, [r5], #-4
  405a54:	4798      	blx	r3
  405a56:	2c00      	cmp	r4, #0
  405a58:	d1f9      	bne.n	405a4e <__libc_fini_array+0x16>
  405a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a5e:	f001 bb0f 	b.w	407080 <_fini>
  405a62:	bf00      	nop
  405a64:	00407090 	.word	0x00407090
  405a68:	0040708c 	.word	0x0040708c

00405a6c <__fputwc>:
  405a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a70:	b082      	sub	sp, #8
  405a72:	4680      	mov	r8, r0
  405a74:	4689      	mov	r9, r1
  405a76:	4614      	mov	r4, r2
  405a78:	f000 fb54 	bl	406124 <__locale_mb_cur_max>
  405a7c:	2801      	cmp	r0, #1
  405a7e:	d036      	beq.n	405aee <__fputwc+0x82>
  405a80:	464a      	mov	r2, r9
  405a82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a86:	a901      	add	r1, sp, #4
  405a88:	4640      	mov	r0, r8
  405a8a:	f000 fee7 	bl	40685c <_wcrtomb_r>
  405a8e:	1c42      	adds	r2, r0, #1
  405a90:	4606      	mov	r6, r0
  405a92:	d025      	beq.n	405ae0 <__fputwc+0x74>
  405a94:	b3a8      	cbz	r0, 405b02 <__fputwc+0x96>
  405a96:	f89d e004 	ldrb.w	lr, [sp, #4]
  405a9a:	2500      	movs	r5, #0
  405a9c:	f10d 0a04 	add.w	sl, sp, #4
  405aa0:	e009      	b.n	405ab6 <__fputwc+0x4a>
  405aa2:	6823      	ldr	r3, [r4, #0]
  405aa4:	1c5a      	adds	r2, r3, #1
  405aa6:	6022      	str	r2, [r4, #0]
  405aa8:	f883 e000 	strb.w	lr, [r3]
  405aac:	3501      	adds	r5, #1
  405aae:	42b5      	cmp	r5, r6
  405ab0:	d227      	bcs.n	405b02 <__fputwc+0x96>
  405ab2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405ab6:	68a3      	ldr	r3, [r4, #8]
  405ab8:	3b01      	subs	r3, #1
  405aba:	2b00      	cmp	r3, #0
  405abc:	60a3      	str	r3, [r4, #8]
  405abe:	daf0      	bge.n	405aa2 <__fputwc+0x36>
  405ac0:	69a7      	ldr	r7, [r4, #24]
  405ac2:	42bb      	cmp	r3, r7
  405ac4:	4671      	mov	r1, lr
  405ac6:	4622      	mov	r2, r4
  405ac8:	4640      	mov	r0, r8
  405aca:	db02      	blt.n	405ad2 <__fputwc+0x66>
  405acc:	f1be 0f0a 	cmp.w	lr, #10
  405ad0:	d1e7      	bne.n	405aa2 <__fputwc+0x36>
  405ad2:	f000 fe6b 	bl	4067ac <__swbuf_r>
  405ad6:	1c43      	adds	r3, r0, #1
  405ad8:	d1e8      	bne.n	405aac <__fputwc+0x40>
  405ada:	b002      	add	sp, #8
  405adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405ae0:	89a3      	ldrh	r3, [r4, #12]
  405ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ae6:	81a3      	strh	r3, [r4, #12]
  405ae8:	b002      	add	sp, #8
  405aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aee:	f109 33ff 	add.w	r3, r9, #4294967295
  405af2:	2bfe      	cmp	r3, #254	; 0xfe
  405af4:	d8c4      	bhi.n	405a80 <__fputwc+0x14>
  405af6:	fa5f fe89 	uxtb.w	lr, r9
  405afa:	4606      	mov	r6, r0
  405afc:	f88d e004 	strb.w	lr, [sp, #4]
  405b00:	e7cb      	b.n	405a9a <__fputwc+0x2e>
  405b02:	4648      	mov	r0, r9
  405b04:	b002      	add	sp, #8
  405b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b0a:	bf00      	nop

00405b0c <_fputwc_r>:
  405b0c:	b530      	push	{r4, r5, lr}
  405b0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405b10:	f013 0f01 	tst.w	r3, #1
  405b14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405b18:	4614      	mov	r4, r2
  405b1a:	b083      	sub	sp, #12
  405b1c:	4605      	mov	r5, r0
  405b1e:	b29a      	uxth	r2, r3
  405b20:	d101      	bne.n	405b26 <_fputwc_r+0x1a>
  405b22:	0590      	lsls	r0, r2, #22
  405b24:	d51c      	bpl.n	405b60 <_fputwc_r+0x54>
  405b26:	0490      	lsls	r0, r2, #18
  405b28:	d406      	bmi.n	405b38 <_fputwc_r+0x2c>
  405b2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405b34:	81a3      	strh	r3, [r4, #12]
  405b36:	6662      	str	r2, [r4, #100]	; 0x64
  405b38:	4628      	mov	r0, r5
  405b3a:	4622      	mov	r2, r4
  405b3c:	f7ff ff96 	bl	405a6c <__fputwc>
  405b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405b42:	07da      	lsls	r2, r3, #31
  405b44:	4605      	mov	r5, r0
  405b46:	d402      	bmi.n	405b4e <_fputwc_r+0x42>
  405b48:	89a3      	ldrh	r3, [r4, #12]
  405b4a:	059b      	lsls	r3, r3, #22
  405b4c:	d502      	bpl.n	405b54 <_fputwc_r+0x48>
  405b4e:	4628      	mov	r0, r5
  405b50:	b003      	add	sp, #12
  405b52:	bd30      	pop	{r4, r5, pc}
  405b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b56:	f000 faf9 	bl	40614c <__retarget_lock_release_recursive>
  405b5a:	4628      	mov	r0, r5
  405b5c:	b003      	add	sp, #12
  405b5e:	bd30      	pop	{r4, r5, pc}
  405b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b62:	9101      	str	r1, [sp, #4]
  405b64:	f000 faf0 	bl	406148 <__retarget_lock_acquire_recursive>
  405b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b6c:	9901      	ldr	r1, [sp, #4]
  405b6e:	b29a      	uxth	r2, r3
  405b70:	e7d9      	b.n	405b26 <_fputwc_r+0x1a>
  405b72:	bf00      	nop

00405b74 <_malloc_trim_r>:
  405b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b76:	4f24      	ldr	r7, [pc, #144]	; (405c08 <_malloc_trim_r+0x94>)
  405b78:	460c      	mov	r4, r1
  405b7a:	4606      	mov	r6, r0
  405b7c:	f7fe fd7c 	bl	404678 <__malloc_lock>
  405b80:	68bb      	ldr	r3, [r7, #8]
  405b82:	685d      	ldr	r5, [r3, #4]
  405b84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405b88:	310f      	adds	r1, #15
  405b8a:	f025 0503 	bic.w	r5, r5, #3
  405b8e:	4429      	add	r1, r5
  405b90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405b94:	f021 010f 	bic.w	r1, r1, #15
  405b98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405b9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405ba0:	db07      	blt.n	405bb2 <_malloc_trim_r+0x3e>
  405ba2:	2100      	movs	r1, #0
  405ba4:	4630      	mov	r0, r6
  405ba6:	f7fe fd73 	bl	404690 <_sbrk_r>
  405baa:	68bb      	ldr	r3, [r7, #8]
  405bac:	442b      	add	r3, r5
  405bae:	4298      	cmp	r0, r3
  405bb0:	d004      	beq.n	405bbc <_malloc_trim_r+0x48>
  405bb2:	4630      	mov	r0, r6
  405bb4:	f7fe fd66 	bl	404684 <__malloc_unlock>
  405bb8:	2000      	movs	r0, #0
  405bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405bbc:	4261      	negs	r1, r4
  405bbe:	4630      	mov	r0, r6
  405bc0:	f7fe fd66 	bl	404690 <_sbrk_r>
  405bc4:	3001      	adds	r0, #1
  405bc6:	d00d      	beq.n	405be4 <_malloc_trim_r+0x70>
  405bc8:	4b10      	ldr	r3, [pc, #64]	; (405c0c <_malloc_trim_r+0x98>)
  405bca:	68ba      	ldr	r2, [r7, #8]
  405bcc:	6819      	ldr	r1, [r3, #0]
  405bce:	1b2d      	subs	r5, r5, r4
  405bd0:	f045 0501 	orr.w	r5, r5, #1
  405bd4:	4630      	mov	r0, r6
  405bd6:	1b09      	subs	r1, r1, r4
  405bd8:	6055      	str	r5, [r2, #4]
  405bda:	6019      	str	r1, [r3, #0]
  405bdc:	f7fe fd52 	bl	404684 <__malloc_unlock>
  405be0:	2001      	movs	r0, #1
  405be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405be4:	2100      	movs	r1, #0
  405be6:	4630      	mov	r0, r6
  405be8:	f7fe fd52 	bl	404690 <_sbrk_r>
  405bec:	68ba      	ldr	r2, [r7, #8]
  405bee:	1a83      	subs	r3, r0, r2
  405bf0:	2b0f      	cmp	r3, #15
  405bf2:	ddde      	ble.n	405bb2 <_malloc_trim_r+0x3e>
  405bf4:	4c06      	ldr	r4, [pc, #24]	; (405c10 <_malloc_trim_r+0x9c>)
  405bf6:	4905      	ldr	r1, [pc, #20]	; (405c0c <_malloc_trim_r+0x98>)
  405bf8:	6824      	ldr	r4, [r4, #0]
  405bfa:	f043 0301 	orr.w	r3, r3, #1
  405bfe:	1b00      	subs	r0, r0, r4
  405c00:	6053      	str	r3, [r2, #4]
  405c02:	6008      	str	r0, [r1, #0]
  405c04:	e7d5      	b.n	405bb2 <_malloc_trim_r+0x3e>
  405c06:	bf00      	nop
  405c08:	20400440 	.word	0x20400440
  405c0c:	20400ba0 	.word	0x20400ba0
  405c10:	20400848 	.word	0x20400848

00405c14 <_free_r>:
  405c14:	2900      	cmp	r1, #0
  405c16:	d044      	beq.n	405ca2 <_free_r+0x8e>
  405c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c1c:	460d      	mov	r5, r1
  405c1e:	4680      	mov	r8, r0
  405c20:	f7fe fd2a 	bl	404678 <__malloc_lock>
  405c24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405c28:	4969      	ldr	r1, [pc, #420]	; (405dd0 <_free_r+0x1bc>)
  405c2a:	f027 0301 	bic.w	r3, r7, #1
  405c2e:	f1a5 0408 	sub.w	r4, r5, #8
  405c32:	18e2      	adds	r2, r4, r3
  405c34:	688e      	ldr	r6, [r1, #8]
  405c36:	6850      	ldr	r0, [r2, #4]
  405c38:	42b2      	cmp	r2, r6
  405c3a:	f020 0003 	bic.w	r0, r0, #3
  405c3e:	d05e      	beq.n	405cfe <_free_r+0xea>
  405c40:	07fe      	lsls	r6, r7, #31
  405c42:	6050      	str	r0, [r2, #4]
  405c44:	d40b      	bmi.n	405c5e <_free_r+0x4a>
  405c46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405c4a:	1be4      	subs	r4, r4, r7
  405c4c:	f101 0e08 	add.w	lr, r1, #8
  405c50:	68a5      	ldr	r5, [r4, #8]
  405c52:	4575      	cmp	r5, lr
  405c54:	443b      	add	r3, r7
  405c56:	d06d      	beq.n	405d34 <_free_r+0x120>
  405c58:	68e7      	ldr	r7, [r4, #12]
  405c5a:	60ef      	str	r7, [r5, #12]
  405c5c:	60bd      	str	r5, [r7, #8]
  405c5e:	1815      	adds	r5, r2, r0
  405c60:	686d      	ldr	r5, [r5, #4]
  405c62:	07ed      	lsls	r5, r5, #31
  405c64:	d53e      	bpl.n	405ce4 <_free_r+0xd0>
  405c66:	f043 0201 	orr.w	r2, r3, #1
  405c6a:	6062      	str	r2, [r4, #4]
  405c6c:	50e3      	str	r3, [r4, r3]
  405c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405c72:	d217      	bcs.n	405ca4 <_free_r+0x90>
  405c74:	08db      	lsrs	r3, r3, #3
  405c76:	1c58      	adds	r0, r3, #1
  405c78:	109a      	asrs	r2, r3, #2
  405c7a:	684d      	ldr	r5, [r1, #4]
  405c7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405c80:	60a7      	str	r7, [r4, #8]
  405c82:	2301      	movs	r3, #1
  405c84:	4093      	lsls	r3, r2
  405c86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405c8a:	432b      	orrs	r3, r5
  405c8c:	3a08      	subs	r2, #8
  405c8e:	60e2      	str	r2, [r4, #12]
  405c90:	604b      	str	r3, [r1, #4]
  405c92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405c96:	60fc      	str	r4, [r7, #12]
  405c98:	4640      	mov	r0, r8
  405c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c9e:	f7fe bcf1 	b.w	404684 <__malloc_unlock>
  405ca2:	4770      	bx	lr
  405ca4:	0a5a      	lsrs	r2, r3, #9
  405ca6:	2a04      	cmp	r2, #4
  405ca8:	d852      	bhi.n	405d50 <_free_r+0x13c>
  405caa:	099a      	lsrs	r2, r3, #6
  405cac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405cb0:	00ff      	lsls	r7, r7, #3
  405cb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405cb6:	19c8      	adds	r0, r1, r7
  405cb8:	59ca      	ldr	r2, [r1, r7]
  405cba:	3808      	subs	r0, #8
  405cbc:	4290      	cmp	r0, r2
  405cbe:	d04f      	beq.n	405d60 <_free_r+0x14c>
  405cc0:	6851      	ldr	r1, [r2, #4]
  405cc2:	f021 0103 	bic.w	r1, r1, #3
  405cc6:	428b      	cmp	r3, r1
  405cc8:	d232      	bcs.n	405d30 <_free_r+0x11c>
  405cca:	6892      	ldr	r2, [r2, #8]
  405ccc:	4290      	cmp	r0, r2
  405cce:	d1f7      	bne.n	405cc0 <_free_r+0xac>
  405cd0:	68c3      	ldr	r3, [r0, #12]
  405cd2:	60a0      	str	r0, [r4, #8]
  405cd4:	60e3      	str	r3, [r4, #12]
  405cd6:	609c      	str	r4, [r3, #8]
  405cd8:	60c4      	str	r4, [r0, #12]
  405cda:	4640      	mov	r0, r8
  405cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ce0:	f7fe bcd0 	b.w	404684 <__malloc_unlock>
  405ce4:	6895      	ldr	r5, [r2, #8]
  405ce6:	4f3b      	ldr	r7, [pc, #236]	; (405dd4 <_free_r+0x1c0>)
  405ce8:	42bd      	cmp	r5, r7
  405cea:	4403      	add	r3, r0
  405cec:	d040      	beq.n	405d70 <_free_r+0x15c>
  405cee:	68d0      	ldr	r0, [r2, #12]
  405cf0:	60e8      	str	r0, [r5, #12]
  405cf2:	f043 0201 	orr.w	r2, r3, #1
  405cf6:	6085      	str	r5, [r0, #8]
  405cf8:	6062      	str	r2, [r4, #4]
  405cfa:	50e3      	str	r3, [r4, r3]
  405cfc:	e7b7      	b.n	405c6e <_free_r+0x5a>
  405cfe:	07ff      	lsls	r7, r7, #31
  405d00:	4403      	add	r3, r0
  405d02:	d407      	bmi.n	405d14 <_free_r+0x100>
  405d04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405d08:	1aa4      	subs	r4, r4, r2
  405d0a:	4413      	add	r3, r2
  405d0c:	68a0      	ldr	r0, [r4, #8]
  405d0e:	68e2      	ldr	r2, [r4, #12]
  405d10:	60c2      	str	r2, [r0, #12]
  405d12:	6090      	str	r0, [r2, #8]
  405d14:	4a30      	ldr	r2, [pc, #192]	; (405dd8 <_free_r+0x1c4>)
  405d16:	6812      	ldr	r2, [r2, #0]
  405d18:	f043 0001 	orr.w	r0, r3, #1
  405d1c:	4293      	cmp	r3, r2
  405d1e:	6060      	str	r0, [r4, #4]
  405d20:	608c      	str	r4, [r1, #8]
  405d22:	d3b9      	bcc.n	405c98 <_free_r+0x84>
  405d24:	4b2d      	ldr	r3, [pc, #180]	; (405ddc <_free_r+0x1c8>)
  405d26:	4640      	mov	r0, r8
  405d28:	6819      	ldr	r1, [r3, #0]
  405d2a:	f7ff ff23 	bl	405b74 <_malloc_trim_r>
  405d2e:	e7b3      	b.n	405c98 <_free_r+0x84>
  405d30:	4610      	mov	r0, r2
  405d32:	e7cd      	b.n	405cd0 <_free_r+0xbc>
  405d34:	1811      	adds	r1, r2, r0
  405d36:	6849      	ldr	r1, [r1, #4]
  405d38:	07c9      	lsls	r1, r1, #31
  405d3a:	d444      	bmi.n	405dc6 <_free_r+0x1b2>
  405d3c:	6891      	ldr	r1, [r2, #8]
  405d3e:	68d2      	ldr	r2, [r2, #12]
  405d40:	60ca      	str	r2, [r1, #12]
  405d42:	4403      	add	r3, r0
  405d44:	f043 0001 	orr.w	r0, r3, #1
  405d48:	6091      	str	r1, [r2, #8]
  405d4a:	6060      	str	r0, [r4, #4]
  405d4c:	50e3      	str	r3, [r4, r3]
  405d4e:	e7a3      	b.n	405c98 <_free_r+0x84>
  405d50:	2a14      	cmp	r2, #20
  405d52:	d816      	bhi.n	405d82 <_free_r+0x16e>
  405d54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405d58:	00ff      	lsls	r7, r7, #3
  405d5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405d5e:	e7aa      	b.n	405cb6 <_free_r+0xa2>
  405d60:	10aa      	asrs	r2, r5, #2
  405d62:	2301      	movs	r3, #1
  405d64:	684d      	ldr	r5, [r1, #4]
  405d66:	4093      	lsls	r3, r2
  405d68:	432b      	orrs	r3, r5
  405d6a:	604b      	str	r3, [r1, #4]
  405d6c:	4603      	mov	r3, r0
  405d6e:	e7b0      	b.n	405cd2 <_free_r+0xbe>
  405d70:	f043 0201 	orr.w	r2, r3, #1
  405d74:	614c      	str	r4, [r1, #20]
  405d76:	610c      	str	r4, [r1, #16]
  405d78:	60e5      	str	r5, [r4, #12]
  405d7a:	60a5      	str	r5, [r4, #8]
  405d7c:	6062      	str	r2, [r4, #4]
  405d7e:	50e3      	str	r3, [r4, r3]
  405d80:	e78a      	b.n	405c98 <_free_r+0x84>
  405d82:	2a54      	cmp	r2, #84	; 0x54
  405d84:	d806      	bhi.n	405d94 <_free_r+0x180>
  405d86:	0b1a      	lsrs	r2, r3, #12
  405d88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405d8c:	00ff      	lsls	r7, r7, #3
  405d8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405d92:	e790      	b.n	405cb6 <_free_r+0xa2>
  405d94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405d98:	d806      	bhi.n	405da8 <_free_r+0x194>
  405d9a:	0bda      	lsrs	r2, r3, #15
  405d9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405da0:	00ff      	lsls	r7, r7, #3
  405da2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405da6:	e786      	b.n	405cb6 <_free_r+0xa2>
  405da8:	f240 5054 	movw	r0, #1364	; 0x554
  405dac:	4282      	cmp	r2, r0
  405dae:	d806      	bhi.n	405dbe <_free_r+0x1aa>
  405db0:	0c9a      	lsrs	r2, r3, #18
  405db2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405db6:	00ff      	lsls	r7, r7, #3
  405db8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405dbc:	e77b      	b.n	405cb6 <_free_r+0xa2>
  405dbe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405dc2:	257e      	movs	r5, #126	; 0x7e
  405dc4:	e777      	b.n	405cb6 <_free_r+0xa2>
  405dc6:	f043 0101 	orr.w	r1, r3, #1
  405dca:	6061      	str	r1, [r4, #4]
  405dcc:	6013      	str	r3, [r2, #0]
  405dce:	e763      	b.n	405c98 <_free_r+0x84>
  405dd0:	20400440 	.word	0x20400440
  405dd4:	20400448 	.word	0x20400448
  405dd8:	2040084c 	.word	0x2040084c
  405ddc:	20400bd0 	.word	0x20400bd0

00405de0 <__sfvwrite_r>:
  405de0:	6893      	ldr	r3, [r2, #8]
  405de2:	2b00      	cmp	r3, #0
  405de4:	d073      	beq.n	405ece <__sfvwrite_r+0xee>
  405de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dea:	898b      	ldrh	r3, [r1, #12]
  405dec:	b083      	sub	sp, #12
  405dee:	460c      	mov	r4, r1
  405df0:	0719      	lsls	r1, r3, #28
  405df2:	9000      	str	r0, [sp, #0]
  405df4:	4616      	mov	r6, r2
  405df6:	d526      	bpl.n	405e46 <__sfvwrite_r+0x66>
  405df8:	6922      	ldr	r2, [r4, #16]
  405dfa:	b322      	cbz	r2, 405e46 <__sfvwrite_r+0x66>
  405dfc:	f013 0002 	ands.w	r0, r3, #2
  405e00:	6835      	ldr	r5, [r6, #0]
  405e02:	d02c      	beq.n	405e5e <__sfvwrite_r+0x7e>
  405e04:	f04f 0900 	mov.w	r9, #0
  405e08:	4fb0      	ldr	r7, [pc, #704]	; (4060cc <__sfvwrite_r+0x2ec>)
  405e0a:	46c8      	mov	r8, r9
  405e0c:	46b2      	mov	sl, r6
  405e0e:	45b8      	cmp	r8, r7
  405e10:	4643      	mov	r3, r8
  405e12:	464a      	mov	r2, r9
  405e14:	bf28      	it	cs
  405e16:	463b      	movcs	r3, r7
  405e18:	9800      	ldr	r0, [sp, #0]
  405e1a:	f1b8 0f00 	cmp.w	r8, #0
  405e1e:	d050      	beq.n	405ec2 <__sfvwrite_r+0xe2>
  405e20:	69e1      	ldr	r1, [r4, #28]
  405e22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405e24:	47b0      	blx	r6
  405e26:	2800      	cmp	r0, #0
  405e28:	dd58      	ble.n	405edc <__sfvwrite_r+0xfc>
  405e2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  405e2e:	1a1b      	subs	r3, r3, r0
  405e30:	4481      	add	r9, r0
  405e32:	eba8 0800 	sub.w	r8, r8, r0
  405e36:	f8ca 3008 	str.w	r3, [sl, #8]
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	d1e7      	bne.n	405e0e <__sfvwrite_r+0x2e>
  405e3e:	2000      	movs	r0, #0
  405e40:	b003      	add	sp, #12
  405e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e46:	4621      	mov	r1, r4
  405e48:	9800      	ldr	r0, [sp, #0]
  405e4a:	f7ff fc51 	bl	4056f0 <__swsetup_r>
  405e4e:	2800      	cmp	r0, #0
  405e50:	f040 8133 	bne.w	4060ba <__sfvwrite_r+0x2da>
  405e54:	89a3      	ldrh	r3, [r4, #12]
  405e56:	6835      	ldr	r5, [r6, #0]
  405e58:	f013 0002 	ands.w	r0, r3, #2
  405e5c:	d1d2      	bne.n	405e04 <__sfvwrite_r+0x24>
  405e5e:	f013 0901 	ands.w	r9, r3, #1
  405e62:	d145      	bne.n	405ef0 <__sfvwrite_r+0x110>
  405e64:	464f      	mov	r7, r9
  405e66:	9601      	str	r6, [sp, #4]
  405e68:	b337      	cbz	r7, 405eb8 <__sfvwrite_r+0xd8>
  405e6a:	059a      	lsls	r2, r3, #22
  405e6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405e70:	f140 8083 	bpl.w	405f7a <__sfvwrite_r+0x19a>
  405e74:	4547      	cmp	r7, r8
  405e76:	46c3      	mov	fp, r8
  405e78:	f0c0 80ab 	bcc.w	405fd2 <__sfvwrite_r+0x1f2>
  405e7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405e80:	f040 80ac 	bne.w	405fdc <__sfvwrite_r+0x1fc>
  405e84:	6820      	ldr	r0, [r4, #0]
  405e86:	46ba      	mov	sl, r7
  405e88:	465a      	mov	r2, fp
  405e8a:	4649      	mov	r1, r9
  405e8c:	f000 fa40 	bl	406310 <memmove>
  405e90:	68a2      	ldr	r2, [r4, #8]
  405e92:	6823      	ldr	r3, [r4, #0]
  405e94:	eba2 0208 	sub.w	r2, r2, r8
  405e98:	445b      	add	r3, fp
  405e9a:	60a2      	str	r2, [r4, #8]
  405e9c:	6023      	str	r3, [r4, #0]
  405e9e:	9a01      	ldr	r2, [sp, #4]
  405ea0:	6893      	ldr	r3, [r2, #8]
  405ea2:	eba3 030a 	sub.w	r3, r3, sl
  405ea6:	44d1      	add	r9, sl
  405ea8:	eba7 070a 	sub.w	r7, r7, sl
  405eac:	6093      	str	r3, [r2, #8]
  405eae:	2b00      	cmp	r3, #0
  405eb0:	d0c5      	beq.n	405e3e <__sfvwrite_r+0x5e>
  405eb2:	89a3      	ldrh	r3, [r4, #12]
  405eb4:	2f00      	cmp	r7, #0
  405eb6:	d1d8      	bne.n	405e6a <__sfvwrite_r+0x8a>
  405eb8:	f8d5 9000 	ldr.w	r9, [r5]
  405ebc:	686f      	ldr	r7, [r5, #4]
  405ebe:	3508      	adds	r5, #8
  405ec0:	e7d2      	b.n	405e68 <__sfvwrite_r+0x88>
  405ec2:	f8d5 9000 	ldr.w	r9, [r5]
  405ec6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405eca:	3508      	adds	r5, #8
  405ecc:	e79f      	b.n	405e0e <__sfvwrite_r+0x2e>
  405ece:	2000      	movs	r0, #0
  405ed0:	4770      	bx	lr
  405ed2:	4621      	mov	r1, r4
  405ed4:	9800      	ldr	r0, [sp, #0]
  405ed6:	f7ff fd1f 	bl	405918 <_fflush_r>
  405eda:	b370      	cbz	r0, 405f3a <__sfvwrite_r+0x15a>
  405edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ee4:	f04f 30ff 	mov.w	r0, #4294967295
  405ee8:	81a3      	strh	r3, [r4, #12]
  405eea:	b003      	add	sp, #12
  405eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ef0:	4681      	mov	r9, r0
  405ef2:	4633      	mov	r3, r6
  405ef4:	464e      	mov	r6, r9
  405ef6:	46a8      	mov	r8, r5
  405ef8:	469a      	mov	sl, r3
  405efa:	464d      	mov	r5, r9
  405efc:	b34e      	cbz	r6, 405f52 <__sfvwrite_r+0x172>
  405efe:	b380      	cbz	r0, 405f62 <__sfvwrite_r+0x182>
  405f00:	6820      	ldr	r0, [r4, #0]
  405f02:	6923      	ldr	r3, [r4, #16]
  405f04:	6962      	ldr	r2, [r4, #20]
  405f06:	45b1      	cmp	r9, r6
  405f08:	46cb      	mov	fp, r9
  405f0a:	bf28      	it	cs
  405f0c:	46b3      	movcs	fp, r6
  405f0e:	4298      	cmp	r0, r3
  405f10:	465f      	mov	r7, fp
  405f12:	d904      	bls.n	405f1e <__sfvwrite_r+0x13e>
  405f14:	68a3      	ldr	r3, [r4, #8]
  405f16:	4413      	add	r3, r2
  405f18:	459b      	cmp	fp, r3
  405f1a:	f300 80a6 	bgt.w	40606a <__sfvwrite_r+0x28a>
  405f1e:	4593      	cmp	fp, r2
  405f20:	db4b      	blt.n	405fba <__sfvwrite_r+0x1da>
  405f22:	4613      	mov	r3, r2
  405f24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405f26:	69e1      	ldr	r1, [r4, #28]
  405f28:	9800      	ldr	r0, [sp, #0]
  405f2a:	462a      	mov	r2, r5
  405f2c:	47b8      	blx	r7
  405f2e:	1e07      	subs	r7, r0, #0
  405f30:	ddd4      	ble.n	405edc <__sfvwrite_r+0xfc>
  405f32:	ebb9 0907 	subs.w	r9, r9, r7
  405f36:	d0cc      	beq.n	405ed2 <__sfvwrite_r+0xf2>
  405f38:	2001      	movs	r0, #1
  405f3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  405f3e:	1bdb      	subs	r3, r3, r7
  405f40:	443d      	add	r5, r7
  405f42:	1bf6      	subs	r6, r6, r7
  405f44:	f8ca 3008 	str.w	r3, [sl, #8]
  405f48:	2b00      	cmp	r3, #0
  405f4a:	f43f af78 	beq.w	405e3e <__sfvwrite_r+0x5e>
  405f4e:	2e00      	cmp	r6, #0
  405f50:	d1d5      	bne.n	405efe <__sfvwrite_r+0x11e>
  405f52:	f108 0308 	add.w	r3, r8, #8
  405f56:	e913 0060 	ldmdb	r3, {r5, r6}
  405f5a:	4698      	mov	r8, r3
  405f5c:	3308      	adds	r3, #8
  405f5e:	2e00      	cmp	r6, #0
  405f60:	d0f9      	beq.n	405f56 <__sfvwrite_r+0x176>
  405f62:	4632      	mov	r2, r6
  405f64:	210a      	movs	r1, #10
  405f66:	4628      	mov	r0, r5
  405f68:	f000 f982 	bl	406270 <memchr>
  405f6c:	2800      	cmp	r0, #0
  405f6e:	f000 80a1 	beq.w	4060b4 <__sfvwrite_r+0x2d4>
  405f72:	3001      	adds	r0, #1
  405f74:	eba0 0905 	sub.w	r9, r0, r5
  405f78:	e7c2      	b.n	405f00 <__sfvwrite_r+0x120>
  405f7a:	6820      	ldr	r0, [r4, #0]
  405f7c:	6923      	ldr	r3, [r4, #16]
  405f7e:	4298      	cmp	r0, r3
  405f80:	d802      	bhi.n	405f88 <__sfvwrite_r+0x1a8>
  405f82:	6963      	ldr	r3, [r4, #20]
  405f84:	429f      	cmp	r7, r3
  405f86:	d25d      	bcs.n	406044 <__sfvwrite_r+0x264>
  405f88:	45b8      	cmp	r8, r7
  405f8a:	bf28      	it	cs
  405f8c:	46b8      	movcs	r8, r7
  405f8e:	4642      	mov	r2, r8
  405f90:	4649      	mov	r1, r9
  405f92:	f000 f9bd 	bl	406310 <memmove>
  405f96:	68a3      	ldr	r3, [r4, #8]
  405f98:	6822      	ldr	r2, [r4, #0]
  405f9a:	eba3 0308 	sub.w	r3, r3, r8
  405f9e:	4442      	add	r2, r8
  405fa0:	60a3      	str	r3, [r4, #8]
  405fa2:	6022      	str	r2, [r4, #0]
  405fa4:	b10b      	cbz	r3, 405faa <__sfvwrite_r+0x1ca>
  405fa6:	46c2      	mov	sl, r8
  405fa8:	e779      	b.n	405e9e <__sfvwrite_r+0xbe>
  405faa:	4621      	mov	r1, r4
  405fac:	9800      	ldr	r0, [sp, #0]
  405fae:	f7ff fcb3 	bl	405918 <_fflush_r>
  405fb2:	2800      	cmp	r0, #0
  405fb4:	d192      	bne.n	405edc <__sfvwrite_r+0xfc>
  405fb6:	46c2      	mov	sl, r8
  405fb8:	e771      	b.n	405e9e <__sfvwrite_r+0xbe>
  405fba:	465a      	mov	r2, fp
  405fbc:	4629      	mov	r1, r5
  405fbe:	f000 f9a7 	bl	406310 <memmove>
  405fc2:	68a2      	ldr	r2, [r4, #8]
  405fc4:	6823      	ldr	r3, [r4, #0]
  405fc6:	eba2 020b 	sub.w	r2, r2, fp
  405fca:	445b      	add	r3, fp
  405fcc:	60a2      	str	r2, [r4, #8]
  405fce:	6023      	str	r3, [r4, #0]
  405fd0:	e7af      	b.n	405f32 <__sfvwrite_r+0x152>
  405fd2:	6820      	ldr	r0, [r4, #0]
  405fd4:	46b8      	mov	r8, r7
  405fd6:	46ba      	mov	sl, r7
  405fd8:	46bb      	mov	fp, r7
  405fda:	e755      	b.n	405e88 <__sfvwrite_r+0xa8>
  405fdc:	6962      	ldr	r2, [r4, #20]
  405fde:	6820      	ldr	r0, [r4, #0]
  405fe0:	6921      	ldr	r1, [r4, #16]
  405fe2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405fe6:	eba0 0a01 	sub.w	sl, r0, r1
  405fea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405fee:	f10a 0001 	add.w	r0, sl, #1
  405ff2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405ff6:	4438      	add	r0, r7
  405ff8:	4540      	cmp	r0, r8
  405ffa:	4642      	mov	r2, r8
  405ffc:	bf84      	itt	hi
  405ffe:	4680      	movhi	r8, r0
  406000:	4642      	movhi	r2, r8
  406002:	055b      	lsls	r3, r3, #21
  406004:	d544      	bpl.n	406090 <__sfvwrite_r+0x2b0>
  406006:	4611      	mov	r1, r2
  406008:	9800      	ldr	r0, [sp, #0]
  40600a:	f7fd ff9d 	bl	403f48 <_malloc_r>
  40600e:	4683      	mov	fp, r0
  406010:	2800      	cmp	r0, #0
  406012:	d055      	beq.n	4060c0 <__sfvwrite_r+0x2e0>
  406014:	4652      	mov	r2, sl
  406016:	6921      	ldr	r1, [r4, #16]
  406018:	f7fe fa46 	bl	4044a8 <memcpy>
  40601c:	89a3      	ldrh	r3, [r4, #12]
  40601e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406026:	81a3      	strh	r3, [r4, #12]
  406028:	eb0b 000a 	add.w	r0, fp, sl
  40602c:	eba8 030a 	sub.w	r3, r8, sl
  406030:	f8c4 b010 	str.w	fp, [r4, #16]
  406034:	f8c4 8014 	str.w	r8, [r4, #20]
  406038:	6020      	str	r0, [r4, #0]
  40603a:	60a3      	str	r3, [r4, #8]
  40603c:	46b8      	mov	r8, r7
  40603e:	46ba      	mov	sl, r7
  406040:	46bb      	mov	fp, r7
  406042:	e721      	b.n	405e88 <__sfvwrite_r+0xa8>
  406044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406048:	42b9      	cmp	r1, r7
  40604a:	bf28      	it	cs
  40604c:	4639      	movcs	r1, r7
  40604e:	464a      	mov	r2, r9
  406050:	fb91 f1f3 	sdiv	r1, r1, r3
  406054:	9800      	ldr	r0, [sp, #0]
  406056:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406058:	fb03 f301 	mul.w	r3, r3, r1
  40605c:	69e1      	ldr	r1, [r4, #28]
  40605e:	47b0      	blx	r6
  406060:	f1b0 0a00 	subs.w	sl, r0, #0
  406064:	f73f af1b 	bgt.w	405e9e <__sfvwrite_r+0xbe>
  406068:	e738      	b.n	405edc <__sfvwrite_r+0xfc>
  40606a:	461a      	mov	r2, r3
  40606c:	4629      	mov	r1, r5
  40606e:	9301      	str	r3, [sp, #4]
  406070:	f000 f94e 	bl	406310 <memmove>
  406074:	6822      	ldr	r2, [r4, #0]
  406076:	9b01      	ldr	r3, [sp, #4]
  406078:	9800      	ldr	r0, [sp, #0]
  40607a:	441a      	add	r2, r3
  40607c:	6022      	str	r2, [r4, #0]
  40607e:	4621      	mov	r1, r4
  406080:	f7ff fc4a 	bl	405918 <_fflush_r>
  406084:	9b01      	ldr	r3, [sp, #4]
  406086:	2800      	cmp	r0, #0
  406088:	f47f af28 	bne.w	405edc <__sfvwrite_r+0xfc>
  40608c:	461f      	mov	r7, r3
  40608e:	e750      	b.n	405f32 <__sfvwrite_r+0x152>
  406090:	9800      	ldr	r0, [sp, #0]
  406092:	f000 f9a1 	bl	4063d8 <_realloc_r>
  406096:	4683      	mov	fp, r0
  406098:	2800      	cmp	r0, #0
  40609a:	d1c5      	bne.n	406028 <__sfvwrite_r+0x248>
  40609c:	9d00      	ldr	r5, [sp, #0]
  40609e:	6921      	ldr	r1, [r4, #16]
  4060a0:	4628      	mov	r0, r5
  4060a2:	f7ff fdb7 	bl	405c14 <_free_r>
  4060a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060aa:	220c      	movs	r2, #12
  4060ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4060b0:	602a      	str	r2, [r5, #0]
  4060b2:	e715      	b.n	405ee0 <__sfvwrite_r+0x100>
  4060b4:	f106 0901 	add.w	r9, r6, #1
  4060b8:	e722      	b.n	405f00 <__sfvwrite_r+0x120>
  4060ba:	f04f 30ff 	mov.w	r0, #4294967295
  4060be:	e6bf      	b.n	405e40 <__sfvwrite_r+0x60>
  4060c0:	9a00      	ldr	r2, [sp, #0]
  4060c2:	230c      	movs	r3, #12
  4060c4:	6013      	str	r3, [r2, #0]
  4060c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060ca:	e709      	b.n	405ee0 <__sfvwrite_r+0x100>
  4060cc:	7ffffc00 	.word	0x7ffffc00

004060d0 <_fwalk_reent>:
  4060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4060d8:	d01f      	beq.n	40611a <_fwalk_reent+0x4a>
  4060da:	4688      	mov	r8, r1
  4060dc:	4606      	mov	r6, r0
  4060de:	f04f 0900 	mov.w	r9, #0
  4060e2:	687d      	ldr	r5, [r7, #4]
  4060e4:	68bc      	ldr	r4, [r7, #8]
  4060e6:	3d01      	subs	r5, #1
  4060e8:	d411      	bmi.n	40610e <_fwalk_reent+0x3e>
  4060ea:	89a3      	ldrh	r3, [r4, #12]
  4060ec:	2b01      	cmp	r3, #1
  4060ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4060f2:	d908      	bls.n	406106 <_fwalk_reent+0x36>
  4060f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4060f8:	3301      	adds	r3, #1
  4060fa:	4621      	mov	r1, r4
  4060fc:	4630      	mov	r0, r6
  4060fe:	d002      	beq.n	406106 <_fwalk_reent+0x36>
  406100:	47c0      	blx	r8
  406102:	ea49 0900 	orr.w	r9, r9, r0
  406106:	1c6b      	adds	r3, r5, #1
  406108:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40610c:	d1ed      	bne.n	4060ea <_fwalk_reent+0x1a>
  40610e:	683f      	ldr	r7, [r7, #0]
  406110:	2f00      	cmp	r7, #0
  406112:	d1e6      	bne.n	4060e2 <_fwalk_reent+0x12>
  406114:	4648      	mov	r0, r9
  406116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40611a:	46b9      	mov	r9, r7
  40611c:	4648      	mov	r0, r9
  40611e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406122:	bf00      	nop

00406124 <__locale_mb_cur_max>:
  406124:	4b04      	ldr	r3, [pc, #16]	; (406138 <__locale_mb_cur_max+0x14>)
  406126:	4a05      	ldr	r2, [pc, #20]	; (40613c <__locale_mb_cur_max+0x18>)
  406128:	681b      	ldr	r3, [r3, #0]
  40612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40612c:	2b00      	cmp	r3, #0
  40612e:	bf08      	it	eq
  406130:	4613      	moveq	r3, r2
  406132:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406136:	4770      	bx	lr
  406138:	20400014 	.word	0x20400014
  40613c:	20400854 	.word	0x20400854

00406140 <__retarget_lock_init_recursive>:
  406140:	4770      	bx	lr
  406142:	bf00      	nop

00406144 <__retarget_lock_close_recursive>:
  406144:	4770      	bx	lr
  406146:	bf00      	nop

00406148 <__retarget_lock_acquire_recursive>:
  406148:	4770      	bx	lr
  40614a:	bf00      	nop

0040614c <__retarget_lock_release_recursive>:
  40614c:	4770      	bx	lr
  40614e:	bf00      	nop

00406150 <__swhatbuf_r>:
  406150:	b570      	push	{r4, r5, r6, lr}
  406152:	460c      	mov	r4, r1
  406154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406158:	2900      	cmp	r1, #0
  40615a:	b090      	sub	sp, #64	; 0x40
  40615c:	4615      	mov	r5, r2
  40615e:	461e      	mov	r6, r3
  406160:	db14      	blt.n	40618c <__swhatbuf_r+0x3c>
  406162:	aa01      	add	r2, sp, #4
  406164:	f000 fc9e 	bl	406aa4 <_fstat_r>
  406168:	2800      	cmp	r0, #0
  40616a:	db0f      	blt.n	40618c <__swhatbuf_r+0x3c>
  40616c:	9a02      	ldr	r2, [sp, #8]
  40616e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406172:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406176:	fab2 f282 	clz	r2, r2
  40617a:	0952      	lsrs	r2, r2, #5
  40617c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406180:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406184:	6032      	str	r2, [r6, #0]
  406186:	602b      	str	r3, [r5, #0]
  406188:	b010      	add	sp, #64	; 0x40
  40618a:	bd70      	pop	{r4, r5, r6, pc}
  40618c:	89a2      	ldrh	r2, [r4, #12]
  40618e:	2300      	movs	r3, #0
  406190:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406194:	6033      	str	r3, [r6, #0]
  406196:	d004      	beq.n	4061a2 <__swhatbuf_r+0x52>
  406198:	2240      	movs	r2, #64	; 0x40
  40619a:	4618      	mov	r0, r3
  40619c:	602a      	str	r2, [r5, #0]
  40619e:	b010      	add	sp, #64	; 0x40
  4061a0:	bd70      	pop	{r4, r5, r6, pc}
  4061a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4061a6:	602b      	str	r3, [r5, #0]
  4061a8:	b010      	add	sp, #64	; 0x40
  4061aa:	bd70      	pop	{r4, r5, r6, pc}

004061ac <__smakebuf_r>:
  4061ac:	898a      	ldrh	r2, [r1, #12]
  4061ae:	0792      	lsls	r2, r2, #30
  4061b0:	460b      	mov	r3, r1
  4061b2:	d506      	bpl.n	4061c2 <__smakebuf_r+0x16>
  4061b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4061b8:	2101      	movs	r1, #1
  4061ba:	601a      	str	r2, [r3, #0]
  4061bc:	611a      	str	r2, [r3, #16]
  4061be:	6159      	str	r1, [r3, #20]
  4061c0:	4770      	bx	lr
  4061c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4061c4:	b083      	sub	sp, #12
  4061c6:	ab01      	add	r3, sp, #4
  4061c8:	466a      	mov	r2, sp
  4061ca:	460c      	mov	r4, r1
  4061cc:	4606      	mov	r6, r0
  4061ce:	f7ff ffbf 	bl	406150 <__swhatbuf_r>
  4061d2:	9900      	ldr	r1, [sp, #0]
  4061d4:	4605      	mov	r5, r0
  4061d6:	4630      	mov	r0, r6
  4061d8:	f7fd feb6 	bl	403f48 <_malloc_r>
  4061dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4061e0:	b1d8      	cbz	r0, 40621a <__smakebuf_r+0x6e>
  4061e2:	9a01      	ldr	r2, [sp, #4]
  4061e4:	4f15      	ldr	r7, [pc, #84]	; (40623c <__smakebuf_r+0x90>)
  4061e6:	9900      	ldr	r1, [sp, #0]
  4061e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4061ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4061ee:	81a3      	strh	r3, [r4, #12]
  4061f0:	6020      	str	r0, [r4, #0]
  4061f2:	6120      	str	r0, [r4, #16]
  4061f4:	6161      	str	r1, [r4, #20]
  4061f6:	b91a      	cbnz	r2, 406200 <__smakebuf_r+0x54>
  4061f8:	432b      	orrs	r3, r5
  4061fa:	81a3      	strh	r3, [r4, #12]
  4061fc:	b003      	add	sp, #12
  4061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406200:	4630      	mov	r0, r6
  406202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406206:	f000 fc61 	bl	406acc <_isatty_r>
  40620a:	b1a0      	cbz	r0, 406236 <__smakebuf_r+0x8a>
  40620c:	89a3      	ldrh	r3, [r4, #12]
  40620e:	f023 0303 	bic.w	r3, r3, #3
  406212:	f043 0301 	orr.w	r3, r3, #1
  406216:	b21b      	sxth	r3, r3
  406218:	e7ee      	b.n	4061f8 <__smakebuf_r+0x4c>
  40621a:	059a      	lsls	r2, r3, #22
  40621c:	d4ee      	bmi.n	4061fc <__smakebuf_r+0x50>
  40621e:	f023 0303 	bic.w	r3, r3, #3
  406222:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406226:	f043 0302 	orr.w	r3, r3, #2
  40622a:	2101      	movs	r1, #1
  40622c:	81a3      	strh	r3, [r4, #12]
  40622e:	6022      	str	r2, [r4, #0]
  406230:	6122      	str	r2, [r4, #16]
  406232:	6161      	str	r1, [r4, #20]
  406234:	e7e2      	b.n	4061fc <__smakebuf_r+0x50>
  406236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40623a:	e7dd      	b.n	4061f8 <__smakebuf_r+0x4c>
  40623c:	0040596d 	.word	0x0040596d

00406240 <__ascii_mbtowc>:
  406240:	b082      	sub	sp, #8
  406242:	b149      	cbz	r1, 406258 <__ascii_mbtowc+0x18>
  406244:	b15a      	cbz	r2, 40625e <__ascii_mbtowc+0x1e>
  406246:	b16b      	cbz	r3, 406264 <__ascii_mbtowc+0x24>
  406248:	7813      	ldrb	r3, [r2, #0]
  40624a:	600b      	str	r3, [r1, #0]
  40624c:	7812      	ldrb	r2, [r2, #0]
  40624e:	1c10      	adds	r0, r2, #0
  406250:	bf18      	it	ne
  406252:	2001      	movne	r0, #1
  406254:	b002      	add	sp, #8
  406256:	4770      	bx	lr
  406258:	a901      	add	r1, sp, #4
  40625a:	2a00      	cmp	r2, #0
  40625c:	d1f3      	bne.n	406246 <__ascii_mbtowc+0x6>
  40625e:	4610      	mov	r0, r2
  406260:	b002      	add	sp, #8
  406262:	4770      	bx	lr
  406264:	f06f 0001 	mvn.w	r0, #1
  406268:	e7f4      	b.n	406254 <__ascii_mbtowc+0x14>
  40626a:	bf00      	nop
  40626c:	0000      	movs	r0, r0
	...

00406270 <memchr>:
  406270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406274:	2a10      	cmp	r2, #16
  406276:	db2b      	blt.n	4062d0 <memchr+0x60>
  406278:	f010 0f07 	tst.w	r0, #7
  40627c:	d008      	beq.n	406290 <memchr+0x20>
  40627e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406282:	3a01      	subs	r2, #1
  406284:	428b      	cmp	r3, r1
  406286:	d02d      	beq.n	4062e4 <memchr+0x74>
  406288:	f010 0f07 	tst.w	r0, #7
  40628c:	b342      	cbz	r2, 4062e0 <memchr+0x70>
  40628e:	d1f6      	bne.n	40627e <memchr+0xe>
  406290:	b4f0      	push	{r4, r5, r6, r7}
  406292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40629a:	f022 0407 	bic.w	r4, r2, #7
  40629e:	f07f 0700 	mvns.w	r7, #0
  4062a2:	2300      	movs	r3, #0
  4062a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4062a8:	3c08      	subs	r4, #8
  4062aa:	ea85 0501 	eor.w	r5, r5, r1
  4062ae:	ea86 0601 	eor.w	r6, r6, r1
  4062b2:	fa85 f547 	uadd8	r5, r5, r7
  4062b6:	faa3 f587 	sel	r5, r3, r7
  4062ba:	fa86 f647 	uadd8	r6, r6, r7
  4062be:	faa5 f687 	sel	r6, r5, r7
  4062c2:	b98e      	cbnz	r6, 4062e8 <memchr+0x78>
  4062c4:	d1ee      	bne.n	4062a4 <memchr+0x34>
  4062c6:	bcf0      	pop	{r4, r5, r6, r7}
  4062c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4062cc:	f002 0207 	and.w	r2, r2, #7
  4062d0:	b132      	cbz	r2, 4062e0 <memchr+0x70>
  4062d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4062d6:	3a01      	subs	r2, #1
  4062d8:	ea83 0301 	eor.w	r3, r3, r1
  4062dc:	b113      	cbz	r3, 4062e4 <memchr+0x74>
  4062de:	d1f8      	bne.n	4062d2 <memchr+0x62>
  4062e0:	2000      	movs	r0, #0
  4062e2:	4770      	bx	lr
  4062e4:	3801      	subs	r0, #1
  4062e6:	4770      	bx	lr
  4062e8:	2d00      	cmp	r5, #0
  4062ea:	bf06      	itte	eq
  4062ec:	4635      	moveq	r5, r6
  4062ee:	3803      	subeq	r0, #3
  4062f0:	3807      	subne	r0, #7
  4062f2:	f015 0f01 	tst.w	r5, #1
  4062f6:	d107      	bne.n	406308 <memchr+0x98>
  4062f8:	3001      	adds	r0, #1
  4062fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4062fe:	bf02      	ittt	eq
  406300:	3001      	addeq	r0, #1
  406302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406306:	3001      	addeq	r0, #1
  406308:	bcf0      	pop	{r4, r5, r6, r7}
  40630a:	3801      	subs	r0, #1
  40630c:	4770      	bx	lr
  40630e:	bf00      	nop

00406310 <memmove>:
  406310:	4288      	cmp	r0, r1
  406312:	b5f0      	push	{r4, r5, r6, r7, lr}
  406314:	d90d      	bls.n	406332 <memmove+0x22>
  406316:	188b      	adds	r3, r1, r2
  406318:	4298      	cmp	r0, r3
  40631a:	d20a      	bcs.n	406332 <memmove+0x22>
  40631c:	1884      	adds	r4, r0, r2
  40631e:	2a00      	cmp	r2, #0
  406320:	d051      	beq.n	4063c6 <memmove+0xb6>
  406322:	4622      	mov	r2, r4
  406324:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406328:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40632c:	4299      	cmp	r1, r3
  40632e:	d1f9      	bne.n	406324 <memmove+0x14>
  406330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406332:	2a0f      	cmp	r2, #15
  406334:	d948      	bls.n	4063c8 <memmove+0xb8>
  406336:	ea41 0300 	orr.w	r3, r1, r0
  40633a:	079b      	lsls	r3, r3, #30
  40633c:	d146      	bne.n	4063cc <memmove+0xbc>
  40633e:	f100 0410 	add.w	r4, r0, #16
  406342:	f101 0310 	add.w	r3, r1, #16
  406346:	4615      	mov	r5, r2
  406348:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40634c:	f844 6c10 	str.w	r6, [r4, #-16]
  406350:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406354:	f844 6c0c 	str.w	r6, [r4, #-12]
  406358:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40635c:	f844 6c08 	str.w	r6, [r4, #-8]
  406360:	3d10      	subs	r5, #16
  406362:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406366:	f844 6c04 	str.w	r6, [r4, #-4]
  40636a:	2d0f      	cmp	r5, #15
  40636c:	f103 0310 	add.w	r3, r3, #16
  406370:	f104 0410 	add.w	r4, r4, #16
  406374:	d8e8      	bhi.n	406348 <memmove+0x38>
  406376:	f1a2 0310 	sub.w	r3, r2, #16
  40637a:	f023 030f 	bic.w	r3, r3, #15
  40637e:	f002 0e0f 	and.w	lr, r2, #15
  406382:	3310      	adds	r3, #16
  406384:	f1be 0f03 	cmp.w	lr, #3
  406388:	4419      	add	r1, r3
  40638a:	4403      	add	r3, r0
  40638c:	d921      	bls.n	4063d2 <memmove+0xc2>
  40638e:	1f1e      	subs	r6, r3, #4
  406390:	460d      	mov	r5, r1
  406392:	4674      	mov	r4, lr
  406394:	3c04      	subs	r4, #4
  406396:	f855 7b04 	ldr.w	r7, [r5], #4
  40639a:	f846 7f04 	str.w	r7, [r6, #4]!
  40639e:	2c03      	cmp	r4, #3
  4063a0:	d8f8      	bhi.n	406394 <memmove+0x84>
  4063a2:	f1ae 0404 	sub.w	r4, lr, #4
  4063a6:	f024 0403 	bic.w	r4, r4, #3
  4063aa:	3404      	adds	r4, #4
  4063ac:	4421      	add	r1, r4
  4063ae:	4423      	add	r3, r4
  4063b0:	f002 0203 	and.w	r2, r2, #3
  4063b4:	b162      	cbz	r2, 4063d0 <memmove+0xc0>
  4063b6:	3b01      	subs	r3, #1
  4063b8:	440a      	add	r2, r1
  4063ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4063be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4063c2:	428a      	cmp	r2, r1
  4063c4:	d1f9      	bne.n	4063ba <memmove+0xaa>
  4063c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063c8:	4603      	mov	r3, r0
  4063ca:	e7f3      	b.n	4063b4 <memmove+0xa4>
  4063cc:	4603      	mov	r3, r0
  4063ce:	e7f2      	b.n	4063b6 <memmove+0xa6>
  4063d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063d2:	4672      	mov	r2, lr
  4063d4:	e7ee      	b.n	4063b4 <memmove+0xa4>
  4063d6:	bf00      	nop

004063d8 <_realloc_r>:
  4063d8:	2900      	cmp	r1, #0
  4063da:	f000 8095 	beq.w	406508 <_realloc_r+0x130>
  4063de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063e2:	460d      	mov	r5, r1
  4063e4:	4616      	mov	r6, r2
  4063e6:	b083      	sub	sp, #12
  4063e8:	4680      	mov	r8, r0
  4063ea:	f106 070b 	add.w	r7, r6, #11
  4063ee:	f7fe f943 	bl	404678 <__malloc_lock>
  4063f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4063f6:	2f16      	cmp	r7, #22
  4063f8:	f02e 0403 	bic.w	r4, lr, #3
  4063fc:	f1a5 0908 	sub.w	r9, r5, #8
  406400:	d83c      	bhi.n	40647c <_realloc_r+0xa4>
  406402:	2210      	movs	r2, #16
  406404:	4617      	mov	r7, r2
  406406:	42be      	cmp	r6, r7
  406408:	d83d      	bhi.n	406486 <_realloc_r+0xae>
  40640a:	4294      	cmp	r4, r2
  40640c:	da43      	bge.n	406496 <_realloc_r+0xbe>
  40640e:	4bc4      	ldr	r3, [pc, #784]	; (406720 <_realloc_r+0x348>)
  406410:	6899      	ldr	r1, [r3, #8]
  406412:	eb09 0004 	add.w	r0, r9, r4
  406416:	4288      	cmp	r0, r1
  406418:	f000 80b4 	beq.w	406584 <_realloc_r+0x1ac>
  40641c:	6843      	ldr	r3, [r0, #4]
  40641e:	f023 0101 	bic.w	r1, r3, #1
  406422:	4401      	add	r1, r0
  406424:	6849      	ldr	r1, [r1, #4]
  406426:	07c9      	lsls	r1, r1, #31
  406428:	d54c      	bpl.n	4064c4 <_realloc_r+0xec>
  40642a:	f01e 0f01 	tst.w	lr, #1
  40642e:	f000 809b 	beq.w	406568 <_realloc_r+0x190>
  406432:	4631      	mov	r1, r6
  406434:	4640      	mov	r0, r8
  406436:	f7fd fd87 	bl	403f48 <_malloc_r>
  40643a:	4606      	mov	r6, r0
  40643c:	2800      	cmp	r0, #0
  40643e:	d03a      	beq.n	4064b6 <_realloc_r+0xde>
  406440:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406444:	f023 0301 	bic.w	r3, r3, #1
  406448:	444b      	add	r3, r9
  40644a:	f1a0 0208 	sub.w	r2, r0, #8
  40644e:	429a      	cmp	r2, r3
  406450:	f000 8121 	beq.w	406696 <_realloc_r+0x2be>
  406454:	1f22      	subs	r2, r4, #4
  406456:	2a24      	cmp	r2, #36	; 0x24
  406458:	f200 8107 	bhi.w	40666a <_realloc_r+0x292>
  40645c:	2a13      	cmp	r2, #19
  40645e:	f200 80db 	bhi.w	406618 <_realloc_r+0x240>
  406462:	4603      	mov	r3, r0
  406464:	462a      	mov	r2, r5
  406466:	6811      	ldr	r1, [r2, #0]
  406468:	6019      	str	r1, [r3, #0]
  40646a:	6851      	ldr	r1, [r2, #4]
  40646c:	6059      	str	r1, [r3, #4]
  40646e:	6892      	ldr	r2, [r2, #8]
  406470:	609a      	str	r2, [r3, #8]
  406472:	4629      	mov	r1, r5
  406474:	4640      	mov	r0, r8
  406476:	f7ff fbcd 	bl	405c14 <_free_r>
  40647a:	e01c      	b.n	4064b6 <_realloc_r+0xde>
  40647c:	f027 0707 	bic.w	r7, r7, #7
  406480:	2f00      	cmp	r7, #0
  406482:	463a      	mov	r2, r7
  406484:	dabf      	bge.n	406406 <_realloc_r+0x2e>
  406486:	2600      	movs	r6, #0
  406488:	230c      	movs	r3, #12
  40648a:	4630      	mov	r0, r6
  40648c:	f8c8 3000 	str.w	r3, [r8]
  406490:	b003      	add	sp, #12
  406492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406496:	462e      	mov	r6, r5
  406498:	1be3      	subs	r3, r4, r7
  40649a:	2b0f      	cmp	r3, #15
  40649c:	d81e      	bhi.n	4064dc <_realloc_r+0x104>
  40649e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4064a2:	f003 0301 	and.w	r3, r3, #1
  4064a6:	4323      	orrs	r3, r4
  4064a8:	444c      	add	r4, r9
  4064aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4064ae:	6863      	ldr	r3, [r4, #4]
  4064b0:	f043 0301 	orr.w	r3, r3, #1
  4064b4:	6063      	str	r3, [r4, #4]
  4064b6:	4640      	mov	r0, r8
  4064b8:	f7fe f8e4 	bl	404684 <__malloc_unlock>
  4064bc:	4630      	mov	r0, r6
  4064be:	b003      	add	sp, #12
  4064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c4:	f023 0303 	bic.w	r3, r3, #3
  4064c8:	18e1      	adds	r1, r4, r3
  4064ca:	4291      	cmp	r1, r2
  4064cc:	db1f      	blt.n	40650e <_realloc_r+0x136>
  4064ce:	68c3      	ldr	r3, [r0, #12]
  4064d0:	6882      	ldr	r2, [r0, #8]
  4064d2:	462e      	mov	r6, r5
  4064d4:	60d3      	str	r3, [r2, #12]
  4064d6:	460c      	mov	r4, r1
  4064d8:	609a      	str	r2, [r3, #8]
  4064da:	e7dd      	b.n	406498 <_realloc_r+0xc0>
  4064dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4064e0:	eb09 0107 	add.w	r1, r9, r7
  4064e4:	f002 0201 	and.w	r2, r2, #1
  4064e8:	444c      	add	r4, r9
  4064ea:	f043 0301 	orr.w	r3, r3, #1
  4064ee:	4317      	orrs	r7, r2
  4064f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4064f4:	604b      	str	r3, [r1, #4]
  4064f6:	6863      	ldr	r3, [r4, #4]
  4064f8:	f043 0301 	orr.w	r3, r3, #1
  4064fc:	3108      	adds	r1, #8
  4064fe:	6063      	str	r3, [r4, #4]
  406500:	4640      	mov	r0, r8
  406502:	f7ff fb87 	bl	405c14 <_free_r>
  406506:	e7d6      	b.n	4064b6 <_realloc_r+0xde>
  406508:	4611      	mov	r1, r2
  40650a:	f7fd bd1d 	b.w	403f48 <_malloc_r>
  40650e:	f01e 0f01 	tst.w	lr, #1
  406512:	d18e      	bne.n	406432 <_realloc_r+0x5a>
  406514:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406518:	eba9 0a01 	sub.w	sl, r9, r1
  40651c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406520:	f021 0103 	bic.w	r1, r1, #3
  406524:	440b      	add	r3, r1
  406526:	4423      	add	r3, r4
  406528:	4293      	cmp	r3, r2
  40652a:	db25      	blt.n	406578 <_realloc_r+0x1a0>
  40652c:	68c2      	ldr	r2, [r0, #12]
  40652e:	6881      	ldr	r1, [r0, #8]
  406530:	4656      	mov	r6, sl
  406532:	60ca      	str	r2, [r1, #12]
  406534:	6091      	str	r1, [r2, #8]
  406536:	f8da 100c 	ldr.w	r1, [sl, #12]
  40653a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40653e:	1f22      	subs	r2, r4, #4
  406540:	2a24      	cmp	r2, #36	; 0x24
  406542:	60c1      	str	r1, [r0, #12]
  406544:	6088      	str	r0, [r1, #8]
  406546:	f200 8094 	bhi.w	406672 <_realloc_r+0x29a>
  40654a:	2a13      	cmp	r2, #19
  40654c:	d96f      	bls.n	40662e <_realloc_r+0x256>
  40654e:	6829      	ldr	r1, [r5, #0]
  406550:	f8ca 1008 	str.w	r1, [sl, #8]
  406554:	6869      	ldr	r1, [r5, #4]
  406556:	f8ca 100c 	str.w	r1, [sl, #12]
  40655a:	2a1b      	cmp	r2, #27
  40655c:	f200 80a2 	bhi.w	4066a4 <_realloc_r+0x2cc>
  406560:	3508      	adds	r5, #8
  406562:	f10a 0210 	add.w	r2, sl, #16
  406566:	e063      	b.n	406630 <_realloc_r+0x258>
  406568:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40656c:	eba9 0a03 	sub.w	sl, r9, r3
  406570:	f8da 1004 	ldr.w	r1, [sl, #4]
  406574:	f021 0103 	bic.w	r1, r1, #3
  406578:	1863      	adds	r3, r4, r1
  40657a:	4293      	cmp	r3, r2
  40657c:	f6ff af59 	blt.w	406432 <_realloc_r+0x5a>
  406580:	4656      	mov	r6, sl
  406582:	e7d8      	b.n	406536 <_realloc_r+0x15e>
  406584:	6841      	ldr	r1, [r0, #4]
  406586:	f021 0b03 	bic.w	fp, r1, #3
  40658a:	44a3      	add	fp, r4
  40658c:	f107 0010 	add.w	r0, r7, #16
  406590:	4583      	cmp	fp, r0
  406592:	da56      	bge.n	406642 <_realloc_r+0x26a>
  406594:	f01e 0f01 	tst.w	lr, #1
  406598:	f47f af4b 	bne.w	406432 <_realloc_r+0x5a>
  40659c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4065a0:	eba9 0a01 	sub.w	sl, r9, r1
  4065a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4065a8:	f021 0103 	bic.w	r1, r1, #3
  4065ac:	448b      	add	fp, r1
  4065ae:	4558      	cmp	r0, fp
  4065b0:	dce2      	bgt.n	406578 <_realloc_r+0x1a0>
  4065b2:	4656      	mov	r6, sl
  4065b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4065b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4065bc:	1f22      	subs	r2, r4, #4
  4065be:	2a24      	cmp	r2, #36	; 0x24
  4065c0:	60c1      	str	r1, [r0, #12]
  4065c2:	6088      	str	r0, [r1, #8]
  4065c4:	f200 808f 	bhi.w	4066e6 <_realloc_r+0x30e>
  4065c8:	2a13      	cmp	r2, #19
  4065ca:	f240 808a 	bls.w	4066e2 <_realloc_r+0x30a>
  4065ce:	6829      	ldr	r1, [r5, #0]
  4065d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4065d4:	6869      	ldr	r1, [r5, #4]
  4065d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4065da:	2a1b      	cmp	r2, #27
  4065dc:	f200 808a 	bhi.w	4066f4 <_realloc_r+0x31c>
  4065e0:	3508      	adds	r5, #8
  4065e2:	f10a 0210 	add.w	r2, sl, #16
  4065e6:	6829      	ldr	r1, [r5, #0]
  4065e8:	6011      	str	r1, [r2, #0]
  4065ea:	6869      	ldr	r1, [r5, #4]
  4065ec:	6051      	str	r1, [r2, #4]
  4065ee:	68a9      	ldr	r1, [r5, #8]
  4065f0:	6091      	str	r1, [r2, #8]
  4065f2:	eb0a 0107 	add.w	r1, sl, r7
  4065f6:	ebab 0207 	sub.w	r2, fp, r7
  4065fa:	f042 0201 	orr.w	r2, r2, #1
  4065fe:	6099      	str	r1, [r3, #8]
  406600:	604a      	str	r2, [r1, #4]
  406602:	f8da 3004 	ldr.w	r3, [sl, #4]
  406606:	f003 0301 	and.w	r3, r3, #1
  40660a:	431f      	orrs	r7, r3
  40660c:	4640      	mov	r0, r8
  40660e:	f8ca 7004 	str.w	r7, [sl, #4]
  406612:	f7fe f837 	bl	404684 <__malloc_unlock>
  406616:	e751      	b.n	4064bc <_realloc_r+0xe4>
  406618:	682b      	ldr	r3, [r5, #0]
  40661a:	6003      	str	r3, [r0, #0]
  40661c:	686b      	ldr	r3, [r5, #4]
  40661e:	6043      	str	r3, [r0, #4]
  406620:	2a1b      	cmp	r2, #27
  406622:	d82d      	bhi.n	406680 <_realloc_r+0x2a8>
  406624:	f100 0308 	add.w	r3, r0, #8
  406628:	f105 0208 	add.w	r2, r5, #8
  40662c:	e71b      	b.n	406466 <_realloc_r+0x8e>
  40662e:	4632      	mov	r2, r6
  406630:	6829      	ldr	r1, [r5, #0]
  406632:	6011      	str	r1, [r2, #0]
  406634:	6869      	ldr	r1, [r5, #4]
  406636:	6051      	str	r1, [r2, #4]
  406638:	68a9      	ldr	r1, [r5, #8]
  40663a:	6091      	str	r1, [r2, #8]
  40663c:	461c      	mov	r4, r3
  40663e:	46d1      	mov	r9, sl
  406640:	e72a      	b.n	406498 <_realloc_r+0xc0>
  406642:	eb09 0107 	add.w	r1, r9, r7
  406646:	ebab 0b07 	sub.w	fp, fp, r7
  40664a:	f04b 0201 	orr.w	r2, fp, #1
  40664e:	6099      	str	r1, [r3, #8]
  406650:	604a      	str	r2, [r1, #4]
  406652:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406656:	f003 0301 	and.w	r3, r3, #1
  40665a:	431f      	orrs	r7, r3
  40665c:	4640      	mov	r0, r8
  40665e:	f845 7c04 	str.w	r7, [r5, #-4]
  406662:	f7fe f80f 	bl	404684 <__malloc_unlock>
  406666:	462e      	mov	r6, r5
  406668:	e728      	b.n	4064bc <_realloc_r+0xe4>
  40666a:	4629      	mov	r1, r5
  40666c:	f7ff fe50 	bl	406310 <memmove>
  406670:	e6ff      	b.n	406472 <_realloc_r+0x9a>
  406672:	4629      	mov	r1, r5
  406674:	4630      	mov	r0, r6
  406676:	461c      	mov	r4, r3
  406678:	46d1      	mov	r9, sl
  40667a:	f7ff fe49 	bl	406310 <memmove>
  40667e:	e70b      	b.n	406498 <_realloc_r+0xc0>
  406680:	68ab      	ldr	r3, [r5, #8]
  406682:	6083      	str	r3, [r0, #8]
  406684:	68eb      	ldr	r3, [r5, #12]
  406686:	60c3      	str	r3, [r0, #12]
  406688:	2a24      	cmp	r2, #36	; 0x24
  40668a:	d017      	beq.n	4066bc <_realloc_r+0x2e4>
  40668c:	f100 0310 	add.w	r3, r0, #16
  406690:	f105 0210 	add.w	r2, r5, #16
  406694:	e6e7      	b.n	406466 <_realloc_r+0x8e>
  406696:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40669a:	f023 0303 	bic.w	r3, r3, #3
  40669e:	441c      	add	r4, r3
  4066a0:	462e      	mov	r6, r5
  4066a2:	e6f9      	b.n	406498 <_realloc_r+0xc0>
  4066a4:	68a9      	ldr	r1, [r5, #8]
  4066a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4066aa:	68e9      	ldr	r1, [r5, #12]
  4066ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4066b0:	2a24      	cmp	r2, #36	; 0x24
  4066b2:	d00c      	beq.n	4066ce <_realloc_r+0x2f6>
  4066b4:	3510      	adds	r5, #16
  4066b6:	f10a 0218 	add.w	r2, sl, #24
  4066ba:	e7b9      	b.n	406630 <_realloc_r+0x258>
  4066bc:	692b      	ldr	r3, [r5, #16]
  4066be:	6103      	str	r3, [r0, #16]
  4066c0:	696b      	ldr	r3, [r5, #20]
  4066c2:	6143      	str	r3, [r0, #20]
  4066c4:	f105 0218 	add.w	r2, r5, #24
  4066c8:	f100 0318 	add.w	r3, r0, #24
  4066cc:	e6cb      	b.n	406466 <_realloc_r+0x8e>
  4066ce:	692a      	ldr	r2, [r5, #16]
  4066d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4066d4:	696a      	ldr	r2, [r5, #20]
  4066d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4066da:	3518      	adds	r5, #24
  4066dc:	f10a 0220 	add.w	r2, sl, #32
  4066e0:	e7a6      	b.n	406630 <_realloc_r+0x258>
  4066e2:	4632      	mov	r2, r6
  4066e4:	e77f      	b.n	4065e6 <_realloc_r+0x20e>
  4066e6:	4629      	mov	r1, r5
  4066e8:	4630      	mov	r0, r6
  4066ea:	9301      	str	r3, [sp, #4]
  4066ec:	f7ff fe10 	bl	406310 <memmove>
  4066f0:	9b01      	ldr	r3, [sp, #4]
  4066f2:	e77e      	b.n	4065f2 <_realloc_r+0x21a>
  4066f4:	68a9      	ldr	r1, [r5, #8]
  4066f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4066fa:	68e9      	ldr	r1, [r5, #12]
  4066fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406700:	2a24      	cmp	r2, #36	; 0x24
  406702:	d003      	beq.n	40670c <_realloc_r+0x334>
  406704:	3510      	adds	r5, #16
  406706:	f10a 0218 	add.w	r2, sl, #24
  40670a:	e76c      	b.n	4065e6 <_realloc_r+0x20e>
  40670c:	692a      	ldr	r2, [r5, #16]
  40670e:	f8ca 2018 	str.w	r2, [sl, #24]
  406712:	696a      	ldr	r2, [r5, #20]
  406714:	f8ca 201c 	str.w	r2, [sl, #28]
  406718:	3518      	adds	r5, #24
  40671a:	f10a 0220 	add.w	r2, sl, #32
  40671e:	e762      	b.n	4065e6 <_realloc_r+0x20e>
  406720:	20400440 	.word	0x20400440

00406724 <__sread>:
  406724:	b510      	push	{r4, lr}
  406726:	460c      	mov	r4, r1
  406728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40672c:	f000 f9f6 	bl	406b1c <_read_r>
  406730:	2800      	cmp	r0, #0
  406732:	db03      	blt.n	40673c <__sread+0x18>
  406734:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406736:	4403      	add	r3, r0
  406738:	6523      	str	r3, [r4, #80]	; 0x50
  40673a:	bd10      	pop	{r4, pc}
  40673c:	89a3      	ldrh	r3, [r4, #12]
  40673e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406742:	81a3      	strh	r3, [r4, #12]
  406744:	bd10      	pop	{r4, pc}
  406746:	bf00      	nop

00406748 <__swrite>:
  406748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40674c:	4616      	mov	r6, r2
  40674e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406752:	461f      	mov	r7, r3
  406754:	05d3      	lsls	r3, r2, #23
  406756:	460c      	mov	r4, r1
  406758:	4605      	mov	r5, r0
  40675a:	d507      	bpl.n	40676c <__swrite+0x24>
  40675c:	2200      	movs	r2, #0
  40675e:	2302      	movs	r3, #2
  406760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406764:	f000 f9c4 	bl	406af0 <_lseek_r>
  406768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40676c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406774:	81a2      	strh	r2, [r4, #12]
  406776:	463b      	mov	r3, r7
  406778:	4632      	mov	r2, r6
  40677a:	4628      	mov	r0, r5
  40677c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406780:	f000 b8a4 	b.w	4068cc <_write_r>

00406784 <__sseek>:
  406784:	b510      	push	{r4, lr}
  406786:	460c      	mov	r4, r1
  406788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40678c:	f000 f9b0 	bl	406af0 <_lseek_r>
  406790:	89a3      	ldrh	r3, [r4, #12]
  406792:	1c42      	adds	r2, r0, #1
  406794:	bf0e      	itee	eq
  406796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40679a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40679e:	6520      	strne	r0, [r4, #80]	; 0x50
  4067a0:	81a3      	strh	r3, [r4, #12]
  4067a2:	bd10      	pop	{r4, pc}

004067a4 <__sclose>:
  4067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4067a8:	f000 b908 	b.w	4069bc <_close_r>

004067ac <__swbuf_r>:
  4067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4067ae:	460d      	mov	r5, r1
  4067b0:	4614      	mov	r4, r2
  4067b2:	4606      	mov	r6, r0
  4067b4:	b110      	cbz	r0, 4067bc <__swbuf_r+0x10>
  4067b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4067b8:	2b00      	cmp	r3, #0
  4067ba:	d04b      	beq.n	406854 <__swbuf_r+0xa8>
  4067bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4067c0:	69a3      	ldr	r3, [r4, #24]
  4067c2:	60a3      	str	r3, [r4, #8]
  4067c4:	b291      	uxth	r1, r2
  4067c6:	0708      	lsls	r0, r1, #28
  4067c8:	d539      	bpl.n	40683e <__swbuf_r+0x92>
  4067ca:	6923      	ldr	r3, [r4, #16]
  4067cc:	2b00      	cmp	r3, #0
  4067ce:	d036      	beq.n	40683e <__swbuf_r+0x92>
  4067d0:	b2ed      	uxtb	r5, r5
  4067d2:	0489      	lsls	r1, r1, #18
  4067d4:	462f      	mov	r7, r5
  4067d6:	d515      	bpl.n	406804 <__swbuf_r+0x58>
  4067d8:	6822      	ldr	r2, [r4, #0]
  4067da:	6961      	ldr	r1, [r4, #20]
  4067dc:	1ad3      	subs	r3, r2, r3
  4067de:	428b      	cmp	r3, r1
  4067e0:	da1c      	bge.n	40681c <__swbuf_r+0x70>
  4067e2:	3301      	adds	r3, #1
  4067e4:	68a1      	ldr	r1, [r4, #8]
  4067e6:	1c50      	adds	r0, r2, #1
  4067e8:	3901      	subs	r1, #1
  4067ea:	60a1      	str	r1, [r4, #8]
  4067ec:	6020      	str	r0, [r4, #0]
  4067ee:	7015      	strb	r5, [r2, #0]
  4067f0:	6962      	ldr	r2, [r4, #20]
  4067f2:	429a      	cmp	r2, r3
  4067f4:	d01a      	beq.n	40682c <__swbuf_r+0x80>
  4067f6:	89a3      	ldrh	r3, [r4, #12]
  4067f8:	07db      	lsls	r3, r3, #31
  4067fa:	d501      	bpl.n	406800 <__swbuf_r+0x54>
  4067fc:	2d0a      	cmp	r5, #10
  4067fe:	d015      	beq.n	40682c <__swbuf_r+0x80>
  406800:	4638      	mov	r0, r7
  406802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406804:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406806:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40680a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40680e:	81a2      	strh	r2, [r4, #12]
  406810:	6822      	ldr	r2, [r4, #0]
  406812:	6661      	str	r1, [r4, #100]	; 0x64
  406814:	6961      	ldr	r1, [r4, #20]
  406816:	1ad3      	subs	r3, r2, r3
  406818:	428b      	cmp	r3, r1
  40681a:	dbe2      	blt.n	4067e2 <__swbuf_r+0x36>
  40681c:	4621      	mov	r1, r4
  40681e:	4630      	mov	r0, r6
  406820:	f7ff f87a 	bl	405918 <_fflush_r>
  406824:	b940      	cbnz	r0, 406838 <__swbuf_r+0x8c>
  406826:	6822      	ldr	r2, [r4, #0]
  406828:	2301      	movs	r3, #1
  40682a:	e7db      	b.n	4067e4 <__swbuf_r+0x38>
  40682c:	4621      	mov	r1, r4
  40682e:	4630      	mov	r0, r6
  406830:	f7ff f872 	bl	405918 <_fflush_r>
  406834:	2800      	cmp	r0, #0
  406836:	d0e3      	beq.n	406800 <__swbuf_r+0x54>
  406838:	f04f 37ff 	mov.w	r7, #4294967295
  40683c:	e7e0      	b.n	406800 <__swbuf_r+0x54>
  40683e:	4621      	mov	r1, r4
  406840:	4630      	mov	r0, r6
  406842:	f7fe ff55 	bl	4056f0 <__swsetup_r>
  406846:	2800      	cmp	r0, #0
  406848:	d1f6      	bne.n	406838 <__swbuf_r+0x8c>
  40684a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40684e:	6923      	ldr	r3, [r4, #16]
  406850:	b291      	uxth	r1, r2
  406852:	e7bd      	b.n	4067d0 <__swbuf_r+0x24>
  406854:	f7ff f8b8 	bl	4059c8 <__sinit>
  406858:	e7b0      	b.n	4067bc <__swbuf_r+0x10>
  40685a:	bf00      	nop

0040685c <_wcrtomb_r>:
  40685c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40685e:	4606      	mov	r6, r0
  406860:	b085      	sub	sp, #20
  406862:	461f      	mov	r7, r3
  406864:	b189      	cbz	r1, 40688a <_wcrtomb_r+0x2e>
  406866:	4c10      	ldr	r4, [pc, #64]	; (4068a8 <_wcrtomb_r+0x4c>)
  406868:	4d10      	ldr	r5, [pc, #64]	; (4068ac <_wcrtomb_r+0x50>)
  40686a:	6824      	ldr	r4, [r4, #0]
  40686c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40686e:	2c00      	cmp	r4, #0
  406870:	bf08      	it	eq
  406872:	462c      	moveq	r4, r5
  406874:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406878:	47a0      	blx	r4
  40687a:	1c43      	adds	r3, r0, #1
  40687c:	d103      	bne.n	406886 <_wcrtomb_r+0x2a>
  40687e:	2200      	movs	r2, #0
  406880:	238a      	movs	r3, #138	; 0x8a
  406882:	603a      	str	r2, [r7, #0]
  406884:	6033      	str	r3, [r6, #0]
  406886:	b005      	add	sp, #20
  406888:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40688a:	460c      	mov	r4, r1
  40688c:	4906      	ldr	r1, [pc, #24]	; (4068a8 <_wcrtomb_r+0x4c>)
  40688e:	4a07      	ldr	r2, [pc, #28]	; (4068ac <_wcrtomb_r+0x50>)
  406890:	6809      	ldr	r1, [r1, #0]
  406892:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406894:	2900      	cmp	r1, #0
  406896:	bf08      	it	eq
  406898:	4611      	moveq	r1, r2
  40689a:	4622      	mov	r2, r4
  40689c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4068a0:	a901      	add	r1, sp, #4
  4068a2:	47a0      	blx	r4
  4068a4:	e7e9      	b.n	40687a <_wcrtomb_r+0x1e>
  4068a6:	bf00      	nop
  4068a8:	20400014 	.word	0x20400014
  4068ac:	20400854 	.word	0x20400854

004068b0 <__ascii_wctomb>:
  4068b0:	b121      	cbz	r1, 4068bc <__ascii_wctomb+0xc>
  4068b2:	2aff      	cmp	r2, #255	; 0xff
  4068b4:	d804      	bhi.n	4068c0 <__ascii_wctomb+0x10>
  4068b6:	700a      	strb	r2, [r1, #0]
  4068b8:	2001      	movs	r0, #1
  4068ba:	4770      	bx	lr
  4068bc:	4608      	mov	r0, r1
  4068be:	4770      	bx	lr
  4068c0:	238a      	movs	r3, #138	; 0x8a
  4068c2:	6003      	str	r3, [r0, #0]
  4068c4:	f04f 30ff 	mov.w	r0, #4294967295
  4068c8:	4770      	bx	lr
  4068ca:	bf00      	nop

004068cc <_write_r>:
  4068cc:	b570      	push	{r4, r5, r6, lr}
  4068ce:	460d      	mov	r5, r1
  4068d0:	4c08      	ldr	r4, [pc, #32]	; (4068f4 <_write_r+0x28>)
  4068d2:	4611      	mov	r1, r2
  4068d4:	4606      	mov	r6, r0
  4068d6:	461a      	mov	r2, r3
  4068d8:	4628      	mov	r0, r5
  4068da:	2300      	movs	r3, #0
  4068dc:	6023      	str	r3, [r4, #0]
  4068de:	f7f9 fcbb 	bl	400258 <_write>
  4068e2:	1c43      	adds	r3, r0, #1
  4068e4:	d000      	beq.n	4068e8 <_write_r+0x1c>
  4068e6:	bd70      	pop	{r4, r5, r6, pc}
  4068e8:	6823      	ldr	r3, [r4, #0]
  4068ea:	2b00      	cmp	r3, #0
  4068ec:	d0fb      	beq.n	4068e6 <_write_r+0x1a>
  4068ee:	6033      	str	r3, [r6, #0]
  4068f0:	bd70      	pop	{r4, r5, r6, pc}
  4068f2:	bf00      	nop
  4068f4:	20400cf0 	.word	0x20400cf0

004068f8 <__register_exitproc>:
  4068f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4068fc:	4d2c      	ldr	r5, [pc, #176]	; (4069b0 <__register_exitproc+0xb8>)
  4068fe:	4606      	mov	r6, r0
  406900:	6828      	ldr	r0, [r5, #0]
  406902:	4698      	mov	r8, r3
  406904:	460f      	mov	r7, r1
  406906:	4691      	mov	r9, r2
  406908:	f7ff fc1e 	bl	406148 <__retarget_lock_acquire_recursive>
  40690c:	4b29      	ldr	r3, [pc, #164]	; (4069b4 <__register_exitproc+0xbc>)
  40690e:	681c      	ldr	r4, [r3, #0]
  406910:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406914:	2b00      	cmp	r3, #0
  406916:	d03e      	beq.n	406996 <__register_exitproc+0x9e>
  406918:	685a      	ldr	r2, [r3, #4]
  40691a:	2a1f      	cmp	r2, #31
  40691c:	dc1c      	bgt.n	406958 <__register_exitproc+0x60>
  40691e:	f102 0e01 	add.w	lr, r2, #1
  406922:	b176      	cbz	r6, 406942 <__register_exitproc+0x4a>
  406924:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406928:	2401      	movs	r4, #1
  40692a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40692e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406932:	4094      	lsls	r4, r2
  406934:	4320      	orrs	r0, r4
  406936:	2e02      	cmp	r6, #2
  406938:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40693c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406940:	d023      	beq.n	40698a <__register_exitproc+0x92>
  406942:	3202      	adds	r2, #2
  406944:	f8c3 e004 	str.w	lr, [r3, #4]
  406948:	6828      	ldr	r0, [r5, #0]
  40694a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40694e:	f7ff fbfd 	bl	40614c <__retarget_lock_release_recursive>
  406952:	2000      	movs	r0, #0
  406954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406958:	4b17      	ldr	r3, [pc, #92]	; (4069b8 <__register_exitproc+0xc0>)
  40695a:	b30b      	cbz	r3, 4069a0 <__register_exitproc+0xa8>
  40695c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406960:	f7fd fae2 	bl	403f28 <malloc>
  406964:	4603      	mov	r3, r0
  406966:	b1d8      	cbz	r0, 4069a0 <__register_exitproc+0xa8>
  406968:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40696c:	6002      	str	r2, [r0, #0]
  40696e:	2100      	movs	r1, #0
  406970:	6041      	str	r1, [r0, #4]
  406972:	460a      	mov	r2, r1
  406974:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406978:	f04f 0e01 	mov.w	lr, #1
  40697c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406980:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406984:	2e00      	cmp	r6, #0
  406986:	d0dc      	beq.n	406942 <__register_exitproc+0x4a>
  406988:	e7cc      	b.n	406924 <__register_exitproc+0x2c>
  40698a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40698e:	430c      	orrs	r4, r1
  406990:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406994:	e7d5      	b.n	406942 <__register_exitproc+0x4a>
  406996:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40699a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40699e:	e7bb      	b.n	406918 <__register_exitproc+0x20>
  4069a0:	6828      	ldr	r0, [r5, #0]
  4069a2:	f7ff fbd3 	bl	40614c <__retarget_lock_release_recursive>
  4069a6:	f04f 30ff 	mov.w	r0, #4294967295
  4069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4069ae:	bf00      	nop
  4069b0:	20400850 	.word	0x20400850
  4069b4:	00406f04 	.word	0x00406f04
  4069b8:	00403f29 	.word	0x00403f29

004069bc <_close_r>:
  4069bc:	b538      	push	{r3, r4, r5, lr}
  4069be:	4c07      	ldr	r4, [pc, #28]	; (4069dc <_close_r+0x20>)
  4069c0:	2300      	movs	r3, #0
  4069c2:	4605      	mov	r5, r0
  4069c4:	4608      	mov	r0, r1
  4069c6:	6023      	str	r3, [r4, #0]
  4069c8:	f7fa fb02 	bl	400fd0 <_close>
  4069cc:	1c43      	adds	r3, r0, #1
  4069ce:	d000      	beq.n	4069d2 <_close_r+0x16>
  4069d0:	bd38      	pop	{r3, r4, r5, pc}
  4069d2:	6823      	ldr	r3, [r4, #0]
  4069d4:	2b00      	cmp	r3, #0
  4069d6:	d0fb      	beq.n	4069d0 <_close_r+0x14>
  4069d8:	602b      	str	r3, [r5, #0]
  4069da:	bd38      	pop	{r3, r4, r5, pc}
  4069dc:	20400cf0 	.word	0x20400cf0

004069e0 <_fclose_r>:
  4069e0:	b570      	push	{r4, r5, r6, lr}
  4069e2:	b159      	cbz	r1, 4069fc <_fclose_r+0x1c>
  4069e4:	4605      	mov	r5, r0
  4069e6:	460c      	mov	r4, r1
  4069e8:	b110      	cbz	r0, 4069f0 <_fclose_r+0x10>
  4069ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4069ec:	2b00      	cmp	r3, #0
  4069ee:	d03c      	beq.n	406a6a <_fclose_r+0x8a>
  4069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4069f2:	07d8      	lsls	r0, r3, #31
  4069f4:	d505      	bpl.n	406a02 <_fclose_r+0x22>
  4069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4069fa:	b92b      	cbnz	r3, 406a08 <_fclose_r+0x28>
  4069fc:	2600      	movs	r6, #0
  4069fe:	4630      	mov	r0, r6
  406a00:	bd70      	pop	{r4, r5, r6, pc}
  406a02:	89a3      	ldrh	r3, [r4, #12]
  406a04:	0599      	lsls	r1, r3, #22
  406a06:	d53c      	bpl.n	406a82 <_fclose_r+0xa2>
  406a08:	4621      	mov	r1, r4
  406a0a:	4628      	mov	r0, r5
  406a0c:	f7fe fee4 	bl	4057d8 <__sflush_r>
  406a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406a12:	4606      	mov	r6, r0
  406a14:	b133      	cbz	r3, 406a24 <_fclose_r+0x44>
  406a16:	69e1      	ldr	r1, [r4, #28]
  406a18:	4628      	mov	r0, r5
  406a1a:	4798      	blx	r3
  406a1c:	2800      	cmp	r0, #0
  406a1e:	bfb8      	it	lt
  406a20:	f04f 36ff 	movlt.w	r6, #4294967295
  406a24:	89a3      	ldrh	r3, [r4, #12]
  406a26:	061a      	lsls	r2, r3, #24
  406a28:	d422      	bmi.n	406a70 <_fclose_r+0x90>
  406a2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406a2c:	b141      	cbz	r1, 406a40 <_fclose_r+0x60>
  406a2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406a32:	4299      	cmp	r1, r3
  406a34:	d002      	beq.n	406a3c <_fclose_r+0x5c>
  406a36:	4628      	mov	r0, r5
  406a38:	f7ff f8ec 	bl	405c14 <_free_r>
  406a3c:	2300      	movs	r3, #0
  406a3e:	6323      	str	r3, [r4, #48]	; 0x30
  406a40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406a42:	b121      	cbz	r1, 406a4e <_fclose_r+0x6e>
  406a44:	4628      	mov	r0, r5
  406a46:	f7ff f8e5 	bl	405c14 <_free_r>
  406a4a:	2300      	movs	r3, #0
  406a4c:	6463      	str	r3, [r4, #68]	; 0x44
  406a4e:	f7fe ffe7 	bl	405a20 <__sfp_lock_acquire>
  406a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406a54:	2200      	movs	r2, #0
  406a56:	07db      	lsls	r3, r3, #31
  406a58:	81a2      	strh	r2, [r4, #12]
  406a5a:	d50e      	bpl.n	406a7a <_fclose_r+0x9a>
  406a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a5e:	f7ff fb71 	bl	406144 <__retarget_lock_close_recursive>
  406a62:	f7fe ffe3 	bl	405a2c <__sfp_lock_release>
  406a66:	4630      	mov	r0, r6
  406a68:	bd70      	pop	{r4, r5, r6, pc}
  406a6a:	f7fe ffad 	bl	4059c8 <__sinit>
  406a6e:	e7bf      	b.n	4069f0 <_fclose_r+0x10>
  406a70:	6921      	ldr	r1, [r4, #16]
  406a72:	4628      	mov	r0, r5
  406a74:	f7ff f8ce 	bl	405c14 <_free_r>
  406a78:	e7d7      	b.n	406a2a <_fclose_r+0x4a>
  406a7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a7c:	f7ff fb66 	bl	40614c <__retarget_lock_release_recursive>
  406a80:	e7ec      	b.n	406a5c <_fclose_r+0x7c>
  406a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a84:	f7ff fb60 	bl	406148 <__retarget_lock_acquire_recursive>
  406a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a8c:	2b00      	cmp	r3, #0
  406a8e:	d1bb      	bne.n	406a08 <_fclose_r+0x28>
  406a90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406a92:	f016 0601 	ands.w	r6, r6, #1
  406a96:	d1b1      	bne.n	4069fc <_fclose_r+0x1c>
  406a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a9a:	f7ff fb57 	bl	40614c <__retarget_lock_release_recursive>
  406a9e:	4630      	mov	r0, r6
  406aa0:	bd70      	pop	{r4, r5, r6, pc}
  406aa2:	bf00      	nop

00406aa4 <_fstat_r>:
  406aa4:	b538      	push	{r3, r4, r5, lr}
  406aa6:	460b      	mov	r3, r1
  406aa8:	4c07      	ldr	r4, [pc, #28]	; (406ac8 <_fstat_r+0x24>)
  406aaa:	4605      	mov	r5, r0
  406aac:	4611      	mov	r1, r2
  406aae:	4618      	mov	r0, r3
  406ab0:	2300      	movs	r3, #0
  406ab2:	6023      	str	r3, [r4, #0]
  406ab4:	f7fa fa8f 	bl	400fd6 <_fstat>
  406ab8:	1c43      	adds	r3, r0, #1
  406aba:	d000      	beq.n	406abe <_fstat_r+0x1a>
  406abc:	bd38      	pop	{r3, r4, r5, pc}
  406abe:	6823      	ldr	r3, [r4, #0]
  406ac0:	2b00      	cmp	r3, #0
  406ac2:	d0fb      	beq.n	406abc <_fstat_r+0x18>
  406ac4:	602b      	str	r3, [r5, #0]
  406ac6:	bd38      	pop	{r3, r4, r5, pc}
  406ac8:	20400cf0 	.word	0x20400cf0

00406acc <_isatty_r>:
  406acc:	b538      	push	{r3, r4, r5, lr}
  406ace:	4c07      	ldr	r4, [pc, #28]	; (406aec <_isatty_r+0x20>)
  406ad0:	2300      	movs	r3, #0
  406ad2:	4605      	mov	r5, r0
  406ad4:	4608      	mov	r0, r1
  406ad6:	6023      	str	r3, [r4, #0]
  406ad8:	f7fa fa82 	bl	400fe0 <_isatty>
  406adc:	1c43      	adds	r3, r0, #1
  406ade:	d000      	beq.n	406ae2 <_isatty_r+0x16>
  406ae0:	bd38      	pop	{r3, r4, r5, pc}
  406ae2:	6823      	ldr	r3, [r4, #0]
  406ae4:	2b00      	cmp	r3, #0
  406ae6:	d0fb      	beq.n	406ae0 <_isatty_r+0x14>
  406ae8:	602b      	str	r3, [r5, #0]
  406aea:	bd38      	pop	{r3, r4, r5, pc}
  406aec:	20400cf0 	.word	0x20400cf0

00406af0 <_lseek_r>:
  406af0:	b570      	push	{r4, r5, r6, lr}
  406af2:	460d      	mov	r5, r1
  406af4:	4c08      	ldr	r4, [pc, #32]	; (406b18 <_lseek_r+0x28>)
  406af6:	4611      	mov	r1, r2
  406af8:	4606      	mov	r6, r0
  406afa:	461a      	mov	r2, r3
  406afc:	4628      	mov	r0, r5
  406afe:	2300      	movs	r3, #0
  406b00:	6023      	str	r3, [r4, #0]
  406b02:	f7fa fa6f 	bl	400fe4 <_lseek>
  406b06:	1c43      	adds	r3, r0, #1
  406b08:	d000      	beq.n	406b0c <_lseek_r+0x1c>
  406b0a:	bd70      	pop	{r4, r5, r6, pc}
  406b0c:	6823      	ldr	r3, [r4, #0]
  406b0e:	2b00      	cmp	r3, #0
  406b10:	d0fb      	beq.n	406b0a <_lseek_r+0x1a>
  406b12:	6033      	str	r3, [r6, #0]
  406b14:	bd70      	pop	{r4, r5, r6, pc}
  406b16:	bf00      	nop
  406b18:	20400cf0 	.word	0x20400cf0

00406b1c <_read_r>:
  406b1c:	b570      	push	{r4, r5, r6, lr}
  406b1e:	460d      	mov	r5, r1
  406b20:	4c08      	ldr	r4, [pc, #32]	; (406b44 <_read_r+0x28>)
  406b22:	4611      	mov	r1, r2
  406b24:	4606      	mov	r6, r0
  406b26:	461a      	mov	r2, r3
  406b28:	4628      	mov	r0, r5
  406b2a:	2300      	movs	r3, #0
  406b2c:	6023      	str	r3, [r4, #0]
  406b2e:	f7f9 fb75 	bl	40021c <_read>
  406b32:	1c43      	adds	r3, r0, #1
  406b34:	d000      	beq.n	406b38 <_read_r+0x1c>
  406b36:	bd70      	pop	{r4, r5, r6, pc}
  406b38:	6823      	ldr	r3, [r4, #0]
  406b3a:	2b00      	cmp	r3, #0
  406b3c:	d0fb      	beq.n	406b36 <_read_r+0x1a>
  406b3e:	6033      	str	r3, [r6, #0]
  406b40:	bd70      	pop	{r4, r5, r6, pc}
  406b42:	bf00      	nop
  406b44:	20400cf0 	.word	0x20400cf0

00406b48 <__aeabi_uldivmod>:
  406b48:	b953      	cbnz	r3, 406b60 <__aeabi_uldivmod+0x18>
  406b4a:	b94a      	cbnz	r2, 406b60 <__aeabi_uldivmod+0x18>
  406b4c:	2900      	cmp	r1, #0
  406b4e:	bf08      	it	eq
  406b50:	2800      	cmpeq	r0, #0
  406b52:	bf1c      	itt	ne
  406b54:	f04f 31ff 	movne.w	r1, #4294967295
  406b58:	f04f 30ff 	movne.w	r0, #4294967295
  406b5c:	f000 b97a 	b.w	406e54 <__aeabi_idiv0>
  406b60:	f1ad 0c08 	sub.w	ip, sp, #8
  406b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406b68:	f000 f806 	bl	406b78 <__udivmoddi4>
  406b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406b74:	b004      	add	sp, #16
  406b76:	4770      	bx	lr

00406b78 <__udivmoddi4>:
  406b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406b7c:	468c      	mov	ip, r1
  406b7e:	460d      	mov	r5, r1
  406b80:	4604      	mov	r4, r0
  406b82:	9e08      	ldr	r6, [sp, #32]
  406b84:	2b00      	cmp	r3, #0
  406b86:	d151      	bne.n	406c2c <__udivmoddi4+0xb4>
  406b88:	428a      	cmp	r2, r1
  406b8a:	4617      	mov	r7, r2
  406b8c:	d96d      	bls.n	406c6a <__udivmoddi4+0xf2>
  406b8e:	fab2 fe82 	clz	lr, r2
  406b92:	f1be 0f00 	cmp.w	lr, #0
  406b96:	d00b      	beq.n	406bb0 <__udivmoddi4+0x38>
  406b98:	f1ce 0c20 	rsb	ip, lr, #32
  406b9c:	fa01 f50e 	lsl.w	r5, r1, lr
  406ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ba4:	fa02 f70e 	lsl.w	r7, r2, lr
  406ba8:	ea4c 0c05 	orr.w	ip, ip, r5
  406bac:	fa00 f40e 	lsl.w	r4, r0, lr
  406bb0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406bb4:	0c25      	lsrs	r5, r4, #16
  406bb6:	fbbc f8fa 	udiv	r8, ip, sl
  406bba:	fa1f f987 	uxth.w	r9, r7
  406bbe:	fb0a cc18 	mls	ip, sl, r8, ip
  406bc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406bc6:	fb08 f309 	mul.w	r3, r8, r9
  406bca:	42ab      	cmp	r3, r5
  406bcc:	d90a      	bls.n	406be4 <__udivmoddi4+0x6c>
  406bce:	19ed      	adds	r5, r5, r7
  406bd0:	f108 32ff 	add.w	r2, r8, #4294967295
  406bd4:	f080 8123 	bcs.w	406e1e <__udivmoddi4+0x2a6>
  406bd8:	42ab      	cmp	r3, r5
  406bda:	f240 8120 	bls.w	406e1e <__udivmoddi4+0x2a6>
  406bde:	f1a8 0802 	sub.w	r8, r8, #2
  406be2:	443d      	add	r5, r7
  406be4:	1aed      	subs	r5, r5, r3
  406be6:	b2a4      	uxth	r4, r4
  406be8:	fbb5 f0fa 	udiv	r0, r5, sl
  406bec:	fb0a 5510 	mls	r5, sl, r0, r5
  406bf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406bf4:	fb00 f909 	mul.w	r9, r0, r9
  406bf8:	45a1      	cmp	r9, r4
  406bfa:	d909      	bls.n	406c10 <__udivmoddi4+0x98>
  406bfc:	19e4      	adds	r4, r4, r7
  406bfe:	f100 33ff 	add.w	r3, r0, #4294967295
  406c02:	f080 810a 	bcs.w	406e1a <__udivmoddi4+0x2a2>
  406c06:	45a1      	cmp	r9, r4
  406c08:	f240 8107 	bls.w	406e1a <__udivmoddi4+0x2a2>
  406c0c:	3802      	subs	r0, #2
  406c0e:	443c      	add	r4, r7
  406c10:	eba4 0409 	sub.w	r4, r4, r9
  406c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406c18:	2100      	movs	r1, #0
  406c1a:	2e00      	cmp	r6, #0
  406c1c:	d061      	beq.n	406ce2 <__udivmoddi4+0x16a>
  406c1e:	fa24 f40e 	lsr.w	r4, r4, lr
  406c22:	2300      	movs	r3, #0
  406c24:	6034      	str	r4, [r6, #0]
  406c26:	6073      	str	r3, [r6, #4]
  406c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c2c:	428b      	cmp	r3, r1
  406c2e:	d907      	bls.n	406c40 <__udivmoddi4+0xc8>
  406c30:	2e00      	cmp	r6, #0
  406c32:	d054      	beq.n	406cde <__udivmoddi4+0x166>
  406c34:	2100      	movs	r1, #0
  406c36:	e886 0021 	stmia.w	r6, {r0, r5}
  406c3a:	4608      	mov	r0, r1
  406c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c40:	fab3 f183 	clz	r1, r3
  406c44:	2900      	cmp	r1, #0
  406c46:	f040 808e 	bne.w	406d66 <__udivmoddi4+0x1ee>
  406c4a:	42ab      	cmp	r3, r5
  406c4c:	d302      	bcc.n	406c54 <__udivmoddi4+0xdc>
  406c4e:	4282      	cmp	r2, r0
  406c50:	f200 80fa 	bhi.w	406e48 <__udivmoddi4+0x2d0>
  406c54:	1a84      	subs	r4, r0, r2
  406c56:	eb65 0503 	sbc.w	r5, r5, r3
  406c5a:	2001      	movs	r0, #1
  406c5c:	46ac      	mov	ip, r5
  406c5e:	2e00      	cmp	r6, #0
  406c60:	d03f      	beq.n	406ce2 <__udivmoddi4+0x16a>
  406c62:	e886 1010 	stmia.w	r6, {r4, ip}
  406c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c6a:	b912      	cbnz	r2, 406c72 <__udivmoddi4+0xfa>
  406c6c:	2701      	movs	r7, #1
  406c6e:	fbb7 f7f2 	udiv	r7, r7, r2
  406c72:	fab7 fe87 	clz	lr, r7
  406c76:	f1be 0f00 	cmp.w	lr, #0
  406c7a:	d134      	bne.n	406ce6 <__udivmoddi4+0x16e>
  406c7c:	1beb      	subs	r3, r5, r7
  406c7e:	0c3a      	lsrs	r2, r7, #16
  406c80:	fa1f fc87 	uxth.w	ip, r7
  406c84:	2101      	movs	r1, #1
  406c86:	fbb3 f8f2 	udiv	r8, r3, r2
  406c8a:	0c25      	lsrs	r5, r4, #16
  406c8c:	fb02 3318 	mls	r3, r2, r8, r3
  406c90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406c94:	fb0c f308 	mul.w	r3, ip, r8
  406c98:	42ab      	cmp	r3, r5
  406c9a:	d907      	bls.n	406cac <__udivmoddi4+0x134>
  406c9c:	19ed      	adds	r5, r5, r7
  406c9e:	f108 30ff 	add.w	r0, r8, #4294967295
  406ca2:	d202      	bcs.n	406caa <__udivmoddi4+0x132>
  406ca4:	42ab      	cmp	r3, r5
  406ca6:	f200 80d1 	bhi.w	406e4c <__udivmoddi4+0x2d4>
  406caa:	4680      	mov	r8, r0
  406cac:	1aed      	subs	r5, r5, r3
  406cae:	b2a3      	uxth	r3, r4
  406cb0:	fbb5 f0f2 	udiv	r0, r5, r2
  406cb4:	fb02 5510 	mls	r5, r2, r0, r5
  406cb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406cbc:	fb0c fc00 	mul.w	ip, ip, r0
  406cc0:	45a4      	cmp	ip, r4
  406cc2:	d907      	bls.n	406cd4 <__udivmoddi4+0x15c>
  406cc4:	19e4      	adds	r4, r4, r7
  406cc6:	f100 33ff 	add.w	r3, r0, #4294967295
  406cca:	d202      	bcs.n	406cd2 <__udivmoddi4+0x15a>
  406ccc:	45a4      	cmp	ip, r4
  406cce:	f200 80b8 	bhi.w	406e42 <__udivmoddi4+0x2ca>
  406cd2:	4618      	mov	r0, r3
  406cd4:	eba4 040c 	sub.w	r4, r4, ip
  406cd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406cdc:	e79d      	b.n	406c1a <__udivmoddi4+0xa2>
  406cde:	4631      	mov	r1, r6
  406ce0:	4630      	mov	r0, r6
  406ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ce6:	f1ce 0420 	rsb	r4, lr, #32
  406cea:	fa05 f30e 	lsl.w	r3, r5, lr
  406cee:	fa07 f70e 	lsl.w	r7, r7, lr
  406cf2:	fa20 f804 	lsr.w	r8, r0, r4
  406cf6:	0c3a      	lsrs	r2, r7, #16
  406cf8:	fa25 f404 	lsr.w	r4, r5, r4
  406cfc:	ea48 0803 	orr.w	r8, r8, r3
  406d00:	fbb4 f1f2 	udiv	r1, r4, r2
  406d04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406d08:	fb02 4411 	mls	r4, r2, r1, r4
  406d0c:	fa1f fc87 	uxth.w	ip, r7
  406d10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406d14:	fb01 f30c 	mul.w	r3, r1, ip
  406d18:	42ab      	cmp	r3, r5
  406d1a:	fa00 f40e 	lsl.w	r4, r0, lr
  406d1e:	d909      	bls.n	406d34 <__udivmoddi4+0x1bc>
  406d20:	19ed      	adds	r5, r5, r7
  406d22:	f101 30ff 	add.w	r0, r1, #4294967295
  406d26:	f080 808a 	bcs.w	406e3e <__udivmoddi4+0x2c6>
  406d2a:	42ab      	cmp	r3, r5
  406d2c:	f240 8087 	bls.w	406e3e <__udivmoddi4+0x2c6>
  406d30:	3902      	subs	r1, #2
  406d32:	443d      	add	r5, r7
  406d34:	1aeb      	subs	r3, r5, r3
  406d36:	fa1f f588 	uxth.w	r5, r8
  406d3a:	fbb3 f0f2 	udiv	r0, r3, r2
  406d3e:	fb02 3310 	mls	r3, r2, r0, r3
  406d42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406d46:	fb00 f30c 	mul.w	r3, r0, ip
  406d4a:	42ab      	cmp	r3, r5
  406d4c:	d907      	bls.n	406d5e <__udivmoddi4+0x1e6>
  406d4e:	19ed      	adds	r5, r5, r7
  406d50:	f100 38ff 	add.w	r8, r0, #4294967295
  406d54:	d26f      	bcs.n	406e36 <__udivmoddi4+0x2be>
  406d56:	42ab      	cmp	r3, r5
  406d58:	d96d      	bls.n	406e36 <__udivmoddi4+0x2be>
  406d5a:	3802      	subs	r0, #2
  406d5c:	443d      	add	r5, r7
  406d5e:	1aeb      	subs	r3, r5, r3
  406d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406d64:	e78f      	b.n	406c86 <__udivmoddi4+0x10e>
  406d66:	f1c1 0720 	rsb	r7, r1, #32
  406d6a:	fa22 f807 	lsr.w	r8, r2, r7
  406d6e:	408b      	lsls	r3, r1
  406d70:	fa05 f401 	lsl.w	r4, r5, r1
  406d74:	ea48 0303 	orr.w	r3, r8, r3
  406d78:	fa20 fe07 	lsr.w	lr, r0, r7
  406d7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406d80:	40fd      	lsrs	r5, r7
  406d82:	ea4e 0e04 	orr.w	lr, lr, r4
  406d86:	fbb5 f9fc 	udiv	r9, r5, ip
  406d8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406d8e:	fb0c 5519 	mls	r5, ip, r9, r5
  406d92:	fa1f f883 	uxth.w	r8, r3
  406d96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406d9a:	fb09 f408 	mul.w	r4, r9, r8
  406d9e:	42ac      	cmp	r4, r5
  406da0:	fa02 f201 	lsl.w	r2, r2, r1
  406da4:	fa00 fa01 	lsl.w	sl, r0, r1
  406da8:	d908      	bls.n	406dbc <__udivmoddi4+0x244>
  406daa:	18ed      	adds	r5, r5, r3
  406dac:	f109 30ff 	add.w	r0, r9, #4294967295
  406db0:	d243      	bcs.n	406e3a <__udivmoddi4+0x2c2>
  406db2:	42ac      	cmp	r4, r5
  406db4:	d941      	bls.n	406e3a <__udivmoddi4+0x2c2>
  406db6:	f1a9 0902 	sub.w	r9, r9, #2
  406dba:	441d      	add	r5, r3
  406dbc:	1b2d      	subs	r5, r5, r4
  406dbe:	fa1f fe8e 	uxth.w	lr, lr
  406dc2:	fbb5 f0fc 	udiv	r0, r5, ip
  406dc6:	fb0c 5510 	mls	r5, ip, r0, r5
  406dca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406dce:	fb00 f808 	mul.w	r8, r0, r8
  406dd2:	45a0      	cmp	r8, r4
  406dd4:	d907      	bls.n	406de6 <__udivmoddi4+0x26e>
  406dd6:	18e4      	adds	r4, r4, r3
  406dd8:	f100 35ff 	add.w	r5, r0, #4294967295
  406ddc:	d229      	bcs.n	406e32 <__udivmoddi4+0x2ba>
  406dde:	45a0      	cmp	r8, r4
  406de0:	d927      	bls.n	406e32 <__udivmoddi4+0x2ba>
  406de2:	3802      	subs	r0, #2
  406de4:	441c      	add	r4, r3
  406de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406dea:	eba4 0408 	sub.w	r4, r4, r8
  406dee:	fba0 8902 	umull	r8, r9, r0, r2
  406df2:	454c      	cmp	r4, r9
  406df4:	46c6      	mov	lr, r8
  406df6:	464d      	mov	r5, r9
  406df8:	d315      	bcc.n	406e26 <__udivmoddi4+0x2ae>
  406dfa:	d012      	beq.n	406e22 <__udivmoddi4+0x2aa>
  406dfc:	b156      	cbz	r6, 406e14 <__udivmoddi4+0x29c>
  406dfe:	ebba 030e 	subs.w	r3, sl, lr
  406e02:	eb64 0405 	sbc.w	r4, r4, r5
  406e06:	fa04 f707 	lsl.w	r7, r4, r7
  406e0a:	40cb      	lsrs	r3, r1
  406e0c:	431f      	orrs	r7, r3
  406e0e:	40cc      	lsrs	r4, r1
  406e10:	6037      	str	r7, [r6, #0]
  406e12:	6074      	str	r4, [r6, #4]
  406e14:	2100      	movs	r1, #0
  406e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e1a:	4618      	mov	r0, r3
  406e1c:	e6f8      	b.n	406c10 <__udivmoddi4+0x98>
  406e1e:	4690      	mov	r8, r2
  406e20:	e6e0      	b.n	406be4 <__udivmoddi4+0x6c>
  406e22:	45c2      	cmp	sl, r8
  406e24:	d2ea      	bcs.n	406dfc <__udivmoddi4+0x284>
  406e26:	ebb8 0e02 	subs.w	lr, r8, r2
  406e2a:	eb69 0503 	sbc.w	r5, r9, r3
  406e2e:	3801      	subs	r0, #1
  406e30:	e7e4      	b.n	406dfc <__udivmoddi4+0x284>
  406e32:	4628      	mov	r0, r5
  406e34:	e7d7      	b.n	406de6 <__udivmoddi4+0x26e>
  406e36:	4640      	mov	r0, r8
  406e38:	e791      	b.n	406d5e <__udivmoddi4+0x1e6>
  406e3a:	4681      	mov	r9, r0
  406e3c:	e7be      	b.n	406dbc <__udivmoddi4+0x244>
  406e3e:	4601      	mov	r1, r0
  406e40:	e778      	b.n	406d34 <__udivmoddi4+0x1bc>
  406e42:	3802      	subs	r0, #2
  406e44:	443c      	add	r4, r7
  406e46:	e745      	b.n	406cd4 <__udivmoddi4+0x15c>
  406e48:	4608      	mov	r0, r1
  406e4a:	e708      	b.n	406c5e <__udivmoddi4+0xe6>
  406e4c:	f1a8 0802 	sub.w	r8, r8, #2
  406e50:	443d      	add	r5, r7
  406e52:	e72b      	b.n	406cac <__udivmoddi4+0x134>

00406e54 <__aeabi_idiv0>:
  406e54:	4770      	bx	lr
  406e56:	bf00      	nop
  406e58:	454c4449 	.word	0x454c4449
  406e5c:	00000000 	.word	0x00000000
  406e60:	51726d54 	.word	0x51726d54
  406e64:	00000000 	.word	0x00000000
  406e68:	20726d54 	.word	0x20726d54
  406e6c:	00637653 	.word	0x00637653
  406e70:	34306368 	.word	0x34306368
  406e74:	0000415f 	.word	0x0000415f
  406e78:	6c696146 	.word	0x6c696146
  406e7c:	74206465 	.word	0x74206465
  406e80:	7263206f 	.word	0x7263206f
  406e84:	65746165 	.word	0x65746165
  406e88:	72615520 	.word	0x72615520
  406e8c:	20785474 	.word	0x20785474
  406e90:	6b736174 	.word	0x6b736174
  406e94:	00000a0d 	.word	0x00000a0d
  406e98:	6c636963 	.word	0x6c636963
  406e9c:	00007365 	.word	0x00007365
  406ea0:	656d6974 	.word	0x656d6974
  406ea4:	00000072 	.word	0x00000072
  406ea8:	63656661 	.word	0x63656661
  406eac:	00000000 	.word	0x00000000
  406eb0:	61746164 	.word	0x61746164
  406eb4:	00000000 	.word	0x00000000
  406eb8:	2d2d2d2d 	.word	0x2d2d2d2d
  406ebc:	2d2d2d2d 	.word	0x2d2d2d2d
  406ec0:	2d2d2d2d 	.word	0x2d2d2d2d
  406ec4:	2d2d2d2d 	.word	0x2d2d2d2d
  406ec8:	2d2d2d2d 	.word	0x2d2d2d2d
  406ecc:	2d2d2d2d 	.word	0x2d2d2d2d
  406ed0:	002d2d2d 	.word	0x002d2d2d
  406ed4:	3a44490a 	.word	0x3a44490a
  406ed8:	20642520 	.word	0x20642520
  406edc:	00000009 	.word	0x00000009
  406ee0:	554c4156 	.word	0x554c4156
  406ee4:	25203a45 	.word	0x25203a45
  406ee8:	000a2064 	.word	0x000a2064
  406eec:	63617473 	.word	0x63617473
  406ef0:	766f206b 	.word	0x766f206b
  406ef4:	6c667265 	.word	0x6c667265
  406ef8:	2520776f 	.word	0x2520776f
  406efc:	73252078 	.word	0x73252078
  406f00:	00000a0d 	.word	0x00000a0d

00406f04 <_global_impure_ptr>:
  406f04:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  406f14:	46454443 00000000 33323130 37363534     CDEF....01234567
  406f24:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406f34:	0000296c                                l)..

00406f38 <blanks.7217>:
  406f38:	20202020 20202020 20202020 20202020                     

00406f48 <zeroes.7218>:
  406f48:	30303030 30303030 30303030 30303030     0000000000000000
  406f58:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406f68 <_ctype_>:
  406f68:	20202000 20202020 28282020 20282828     .         ((((( 
  406f78:	20202020 20202020 20202020 20202020                     
  406f88:	10108820 10101010 10101010 10101010      ...............
  406f98:	04040410 04040404 10040404 10101010     ................
  406fa8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406fb8:	01010101 01010101 01010101 10101010     ................
  406fc8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406fd8:	02020202 02020202 02020202 10101010     ................
  406fe8:	00000020 00000000 00000000 00000000      ...............
	...

0040706c <_init>:
  40706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40706e:	bf00      	nop
  407070:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407072:	bc08      	pop	{r3}
  407074:	469e      	mov	lr, r3
  407076:	4770      	bx	lr

00407078 <__init_array_start>:
  407078:	004057b9 	.word	0x004057b9

0040707c <__frame_dummy_init_array_entry>:
  40707c:	00400165                                e.@.

00407080 <_fini>:
  407080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407082:	bf00      	nop
  407084:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407086:	bc08      	pop	{r3}
  407088:	469e      	mov	lr, r3
  40708a:	4770      	bx	lr

0040708c <__fini_array_start>:
  40708c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0ccc 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	68b1 0040 6241 0040 0000 0000 6f68 0040     .h@.Ab@.....ho@.
20400944:	6f64 0040 6e5c 0040 6e5c 0040 6e5c 0040     do@.\n@.\n@.\n@.
20400954:	6e5c 0040 6e5c 0040 6e5c 0040 6e5c 0040     \n@.\n@.\n@.\n@.
20400964:	6e5c 0040 6e5c 0040 ffff ffff ffff ffff     \n@.\n@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
